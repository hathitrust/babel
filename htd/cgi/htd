#!/l/local/bin/perl

=head1 NAME

HathiTrust Repository Data API (htd)

=head1 USAGE

http://services.hathitrust.org/api/htd/<URI>? ... URL parameters ...

=head1 DESCRIPTION

Implementation of REST API to access Hathitrust repository data and
structural/administrative metadata

=head1 OPTIONS

=over 8

=item debug=opt1,opt2,...,optN

Debug options

=back

=cut

BEGIN {
    my $enabled = $ENV{'HT_DEV'} ? 1 : 1;
    exit 0 if (! $enabled);
}

# ----------------------------------------------------------------------
# Set up paths for local libraries -- must come first
# ----------------------------------------------------------------------
use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use CGI;

# Code version
$::VERSION = 0.2000;

# Highest API version supported
use constant HIGHEST_API_VERSION => 1;
our @SUPPORTED_VERSIONS = (HIGHEST_API_VERSION);

# ============================ Main ===================================

# Determine which version of API to load and run
our $Q = CGI->new();
# get path_info + query_string from command line
my $action = $Q->param('action');
if ($action) {
    $Q->delete('action');
    $Q->path_info($action);
}

my $API_version = __determineVersion($Q);

if (! $API_version) {
    __errorExit($Q, '400 BAD REQUEST Invalid version');
    # NOTREACHED
}
else {
    my $classPackage = qq{API::HTD::App::V_${API_version}::Plugin};
    my $classPath = __packageToPath($classPackage);

    eval {
        require $classPath;
    };
    if ($@) {
        __errorExit($Q, '500 INTERNAL ERROR');
        # NOTREACHED
    }

    my $API_version_instance = $classPackage->new(('CGI' => $Q));
    # return $API_version_instance->run();
    # we need the return for PSGI, but it gets in the way of
    # staging right now.
    $API_version_instance->run();
}

exit 0;


# ---------------------------------------------------------------------

=item __errorExit

Description

=cut

# ---------------------------------------------------------------------
sub __errorExit {
    my $Q = shift;
    my $msg = shift;

    print $Q->header(-Status => $msg);
    exit 1;
}

# ---------------------------------------------------------------------

=item __determineVersion

Description

=cut

# ---------------------------------------------------------------------
sub __determineVersion {
    my $Q = shift;

    # Default and validate the version param
    my $ver = $Q->param('v') ? $Q->param('v') : HIGHEST_API_VERSION;
    if (! grep(/^$ver$/, @SUPPORTED_VERSIONS)) {
        return undef;
    }

    return $ver;
}

sub __packageToPath {
    my $package = shift;

    my $pathRoot = $ENV{'SDRROOT'} . '/htd/lib/';
    my $path = $pathRoot . $package . '.pm';
    $path =~ s,::,/,g;

    return $path;
}
=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2009 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
