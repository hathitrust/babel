#!/usr/bin/env perl 

=head1 NAME

htdc

=head1 DESCRIPTION

This is a perl 2-legged oauth client that accepts a user's access_key
as a query parameter and invokes the Data API and returns the result.

=head1 SYNOPSIS

For example:

http://babel.hathitrust.org/cgi/htdc/pagemeta/mdp.39015063764644/5?ak=45fd3dc6a75

=head1 OUTPUT

The resource

=cut

use strict;
use warnings;

umask 0000;
BEGIN {
    my $enabled = $ENV{'HT_DEV'} ? 1 : 1;
    exit 0 if (! $enabled);
}

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use CGI;
use URI;
use YAML::Any;

use OAuth::Lite::Consumer;
use OAuth::Lite::AuthMethod;

use Context;

use API::DbIF;
use API::HTD::AuthDb;


my $request_base_url;
if ($ENV{HT_DEV}) {
    my ($dev) = ($ENV{SDRROOT} =~ m,/htapps/(.*?).babel,);
    my $vhost = $dev . q{-full.babel.hathitrust.org};

    $request_base_url = q{http://} . $vhost . q{/cgi/htd};
}
else {
    $request_base_url = 'http://services.hathitrust.org/htd';
}

my $config;
eval {
    $config = YAML::Any::LoadFile($ENV{SDRROOT} . '/htd/lib/API/HTD/base-config.yaml');
};
if ($@) {
    die $@;
}

my $DBH = _htdc_connect($config);

my $Q = new CGI;

my $action = $Q->param('action');
if ($action) {
    $Q->delete('action');
    $Q->path_info($action);
}

my $access_key = $Q->param('ak');
$Q->Delete('ak');

my $consumer =  _get_consumer($DBH, $access_key);
my $request_url = _make_request_url($Q, $request_base_url);
my $extra = { $Q->Vars };

my $response = $consumer->request
  (
   method  => 'GET',
   url     => $request_url,
   params  => $extra,
  );

if ($response->is_success) {
    print CGI::header(join(';', $response->content_type()));
}
else {
    print CGI::header('text/html');
    print "<p><b>[CLIENT] sent this URL to server:</b><br/>";
    print $consumer->oauth_request->uri;
    
    print "<p><b>[CLIENT] received this HTTP response from server:</b><br/>";
    print $response->status_line;
    print "<br/>";
}
print $response->decoded_content;

exit 0;

# ---------------------------------------------------------------------

=item _htdc_connect

Description

=cut

# ---------------------------------------------------------------------
sub _htdc_connect {
    my $config = shift;
    
    return 
      API::DbIF::databaseConnect
          (
           $config->{database}{name},
           $config->{database}{user},
           $config->{database}{passwd},
           $config->{database}{server},
          );
}

# ---------------------------------------------------------------------

=item _get_consumer

Description

=cut

# ---------------------------------------------------------------------
sub _get_consumer {
    my $dbh = shift;
    my $access_key = shift;
    
    my $secret_key = API::HTD::AuthDb::get_secret_by_active_access_key($dbh, $access_key); #XXX
    my $consumer = OAuth::Lite::Consumer->new
      (
       consumer_key    => $access_key,
       consumer_secret => $secret_key,
       auth_method     => OAuth::Lite::AuthMethod::URL_QUERY,
      );

    return $consumer;
}

# ---------------------------------------------------------------------

=item _make_request_url 

Description

=cut

# ---------------------------------------------------------------------
sub _make_request_url {
    my $Q = shift;
    my $base_url = shift;

    my $path_info  = $Q->path_info;
    my $url = qq{$base_url} . $path_info;

    return $url;
}


