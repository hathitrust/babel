#!/usr/bin/env perl

=head1 NAME

authorization_code_generator

=head1 USAGE

% authorization_code_generator [ -c <code> | -a <access_type> | -L [-r] ][-f]

=head1 DESCRIPTION

=over

=item See a listing

Generate a list of all and just restricted authorization codes as
decimal numbers over values of bascic_access and extended_access
documented in API::HTD::HCodes.  Useful for testing.

=item Get a code

Generate the decimal code required to authorize access to resources
given the desired constraints supplied as basic_access names and
extended_access names. Useful for assiging codes to a regisered user's
access_key in the database.

=item Get an access_type

Resonstruct the access_type string from an authorization_code.

=back

=over

=cut

use warnings;
use strict;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use Getopt::Std;

use API::HTD::HCodes;

our ($opt_c, $opt_a, $opt_L, $opt_r, $opt_f);

my $ops = getopts('c:a:Lrf');

my $code = $opt_c;
my $access_type = $opt_a;
my $list = $opt_L;
my $restricted = $opt_r;
my $full_data = $opt_f;

if ($code) {
    my ($access_type, $bitstring) = API::HTD::HCodes::get_access_type_from_code($code);
    printf( "code=%d bits=%s access_type=%s\n", $code, $bitstring, $access_type );
}

elsif ($access_type) {
    my ($basic_access, @extended_access) = API::HTD::HCodes::parse_access_type($access_type);
    my ($code, $bitstring) = API::HTD::HCodes::get_authorization_code($basic_access, @extended_access);
    if ($full_data) {
        printf( "code=%d bits=%s\n", $code, $bitstring );
    }
    else {
        printf( "%d\n", $code );
    }
}

elsif ($list) {
    my @codes = API::HTD::HCodes::get_all_authorization_codes($restricted, $full_data);
    if ($full_data) {
        foreach my $c (@codes) {
            printf( qq{basic=%s\t extend=%s code=%d bits=%s\n}, $c->{basic}, $c->{extend}, $c->{code}, $c->{bits});
        }
    }
    else {
        print(join(' ', sort {$a <=> $b} @codes) . "\n");
    }
}

else {
    print acg_get_usage();
}


# ---------------------------------------------------------------------

=item acg_get_usage

Description

=cut

# ---------------------------------------------------------------------
sub acg_get_usage {
    my $s = qq{Usage: authorization_code_generator [ -c <code> | -a <access_type> | -L [-r] ][-f]
            where -a <access_type> is a string of basic_accss[-extended_access], e.g. "nonfree" or "free-zip-raw_archival_data"
                  -L produces a list of all codes
                       where -r limits the list to codes that imply a restriction
                  -f return full computation including code, parse of <access_type> and bits or just return the codes\n};
    return $s;
}


exit 0;

=back

=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2014 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut


