#!/usr/bin/env perl

use warnings;
use strict;

=head1 NAME

testhtd

=head1 USAGE

$ $SDRROOT/htd/scripts/testhtd

=head1 DESCRIPTION

Drive the Data API over rights.attr, rights.source, REMOTE_ADDR, and
SERVER_PORT.  These are basically all the inputs to access
determination.

=head1 OPTIONS

=over 8

=item --help

Prints this message and exits.

=back

=cut

# These attrs collapse the various values to representative values.
# 1 represents 1,7,18
# 2 represents 2,3,4,5,6,16
# 8 represents 8 (deleted)
# 9 represents 9 (pdus)
# 10 represents 10,11,12,13,14,15,17
my %test_attrs = (
                  1  => 'pd', 
                  2  => 'ic', 
                  8  => 'nobody', 
                  9  => 'pdus', 
                  10 => 'cc',
                 );

# These sources collapse the various values to representative values.
# 1 represents 1 (google) 
# 2 represents 2,4,5,8,9
# 3 represents 3
# 6 represents 6,7
my %test_sources = (
                    1 => 'google', 
                    2 => 'open', 
                    3 => 'umpress', 
                    6 => 'minn',
                   );

# Here and there
my %test_addrs = (
                  '141.211.43.195' => 'us', 
                  '147.96.1.135'   => 'nonus',
                 );

# SSL v. non-SSL
my %test_ports = (
                  80  => 'http', 
                  443 => 'https',
                 );

my %resources = (
                 structure    => 0,
                 aggregate    => 0,
                 meta         => 0,
                 pagemeta     => 1,
                 pageimage    => 1,
                 pageocr      => 1,
                 pagecoordocr => 1,
                ); 


# ---------------------------------------------------------------------

=item Name 

Description

=cut

# ---------------------------------------------------------------------
sub make_cmd {
    my $resource = shift;
    my $seq = shift;
    my $local = shift;

    my $id = q{mdp.39015015394847};
    
    my $htd_cmd = qq{$ENV{SDRROOT}/htd/cgi/htd  action=/$resource/$id};
    $htd_cmd .= qq{/$seq} if ($seq);
    $htd_cmd .= qq{ debug=local} if ($local);
    
    return $htd_cmd;
}

# ---------------------------------------------------------------------

=item Name 

Description

=cut

# ---------------------------------------------------------------------
sub parse_output {
    my $o = shift;

    # massage away cruft
    my ($output) = ($o =~ m,Status:\s*(\d{3}),);
    return $output;
}

# ---------------------------------------------------------------------

=item Name 

Description

=cut

# ---------------------------------------------------------------------
sub __assert {
    my $condition = shift;
    if (! $condition) {
        PrintN('FAIL');
    }
    else {
        PrintY('ok');
    }
}

    
# ---------------------------------------------------------------------

=item assertions

Description

=cut

# ---------------------------------------------------------------------
sub assertions {
    my ($code, $attr, $source, $addr, $port, $resource) = @_;

    my $metadata_resource = grep(/^$resource$/, qw(meta pagemeta structure));
    my $pdus = ($test_attrs{$attr} eq 'pdus');
    my $us = ($test_addrs{$addr} eq 'us');
    my $open_source = ($test_sources{$source} eq 'open');
    
    __assert($us) if ($pdus);
}


$ENV{UNDER_TEST} = 1;

foreach my $attr (keys %test_attrs) {
    $ENV{TEST_ATTR} = $attr;

    foreach my $source (keys %test_sources) {
        $ENV{TEST_SOURCE} = $source;        

        foreach my $addr (keys %test_addrs) {
            $ENV{REMOTE_ADDR} = $addr;
            
            foreach my $port (keys %test_ports) {
                $ENV{SERVER_PORT} = $port;
                
                foreach my $resource (keys %resources) {
                    printf("%-15s %-18s %-25s %s", 
                           qq{attr=$attr ($test_attrs{$attr})},
                           qq{source=$source ($test_sources{$source})},
                           qq{addr=$addr ($test_addrs{$addr})},
                           qq{port=$port ($test_ports{$port})},
                          );
                    
                    my $cmd = make_cmd($resource, $resources{$resource}, 1);
                    
                    my $output = `$cmd`;
                    $output = parse_output($output);
                    print qq{ = $output};
                    
                    my $assertion = assertions($output, $attr, $source, $addr, $port, $resource);
                    print qq{ [$assertion]\n};
                    
                }                
            }
        }
    }
}



sub on {
    return unless ($ENV{TERM} eq 'xterm');
    my $color = shift;
    print "\033[1;${color}m";
}
sub off {
    return unless ($ENV{TERM} eq 'xterm');
    print "\033[0m";
}

sub PrintY {
    my $s = shift;
    on(30);
    print $s;
    off();
}
sub PrintN {
    my $s = shift;
    on(31);
    print $s;
    off();
}


=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2012 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut

