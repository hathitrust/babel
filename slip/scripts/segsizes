#!/l/local/bin/perl

=head1 NAME

segsizes-shard

=head1 USAGE

% segsizes -r run

=head1 DESCRIPTION

Must be run on a machine where shards in the filesystem are visible.
Give a picture of the number and size of segments at each mergeFactor.

=head1 OPTIONS

=over 8

=item -

see help

=back

=cut

use strict;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

# Perl
use Getopt::Std;

# App
use Utils;
use Debug::DUtils;
use MdpConfig;

# Local 
use SLIP_Utils::Common;
use SLIP_Utils::States;

# Flush i/o
$| = 1;

sub sg_usage {
    my $s .= qq{Usage: check-shard -r run [-R shard]\n};
    return $s;
}

our ($opt_r, $opt_R);

my $ops = getopts('r:R:');

my $INTERACTIVE = $ENV{'TERM'};

my $RUN = $opt_r; # Required
if (! $RUN) {
    my $s = qq{run (-r) parameter missing } . sg_usage();
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    __output($s);
    __non_interactive_err_output($rc, $s);

    exit $rc;
}

my $SHARD = $opt_R; # Optional

my $run_configfile = $ENV{'SDRROOT'} . qq{/slip-lib/Config/run-$RUN.conf};
my $common_configfile = $ENV{'SDRROOT'} . qq{/slip-lib/Config/common.conf};
my $CONFIG = new MdpConfig($common_configfile, $run_configfile);

my @SHARDS;

if (! defined($SHARD)) {
    my @num_shards_list = $CONFIG->get('num_shards_list');
    @SHARDS = (@num_shards_list);
}
else {
    @SHARDS = ($SHARD);
}

my $rc = 0;
my $err = '';



foreach my $shard (@SHARDS) {
    my $index_dir = $CONFIG->get('dir_for_shard_' . $shard);
    show_shards($index_dir);
}


# ---------------------------------------------------------------------

=item Name 

Description

=cut

# ---------------------------------------------------------------------
sub show_shards {
    my ($index_dir) = @_;
    
    my $merge_factor = `cat $index_dir/../../conf/solrconfig.xml | grep '<mergeFactor>'`;
    ($merge_factor) = ($merge_factor =~ m,<mergeFactor>(.*?)</mergeFactor>,); 

    my @segment_ids = `ls $index_dir/*.prx`;
    @segment_ids = map { $_ =~ m,.*/(.*?)\....$, } @segment_ids;
    
    my $num_segs = scalar @segment_ids;
    __output("num segments=$num_segs merge_factor=$merge_factor\n\n");
    
    my %segsizes;
    foreach my $seg_id (@segment_ids) {
        my $segsize = `du -c $index_dir/$seg_id*|grep total| cut -f1`;
        chomp($segsize);
        
        my $sz = length($segsize);
        my $sz_arr_ref = $segsizes{$sz} || [];
        push(@$sz_arr_ref, {'id' => $seg_id, 'sz' => $segsize});
        $segsizes{$sz} = $sz_arr_ref;
    }

    my $levels = keys %segsizes;
    
    foreach my $size (reverse sort { $a <=> $b } keys %segsizes) {
        my $a_ref = $segsizes{$size};
        my $seg_ct = scalar @$a_ref;
        
        __output("Level=$levels segs=$seg_ct\n");
        $levels--;

        foreach my $h_ref (@$a_ref) {
            my $size_bytes = $h_ref->{sz};
            my $size_MB = sprintf("%.2f", $size_bytes/1024/1024);

            my $s = $h_ref->{id} . ' ' . $size_MB;
            __output("\t${s}M\n");
        }

        __output("\n");        
    }

    return 1;    
}


exit $rc;


=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2011 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut



