#!/usr/bin/env perl

=head1 NAME

segsizes

=head1 USAGE

% segsizes -r run

=head1 DESCRIPTION

Must be run on a machine where shards in the filesystem are
visible. Used to determine the size of the "baby" shard.  When that
size exceeds the tuning parameter a full optimize (to one segment) is
triggered.

=head1 OPTIONS

=over 8

=item -

see help

=back

=cut

use strict;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

# Perl
use Getopt::Std;

# App
use Context;
use Utils;
use Debug::DUtils;
use MdpConfig;

# Local
use SLIP_Utils::Common;
use SLIP_Utils::States;

# Flush i/o
$| = 1;

sub sg_usage {
    my $s .= qq{Usage: segsizes -r run [-v] -S [-R shard] | -C shard\n\twhere -S is shard sizes and -C is segment count\n};
    return $s;
}

our ($opt_r, $opt_R, $opt_v, $opt_C, $opt_S);

my $ops = getopts('r:R:vC:S');

my $VERBOSE = $opt_v; # Optional
my $RUN = $opt_r; # Required
if (! $RUN) {
    my $s = qq{run (-r) parameter missing } . sg_usage();
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    __output("$s\n") if ($VERBOSE);
    __non_interactive_err_output($rc, $s);
    exit $rc;
}

my $SHARD = $opt_R;
my $COUNT = $opt_C;
my $SIZE = $opt_S;

if (! (defined $SIZE || defined $COUNT)) {
    my $s = qq{One of -S or -C is required\n} . sg_usage();
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    __output("$s\n") if ($VERBOSE);
    __non_interactive_err_output($rc, $s);
    exit $rc;
}

my $C = new Context;

my $CONFIG = SLIP_Utils::Common::gen_run_config('slip', $RUN);
$C->set_object('MdpConfig', $CONFIG);

my @SHARDS;

if (! defined($SHARD)) {
    my @num_shards_list = $CONFIG->get('num_shards_list');
    @SHARDS = (@num_shards_list);
}
else {
    @SHARDS = ($SHARD);
}


my $rc = 0;

if ($SIZE) {
    my %segsizes;

    foreach my $shard (@SHARDS) {
        my $key = 'dir_for_shard_';
        my $index_dir = $CONFIG->get($key . $shard);
        my ($size_main_segment, $size_baby_segment) = size_shards($index_dir);

        # (0,0) is an error condition
        if (! $size_main_segment) {
            $segsizes{main} = 0.0;
            $segsizes{baby} = 0.0;
            exit $SLIP_Utils::States::RC_CHILD_ERROR;
        }
        else {
            $segsizes{main} += $size_main_segment;
            $segsizes{baby} += $size_baby_segment;
        }
    }

    my $gigabyte_factor = 1024*1024*1024;
    my $sizes = sprintf("%.010f %.010f", $segsizes{main}/$gigabyte_factor, $segsizes{baby}/$gigabyte_factor);
    print STDOUT "$sizes\n";
}

elsif ($COUNT) {
    my $key = 'dir_for_shard_';
    my $index_dir = $CONFIG->get($key . $COUNT);
    my $segcount = count_segs($index_dir);

    # 0 is an error condition
    if (! $segcount) {
        exit $SLIP_Utils::States::RC_CHILD_ERROR;
    }
    print STDOUT "$segcount\n";
}

exit 0;


# ---------------------------------------------------------------------

=item size_shards

Description

=cut

# ---------------------------------------------------------------------
sub size_shards {
    my ($index_dir) = @_;

    my @segment_ids = `ls $index_dir/*.prx 2> /dev/null`;
    my $num_segs = scalar(@segment_ids);
    unless ($num_segs > 0) {
        return (0,0);
    }

    @segment_ids = map { $_ =~ m,.*/(.*?)\....$, } @segment_ids;

    my $s = qq{dir=$index_dir   num_segments=$num_segs prefixes=} . join(' ', @segment_ids) . qq{\n};
    __output($s) if ($VERBOSE);

    my %segsizes;
    my $seg = 0;
    my $largest_seg = 0.0;
    my $largest_segsize = 0.0;
    foreach my $seg_id (@segment_ids) {
        $seg++;
        my $segsize = `du -c --apparent-size --block-size=1 $index_dir/$seg_id*|grep total| cut -f1`;
        chomp($segsize);
        $segsizes{$seg} += $segsize;
        if ($segsize > $largest_segsize) {
            $largest_segsize = $segsize;
            $largest_seg = $seg;
        }
    }

    # Sum all segs smaller than largest to represent baby seg
    my $baby_segsize = 0.0;
    foreach my $segkey (keys %segsizes) {
        $baby_segsize += $segsizes{$segkey} unless ($segkey == $largest_seg);
    }
    $segsizes{1} = $largest_segsize;
    $segsizes{2} = $baby_segsize;

    return ($segsizes{1}, $segsizes{2});
}



# ---------------------------------------------------------------------

=item count_segs

Description

=cut

# ---------------------------------------------------------------------
sub count_segs {
    my ($index_dir) = @_;

    my @segment_ids = `ls $index_dir/*.prx 2> /dev/null`;
    my $num_segs = scalar(@segment_ids);
    return $num_segs;
}

=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2013 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut



