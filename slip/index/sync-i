#!/l/local/bin/perl

=head1 NAME

sync-i

=head1 USAGE

% sync-i -r run [-s <slice_size>][-d][-n][-q][-P 1|2]

=head1 DESCRIPTION

Synchronize the LS index with the CB database tables.

=head1 OPTIONS

=cut

use strict;

# ----------------------------------------------------------------------
# Set up paths for local libraries -- must come first
# ----------------------------------------------------------------------
use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

# Perl
use Getopt::Std;

# App
use Utils;
use Utils::Time;
use Debug::DUtils;

use Context;
use MdpConfig;
use Database;
use Identifier;
use SharedQueue;

use Search::Searcher;
use Search::Result::SLIP;
use SLIP_Utils::Common;
use SLIP_Utils::Solr;
use SLIP_Utils::Released;

use Collection;
use CollectionSet;


# ---------------------------------------------------------------------

=item sync_get_usage

Description

=cut

# ---------------------------------------------------------------------
sub sync_get_usage {
    my $s .= qq{Usage: sync-i -r run [-s <slice_size>][-d][-n][-q][-P 1|2]
                  where -s is slice size of Solr and Mysql id query
                        -q quiet: just print missing ids
                        -P run only phase 1 or 2
                        -n ids are not queued, just reported\n};
    return $s;
}

our ($opt_r, $opt_s, $opt_d, $opt_n, $opt_T, $opt_q, $opt_P);

my $ops = getopts('r:s:dnTqP:');

my $RUN = $opt_r; # Required
if (! $RUN) {
    my $s = sync_get_usage();
    print $s;
    exit 1;
}

use constant DEFAULT_SLICE_SIZE => 1000;
my $SLICE_SIZE = defined($opt_s) ? $opt_s : DEFAULT_SLICE_SIZE; # optional

if (defined($opt_d)) {
    $ENV{'DEBUG'} .= 'lsdb,idx,doc,me';
}

my $MESSAGE_BUFFER;
my $INTERACTIVE = $ENV{TERM};
my $HOST = `hostname`;
$HOST =~ s,\..*$,,s;

my $NOOP = defined($opt_n); # optional
my $VERBOSE = (! defined($opt_q));
my $PHASE = $opt_P;

my $TEST_ONLY = defined($opt_T);
exit 0 if ($TEST_ONLY);

# Flush i/o
$| = 1;

my $C = new Context;
my $config = SLIP_Utils::Common::gen_run_config('slip', $RUN);
$C->set_object('MdpConfig', $config);

my $db;
eval {
    $db = new Database($config);
};
if ($@) {
    my $rc = $SLIP_Utils::States::RC_DATABASE_CONNECT;
    SLIP_Utils::Common::Log_database_connection_error($C, 'sync-i', $@);
    __non_interactive_err_output($rc, $@);
    exit $rc;
}

$C->set_object('Database', $db);

my $DBH = $db->get_DBH();
my $CO = new Collection($DBH, $config, undef);
my $CS = new CollectionSet($DBH, $config, undef);

my $process_start = time();

eval {
    # Only sync with solr index if it is "new", i.e. if released for
    # today. Otherwise, we would see missing ids in yesterday's index
    my ($index_released, $r_msg) = SLIP_Utils::Released::released();
    l__output("\n$r_msg on $HOST\n");
    
    if ($index_released) {
        do_Sync($C, $PHASE);
    }
    else {
        if ($INTERACTIVE) {
            if (! $NOOP) {
                l__output("Proceeding to queue today's IDs early\n");
            }
            do_Sync($C, $PHASE);
        }
        else {
            l__output("$r_msg Skipping sync-i run\n");
        }
    }
    
    sy_final_report($C, $DBH, $process_start);
};
if ($@) {
    my $rc = $SLIP_Utils::States::RC_CRITICAL_ERROR;    
    my $s = qq{CRITICAL ERROR: sync-i: $@\n};
    __output($s);
    __non_interactive_err_output($rc, $s);
    exit $rc;
}

exit 0;

#
# --------------------- S u b r o t i n e s   -------------------------
#

# ---------------------------------------------------------------------

=item do_Sync

Description

=cut

# ---------------------------------------------------------------------
sub do_Sync {
    my $C = shift;
    my $phase = shift;
    
    if ($phase) {
        handle_synchronization($C) if ($phase == 1);
        handle_inverse_synchronization($C) if ($phase == 2);
    }
    else {
        handle_synchronization($C);
        handle_inverse_synchronization($C);
    }    
}

# ---------------------------------------------------------------------

=item Log_sync_i

Description

=cut

# ---------------------------------------------------------------------
sub Log_sync_i {
    my ($C, $run, $s) = @_;

    my $ss = qq{***UPDATE: } . Utils::Time::iso_Time() . qq{ run=$run\n$s};
    SLIP_Utils::Log::this_string($C, $ss, 'sync-i_logfile', '___RUN___', $run);
}

# ---------------------------------------------------------------------

=item sy_final_report

Description

=cut

# ---------------------------------------------------------------------
sub sy_final_report {
    my ($C, $dbh, $process_start) = @_;

    my $process_elapsed = time() - $process_start;
    my $process_elapsed_min = sprintf("%.2f", $process_elapsed/60);

    my $s = qq{\nsync-i update: elapsed minutes=$process_elapsed_min\n};
    __output(qq{$s} . Utils::Time::iso_Time() . qq{\n});

    $s .= $MESSAGE_BUFFER;
    $s =~ s,\n\n,\n,gs;

    Log_sync_i($C, $RUN, $s);

    if (! $INTERACTIVE) {
        my $subj = qq{[SLIP] sync-i report ($HOST)};
        SLIP_Utils::Common::Send_email($C, 'report', $subj, $s);
    }
}

# ---------------------------------------------------------------------

=item __handle_query

Description

=cut

# ---------------------------------------------------------------------
sub __handle_query {
    my ($C, $query, $searcher, $rs) = @_;

    $rs = $searcher->get_Solr_raw_internal_query_result($C, $query, $rs);
    if (! $rs->http_status_ok()) {
        my $status = $rs->get_status_line();
        my $dump = $rs->get_failed_HTTP_dump();
        my $s = qq{Solr query=$query failed: \n$dump\n};
        __handle_rc($SLIP_Utils::States::RC_CRITICAL_ERROR, $s);
        # NOTREACHED
    }

    return $rs;
}

# ---------------------------------------------------------------------

=item __handle_rc

Description

=cut

# ---------------------------------------------------------------------
sub __handle_rc {
    my ($rc, $msg) = @_;

    if ($rc > 0) {
        l__output(qq{$msg\nError exit\n});
        __non_interactive_err_output($rc, $msg);
        exit $rc;
    }
}

# ---------------------------------------------------------------------

=item handle_synchronization

Test that every id in a MySQL CB large collection is in LS Solr

=cut

# ---------------------------------------------------------------------
sub handle_synchronization {
    my $C = shift;

    l__output(qq{\n***\n*** Begin Phase I synchronization ...\n***\n\n});

    my $initial_shared_queue_ct = SharedQueue::count_shared_queue_ids($C, $DBH);
    l__output(qq{Initial shared queue count=$initial_shared_queue_ct\n});

    my $engine_uri = Search::Searcher::get_random_shard_solr_engine_uri($C);
    my $searcher = new Search::Searcher($engine_uri, undef, 1);
    my $rs = new Result::SLIP();

    my ($ok, $coll_id_arr_ref) = SharedQueue::get_large_coll_coll_ids($C, $DBH);
    __handle_rc($ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                qq{Failed to get large coll_ids\n});

    my $s;
    my $ct = 0;
    my $coll_ct = 0;
    my $missing_ids_over_colls = 0;
    my $ids_in_colls = 0;

    my %uniq_hash = ();

    foreach my $coll_id (@$coll_id_arr_ref) {
        l__output(qq{\nProcessing coll_id=$coll_id for ids missing in Solr\n});
        $coll_ct++;
        my $missing_ids_in_coll = 0;

        my $coll_name = $CO->get_coll_name($coll_id);
        my $id_arr_ref = $CO->get_ids_for_coll($coll_id);
        my $num_ids_in_coll = scalar(@$id_arr_ref);

        foreach my $uid (@$id_arr_ref) {
            $uniq_hash{$uid} = 1;
        }
        my $uniq_ids_in_coll = scalar(keys(%uniq_hash)) - $ids_in_colls;
        $ids_in_colls += $uniq_ids_in_coll;

        # Make sure the coll_id itself exists in Solr for at least one id
        my $query = qq{q=coll_id:$coll_id&start=0&rows=0};
        $rs = __handle_query($C, $query, $searcher, $rs);

        if ($rs->get_num_found() == 0) {
            $s = $NOOP ? '' : "\n\t--> queue all ids";
            l__output(qq{\n\tcoll_id=$coll_id ($coll_name): missing=$num_ids_in_coll$s\n});

            if (! $NOOP) {
                $ok = SharedQueue::enqueue_all_ids($C, $DBH, $coll_id);
                __handle_rc($ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                            qq{Failed to enqueue all ids for coll_id=$coll_id\n});
            }
            
            $missing_ids_over_colls += $uniq_ids_in_coll;
            $missing_ids_in_coll += $num_ids_in_coll;
        }
        else {
            my $id_arr_ref = $CO->get_ids_for_coll($coll_id);
            foreach my $id (@$id_arr_ref) {
                my $safe_id = Identifier::get_safe_Solr_id($id);
                my $query_1 = qq{q=coll_id:$coll_id+AND+id:$safe_id&start=0&rows=0};
                $rs = __handle_query($C, $query_1, $searcher, $rs);
                
                $ct++;
                if ($VERBOSE) {
                    if (($ct % 100) == 0) {
                        l__output($ct.'s');
                        # throttle solr requests to prevent 500's
                        sleep 1;
                    }
                    (($ct % 10) == 0) ? l__output('.') : '';
                }

                if ($rs->get_num_found() == 0) {
                    my $reason = Db::Select_id_from_j_errors($C, $DBH, $RUN, $id);

                    my $r = $reason ? "reason=" . SLIP_Utils::Common::IXconstant2string($reason) : '';
                    $s = $NOOP ? '' : "\n\t--> queue id";
                    l__output(qq{\n\tcoll_id=$coll_id ($coll_name): missing id=$id $r $s\n});

                    $missing_ids_over_colls++;
                    $missing_ids_in_coll++;

                    if (! $NOOP) {
                        $ok = SharedQueue::enqueue_item_ids($C, $DBH, [$id]);
                        __handle_rc($ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                                    qq{Failed to enqueue id=$id for coll_id=$coll_id\n});
                    }
                }
            }
        }
        $s = $missing_ids_in_coll
          ? qq{\nSolr missing ids=$missing_ids_in_coll for collid=$coll_id ($coll_name) [$num_ids_in_coll]\n}
            : qq{\n\tAll Solr ids present for coll_id=$coll_id ($coll_name) [$num_ids_in_coll]};
        l__output(qq{$s\n});
    }

    my $total_ids_queued = SharedQueue::count_shared_queue_ids($C, $DBH) - $initial_shared_queue_ct;
    $s = $NOOP ? '' : ", $total_ids_queued added to shared queue";
    l__output(qq{\nPhase I processed MySQL large coll_ids=$coll_ct items=$ids_in_colls missing=$missing_ids_over_colls in Solr$s\n});
}

# ---------------------------------------------------------------------

=item __parse_result_docs

Description

=cut

# ---------------------------------------------------------------------
sub __parse_result_docs {
    my (
        $C, $rs, $large_coll_id_arr_ref,
        $missing_coll_ids_hashref,
        $small_coll_ids_hashref
       ) = @_;

    my %id_to_coll_id_hash = ();

    my %local_small_ids_to_enqueue = ();
    my %local_missing_ids_to_enqueue = ();

    my $ret_to_arr_of_hashref = $rs->get_complete_result();
    foreach my $hashref (@$ret_to_arr_of_hashref) {
        my $coll_ids_arr_ref = $hashref->{coll_ids};
        my $id = $hashref->{id};

        $id_to_coll_id_hash{$id} = $coll_ids_arr_ref;
    }

    # Optimization: If any of the coll_ids don't exist or are a
    # coll_id that is not "large", add the id to the "to be
    # re-indexed" list so we don't have to query MySQL redundantly for
    # every id that's in a non-existent or non-large collection.
    foreach my $id (keys %id_to_coll_id_hash) {
        foreach my $coll_id (@{ $id_to_coll_id_hash{$id} }) {
            if ($small_coll_ids_hashref->{$coll_id}) {
                $local_small_ids_to_enqueue{$id} = 1;
            }
            elsif ($missing_coll_ids_hashref->{$coll_id}) {
                $local_missing_ids_to_enqueue{$id} = 1;
            }
            elsif (! $CS->exists_coll_id($coll_id)) {
                $missing_coll_ids_hashref->{$coll_id} = 1;
                $local_missing_ids_to_enqueue{$id} = 1;
                l__output(qq{\n\tSolr doc w/id=$id has coll_id=$coll_id MISSING from MySQL });
            }
            elsif (! grep(/^$coll_id$/, @$large_coll_id_arr_ref)) {
                $small_coll_ids_hashref->{$coll_id} = 1;
                $local_small_ids_to_enqueue{$id} = 1;
                l__output(qq{\n\tSolr doc w/id=$id has coll_id=$coll_id that is NOT LARGE in MySQL });
            }
        }
    }

    foreach my $id (keys %local_missing_ids_to_enqueue) {
        delete $id_to_coll_id_hash{$id};
    }
    foreach my $id (keys %local_missing_ids_to_enqueue) {
        delete $id_to_coll_id_hash{$id};
    }

    my @small_ids_to_enqueue = keys %local_small_ids_to_enqueue;
    my @missing_ids_to_enqueue = keys %local_missing_ids_to_enqueue;

    return (\%id_to_coll_id_hash, \@small_ids_to_enqueue, \@missing_ids_to_enqueue);
}


# ---------------------------------------------------------------------

=item handle_inverse_synchronization

Should follow handle_synchronization.

We now know that every id in a CB large collection is in Solr.

Check that the ids of every Solr doc that has collection coll_id
fields are in those collections in CB database.  If not, enqueue the
id for re-indexing so it will acquire the correct list of coll_ids.

=cut

# ---------------------------------------------------------------------
sub handle_inverse_synchronization {
    my $C = shift;

    l__output(qq{\n***\n*** Begin Phase II synchronization ...\n***\n\n});

    my $initial_shared_queue_ct = SharedQueue::count_shared_queue_ids($C, $DBH);
    l__output(qq{Initial shared queue count=$initial_shared_queue_ct\n});

    my $engine_uri = Search::Searcher::get_random_shard_solr_engine_uri($C);
    my $searcher = new Search::Searcher($engine_uri, undef, 1);
    my $rs = new Result::SLIP();

    my $s;
    my $ok;
    my $id_ct = 0;
    my $start = 0;

    my $num_ids_from_missing_coll_ids = 0;
    my $num_ids_from_small_coll_ids = 0;

    # zero is reserved for the coll_id field for items that are not in
    # any collection
    my $item_query = qq{q=coll_id:[1 TO *]&start=0&rows=0&fl=coll_id,id};
    $rs = __handle_query($C, $item_query, $searcher, $rs);
    my $num_found = $rs->get_num_found();
    l__output(qq{Solr has $num_found items in collections\n});

    my ($_ok, $large_coll_id_arr_ref) = SharedQueue::get_large_coll_coll_ids($C, $DBH);
    __handle_rc($_ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                qq{Failed to get large coll_ids\n});

    my %missing_coll_ids = ();
    my %small_coll_ids = ();

    while (1) {
        # Get a slice of Solr documents with non-empty coll_id field(s)
        my $query = qq{q=coll_id:[1 TO *]&start=$start&rows=$SLICE_SIZE&fl=coll_id,id};
        $rs = __handle_query($C, $query, $searcher, $rs);

        my $rows_returned = $rs->get_rows_returned();
        last if ($rows_returned == 0);
        $start += $SLICE_SIZE;
        l__output(qq{$rows_returned ids.}) if ($VERBOSE);


        # Parse and return optimized list of ids to test
        my ($id_hashref_of_coll_id_arr_ref, $small_ids_to_enqueue_arr_ref, $missing_ids_to_enqueue_arr_ref) 
          = __parse_result_docs(
                                $C, $rs, $large_coll_id_arr_ref,
                                \%missing_coll_ids,
                                \%small_coll_ids
                               );

        my $num_ids_missing = scalar(@$missing_ids_to_enqueue_arr_ref);
        $num_ids_from_missing_coll_ids += $num_ids_missing;
        l__output(qq{\nSolr now has $num_ids_from_missing_coll_ids ids in MISSING MySQL coll_ids\n})
          if ($num_ids_from_missing_coll_ids);

        if ($num_ids_missing) {
            if (! $NOOP) {
                l__output("\n\t--> queue $num_ids_missing ids\n");
                $ok = SharedQueue::enqueue_item_ids($C, $DBH, $missing_ids_to_enqueue_arr_ref);
                __handle_rc($ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                            qq{Failed to enqueue ids from missing optimize step\n});
            }
        }

        my $num_ids_small = scalar(@$small_ids_to_enqueue_arr_ref);
        $num_ids_from_small_coll_ids += $num_ids_small;
        l__output(qq{\nSolr now has $num_ids_from_small_coll_ids ids in SMALL MySQL coll_ids\n})
          if ($num_ids_from_small_coll_ids);

        if ($num_ids_small) {
            if (! $NOOP) {
                l__output("\n\t--> queue $num_ids_small ids\n");
                $ok = SharedQueue::enqueue_item_ids($C, $DBH, $small_ids_to_enqueue_arr_ref);
                __handle_rc($ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                            qq{Failed to enqueue ids from small optimize step\n});
            }
        }

        $small_ids_to_enqueue_arr_ref = [];
        $missing_ids_to_enqueue_arr_ref = [];

        foreach my $id (keys %$id_hashref_of_coll_id_arr_ref) {
            my $ids_to_enqueue_arr_ref = [];
            
            my $coll_id_arr_ref = $id_hashref_of_coll_id_arr_ref->{$id};

            $id_ct++;

            if ($VERBOSE) {
                (($id_ct % 100) == 0) ? l__output($id_ct) : '';
                (($id_ct % 10) == 0) ? l__output('.') : '';
            }

            # Check that this id is in each of these coll_ids
            foreach my $coll_id (@$coll_id_arr_ref) {
                if (! $CO->one_or_more_items_in_coll($coll_id, [$id])) {
                    $s = $NOOP ? '' : "\n\t--> queue id";
                    l__output(qq{\n\tid NOT IN MySQL COLLECTION: id=$id, coll_id=$coll_id $s\n});

                    push(@$ids_to_enqueue_arr_ref, $id);
                }
            }
            if (! $NOOP) {
                if (scalar(@$ids_to_enqueue_arr_ref)) {
                    $ok = SharedQueue::enqueue_item_ids($C, $DBH, $ids_to_enqueue_arr_ref);
                    __handle_rc($ok ? $SLIP_Utils::States::RC_OK : $SLIP_Utils::States::RC_CRITICAL_ERROR, 
                                qq{Failed to enqueue ids not in collection\n});
                }
            }
        }
    }

    my $total_ids_queued = SharedQueue::count_shared_queue_ids($C, $DBH) - $initial_shared_queue_ct;
    my $total_ids_processed = $id_ct + $num_ids_from_missing_coll_ids + $num_ids_from_small_coll_ids;
    
    $s = $NOOP ? '' : "$total_ids_queued added to shared queue";
    l__output(qq{\n\nPhase II processed $total_ids_processed id occurrences in colls\n\thad $num_ids_from_missing_coll_ids in Solr not in any coll in MySQL\n\thad $num_ids_from_small_coll_ids in small MySQL colls\n\t$s\n\n});

}

# ---------------------------------------------------------------------

=item l__output

Description

=cut

# ---------------------------------------------------------------------
sub l__output {
    my ($msg) = @_;

    $MESSAGE_BUFFER .= $msg;
    __output($msg);
}

1;


=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2011 ©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut



