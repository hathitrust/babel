#!/l/local/bin/perl

=head1 NAME

timeouts-j

=head1 USAGE

see usage

=head1 DESCRIPTION

What it says

=head1 OPTIONS

=over 8

=item -

see help

=back

=cut

use strict;

# ----------------------------------------------------------------------
# Set up paths for local libraries -- must come first
# ----------------------------------------------------------------------
use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;


# Perl
use Getopt::Std;
use Time::Local;

# App
use Utils;
use Debug::DUtils;
use Context;
use MdpConfig;
use Database;
use Search::Constants;
use Utils::GlobalSwitch;

# Local
use Db;
use SLIP_Utils::Common;
use SLIP_Utils::States;
use SLIP_Utils::Solr;

use Result::SLIP;


my $INTERACTIVE = $ENV{TERM};

if ($INTERACTIVE) {
    if (Utils::GlobalSwitch::cron_jobs_disabled('slip', 'STOPSLIP')) {
        __output("Cannot handle timeouts. STOPSLIP in place!!\n");
        exit 0;
    }
}
else {
    Utils::GlobalSwitch::Exit_If_cron_jobs_disabled('STOPSLIP');
}


# Flush i/o
$| = 1;

sub tim_get_usage {
    my $s = qq{Usage: timeouts-j  -r run -Q|-l{1|2|3} [-d]
                 -l lists timed-out ids by shard, 1,2,3=verbosity
                 -Q deletes ids from j_timeouts and re-queues them to j_queue\n};
    return $s;
}

our ($opt_r, $opt_Q, $opt_d, $opt_l);

my $ops = getopts('r:Qdl:');

# Required
my $RUN = $opt_r;
if (! $RUN) {
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    my $s = tim_get_usage();
    __output($s);
    __non_interactive_err_output($rc, $s);

    exit $rc;
}

my $LIST = defined($opt_l) ? $opt_l : undef;
my $REQUEUE = defined($opt_Q);
if ($REQUEUE) {
    undef $LIST;
}
elsif ($LIST) {
    undef $REQUEUE;
}
else {
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    my $s = tim_get_usage();
    __output($s);
    __non_interactive_err_output($rc, $s);

    exit $rc;
}

if (defined($opt_d)) {
    $ENV{'DEBUG'} .= 'lsdb,idx,doc,me';
}

my $C = new Context;

my $config = SLIP_Utils::Common::gen_run_config($RUN);
$C->set_object('MdpConfig', $config);

my $db;
eval {
    $db = new Database($config);
};
if ($@) {
    my $rc = $SLIP_Utils::States::RC_DATABASE_CONNECT;
    SLIP_Utils::Common::Log_database_connection_error($C, 'timeouts-j', $@);
    __output($@);
    __non_interactive_err_output($rc, $@);

    exit $rc;
}

$C->set_object('Database', $db);

my $DBH = $db->get_DBH();

eval {
    if ($REQUEUE) {
        t_handle_timeouts_requeue($C, $DBH, $RUN);
    }
    elsif ($LIST) {
        t_handle_timeouts_list($C, $DBH, $RUN);
    }
};
if ($@) {
    my $rc = $SLIP_Utils::States::RC_CRITICAL_ERROR;
    my $s = qq{CRITICAL ERROR: $@\n};
    __output($s);
    __non_interactive_err_output($rc, $s);

    exit $rc;
}

exit 0;

#
# --------------------- S u b r o t i n e s   -------------------------
#

# ---------------------------------------------------------------------

=item t_handle_timeouts_requeue

Description

=cut

# ---------------------------------------------------------------------
sub t_handle_timeouts_requeue {
    my ($C, $dbh, $run) = @_;

    my $requeued_ct = Db::insert_restore_timeouts_to_queue($C, $dbh, $run);
    __output(qq{Timeouts total_requeued=$requeued_ct\n});
}

# ---------------------------------------------------------------------

=item t_handle_timeouts_list

Description

=cut

# ---------------------------------------------------------------------
sub t_handle_timeouts_list {
    my ($C, $dbh, $run) = @_;

    my $tot_num_timeouts = 0;

    my @num_shards_list = $C->get_object('MdpConfig')->get('num_shards_list');
    foreach my $shard (@num_shards_list) {
        my $id_arr_hashref = Db::Select_timeout_ids($C, $dbh, $run, $shard);
        my $num_timeouts = scalar(@$id_arr_hashref);
        $tot_num_timeouts += $num_timeouts;

        __output qq{Timeouts list shard=$shard num=$num_timeouts\n};

        if ($LIST > 1) {
            if (defined($id_arr_hashref) && ($num_timeouts > 0)) {
                foreach my $hashref (@$id_arr_hashref) {
                    my $id = $hashref->{'id'};
                    my $pid = $hashref->{'pid'};
                    my $host = $hashref->{'host'};
                    my $ttime = $hashref->{'timeout_time'};
                    if ($LIST == 3) {
                        __output(qq{  id=$id pid=$pid host=$host timeout_time=$ttime\n});
                    }
                    elsif ($LIST == 2) {
                        __output(qq{  $id\n});
                    }
                }
            }
            __output(qq{  Timeouts list shard_timeouts=$num_timeouts\n});
        }
    }
    __output(qq{Timeouts list total_timeouts=$tot_num_timeouts\n});
}


1;


=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2009 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut



