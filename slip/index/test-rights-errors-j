#!/usr/bin/env perl

use strict;
use warnings;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

# Perl
use Getopt::Std;
# App
use Context;
use Utils;
use Debug::DUtils;

use Context;
use MdpConfig;
use Identifier;
use Password;
use Database;

use SLIP_Utils::Common;
use SLIP_Utils::States;

use Search::Searcher;
use Search::Query;
use Search::Result::SLIP;

our ($opt_r, $opt_f, $opt_T, $opt_I);

my $ops = getopts('r:f:TI:');

my $TEST_ONLY = defined($opt_T);
exit 0 if ($TEST_ONLY);

my $RUN = $opt_r;
if (! defined $RUN) {
    print trv_get_usage();
    exit 1;
}

my $ID = $opt_I;
my $ID_FILENAME;

if (defined($opt_I)) {
    $ID = $opt_I;
}

my $C = new Context;

my $config = SLIP_Utils::Common::gen_SLIP_config($RUN);
$C->set_object('MdpConfig', $config);

my $whoami = `whoami`;
chomp($whoami);
print STDERR "Enter passwd: ";
my $passwd = Password::get_password();
print STDERR "\n";

# Database connection
my $db = new Database($whoami, $passwd, 'ht', 'mysql-sdr');
my $DBH = $db->get_DBH();
my $ROWS = 100;

sub trv_get_usage {
    return qq{Usage: test-rights-errors -r run [-I id]\n\tchecks for id(s) consistency in Solr vs. ht.rights_current and writes list to stdout.\n};
}


if ($ID) {
    test_one_id_in_Solr();
}
else {
    my $start_offset = 0;
    while ( test_ids_in_Solr($start_offset) ) {
        $start_offset += $ROWS;
    }
}


exit 0;

# ---------------------------------------------------------------------

=item test_ids_in_Solr 

Description

=cut

# ---------------------------------------------------------------------
sub test_ids_in_Solr {
    my $start = shift;

    my $query = qq{q=*:*&start=$start&rows=$ROWS&fl=id,rights};
    my $result = `$ENV{SDRROOT}/slip/index/query-j -r$RUN -N -V -q'$query'`;

    my @result_arr = split("\n", $result);

    foreach my $res (@result_arr) {
        my ($id, $rights) = ($res =~ m,<doc><str name="id">(.*?)</str><int name="rights">(.*?)</int></doc>,);

        my $attr;
        my ($namespace, $barcode) = Identifier::__split_id($id);
         eval {
             my $statement = qq{SELECT attr FROM ht.rights_current WHERE namespace='$namespace' AND id='$barcode'};
             my $sth = DbUtils::prep_n_execute($DBH, $statement);
             $attr = $sth->fetchrow_array;
         };
        print "\n$id FAIL $@" if ($@);

        if ($attr ne $rights) {
            print qq{\n$id FAIL [ LSS solr rights ]="$rights" [ ht.rights_current.attr ]="$attr"};
        }
    }
    print STDERR ' .';
    
    return scalar @result_arr;
}

# ---------------------------------------------------------------------

=item test_one_id_in_Solr

Description

=cut

# ---------------------------------------------------------------------
sub test_one_id_in_Solr {

    my $query = qq{q=id:$ID\&fl=id,rights};
    my $result = `$ENV{SDRROOT}/slip/index/query-j -r$RUN -N -V -q'$query'`;

    unless ($result) {
        print "\n$ID not in LSS Solr";
    }

    my ($id, $rights) = ($result =~ m,<doc><str name="id">(.*?)</str><int name="rights">(.*?)</int></doc>,);

    my $attr;
    my ($namespace, $barcode) = Identifier::__split_id($ID);
    eval {
        my $statement = qq{SELECT attr FROM ht.rights_current WHERE namespace='$namespace' AND id='$barcode'};
        my $sth = DbUtils::prep_n_execute($DBH, $statement);
        $attr = $sth->fetchrow_array;
    };
    print "\n$ID $@\n" if ($@);

    $attr = 'no_attr' unless (defined $attr);
    $rights = 'no_rights' unless (defined $rights);
    
    if ($attr ne $rights) {
        print "\n$ID FAIL";
    }
    else {
        print "\n$ID OK"
    }
    print qq{ [ LSS solr rights ]="$rights" [ ht.rights_current.attr ]="$attr"\n};
}


