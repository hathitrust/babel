#!/l/local/bin/perl

=head1 NAME

manage-item-index-j

=head1 USAGE

see usage

=head1 DESCRIPTION

Stop tomcat, mv index, restart tomcat.

or

Delete index.

Production:

The ptsearch solr/tomcat instance runs on slurm-1 at the MACC and duff-1 at ICTC.

Solr connection information for apps running on the web servers is: http://solr-sdr-ptsearch:8080/ptsearch

Solr home at each site is /l/solrs/prod/ptsearch.

User must have sudo rights to start/stop the tomcat instance on slurm-1/duff-1 (/etc/init.d/tomcat-ptsearch).

Logs are in /l/local/apache-tomcat-ptsearch/logs.

=head1 OPTIONS

=over 8

=item -

see help

=back

=cut

use strict;
BEGIN {
    #$ENV{DEBUG_LOCAL} = 1;
}

# ----------------------------------------------------------------------
# Set up paths for local libraries -- must come first
# ----------------------------------------------------------------------
use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;


# Perl
use Getopt::Std;

# App
use Utils;
use Utils::Time;
use Utils::GlobalSwitch;
use Debug::DUtils;

use Context;
use MdpConfig;
use Database;
use Search::Constants;
use Semaphore;

# Local
use Db;
use SLIP_Utils::Common;
use SLIP_Utils::States;
use SLIP_Utils::Log;
use Search::Result::SLIP_Raw;
use SLIP_Utils::Solr;

Utils::GlobalSwitch::Exit_If_cron_jobs_disabled('STOPSLIP');

# Flush i/o
$| = 1;

sub mii_get_usage {
    my $s .= qq{Usage: manage-item-index-j -r run [-D][-R][-d][-n][-f]
       where -n runs without calling start, stop or move/delete.
             -D deletes the moved index
             -f forces email in interactive mode
             -R reports the status/sizes of the index\n};
    return $s;
}

our ($opt_r, $opt_d, $opt_n, $opt_D, $opt_T, $opt_f, $opt_R);

my $ops = getopts('r:dnDTfR');
use constant STOPSLIP_CSLEEP_WAIT => 60;  # 1 minute
use constant TOMCAT_MAX_TRIES => 10;
use constant TOMCAT_TRIES_WAIT => 30; # 0.5 minute

my $REPORT_BUFFER = '';
my $BASE_DIR = $ENV{'SDRROOT'} . '/slip/index/';
my $BASE_SCRIPT_DIR = $ENV{'SDRROOT'} . '/slip/scripts/';
my $INTERACTIVE = $ENV{'TERM'};

my $REPORT = defined($opt_R);
my $FORCE_EMAIL = defined($opt_f);
my $NOOP = defined($opt_n); # optional
my $RUN = $opt_r; # Required
if (! $RUN) {
    my $s = qq{run (-r) parameter missing } . mii_get_usage();
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    __output($s);
    __non_interactive_err_output($rc, $s);

    exit $rc;
}

my $DELETE = defined($opt_D);

my $TEST_ONLY = defined($opt_T);
exit 0 if ($TEST_ONLY);

if ($INTERACTIVE) {
    my $s = q{Are you on the Solr host (for ls and /etc/init.d/tomcat-ptsearch start|stop ? [N] };
    __confirm($s) unless($NOOP);
}

if (defined($opt_d)) {
    $ENV{'DEBUG'} .= 'lsdb,me';
}

my $C = new Context;

my $config = SLIP_Utils::Common::gen_run_config('slip', $RUN);
$C->set_object('MdpConfig', $config);

my $db;
eval {
    $db = new Database($config);
};
if ($@) {
    my $s = qq{manage-item-index-j run=$RUN} . $@;
    Log_manage_error($C, $RUN, $s);
    SLIP_Utils::Common::Log_database_connection_error($C, qq{manage-item-index-j run=$RUN}, $@);
    exit $SLIP_Utils::States::RC_DATABASE_CONNECT;
}
$C->set_object('Database', $db);

my $DBH = $db->get_DBH();
my $HOST = `hostname`; $HOST =~ s,\..*$,,s;

# Do not try to manage while I am running already
my $Lock_File = "/tmp/manage-item-index-lock.sem";
my $Semaphore = new Semaphore($Lock_File);
if (! $Semaphore) {
    my $s = "Could not get semaphore file: $Lock_File";
    __output("$s\n");
    Log_manage_error($C, $RUN, $s);
    exit 0;
}
END {
    $Semaphore->unlock()
        if ($Semaphore);
}

my $SEARCHER = SLIP_Utils::Solr::create_shard_Searcher_by_alias($C, 1);
my $engine_uri = $SEARCHER->get_engine_uri();

if ($REPORT) {
    eval {
        my $s = "manage-item-index-j ($HOST $engine_uri): MANAGE [REPORT]" . ($NOOP ? " ---> NOOP" : "") ;
        __output("$s\n");
        Log_manage($C, $RUN, $s);

        handle_mii_rc($C, $DBH, $RUN, $HOST,
                      mii_gather_statistics($C, $DBH, $RUN));
    };
    if ($@) {
        Log_manage_error($C, $RUN, "Critical error: $@");
        handle_mii_rc($C, $DBH, $RUN, $HOST, $SLIP_Utils::States::RC_CRITICAL_ERROR);
        # NOTREACHED
    }
}
elsif ($DELETE) {
    eval {
        my $s = "manage-item-index-j ($HOST $engine_uri): MANAGE [DELETE]" . ($NOOP ? " ---> NOOP" : "") ;
        __output("$s\n");
        Log_manage($C, $RUN, $s);

        handle_mii_rc($C, $DBH, $RUN, $HOST,
                      mii_do_delete_index($C, $DBH, $RUN));
    };
    if ($@) {
        Log_manage_error($C, $RUN, "Critical error: $@");
        handle_mii_rc($C, $DBH, $RUN, $HOST, $SLIP_Utils::States::RC_CRITICAL_ERROR);
        # NOTREACHED
    }
}
else {
    eval {
        my $s = "manage-item-index-j ($HOST $engine_uri): MANAGE" . ($NOOP ? " ---> NOOP" : "") ;
        __output("$s\n");
        Log_manage($C, $RUN, $s);
        
        handle_mii_rc($C, $DBH, $RUN, $HOST,
                      mii_manage($C, $RUN, $DBH));
    };
    if ($@) {
        Log_manage_error($C, $RUN, "Critical error: $@");
        handle_mii_rc($C, $DBH, $RUN, $HOST, $SLIP_Utils::States::RC_CRITICAL_ERROR);
        # NOTREACHED
    }
}

exit 0;

#
# --------------------- S u b r o t i n e s   -------------------------
#

# ---------------------------------------------------------------------

=item handle_mii_rc

Description

=cut

# ---------------------------------------------------------------------
sub handle_mii_rc {
    my ($C, $dbh, $run, $host, $rc) = @_;

    while (Utils::GlobalSwitch::cron_jobs_disabled('slip', 'STOPSLIP')) {
        __output("  wait Manage done: STOPSLIP\n");
        sleep STOPSLIP_CSLEEP_WAIT;
    }

    # Log
    my $s = SLIP_Utils::Common::stage_rc_to_string($rc) . qq{ run=$run host=$host};
    __output(qq{$s\n});
    __non_interactive_err_output($rc, $s);

    if ($rc > 0) {
        Log_manage_error($C, $run, $s);
    }
    else {
        Log_manage($C, $run, $s);
    }

    # Report stats
    mii_email_stats_report($C, $run);

    exit $rc if ($rc > 0);
}

# ---------------------------------------------------------------------

=item mii_email_stats_report

Description

=cut

# ---------------------------------------------------------------------
sub mii_email_stats_report {
    my ($C, $run) = @_;

    return unless($FORCE_EMAIL || (! $INTERACTIVE));

    my $subj = qq{[SLIP] Manage item-level report ($HOST) -r$run};
    SLIP_Utils::Common::Send_email($C, 'report', $subj, $REPORT_BUFFER);
}


# ---------------------------------------------------------------------

=item mii_run_s_tomcat

Description

=cut

# ---------------------------------------------------------------------
sub mii_run_s_tomcat {
    my ($C, $run, $action) = @_;

    return 0 if $NOOP;

    my $rc = 0;
    my $fail_rc = ($action eq 'stop')
      ? $SLIP_Utils::States::RC_TOMCAT_STOP_FAIL
        : $SLIP_Utils::States::RC_TOMCAT_START_FAIL;

    my $test = ($action eq 'stop') ? 0 : 1;

    # Try to act on a tomcat
    my $cmd = qq{sudo  /etc/init.d/tomcat-ptsearch $action};
    my $output = `$cmd 2> /dev/null`;

    # The rc from tomcat-build is unreliable. Test result by looking at
    # process table to make sure sure it stopped or started
    my $tomcat_pattern = $C->get_object('MdpConfig')->get('tomcat_pattern');

    my $tries = 0;
    while (1) {
        last if (SLIP_Utils::Processes::is_tomcat_running($C, $tomcat_pattern) == $test);
        sleep TOMCAT_TRIES_WAIT;
        $tries++;
        last if ($tries > TOMCAT_MAX_TRIES);
    }

    if ($tries > TOMCAT_MAX_TRIES) {
        $rc = $fail_rc;
        my $s = qq{manage-item-index-j tomcat failed to $action};
        __output("$s\n");
        __non_interactive_err_output($rc, $s);
        Log_manage_error($C, $run, $s);
    }
    else {
        my $s = qq{manage-item-index-j success: tomcat action=$action};
        __output("$s\n");
        Log_manage($C, $run, "mii_run_s_tomcat (action=$action): " . $output);
    }

    return $rc;
}

# ---------------------------------------------------------------------

=item mii_do_move_index

Minimize the stop, delete, start cycle by just mv the index.  Later delete it.

=cut

# ---------------------------------------------------------------------
sub mii_do_move_index {
    my ($C, $dbh, $run) = @_;

    return 0 if $NOOP;

    # Just mv the index dir
    my $key = 'dir_for_shard_1';
    my $index_dir = $C->get_object('MdpConfig')->get($key);
    my $mv_to_index_dir = "$index_dir" . "-DELETEME-$$";
    
    my $rc = system("mv", "$index_dir", $mv_to_index_dir);

    if ($rc > 0) {
        my $s = qq{manage-item-index-j failed to move $index_dir to $mv_to_index_dir rc=$rc, $!};
        __output("$s\n");
        Log_manage_error($C, $run, $s);
    }
    else {
        my $s = qq{manage-item-index-j moved $index_dir to $mv_to_index_dir success};
        __output("$s\n");
        Log_manage($C, $run, $s);
    }

    # Regardless, let Tomcat try to restart (rc=0)
    return 0;
}

# ---------------------------------------------------------------------

=item mii_do_delete_index

Delete the moved index at our leisure.

=cut

# ---------------------------------------------------------------------
sub mii_do_delete_index {
    my ($C, $dbh, $run) = @_;

    return 0 if $NOOP;

    # Remove files- if failure just report it and allow tomcat to try
    # to restart on this index.
    my $key = 'dir_for_shard_1';
    my $index_dir = $C->get_object('MdpConfig')->get($key);
    my $index_dir_parent = "$index_dir/..";
    
    if (! opendir(DIR, $index_dir_parent)) {
        my $s = qq{manage-item-index-j failed to open $index_dir_parent: $!};
        __output("$s\n");
        Log_manage_error($C, $run, $s);
        return 0;
    }

    my @dir_list = map { "$index_dir_parent/$_" } grep(! /^(\.|\..)/, readdir(DIR));
    closedir(DIR);

    foreach my $dir (@dir_list) {
        if ($dir =~ m,DELETEME,) {
            my $rc = system("rm", "-r", "-f", "$dir");

            if ($rc > 0) {
                my $s = qq{manage-item-index-j failed to delete $dir: rc=$rc, $!};
                __output("$s\n");
                Log_manage_error($C, $run, $s);
            }
            else {
                my $s = qq{manage-item-index-j deleted $dir success};
                __output("$s\n");
                Log_manage($C, $run, $s);
            }
        }
    }

    return 0;
}

# ---------------------------------------------------------------------

=item mii_num_docs_in_index

Description

=cut

# ---------------------------------------------------------------------
sub mii_num_docs_in_index {
    my $C = shift;

    my $rs = new Search::Result::SLIP_Raw();
    my $query = q{q=*:*&start=0&rows=0};

    $rs = $SEARCHER->get_Solr_raw_internal_query_result($C, $query, $rs);

    my $num_docs = $rs->get_num_found();

    return $num_docs;
}

# ---------------------------------------------------------------------

=item mii_report_errors 

Description

=cut

# ---------------------------------------------------------------------
sub mii_report_errors {
    my ($C, $dbh, $run) = @_;

    my $buf = "*errors\n";
    my $shard = 1;
    my $error_ct = 0;
    
    my ($num_errors, $num_I, $num_O, $num_M, $num_C, $num_S, $num_N) =
      Db::Select_error_data($C, $dbh, $run, 1);
    if ($num_errors) {
        $buf .= qq{\tshard=$shard: num_errors=$num_errors index=$num_I ocr=$num_O metadata=$num_M critical=$num_C server=$num_S indexer_avail=$num_N\n};
        $error_ct += $num_errors;
    }
    else {
        $buf .= qq{\tshard=$shard: no errors\n};
    }
    
    $buf .= qq{\tTotal errors=$error_ct\n};

    return $buf;
}

# ---------------------------------------------------------------------

=item mii_gather_statistics

Description

=cut

# ---------------------------------------------------------------------
sub mii_gather_statistics {
    my ($C, $dbh, $run) = @_;

    # Get error report
    $REPORT_BUFFER .= mii_report_errors($C, $dbh, $run); 

    # Get segment sizes
    my $cmd = $BASE_SCRIPT_DIR . qq{segsizes -r$run 2>/dev/null};
    my $sizes = `$cmd`;
    $REPORT_BUFFER .= $sizes;

    # Get num docs in index
    my $num = mii_num_docs_in_index($C);
    $REPORT_BUFFER .= qq{Number of docs(pages)=$num vols=} . sprintf("%.0f", $num/200) . qq{ estimated at 200 pages/vol\n};
}


# ---------------------------------------------------------------------

=item mii_manage

Stop, delete, start

=cut

# ---------------------------------------------------------------------
sub mii_manage {
    my ($C, $run, $dbh) = @_;

    # Errors, sizes
    mii_gather_statistics($C, $dbh, $run);

    # Try to stop a tomcat to free up memory
    my $rc = mii_run_s_tomcat($C, $run, 'stop');
    return $rc if ($rc > 0);

    # Delete index
    $rc = mii_do_move_index($C, $dbh, $run);
    return $rc if ($rc > 0);

    # Try to re-start a tomcat
    $rc = mii_run_s_tomcat($C, $run, 'start');
    return $rc;
}

# ---------------------------------------------------------------------

=item Log_manage

Description

=cut

# ---------------------------------------------------------------------
sub Log_manage {
    my ($C, $run, $s) = @_;

    my $s0 = qq{***MANAGE: } . Utils::Time::iso_Time() . qq{ r=$run, $s};
    $REPORT_BUFFER .= $s0 . "\n";
    SLIP_Utils::Log::this_string($C, $s0, 'manage_logfile', '___RUN___', $run);
}


# ---------------------------------------------------------------------

=item Log_manage_error

Description

=cut

# ---------------------------------------------------------------------
sub Log_manage_error {
    my ($C, $run, $error) = @_;

    my $s = qq{***MANAGE [ERROR]: } . Utils::Time::iso_Time() . qq{ r=$run, $error};
    $REPORT_BUFFER .= $s . "\n";

    SLIP_Utils::Log::this_string($C, $s, 'manage_logfile', '___RUN___', $run);
}

1;


=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2011 ©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut



