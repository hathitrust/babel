#!/usr/bin/env perl

=head1 NAME

renumber-j

=head1 USAGE

see usage

=head1 DESCRIPTION

Renumber the re-indexing run-10 so it becomes the prodution/daily
run-11; in effect, changing the config file to point to a different
Solr configuration than was used to do the re-index.

=cut


use strict;
BEGIN {
    #$ENV{DEBUG_LOCAL} = 1;
}

# ----------------------------------------------------------------------
# Set up paths for local libraries -- must come first
# ----------------------------------------------------------------------
use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

# Perl
use Getopt::Std;

# App
use Utils;
use Utils::Time;
use Debug::DUtils;
use Password;

use Context;
use MdpConfig;
use Database;
use Search::Constants;

# Local
use Db;
use SLIP_Utils::Db_driver;
use SLIP_Utils::Common;
use SLIP_Utils::States;
use SLIP_Utils::Log;

my $INTERACTIVE = $ENV{TERM};

unless ($INTERACTIVE) {
    print ren_get_usage();
    exit 0;
}

# Flush i/o
$| = 1;

our ($opt_d, $opt_T, $opt_L);
my $ops = getopts('LTd');

my $INDEX_SCRIPTS_DIR = $ENV{'SDRROOT'} . '/slip/index/';

# Required
my $FROM_RUN = 10;
my $TO_RUN = 11;

if (defined($opt_d)) {
    $ENV{'DEBUG'} .= 'lsdb,me';
}

my $TEST_ONLY = defined($opt_T);
exit 0 if ($TEST_ONLY);

my $LIVE = defined($opt_L);

my $logdir = Utils::get_tmp_logdir();
my $Child_Err_File = qq{$logdir/renumber_child_error-$$-} . Utils::Time::iso_Time('sdt') . q{.log};
END{
    `rm -f $Child_Err_File` if (-z $Child_Err_File);
}

my $C = new Context;

my $config = SLIP_Utils::Common::gen_SLIP_config($TO_RUN);
$C->set_object('MdpConfig', $config);


# Go
if ($LIVE) {
    my $dbh = r_n_connect($C);
    c_renumber($C, $dbh, $FROM_RUN, $TO_RUN);
}
else {
    print ren_get_usage();
}


exit 0;


# ---------------------------------------------------------------------

=item ren_get_usage

Description

=cut

# ---------------------------------------------------------------------
sub ren_get_usage {
    my $s;
    $s .= qq{Usage: renumber-j [-L][-T][-d] };
    $s .= qq{\n\twhere run-10 tables will be renumbered to run-11 (hardcoded). Runs only at command line.};
    $s .= qq{\n\t\t-L L)ive: actually do the renumbering, otherwise print this usage message};
    $s .= qq{\n\t\t-d produce debug output};
    $s .= qq{\n\t\t-T test compilation and exit};
    $s .= qq{\n};

    return $s;
}

# ---------------------------------------------------------------------

=item r_r_connect

Description

=cut

# ---------------------------------------------------------------------
sub r_n_connect {
    my $C = shift;

    my $db;
    eval {
        my $whoami = `whoami`;
        chomp($whoami);
        print "Enter passwd: ";
        my $pw = Password::get_password();
        print "\n";
        unless ($pw) {
            print "missing passwd\n";
            exit 0;
        }
        $db = new Database($whoami, $pw, 'ht', 'mysql-sdr');
    };
    if ($@) {
        SLIP_Utils::Common::Log_database_connection_error($C, 'rebuild_rights-j', $@);
        exit $SLIP_Utils::States::RC_DATABASE_CONNECT;
    }

    $C->set_object('Database', $db);
    my $dbh = $C->get_object('Database')->get_DBH();
    return $dbh;
}

# ---------------------------------------------------------------------

=item c_renumber

Change the run number of the re-indexing run-10 to make it the
production/daily run-11.

First delete run-11.

HOLDINGS: Note the following:

slip_holdings[10].{last_loaded_version,last_processed_version} are set
to MAX(holdings_deltas.version) and load_time
MAX(holdings_deltas.update_date) to when run-10 is initialized because
*all* IDs are queued *and* re-indexed so run-10 necessarily
incorporates the latest holdings data run-11 posseses which was
correct with respect to PHDB and and VuFind.

Hence, when slip_holdings[10] is renumbered to be slip_holdings[11]
the state of run-11 will be correct as of the PHDB update version that
was in effect when run-10 began. If a PHDB update occurs during
run-10, when run-11 runs next it will catch up.

=cut

# ---------------------------------------------------------------------
sub c_renumber {
    my ($C, $dbh, $from_run, $to_run) = @_;

    __confirm("\nThis will re-number run $from_run to be run $to_run after you first manually delete run $to_run.\n\n\t ARE YOU READY TO PROCEED? [N] ");
    __confirm("\n\nHave you deleted run=$to_run (control-j -r$to_run -kdelete)? [N] ");

    # Make sure.
    my $ct = Db::Test_j_rights_timestamp($C, $dbh, $to_run);
    if ($ct > 0) {
        __output(qq{Looks like run=$to_run has not been deleted.  Exit.\n});
        exit 0;
    }

    __output(qq{\n\tre-number slip_rights timestamp } . q{ ... });
    Db::Renumber_j_rights_timestamp($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number errors ... });
    Db::Renumber_errors($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number indexed ... });
    Db::Renumber_indexed($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tSkip re-number enqueuer control ... });
    Db::Renumber_enqueuer_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number shard stats ... });
    Db::Renumber_shard_stats($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number rate stats ... });
    Db::Renumber_rate_stats($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number queue ... });
    Db::Renumber_queue($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number hosts config ... });
    Db::Renumber_host_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number optimize config ... });
    Db::Renumber_optimize_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number Lucene checkIndex control ... });
    Db::Renumber_check_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number shard control ... });
    Db::Renumber_shard_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number holdings version ... });
    Db::Renumber_holdings_version($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number driver ... });
    SLIP_Utils::Db_driver::Renumber_driver($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tDRIVER RESET for run=$to_run ... });
    my $cmd_1 = qq{$INDEX_SCRIPTS_DIR/control-j -r$to_run -kresetdriver};
    my $output_1 = `$cmd_1 2> $Child_Err_File`;
    my $sysrc_1 = $? >> 8;
    if ($sysrc_1 > 0) {
        my $s_ref = Utils::read_file($Child_Err_File, 1, 0);
        my $s = qq{-----> renumber-j error system_rc=$sysrc_1 attempting $cmd_1 error:$$s_ref\n};
        __output($s);
    }
    else {
        __output(qq{Done.\n\n});
    }

    __output(qq{\tre-INITIALIZE run=$from_run ... });
    my $cmd_2 = qq{echo "y\ny\n" | $INDEX_SCRIPTS_DIR/control-j -r$from_run -kinit};
    my $output_2 = `$cmd_2 2> $Child_Err_File`;
    my $sysrc_2 = $? >> 8;
    if ($sysrc_2 > 0) {
        my $s_ref = Utils::read_file($Child_Err_File, 1, 0);
        my $s = qq{-----> renumber-j error system_rc=$sysrc_2 attempting $cmd_2 error:$$s_ref\n};
        __output($s);
    }
    else {
        __output(qq{Done.\n\n});
    }

    Log_renumber($C, $from_run, $to_run);
    __output(qq{\n\tRe-numbered from run $from_run to run $to_run\n\n});
    __output(qq{\nWARN: update production configuration (run-${to_run}.conf) to match re-indexing configuration (run-${from_run}.conf)\n});
    __output(qq{\nWARN: re-enable driver-j and enqueuer-j for run-${to_run} when ready.\n\n});
}


# ---------------------------------------------------------------------

=item Log_renumber

Description

=cut

# ---------------------------------------------------------------------
sub Log_renumber {
    my ($C, $from_run, $to_run) = @_;

    my $s = qq{***RENUMBER: } . Utils::Time::iso_Time() . qq{ from r=$from_run to r=$to_run};
    SLIP_Utils::Log::this_string($C, $s, 'indexer_logfile', '___RUN___', $from_run);
    SLIP_Utils::Log::this_string($C, $s, 'indexer_logfile', '___RUN___', $to_run);
}




