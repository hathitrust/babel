#!/usr/bin/env perl

=head1 NAME

renumber-j

=head1 USAGE

see usage

=head1 DESCRIPTION

Renumber the re-indexing run so it becomes the procution/daily run; in
effect, changing the config file to point to a different Solr
configuration than was used to do the re-index.

Runs must be similar in their host config and shard counts.

=cut


use strict;
BEGIN {
    #$ENV{DEBUG_LOCAL} = 1;
}

# ----------------------------------------------------------------------
# Set up paths for local libraries -- must come first
# ----------------------------------------------------------------------
use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

# Perl
use Getopt::Std;

# App
use Utils;
use Utils::Time;
use Utils::GlobalSwitch;
use Debug::DUtils;

use Context;
use MdpConfig;
use Database;
use Search::Constants;

# Local
use Db;
use SLIP_Utils::Db_driver;
use SLIP_Utils::Common;
use SLIP_Utils::States;
use SLIP_Utils::Log;

my $INTERACTIVE = $ENV{TERM};

if ($INTERACTIVE) {
    if (Utils::GlobalSwitch::cron_jobs_disabled('slip')) {
        __output("Cannot control SLIP. STOPSLIP in place!!\n");
        exit 0;
    }
}
else {
    Utils::GlobalSwitch::Exit_If_cron_jobs_disabled('slip');
}


# Flush i/o
$| = 1;

# ---------------------------------------------------------------------

=item renum_get_usage

Description

=cut

# ---------------------------------------------------------------------
sub renum_get_usage {
    my $s = qq{Usage: renumber-j -r run -t run [-d][-T]
             where:
                -r = run number to be renumbered (probably a re-indexing run)
                -t = number to renumber to (probably a production run)\n};
    return $s;
}

our ($opt_r, $opt_t, $opt_d, $opt_T);

my $ops = getopts('r:t:Td');

my $INDEX_SCRIPTS_DIR = $ENV{'SDRROOT'} . '/slip/index/';

# Required
my $FROM_RUN = $opt_r;
my $TO_RUN = $opt_t;

if (! ($FROM_RUN && $TO_RUN)) {
    my $s = renum_get_usage();
    my $rc = $SLIP_Utils::States::RC_BAD_ARGS;
    __output($s);
    __non_interactive_err_output($rc, $s);
    
    exit $rc;
}

if (defined($opt_d)) {
    $ENV{'DEBUG'} .= 'lsdb,me';
}

my $TEST_ONLY = defined($opt_T);
exit 0 if ($TEST_ONLY);

my $logdir = Utils::get_tmp_logdir();
my $Child_Err_File = qq{$logdir/renumber_child_error-$$-} . Utils::Time::iso_Time('sdt') . q{.log};
END{
    `rm -f $Child_Err_File` if (-z $Child_Err_File);
}

my $C = new Context;

my $config = SLIP_Utils::Common::gen_run_config('slip', $TO_RUN);
$C->set_object('MdpConfig', $config);

my $db;
eval {
    $db = new Database('ht_maintenance');
};
if ($@) {
    SLIP_Utils::Common::Log_database_connection_error($C, 'renumber-j', $@);
    exit $SLIP_Utils::States::RC_DATABASE_CONNECT;
}

$C->set_object('Database', $db);
my $DBH = $db->get_DBH();

# Go
c_renumber($C, $DBH, $FROM_RUN, $TO_RUN);

exit 0;


# ---------------------------------------------------------------------

=item c_renumber

Change the run number of a (probably) re-indexing run to make it the
production/daily run.

=cut

# ---------------------------------------------------------------------
sub c_renumber {
    my ($C, $dbh, $from_run, $to_run) = @_;

    __confirm("\n\nHave you deleted run=$to_run (control-j -r$to_run -kdelete)? [N] ");

    # Make sure.
    my $ct = Db::Test_j_rights_timestamp($C, $dbh, $to_run);
    if ($ct > 0) {
        __output(qq{Looks like run=$to_run still exists.  Exit.\n});
        exit 0;
    }
    
    __confirm("\n\n!!! This will re-number run $from_run to be run $to_run !!!\n\n\t ARE YOU ABSOLUTELY 100% SURE ABOUT THIS!? [N] ");

    __output(qq{\n\tre-number slip_rights timestamp } . q{ ... });
    Db::Renumber_j_rights_timestamp($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number errors ... });
    Db::Renumber_errors($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number indexed ... });
    Db::Renumber_indexed($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number enqueuer control ... });
    Db::Renumber_enqueuer_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number shard stats ... });
    Db::Renumber_shard_stats($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number rate stats ... });
    Db::Renumber_rate_stats($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number index size ... });
    Db::Renumber_Index_size($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number queue ... });
    Db::Renumber_queue($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number hosts config ... });
    Db::Renumber_host_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number optimize config ... });
    Db::Renumber_optimize_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number Lucene checkIndex control ... });
    Db::Renumber_check_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number shard control ... });
    Db::Renumber_shard_control($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tre-number driver ... });
    SLIP_Utils::Db_driver::Renumber_driver($C, $dbh, $from_run, $to_run);
    __output(qq{Done.\n});

    __output(qq{\tDRIVER RESET for run=$to_run ... });
    my $cmd_1 = qq{$INDEX_SCRIPTS_DIR/control-j -r$to_run -kresetdriver};
    my $output_1 = `$cmd_1 2> $Child_Err_File`;
    my $sysrc_1 = $? >> 8;
    if ($sysrc_1 > 0) {
        my $s_ref = Utils::read_file($Child_Err_File, 1, 0);
        my $s = qq{-----> renumber-j error system_rc=$sysrc_1 attempting $cmd_1 error:$$s_ref\n};
        __output($s);
    }
    else {
        __output(qq{Done.\n\n});
    }

    __output(qq{\tre-INITIALIZE run=$from_run ... });
    my $cmd_2 = qq{echo "y\ny\n" | $INDEX_SCRIPTS_DIR/control-j -r$from_run -kinit};
    my $output_2 = `$cmd_2 2> $Child_Err_File`;
    my $sysrc_2 = $? >> 8;
    if ($sysrc_2 > 0) {
        my $s_ref = Utils::read_file($Child_Err_File, 1, 0);
        my $s = qq{-----> renumber-j error system_rc=$sysrc_2 attempting $cmd_2 error:$$s_ref\n};
        __output($s);
    }
    else {
        __output(qq{Done.\n\n});
    }

    Log_renumber($C, $from_run, $to_run);
    __output(qq{\n\tRe-numbered from run $from_run to run $to_run\n\n});
    __output(qq{\nWARN: update production configuration (run-${to_run}.conf) to match re-indexing configuration (run-${from_run}.conf)\n\n});
}


# ---------------------------------------------------------------------

=item Log_renumber

Description

=cut

# ---------------------------------------------------------------------
sub Log_renumber {
    my ($C, $from_run, $to_run) = @_;

    my $s = qq{***RENUMBER: } . Utils::Time::iso_Time() . qq{ from r=$from_run to r=$to_run};
    SLIP_Utils::Log::this_string($C, $s, 'indexer_logfile', '___RUN___', $from_run);
    SLIP_Utils::Log::this_string($C, $s, 'indexer_logfile', '___RUN___', $to_run);
}




