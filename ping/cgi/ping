#!/usr/bin/env /l/local/bin/plackup

use strict;
use warnings;

use File::Basename qw(dirname);
use IO::File;
autoflush STDOUT 1;

BEGIN {
    $ENV{DEBUG_LOCAL} = 1;
}

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors __FILE__;

# Define the MediaHandlerGlobals namespace
use MdpUsers;

use Time::HiRes qw(time);

# ----------------------------------------------------------------------
# enable strict, only under development
# ----------------------------------------------------------------------
BEGIN {
    if ( $ENV{'DLPS_DEV'} ) {
        require "strict.pm";
        strict::import();

        # Set the SDRINST and SDRLIB environment variables in auth
        # system absence.
        require Auth::Surrogate;
        Auth::Surrogate::authorize('/ping/cgi');
    }
}

# Permit created directories at 777 and created files at 666.
umask 0000;

# MDP specfic
use Debug::DUtils;
use MdpGlobals;
use Identifier;

use MdpConfig;
use Auth::Auth;
use Utils;
use Database;
use Session;

use Plack::Request;
use Plack::Response;

use URI::Escape;

BEGIN {
    Debug::DUtils::setup_DebugScreen();
}

my $app = sub {
    my $env = shift;
    my $request = Plack::Request->new($env);
    my $response;
    
    sub _expand_affiliation {
        my ( $affiliation ) = @_;
        # can we assume that institutions.xml is always going to be well formatted??
        require File::Slurp;
        my $institutions_filename = qq{$ENV{SDRROOT}/mdp-web/institutions.xml};
        my $match;
        my $in_affiliation = 0;
        foreach my $line ( File::Slurp::read_file($institutions_filename) ) {
            if ( $line =~ m,"$affiliation", ) {
                $in_affiliation = 1;
            } elsif ( $line =~ m,enabled=, && $in_affiliation ) {
                chomp $line;
                $match = $line;
                $match =~ s,^.*>([^<]+)<.*,$1,;
                return $match;
            }
        }
        return $affiliation;
    }
    
    my $C = new Context;
    my $auth = new Auth::Auth($C);
    
    my $callback = $request->param('callback') || qq{ping_handler};
            
    # if REMOTE_USER is set, we're done; don't bother with hitting
    # the database!
    if ( $$env{REMOTE_USER} ) {
        my $displayName = $$env{REMOTE_USER};
        my $affiliation;
        my $auth_type = lc $$env{AUTH_TYPE};
        if ( $auth_type eq 'shibboleth' ) {
            $displayName = $$env{displayName} || $auth->__get_prioritized_scoped_affiliation();
            ## $affiliation = $auth->__get_prioritized_scoped_affiliation();
            $affiliation = _expand_affiliation($$env{SDRINST});
        } elsif ( $displayName !~ m,@,) {
            $affiliation = 'University of Michigan';
        }
        
        $response = Plack::Response->new(200);
        $response->content_type('text/javascript');
        if ( $auth_type eq 'shibboleth' && ! $request->cookies->{HT_AUTHTYPE} ) {
            $response->cookies->{HT_AUTHTYPE} = { 
                'value' => 'shibboleth', 
                'path' => '/',
                'domain' => '.hathitrust.org'
            };
        }
        $displayName = uri_escape($displayName);
        $affiliation = uri_escape($affiliation);
        $response->body(qq{$callback(true, decodeURIComponent('$displayName'), decodeURIComponent('$affiliation'), "$auth_type", "LOGGED IN");});
        return $response->finalize;
    }
    
    # configuration; do we need our own config?
    my $config = new MdpConfig(
                               Utils::get_uber_config_path('mb'),
                               $ENV{SDRROOT} . "/mb/lib/Config/global.conf",
                               $ENV{SDRROOT} . "/mb/lib/Config/local.conf"
                              );
    

    # do I even have a session cookie??
    my $cookies = $request->cookies;
    unless ( $$cookies{$config->get('cookie_name')} ) {
        $response = Plack::Response->new(200);
        $response->content_type('text/javascript');
        $response->body(qq{$callback(false, "", "", null, "NOT LOGGED IN: NO SESSION");});
        return $response->finalize;
    }
    
    # now need to hit the database
    
    $C->set_object('MdpConfig', $config);

    my $cgi = new CGI;
    $C->set_object('CGI', $cgi);

    # Database connection
    my $db = new Database($config);
    $C->set_object('Database', $db);
    
    # Session
    my $ses = Session::start_session($C);
    $C->set_object('Session', $ses);
    
    my $auth_type = $ses->get_persistent('authenticated_via');

    # if this is https:// AND there's no AUTH_TYPE/REMOTE_USER then
    # we're still not logged in
    if ( $$env{HTTPS} eq 'on' && ! $auth_type ) {
        $response = Plack::Response->new(200);
        $response->content_type('text/javascript');
        $response->body(qq{$callback(false, "", "", null, "NOT LOGGED IN: SESSION BUT NO AUTH");});
        return $response->finalize;
    }

    # get an Auth object to trigger cgi/shcgi redirection
    $auth = new Auth::Auth($C);
    $C->set_object('Auth', $auth);
    
    # deciededly not authenticated
    $response = Plack::Response->new(200);
    $response->content_type('text/javascript');
    $response->body(qq{$callback(false, "", "", null, "NOT LOGGED IN: NO AUTHENTICATED VIA");});
    return $response->finalize;
    
};
