#!/usr/bin/env perl

use strict;
use warnings;

use Plack::Runner;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors __FILE__;

# enable strict, only under development
# ----------------------------------------------------------------------
BEGIN {
    if ( $ENV{'DLPS_DEV'} ) {
        require "strict.pm";
        strict::import();

        # Set the SDRINST and SDRLIB environment variables in auth
        # system absence.
        require Auth::Surrogate;
        Auth::Surrogate::authorize('/ping/cgi');
    }
}

{
    package App;
    
    sub new {
        my $class = shift;

        my $self = {};
        bless $self, $class;
        return $self;
    }
    
    sub get_app_name {
        my $self = shift;
        return "ping";
    }
    
}

# MDP specfic
use Debug::DUtils;
use MdpGlobals;
use Utils;

use Plack::Request;
use Plack::Response;

use JSON::XS;
use LWP::Simple;

use File::Slurp qw(read_file);

my $app = sub {
    my $env = shift;
    my $request = Plack::Request->new($env);
    my $response;

    my $target = substr($request->path_info, 1);
    
    # configuration; do we need our own config?
    my $config = new MdpConfig(
                               Utils::get_uber_config_path('pt'),
                               $ENV{SDRROOT} . "/pt/lib/Config/global.conf",
                               $ENV{SDRROOT} . "/pt/lib/Config/local.conf"
                              );
    

    my $spreadsheet_data = '{}';

    my $input_filename = qq{/htapps/babel/etc/walkthrough/$target.json};
    my $input_filename_dev = qq{$ENV{SDRROOT}/etc/walkthrough/$target.json};
    $input_filename = $input_filename_dev if ( -f $input_filename_dev );
    if ( $target && -f $input_filename ) {
        my $spreadsheet_data_key = 'walkthrough_googls_url_' . $target;
        if ( $config->has($spreadsheet_data_key) ) {
            my $walkthrough_google_url = $config->get($spreadsheet_data_key);
            $spreadsheet_data = get($walkthrough_google_url);
        } else {
            $spreadsheet_data = read_file($input_filename);
        }
    }

    $spreadsheet_data = decode_json($spreadsheet_data);
    my $steps = [];
    if ( defined $$spreadsheet_data{feed} ) {
        foreach my $entry ( @{ $$spreadsheet_data{feed}{entry} } ) {
            my $step = {};
            $$step{id} = 'step-' . $$entry{'gsx$step'}{'$t'};
            $$step{text} = $$entry{'gsx$comment'}{'$t'};
            if ( $$entry{'gsx$attach'}{'$t'} ) {
                $$step{attachTo} = {
                    element => $$entry{'gsx$attach'}{'$t'},
                    on => $$entry{'gsx$attachto'}{'$t'} || 'auto'
                };
            }
        
            push @$steps, $step;
        }
    }

    my $data = encode_json($steps);

    $response = Plack::Response->new(200);
    $response->content_type('application/json');
    $response->body($data);
    return $response->finalize;
};

Plack::Runner->new->run($app);
