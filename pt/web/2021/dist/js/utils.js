"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * JQuery URL Parser plugin, v2.2.1
 * Developed and maintanined by Mark Perkins, mark@allmarkedup.com
 * Source repository: https://github.com/allmarkedup/jQuery-URL-Parser
 * Licensed under an MIT-style license. See https://github.com/allmarkedup/jQuery-URL-Parser/blob/master/LICENSE for details.
 */
;

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD available; use anonymous module
    if (typeof jQuery !== 'undefined') {
      define(['jquery'], factory);
    } else {
      define([], factory);
    }
  } else {
    // No AMD available; mutate global vars
    if (typeof jQuery !== 'undefined') {
      factory(jQuery);
    } else {
      factory();
    }
  }
})(function ($, undefined) {
  var tag2attr = {
    a: 'href',
    img: 'src',
    form: 'action',
    base: 'href',
    script: 'src',
    iframe: 'src',
    link: 'href'
  },
      key = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'fragment'],
      // keys available to query
  aliases = {
    'anchor': 'fragment'
  },
      // aliases for backwards compatability
  parser = {
    strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
    //less intuitive, more accurate to the specs
    loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/ // more intuitive, fails on relative paths and deviates from specs

  },
      toString = Object.prototype.toString,
      isint = /^[0-9]+$/;

  function parseUri(url, strictMode) {
    var str = decodeURI(url),
        res = parser[strictMode || false ? 'strict' : 'loose'].exec(str),
        uri = {
      attr: {},
      param: {},
      seg: {}
    },
        i = 14;

    while (i--) {
      uri.attr[key[i]] = res[i] || '';
    } // build query and fragment parameters		


    uri.param['query'] = parseString(uri.attr['query']);
    uri.param['fragment'] = parseString(uri.attr['fragment']); // split path and fragement into segments		

    uri.seg['path'] = uri.attr.path.replace(/^\/+|\/+$/g, '').split('/');
    uri.seg['fragment'] = uri.attr.fragment.replace(/^\/+|\/+$/g, '').split('/'); // compile a 'base' domain attribute        

    uri.attr['base'] = uri.attr.host ? (uri.attr.protocol ? uri.attr.protocol + '://' + uri.attr.host : uri.attr.host) + (uri.attr.port ? ':' + uri.attr.port : '') : '';
    return uri;
  }

  ;

  function getAttrName(elm) {
    var tn = elm.tagName;
    if (typeof tn !== 'undefined') return tag2attr[tn.toLowerCase()];
    return tn;
  }

  function promote(parent, key) {
    if (parent[key].length == 0) return parent[key] = {};
    var t = {};

    for (var i in parent[key]) {
      t[i] = parent[key][i];
    }

    parent[key] = t;
    return t;
  }

  function parse(parts, parent, key, val) {
    var part = parts.shift();

    if (!part) {
      if (isArray(parent[key])) {
        parent[key].push(val);
      } else if ('object' == _typeof(parent[key])) {
        parent[key] = val;
      } else if ('undefined' == typeof parent[key]) {
        parent[key] = val;
      } else {
        parent[key] = [parent[key], val];
      }
    } else {
      var obj = parent[key] = parent[key] || [];

      if (']' == part) {
        if (isArray(obj)) {
          if ('' != val) obj.push(val);
        } else if ('object' == _typeof(obj)) {
          obj[keys(obj).length] = val;
        } else {
          obj = parent[key] = [parent[key], val];
        }
      } else if (~part.indexOf(']')) {
        part = part.substr(0, part.length - 1);
        if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
        parse(parts, obj, part, val); // key
      } else {
        if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
        parse(parts, obj, part, val);
      }
    }
  }

  function merge(parent, key, val) {
    if (~key.indexOf(']')) {
      var parts = key.split('['),
          len = parts.length,
          last = len - 1;
      parse(parts, parent, 'base', val);
    } else {
      if (!isint.test(key) && isArray(parent.base)) {
        var t = {};

        for (var k in parent.base) {
          t[k] = parent.base[k];
        }

        parent.base = t;
      }

      set(parent.base, key, val);
    }

    return parent;
  }

  function parseString(str) {
    return reduce(String(str).split(/&|;/), function (ret, pair) {
      try {
        pair = decodeURIComponent(pair.replace(/\+/g, ' '));
      } catch (e) {// ignore
      }

      var eql = pair.indexOf('='),
          brace = lastBraceInKey(pair),
          key = pair.substr(0, brace || eql),
          val = pair.substr(brace || eql, pair.length),
          val = val.substr(val.indexOf('=') + 1, val.length);
      if ('' == key) key = pair, val = '';
      return merge(ret, key, val);
    }, {
      base: {}
    }).base;
  }

  function set(obj, key, val) {
    var v = obj[key];

    if (undefined === v) {
      obj[key] = val;
    } else if (isArray(v)) {
      v.push(val);
    } else {
      obj[key] = [v, val];
    }
  }

  function lastBraceInKey(str) {
    var len = str.length,
        brace,
        c;

    for (var i = 0; i < len; ++i) {
      c = str[i];
      if (']' == c) brace = false;
      if ('[' == c) brace = true;
      if ('=' == c && !brace) return i;
    }
  }

  function reduce(obj, accumulator) {
    var i = 0,
        l = obj.length >> 0,
        curr = arguments[2];

    while (i < l) {
      if (i in obj) curr = accumulator.call(undefined, curr, obj[i], i, obj);
      ++i;
    }

    return curr;
  }

  function isArray(vArg) {
    return Object.prototype.toString.call(vArg) === "[object Array]";
  }

  function keys(obj) {
    var keys = [];

    for (prop in obj) {
      if (obj.hasOwnProperty(prop)) keys.push(prop);
    }

    return keys;
  }

  function purl(url, strictMode) {
    if (arguments.length === 1 && url === true) {
      strictMode = true;
      url = undefined;
    }

    strictMode = strictMode || false;
    url = url || window.location.toString();
    return {
      data: parseUri(url, strictMode),
      // get various attributes from the URI
      attr: function attr(_attr) {
        _attr = aliases[_attr] || _attr;
        return typeof _attr !== 'undefined' ? this.data.attr[_attr] : this.data.attr;
      },
      // return query string parameters
      param: function param(_param) {
        return typeof _param !== 'undefined' ? this.data.param.query[_param] : this.data.param.query;
      },
      // return fragment parameters
      fparam: function fparam(param) {
        return typeof param !== 'undefined' ? this.data.param.fragment[param] : this.data.param.fragment;
      },
      // return path segments
      segment: function segment(seg) {
        if (typeof seg === 'undefined') {
          return this.data.seg.path;
        } else {
          seg = seg < 0 ? this.data.seg.path.length + seg : seg - 1; // negative segments count from the end

          return this.data.seg.path[seg];
        }
      },
      // return fragment segments
      fsegment: function fsegment(seg) {
        if (typeof seg === 'undefined') {
          return this.data.seg.fragment;
        } else {
          seg = seg < 0 ? this.data.seg.fragment.length + seg : seg - 1; // negative segments count from the end

          return this.data.seg.fragment[seg];
        }
      }
    };
  }

  ;

  if (typeof $ !== 'undefined') {
    $.fn.url = function (strictMode) {
      var url = '';

      if (this.length) {
        url = $(this).attr(getAttrName(this[0])) || '';
      }

      return purl(url, strictMode);
    };

    $.url = purl;
  } else {
    window.purl = purl;
  }
});
/**
 * @popperjs/core v2.10.1 - MIT License
 */
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).Popper = {});
}(void 0, function (e) {
  function t(e) {
    return null == e ? window : "[object Window]" !== e.toString() ? (e = e.ownerDocument) && e.defaultView || window : e;
  }

  function n(e) {
    return e instanceof t(e).Element || e instanceof Element;
  }

  function o(e) {
    return e instanceof t(e).HTMLElement || e instanceof HTMLElement;
  }

  function r(e) {
    return "undefined" != typeof ShadowRoot && (e instanceof t(e).ShadowRoot || e instanceof ShadowRoot);
  }

  function i(e, t) {
    void 0 === t && (t = !1);
    var n = e.getBoundingClientRect(),
        r = 1,
        i = 1;
    return o(e) && t && (t = e.offsetHeight, 0 < (e = e.offsetWidth) && (r = n.width / e || 1), 0 < t && (i = n.height / t || 1)), {
      width: N(n.width / r),
      height: N(n.height / i),
      top: N(n.top / i),
      right: N(n.right / r),
      bottom: N(n.bottom / i),
      left: N(n.left / r),
      x: N(n.left / r),
      y: N(n.top / i)
    };
  }

  function a(e) {
    return {
      scrollLeft: (e = t(e)).pageXOffset,
      scrollTop: e.pageYOffset
    };
  }

  function s(e) {
    return e ? (e.nodeName || "").toLowerCase() : null;
  }

  function f(e) {
    return ((n(e) ? e.ownerDocument : e.document) || window.document).documentElement;
  }

  function p(e) {
    return i(f(e)).left + a(e).scrollLeft;
  }

  function c(e) {
    return t(e).getComputedStyle(e);
  }

  function l(e) {
    return e = c(e), /auto|scroll|overlay|hidden/.test(e.overflow + e.overflowY + e.overflowX);
  }

  function u(e, n, r) {
    void 0 === r && (r = !1);
    var c,
        u = o(n);

    if (c = o(n)) {
      var d = (c = n.getBoundingClientRect()).height / n.offsetHeight || 1;
      c = 1 !== (c.width / n.offsetWidth || 1) || 1 !== d;
    }

    d = c, c = f(n), e = i(e, d), d = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var h = {
      x: 0,
      y: 0
    };
    return (u || !u && !r) && (("body" !== s(n) || l(c)) && (d = n !== t(n) && o(n) ? {
      scrollLeft: n.scrollLeft,
      scrollTop: n.scrollTop
    } : a(n)), o(n) ? ((h = i(n, !0)).x += n.clientLeft, h.y += n.clientTop) : c && (h.x = p(c))), {
      x: e.left + d.scrollLeft - h.x,
      y: e.top + d.scrollTop - h.y,
      width: e.width,
      height: e.height
    };
  }

  function d(e) {
    var t = i(e),
        n = e.offsetWidth,
        o = e.offsetHeight;
    return 1 >= Math.abs(t.width - n) && (n = t.width), 1 >= Math.abs(t.height - o) && (o = t.height), {
      x: e.offsetLeft,
      y: e.offsetTop,
      width: n,
      height: o
    };
  }

  function h(e) {
    return "html" === s(e) ? e : e.assignedSlot || e.parentNode || (r(e) ? e.host : null) || f(e);
  }

  function m(e) {
    return 0 <= ["html", "body", "#document"].indexOf(s(e)) ? e.ownerDocument.body : o(e) && l(e) ? e : m(h(e));
  }

  function v(e, n) {
    var o;
    void 0 === n && (n = []);
    var r = m(e);
    return e = r === (null == (o = e.ownerDocument) ? void 0 : o.body), o = t(r), r = e ? [o].concat(o.visualViewport || [], l(r) ? r : []) : r, n = n.concat(r), e ? n : n.concat(v(h(r)));
  }

  function g(e) {
    return o(e) && "fixed" !== c(e).position ? e.offsetParent : null;
  }

  function b(e) {
    for (var n = t(e), r = g(e); r && 0 <= ["table", "td", "th"].indexOf(s(r)) && "static" === c(r).position;) {
      r = g(r);
    }

    if (r && ("html" === s(r) || "body" === s(r) && "static" === c(r).position)) return n;
    if (!r) e: {
      if (r = -1 !== navigator.userAgent.toLowerCase().indexOf("firefox"), -1 === navigator.userAgent.indexOf("Trident") || !o(e) || "fixed" !== c(e).position) for (e = h(e); o(e) && 0 > ["html", "body"].indexOf(s(e));) {
        var i = c(e);

        if ("none" !== i.transform || "none" !== i.perspective || "paint" === i.contain || -1 !== ["transform", "perspective"].indexOf(i.willChange) || r && "filter" === i.willChange || r && i.filter && "none" !== i.filter) {
          r = e;
          break e;
        }

        e = e.parentNode;
      }
      r = null;
    }
    return r || n;
  }

  function y(e) {
    function t(e) {
      o.add(e.name), [].concat(e.requires || [], e.requiresIfExists || []).forEach(function (e) {
        o.has(e) || (e = n.get(e)) && t(e);
      }), r.push(e);
    }

    var n = new Map(),
        o = new Set(),
        r = [];
    return e.forEach(function (e) {
      n.set(e.name, e);
    }), e.forEach(function (e) {
      o.has(e.name) || t(e);
    }), r;
  }

  function w(e) {
    var t;
    return function () {
      return t || (t = new Promise(function (n) {
        Promise.resolve().then(function () {
          t = void 0, n(e());
        });
      })), t;
    };
  }

  function x(e) {
    return e.split("-")[0];
  }

  function O(e, t) {
    var n = t.getRootNode && t.getRootNode();
    if (e.contains(t)) return !0;
    if (n && r(n)) do {
      if (t && e.isSameNode(t)) return !0;
      t = t.parentNode || t.host;
    } while (t);
    return !1;
  }

  function j(e) {
    return Object.assign({}, e, {
      left: e.x,
      top: e.y,
      right: e.x + e.width,
      bottom: e.y + e.height
    });
  }

  function E(e, n) {
    if ("viewport" === n) {
      n = t(e);
      var r = f(e);
      n = n.visualViewport;
      var s = r.clientWidth;
      r = r.clientHeight;
      var l = 0,
          u = 0;
      n && (s = n.width, r = n.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (l = n.offsetLeft, u = n.offsetTop)), e = j(e = {
        width: s,
        height: r,
        x: l + p(e),
        y: u
      });
    } else o(n) ? ((e = i(n)).top += n.clientTop, e.left += n.clientLeft, e.bottom = e.top + n.clientHeight, e.right = e.left + n.clientWidth, e.width = n.clientWidth, e.height = n.clientHeight, e.x = e.left, e.y = e.top) : (u = f(e), e = f(u), s = a(u), n = null == (r = u.ownerDocument) ? void 0 : r.body, r = z(e.scrollWidth, e.clientWidth, n ? n.scrollWidth : 0, n ? n.clientWidth : 0), l = z(e.scrollHeight, e.clientHeight, n ? n.scrollHeight : 0, n ? n.clientHeight : 0), u = -s.scrollLeft + p(u), s = -s.scrollTop, "rtl" === c(n || e).direction && (u += z(e.clientWidth, n ? n.clientWidth : 0) - r), e = j({
      width: r,
      height: l,
      x: u,
      y: s
    }));

    return e;
  }

  function D(e, t, r) {
    return t = "clippingParents" === t ? function (e) {
      var t = v(h(e)),
          r = 0 <= ["absolute", "fixed"].indexOf(c(e).position) && o(e) ? b(e) : e;
      return n(r) ? t.filter(function (e) {
        return n(e) && O(e, r) && "body" !== s(e);
      }) : [];
    }(e) : [].concat(t), (r = (r = [].concat(t, [r])).reduce(function (t, n) {
      return n = E(e, n), t.top = z(n.top, t.top), t.right = F(n.right, t.right), t.bottom = F(n.bottom, t.bottom), t.left = z(n.left, t.left), t;
    }, E(e, r[0]))).width = r.right - r.left, r.height = r.bottom - r.top, r.x = r.left, r.y = r.top, r;
  }

  function L(e) {
    return e.split("-")[1];
  }

  function M(e) {
    return 0 <= ["top", "bottom"].indexOf(e) ? "x" : "y";
  }

  function P(e) {
    var t = e.reference,
        n = e.element,
        o = (e = e.placement) ? x(e) : null;
    e = e ? L(e) : null;
    var r = t.x + t.width / 2 - n.width / 2,
        i = t.y + t.height / 2 - n.height / 2;

    switch (o) {
      case "top":
        r = {
          x: r,
          y: t.y - n.height
        };
        break;

      case "bottom":
        r = {
          x: r,
          y: t.y + t.height
        };
        break;

      case "right":
        r = {
          x: t.x + t.width,
          y: i
        };
        break;

      case "left":
        r = {
          x: t.x - n.width,
          y: i
        };
        break;

      default:
        r = {
          x: t.x,
          y: t.y
        };
    }

    if (null != (o = o ? M(o) : null)) switch (i = "y" === o ? "height" : "width", e) {
      case "start":
        r[o] -= t[i] / 2 - n[i] / 2;
        break;

      case "end":
        r[o] += t[i] / 2 - n[i] / 2;
    }
    return r;
  }

  function k(e) {
    return Object.assign({}, {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, e);
  }

  function W(e, t) {
    return t.reduce(function (t, n) {
      return t[n] = e, t;
    }, {});
  }

  function A(e, t) {
    void 0 === t && (t = {});
    var o = t;
    t = void 0 === (t = o.placement) ? e.placement : t;
    var r = o.boundary,
        a = void 0 === r ? "clippingParents" : r,
        s = void 0 === (r = o.rootBoundary) ? "viewport" : r;
    r = void 0 === (r = o.elementContext) ? "popper" : r;
    var p = o.altBoundary,
        c = void 0 !== p && p;
    o = k("number" != typeof (o = void 0 === (o = o.padding) ? 0 : o) ? o : W(o, V)), p = e.rects.popper, a = D(n(c = e.elements[c ? "popper" === r ? "reference" : "popper" : r]) ? c : c.contextElement || f(e.elements.popper), a, s), c = P({
      reference: s = i(e.elements.reference),
      element: p,
      strategy: "absolute",
      placement: t
    }), p = j(Object.assign({}, p, c)), s = "popper" === r ? p : s;
    var l = {
      top: a.top - s.top + o.top,
      bottom: s.bottom - a.bottom + o.bottom,
      left: a.left - s.left + o.left,
      right: s.right - a.right + o.right
    };

    if (e = e.modifiersData.offset, "popper" === r && e) {
      var u = e[t];
      Object.keys(l).forEach(function (e) {
        var t = 0 <= ["right", "bottom"].indexOf(e) ? 1 : -1,
            n = 0 <= ["top", "bottom"].indexOf(e) ? "y" : "x";
        l[e] += u[n] * t;
      });
    }

    return l;
  }

  function B() {
    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) {
      t[n] = arguments[n];
    }

    return !t.some(function (e) {
      return !(e && "function" == typeof e.getBoundingClientRect);
    });
  }

  function H(e) {
    void 0 === e && (e = {});
    var t = e.defaultModifiers,
        o = void 0 === t ? [] : t,
        r = void 0 === (e = e.defaultOptions) ? Y : e;
    return function (e, t, i) {
      function a() {
        f.forEach(function (e) {
          return e();
        }), f = [];
      }

      void 0 === i && (i = r);
      var s = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, Y, r),
        modifiersData: {},
        elements: {
          reference: e,
          popper: t
        },
        attributes: {},
        styles: {}
      },
          f = [],
          p = !1,
          c = {
        state: s,
        setOptions: function setOptions(i) {
          return i = "function" == typeof i ? i(s.options) : i, a(), s.options = Object.assign({}, r, s.options, i), s.scrollParents = {
            reference: n(e) ? v(e) : e.contextElement ? v(e.contextElement) : [],
            popper: v(t)
          }, i = function (e) {
            var t = y(e);
            return U.reduce(function (e, n) {
              return e.concat(t.filter(function (e) {
                return e.phase === n;
              }));
            }, []);
          }(function (e) {
            var t = e.reduce(function (e, t) {
              var n = e[t.name];
              return e[t.name] = n ? Object.assign({}, n, t, {
                options: Object.assign({}, n.options, t.options),
                data: Object.assign({}, n.data, t.data)
              }) : t, e;
            }, {});
            return Object.keys(t).map(function (e) {
              return t[e];
            });
          }([].concat(o, s.options.modifiers))), s.orderedModifiers = i.filter(function (e) {
            return e.enabled;
          }), s.orderedModifiers.forEach(function (e) {
            var t = e.name,
                n = e.options;
            n = void 0 === n ? {} : n, "function" == typeof (e = e.effect) && (t = e({
              state: s,
              name: t,
              instance: c,
              options: n
            }), f.push(t || function () {}));
          }), c.update();
        },
        forceUpdate: function forceUpdate() {
          if (!p) {
            var e = s.elements,
                t = e.reference;
            if (B(t, e = e.popper)) for (s.rects = {
              reference: u(t, b(e), "fixed" === s.options.strategy),
              popper: d(e)
            }, s.reset = !1, s.placement = s.options.placement, s.orderedModifiers.forEach(function (e) {
              return s.modifiersData[e.name] = Object.assign({}, e.data);
            }), t = 0; t < s.orderedModifiers.length; t++) {
              if (!0 === s.reset) s.reset = !1, t = -1;else {
                var n = s.orderedModifiers[t];
                e = n.fn;
                var o = n.options;
                o = void 0 === o ? {} : o, n = n.name, "function" == typeof e && (s = e({
                  state: s,
                  options: o,
                  name: n,
                  instance: c
                }) || s);
              }
            }
          }
        },
        update: w(function () {
          return new Promise(function (e) {
            c.forceUpdate(), e(s);
          });
        }),
        destroy: function destroy() {
          a(), p = !0;
        }
      };
      return B(e, t) ? (c.setOptions(i).then(function (e) {
        !p && i.onFirstUpdate && i.onFirstUpdate(e);
      }), c) : c;
    };
  }

  function T(e) {
    var n,
        o = e.popper,
        r = e.popperRect,
        i = e.placement,
        a = e.variation,
        s = e.offsets,
        p = e.position,
        l = e.gpuAcceleration,
        u = e.adaptive;

    if (!0 === (e = e.roundOffsets)) {
      e = s.y;
      var d = window.devicePixelRatio || 1;
      e = {
        x: X(X(s.x * d) / d) || 0,
        y: X(X(e * d) / d) || 0
      };
    } else e = "function" == typeof e ? e(s) : s;

    e = void 0 === (e = (d = e).x) ? 0 : e, d = void 0 === (d = d.y) ? 0 : d;
    var h = s.hasOwnProperty("x");
    s = s.hasOwnProperty("y");
    var m,
        v = "left",
        g = "top",
        y = window;

    if (u) {
      var w = b(o),
          x = "clientHeight",
          O = "clientWidth";
      w === t(o) && "static" !== c(w = f(o)).position && "absolute" === p && (x = "scrollHeight", O = "scrollWidth"), "top" !== i && ("left" !== i && "right" !== i || "end" !== a) || (g = "bottom", d -= w[x] - r.height, d *= l ? 1 : -1), "left" !== i && ("top" !== i && "bottom" !== i || "end" !== a) || (v = "right", e -= w[O] - r.width, e *= l ? 1 : -1);
    }

    return o = Object.assign({
      position: p
    }, u && Q), l ? Object.assign({}, o, ((m = {})[g] = s ? "0" : "", m[v] = h ? "0" : "", m.transform = 1 >= (y.devicePixelRatio || 1) ? "translate(" + e + "px, " + d + "px)" : "translate3d(" + e + "px, " + d + "px, 0)", m)) : Object.assign({}, o, ((n = {})[g] = s ? d + "px" : "", n[v] = h ? e + "px" : "", n.transform = "", n));
  }

  function R(e) {
    return e.replace(/left|right|bottom|top/g, function (e) {
      return te[e];
    });
  }

  function S(e) {
    return e.replace(/start|end/g, function (e) {
      return ne[e];
    });
  }

  function C(e, t, n) {
    return void 0 === n && (n = {
      x: 0,
      y: 0
    }), {
      top: e.top - t.height - n.y,
      right: e.right - t.width + n.x,
      bottom: e.bottom - t.height + n.y,
      left: e.left - t.width - n.x
    };
  }

  function q(e) {
    return ["top", "right", "bottom", "left"].some(function (t) {
      return 0 <= e[t];
    });
  }

  var N = Math.round,
      V = ["top", "bottom", "right", "left"],
      I = V.reduce(function (e, t) {
    return e.concat([t + "-start", t + "-end"]);
  }, []),
      _ = [].concat(V, ["auto"]).reduce(function (e, t) {
    return e.concat([t, t + "-start", t + "-end"]);
  }, []),
      U = "beforeRead read afterRead beforeMain main afterMain beforeWrite write afterWrite".split(" "),
      z = Math.max,
      F = Math.min,
      X = Math.round,
      Y = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  },
      G = {
    passive: !0
  },
      J = {
    name: "eventListeners",
    enabled: !0,
    phase: "write",
    fn: function fn() {},
    effect: function effect(e) {
      var n = e.state,
          o = e.instance,
          r = (e = e.options).scroll,
          i = void 0 === r || r,
          a = void 0 === (e = e.resize) || e,
          s = t(n.elements.popper),
          f = [].concat(n.scrollParents.reference, n.scrollParents.popper);
      return i && f.forEach(function (e) {
        e.addEventListener("scroll", o.update, G);
      }), a && s.addEventListener("resize", o.update, G), function () {
        i && f.forEach(function (e) {
          e.removeEventListener("scroll", o.update, G);
        }), a && s.removeEventListener("resize", o.update, G);
      };
    },
    data: {}
  },
      K = {
    name: "popperOffsets",
    enabled: !0,
    phase: "read",
    fn: function fn(e) {
      var t = e.state;
      t.modifiersData[e.name] = P({
        reference: t.rects.reference,
        element: t.rects.popper,
        strategy: "absolute",
        placement: t.placement
      });
    },
    data: {}
  },
      Q = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  },
      Z = {
    name: "computeStyles",
    enabled: !0,
    phase: "beforeWrite",
    fn: function fn(e) {
      var t = e.state,
          n = e.options;
      e = void 0 === (e = n.gpuAcceleration) || e;
      var o = n.adaptive;
      o = void 0 === o || o, n = void 0 === (n = n.roundOffsets) || n, e = {
        placement: x(t.placement),
        variation: L(t.placement),
        popper: t.elements.popper,
        popperRect: t.rects.popper,
        gpuAcceleration: e
      }, null != t.modifiersData.popperOffsets && (t.styles.popper = Object.assign({}, t.styles.popper, T(Object.assign({}, e, {
        offsets: t.modifiersData.popperOffsets,
        position: t.options.strategy,
        adaptive: o,
        roundOffsets: n
      })))), null != t.modifiersData.arrow && (t.styles.arrow = Object.assign({}, t.styles.arrow, T(Object.assign({}, e, {
        offsets: t.modifiersData.arrow,
        position: "absolute",
        adaptive: !1,
        roundOffsets: n
      })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {
        "data-popper-placement": t.placement
      });
    },
    data: {}
  },
      $ = {
    name: "applyStyles",
    enabled: !0,
    phase: "write",
    fn: function fn(e) {
      var t = e.state;
      Object.keys(t.elements).forEach(function (e) {
        var n = t.styles[e] || {},
            r = t.attributes[e] || {},
            i = t.elements[e];
        o(i) && s(i) && (Object.assign(i.style, n), Object.keys(r).forEach(function (e) {
          var t = r[e];
          !1 === t ? i.removeAttribute(e) : i.setAttribute(e, !0 === t ? "" : t);
        }));
      });
    },
    effect: function effect(e) {
      var t = e.state,
          n = {
        popper: {
          position: t.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function () {
        Object.keys(t.elements).forEach(function (e) {
          var r = t.elements[e],
              i = t.attributes[e] || {};
          e = Object.keys(t.styles.hasOwnProperty(e) ? t.styles[e] : n[e]).reduce(function (e, t) {
            return e[t] = "", e;
          }, {}), o(r) && s(r) && (Object.assign(r.style, e), Object.keys(i).forEach(function (e) {
            r.removeAttribute(e);
          }));
        });
      };
    },
    requires: ["computeStyles"]
  },
      ee = {
    name: "offset",
    enabled: !0,
    phase: "main",
    requires: ["popperOffsets"],
    fn: function fn(e) {
      var t = e.state,
          n = e.name,
          o = void 0 === (e = e.options.offset) ? [0, 0] : e,
          r = (e = _.reduce(function (e, n) {
        var r = t.rects,
            i = x(n),
            a = 0 <= ["left", "top"].indexOf(i) ? -1 : 1,
            s = "function" == typeof o ? o(Object.assign({}, r, {
          placement: n
        })) : o;
        return r = (r = s[0]) || 0, s = ((s = s[1]) || 0) * a, i = 0 <= ["left", "right"].indexOf(i) ? {
          x: s,
          y: r
        } : {
          x: r,
          y: s
        }, e[n] = i, e;
      }, {}))[t.placement],
          i = r.x;

      r = r.y, null != t.modifiersData.popperOffsets && (t.modifiersData.popperOffsets.x += i, t.modifiersData.popperOffsets.y += r), t.modifiersData[n] = e;
    }
  },
      te = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  },
      ne = {
    start: "end",
    end: "start"
  },
      oe = {
    name: "flip",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t = e.state,
          n = e.options;

      if (e = e.name, !t.modifiersData[e]._skip) {
        var o = n.mainAxis;
        o = void 0 === o || o;
        var r = n.altAxis;
        r = void 0 === r || r;
        var i = n.fallbackPlacements,
            a = n.padding,
            s = n.boundary,
            f = n.rootBoundary,
            p = n.altBoundary,
            c = n.flipVariations,
            l = void 0 === c || c,
            u = n.allowedAutoPlacements;
        c = x(n = t.options.placement), i = i || (c !== n && l ? function (e) {
          if ("auto" === x(e)) return [];
          var t = R(e);
          return [S(e), t, S(t)];
        }(n) : [R(n)]);
        var d = [n].concat(i).reduce(function (e, n) {
          return e.concat("auto" === x(n) ? function (e, t) {
            void 0 === t && (t = {});
            var n = t.boundary,
                o = t.rootBoundary,
                r = t.padding,
                i = t.flipVariations,
                a = t.allowedAutoPlacements,
                s = void 0 === a ? _ : a,
                f = L(t.placement);
            0 === (i = (t = f ? i ? I : I.filter(function (e) {
              return L(e) === f;
            }) : V).filter(function (e) {
              return 0 <= s.indexOf(e);
            })).length && (i = t);
            var p = i.reduce(function (t, i) {
              return t[i] = A(e, {
                placement: i,
                boundary: n,
                rootBoundary: o,
                padding: r
              })[x(i)], t;
            }, {});
            return Object.keys(p).sort(function (e, t) {
              return p[e] - p[t];
            });
          }(t, {
            placement: n,
            boundary: s,
            rootBoundary: f,
            padding: a,
            flipVariations: l,
            allowedAutoPlacements: u
          }) : n);
        }, []);
        n = t.rects.reference, i = t.rects.popper;
        var h = new Map();
        c = !0;

        for (var m = d[0], v = 0; v < d.length; v++) {
          var g = d[v],
              b = x(g),
              y = "start" === L(g),
              w = 0 <= ["top", "bottom"].indexOf(b),
              O = w ? "width" : "height",
              j = A(t, {
            placement: g,
            boundary: s,
            rootBoundary: f,
            altBoundary: p,
            padding: a
          });

          if (y = w ? y ? "right" : "left" : y ? "bottom" : "top", n[O] > i[O] && (y = R(y)), O = R(y), w = [], o && w.push(0 >= j[b]), r && w.push(0 >= j[y], 0 >= j[O]), w.every(function (e) {
            return e;
          })) {
            m = g, c = !1;
            break;
          }

          h.set(g, w);
        }

        if (c) for (o = function o(e) {
          var t = d.find(function (t) {
            if (t = h.get(t)) return t.slice(0, e).every(function (e) {
              return e;
            });
          });
          if (t) return m = t, "break";
        }, r = l ? 3 : 1; 0 < r && "break" !== o(r); r--) {
          ;
        }
        t.placement !== m && (t.modifiersData[e]._skip = !0, t.placement = m, t.reset = !0);
      }
    },
    requiresIfExists: ["offset"],
    data: {
      _skip: !1
    }
  },
      re = {
    name: "preventOverflow",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t = e.state,
          n = e.options;
      e = e.name;
      var o = n.mainAxis,
          r = void 0 === o || o,
          i = void 0 !== (o = n.altAxis) && o;
      o = void 0 === (o = n.tether) || o;
      var a = n.tetherOffset,
          s = void 0 === a ? 0 : a,
          f = A(t, {
        boundary: n.boundary,
        rootBoundary: n.rootBoundary,
        padding: n.padding,
        altBoundary: n.altBoundary
      });
      n = x(t.placement);
      var p = L(t.placement),
          c = !p,
          l = M(n);
      n = "x" === l ? "y" : "x", a = t.modifiersData.popperOffsets;
      var u = t.rects.reference,
          h = t.rects.popper,
          m = "function" == typeof s ? s(Object.assign({}, t.rects, {
        placement: t.placement
      })) : s;

      if (s = {
        x: 0,
        y: 0
      }, a) {
        if (r || i) {
          var v = "y" === l ? "top" : "left",
              g = "y" === l ? "bottom" : "right",
              y = "y" === l ? "height" : "width",
              w = a[l],
              O = a[l] + f[v],
              j = a[l] - f[g],
              E = o ? -h[y] / 2 : 0,
              D = "start" === p ? u[y] : h[y];
          p = "start" === p ? -h[y] : -u[y], h = t.elements.arrow, h = o && h ? d(h) : {
            width: 0,
            height: 0
          };
          var P = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          };
          v = P[v], g = P[g], h = z(0, F(u[y], h[y])), D = c ? u[y] / 2 - E - h - v - m : D - h - v - m, u = c ? -u[y] / 2 + E + h + g + m : p + h + g + m, c = t.elements.arrow && b(t.elements.arrow), m = t.modifiersData.offset ? t.modifiersData.offset[t.placement][l] : 0, c = a[l] + D - m - (c ? "y" === l ? c.clientTop || 0 : c.clientLeft || 0 : 0), u = a[l] + u - m, r && (r = o ? F(O, c) : O, j = o ? z(j, u) : j, r = z(r, F(w, j)), a[l] = r, s[l] = r - w), i && (r = (i = a[n]) + f["x" === l ? "top" : "left"], f = i - f["x" === l ? "bottom" : "right"], r = o ? F(r, c) : r, o = o ? z(f, u) : f, o = z(r, F(i, o)), a[n] = o, s[n] = o - i);
        }

        t.modifiersData[e] = s;
      }
    },
    requiresIfExists: ["offset"]
  },
      ie = {
    name: "arrow",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t,
          n = e.state,
          o = e.name,
          r = e.options,
          i = n.elements.arrow,
          a = n.modifiersData.popperOffsets,
          s = x(n.placement);

      if (e = M(s), s = 0 <= ["left", "right"].indexOf(s) ? "height" : "width", i && a) {
        r = k("number" != typeof (r = "function" == typeof (r = r.padding) ? r(Object.assign({}, n.rects, {
          placement: n.placement
        })) : r) ? r : W(r, V));
        var f = d(i),
            p = "y" === e ? "top" : "left",
            c = "y" === e ? "bottom" : "right",
            l = n.rects.reference[s] + n.rects.reference[e] - a[e] - n.rects.popper[s];
        a = a[e] - n.rects.reference[e], a = (i = (i = b(i)) ? "y" === e ? i.clientHeight || 0 : i.clientWidth || 0 : 0) / 2 - f[s] / 2 + (l / 2 - a / 2), s = z(r[p], F(a, i - f[s] - r[c])), n.modifiersData[o] = ((t = {})[e] = s, t.centerOffset = s - a, t);
      }
    },
    effect: function effect(e) {
      var t = e.state;

      if (null != (e = void 0 === (e = e.options.element) ? "[data-popper-arrow]" : e)) {
        if ("string" == typeof e && !(e = t.elements.popper.querySelector(e))) return;
        O(t.elements.popper, e) && (t.elements.arrow = e);
      }
    },
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  },
      ae = {
    name: "hide",
    enabled: !0,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: function fn(e) {
      var t = e.state;
      e = e.name;
      var n = t.rects.reference,
          o = t.rects.popper,
          r = t.modifiersData.preventOverflow,
          i = A(t, {
        elementContext: "reference"
      }),
          a = A(t, {
        altBoundary: !0
      });
      n = C(i, n), o = C(a, o, r), r = q(n), a = q(o), t.modifiersData[e] = {
        referenceClippingOffsets: n,
        popperEscapeOffsets: o,
        isReferenceHidden: r,
        hasPopperEscaped: a
      }, t.attributes.popper = Object.assign({}, t.attributes.popper, {
        "data-popper-reference-hidden": r,
        "data-popper-escaped": a
      });
    }
  },
      se = H({
    defaultModifiers: [J, K, Z, $]
  }),
      fe = [J, K, Z, $, ee, oe, re, ie, ae],
      pe = H({
    defaultModifiers: fe
  });

  e.applyStyles = $, e.arrow = ie, e.computeStyles = Z, e.createPopper = pe, e.createPopperLite = se, e.defaultModifiers = fe, e.detectOverflow = A, e.eventListeners = J, e.flip = oe, e.hide = ae, e.offset = ee, e.popperGenerator = H, e.popperOffsets = K, e.preventOverflow = re, Object.defineProperty(e, "__esModule", {
    value: !0
  });
});
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**!
* tippy.js v6.3.1
* (c) 2017-2021 atomiks
* MIT License
*/
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@popperjs/core')) : typeof define === 'function' && define.amd ? define(['@popperjs/core'], factory) : (global = global || self, global.tippy = factory(global.Popper));
})(void 0, function (core) {
  'use strict';

  var css = ".tippy-box[data-animation=fade][data-state=hidden]{opacity:0}[data-tippy-root]{max-width:calc(100vw - 10px)}.tippy-box{position:relative;background-color:#333;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;outline:0;transition-property:transform,visibility,opacity}.tippy-box[data-placement^=top]>.tippy-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-arrow:before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top}.tippy-box[data-placement^=bottom]>.tippy-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-arrow:before{top:-7px;left:0;border-width:0 8px 8px;border-bottom-color:initial;transform-origin:center bottom}.tippy-box[data-placement^=left]>.tippy-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-arrow:before{border-width:8px 0 8px 8px;border-left-color:initial;right:-7px;transform-origin:center left}.tippy-box[data-placement^=right]>.tippy-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-arrow:before{left:-7px;border-width:8px 8px 8px 0;border-right-color:initial;transform-origin:center right}.tippy-box[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{width:16px;height:16px;color:#333}.tippy-arrow:before{content:\"\";position:absolute;border-color:transparent;border-style:solid}.tippy-content{position:relative;padding:5px 9px;z-index:1}";

  function injectCSS(css) {
    var style = document.createElement('style');
    style.textContent = css;
    style.setAttribute('data-tippy-stylesheet', '');
    var head = document.head;
    var firstStyleOrLinkTag = document.querySelector('head>style,head>link');

    if (firstStyleOrLinkTag) {
      head.insertBefore(style, firstStyleOrLinkTag);
    } else {
      head.appendChild(style);
    }
  }

  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
  var ua = isBrowser ? navigator.userAgent : '';
  var isIE = /MSIE |Trident\//.test(ua);
  var ROUND_ARROW = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };

  function hasOwnProperty(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
  }

  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v = value[index];
      return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }

    return value;
  }

  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
  }

  function invokeWithArgsOrReturn(value, args) {
    return typeof value === 'function' ? value.apply(void 0, args) : value;
  }

  function debounce(fn, ms) {
    // Avoid wrapping in `setTimeout` if ms is 0 anyway
    if (ms === 0) {
      return fn;
    }

    var timeout;
    return function (arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        fn(arg);
      }, ms);
    };
  }

  function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function (key) {
      delete clone[key];
    });
    return clone;
  }

  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }

  function normalizeToArray(value) {
    return [].concat(value);
  }

  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }

  function unique(arr) {
    return arr.filter(function (item, index) {
      return arr.indexOf(item) === index;
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function arrayFrom(value) {
    return [].slice.call(value);
  }

  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function (acc, key) {
      if (obj[key] !== undefined) {
        acc[key] = obj[key];
      }

      return acc;
    }, {});
  }

  function div() {
    return document.createElement('div');
  }

  function isElement(value) {
    return ['Element', 'Fragment'].some(function (type) {
      return isType(value, type);
    });
  }

  function isNodeList(value) {
    return isType(value, 'NodeList');
  }

  function isMouseEvent(value) {
    return isType(value, 'MouseEvent');
  }

  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }

  function getArrayOfElements(value) {
    if (isElement(value)) {
      return [value];
    }

    if (isNodeList(value)) {
      return arrayFrom(value);
    }

    if (Array.isArray(value)) {
      return value;
    }

    return arrayFrom(document.querySelectorAll(value));
  }

  function setTransitionDuration(els, value) {
    els.forEach(function (el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }

  function setVisibilityState(els, state) {
    els.forEach(function (el) {
      if (el) {
        el.setAttribute('data-state', state);
      }
    });
  }

  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;

    var _normalizeToArray = normalizeToArray(elementOrElements),
        element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


    return (element == null ? void 0 : (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body) ? element.ownerDocument : document;
  }

  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX,
        clientY = event.clientY;
    return popperTreeData.every(function (_ref) {
      var popperRect = _ref.popperRect,
          popperState = _ref.popperState,
          props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement(popperState.placement);
      var offsetData = popperState.modifiersData.offset;

      if (!offsetData) {
        return true;
      }

      var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
      var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }

  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
    // `webkitTransitionEnd`...

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      box[method](event, listener);
    });
  }

  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  /**
   * When a `touchstart` event is fired, it's assumed the user is using touch
   * input. We'll bind a `mousemove` event listener to listen for mouse input in
   * the future. This way, the `isTouch` property is fully dynamic and will handle
   * hybrid devices that use a mix of touch + mouse input.
   */

  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }

    currentInput.isTouch = true;

    if (window.performance) {
      document.addEventListener('mousemove', onDocumentMouseMove);
    }
  }
  /**
   * When two `mousemove` event are fired consecutively within 20ms, it's assumed
   * the user is using mouse input again. `mousemove` can fire on touch devices as
   * well, but very rarely that quickly.
   */


  function onDocumentMouseMove() {
    var now = performance.now();

    if (now - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener('mousemove', onDocumentMouseMove);
    }

    lastMouseMoveTime = now;
  }
  /**
   * When an element is in focus and has a tippy, leaving the tab/window and
   * returning causes it to show again. For mouse users this is unexpected, but
   * for keyboard use it makes sense.
   * TODO: find a better technique to solve this problem
   */


  function onWindowBlur() {
    var activeElement = document.activeElement;

    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;

      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }

  function bindGlobalEventListeners() {
    document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener('blur', onWindowBlur);
  }

  function createMemoryLeakWarning(method) {
    var txt = method === 'destroy' ? 'n already-' : ' ';
    return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
  }

  function clean(value) {
    var spacesAndTabs = /[ \t]{2,}/g;
    var lineStartWithSpaces = /^[ \t]*/gm;
    return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
  }

  function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
  }

  function getFormattedMessage(message) {
    return [getDevMessage(message), // title
    'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
    'line-height: 1.5', // footer
    'color: #a6a095;'];
  } // Assume warnings and errors never have the same message


  var visitedMessages;
  {
    resetVisitedMessages();
  }

  function resetVisitedMessages() {
    visitedMessages = new Set();
  }

  function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console;

      visitedMessages.add(message);

      (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
  }

  function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console2;

      visitedMessages.add(message);

      (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
  }

  function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
    errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
    errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
  }

  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: 'fade',
    arrow: true,
    content: '',
    inertia: false,
    maxWidth: 350,
    role: 'tooltip',
    theme: '',
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: function appendTo() {
      return document.body;
    },
    aria: {
      content: 'auto',
      expanded: 'auto'
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: '',
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {},
    onBeforeUpdate: function onBeforeUpdate() {},
    onCreate: function onCreate() {},
    onDestroy: function onDestroy() {},
    onHidden: function onHidden() {},
    onHide: function onHide() {},
    onMount: function onMount() {},
    onShow: function onShow() {},
    onShown: function onShown() {},
    onTrigger: function onTrigger() {},
    onUntrigger: function onUntrigger() {},
    onClickOutside: function onClickOutside() {},
    placement: 'top',
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: 'mouseenter focus',
    triggerTarget: null
  }, pluginProps, {}, renderProps);
  var defaultKeys = Object.keys(defaultProps);

  var setDefaultProps = function setDefaultProps(partialProps) {
    /* istanbul ignore else */
    {
      validateProps(partialProps, []);
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function (key) {
      defaultProps[key] = partialProps[key];
    });
  };

  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps = plugins.reduce(function (acc, plugin) {
      var name = plugin.name,
          defaultValue = plugin.defaultValue;

      if (name) {
        acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;
      }

      return acc;
    }, {});
    return Object.assign({}, passedProps, {}, pluginProps);
  }

  function getDataAttributeProps(reference, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins: plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function (acc, key) {
      var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

      if (!valueAsString) {
        return acc;
      }

      if (key === 'content') {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e) {
          acc[key] = valueAsString;
        }
      }

      return acc;
    }, {});
    return props;
  }

  function evaluateProps(reference, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, {}, out.aria);
    out.aria = {
      expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
      content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
    };
    return out;
  }

  function validateProps(partialProps, plugins) {
    if (partialProps === void 0) {
      partialProps = {};
    }

    if (plugins === void 0) {
      plugins = [];
    }

    var keys = Object.keys(partialProps);
    keys.forEach(function (prop) {
      var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
      var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

      if (didPassUnknownProp) {
        didPassUnknownProp = plugins.filter(function (plugin) {
          return plugin.name === prop;
        }).length === 0;
      }

      warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
    });
  }

  var innerHTML = function innerHTML() {
    return 'innerHTML';
  };

  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }

  function createArrowElement(value) {
    var arrow = div();

    if (value === true) {
      arrow.className = ARROW_CLASS;
    } else {
      arrow.className = SVG_ARROW_CLASS;

      if (isElement(value)) {
        arrow.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow, value);
      }
    }

    return arrow;
  }

  function setContent(content, props) {
    if (isElement(props.content)) {
      dangerouslySetInnerHTML(content, '');
      content.appendChild(props.content);
    } else if (typeof props.content !== 'function') {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }

  function getChildren(popper) {
    var box = popper.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box: box,
      content: boxChildren.find(function (node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function (node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function (node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }

  function render(instance) {
    var popper = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute('data-state', 'hidden');
    box.setAttribute('tabindex', '-1');
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute('data-state', 'hidden');
    setContent(content, instance.props);
    popper.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);

    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper),
          box = _getChildren.box,
          content = _getChildren.content,
          arrow = _getChildren.arrow;

      if (nextProps.theme) {
        box.setAttribute('data-theme', nextProps.theme);
      } else {
        box.removeAttribute('data-theme');
      }

      if (typeof nextProps.animation === 'string') {
        box.setAttribute('data-animation', nextProps.animation);
      } else {
        box.removeAttribute('data-animation');
      }

      if (nextProps.inertia) {
        box.setAttribute('data-inertia', '');
      } else {
        box.removeAttribute('data-inertia');
      }

      box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

      if (nextProps.role) {
        box.setAttribute('role', nextProps.role);
      } else {
        box.removeAttribute('role');
      }

      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content, instance.props);
      }

      if (nextProps.arrow) {
        if (!arrow) {
          box.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box.removeChild(arrow);
          box.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow) {
        box.removeChild(arrow);
      }
    }

    return {
      popper: popper,
      onUpdate: onUpdate
    };
  } // Runtime check to identify if the render function is the default one; this
  // way we can apply default CSS transitions logic and it can be tree-shaken away


  render.$$tippy = true;
  var idCounter = 1;
  var mouseMoveListeners = []; // Used by `hideAll()`

  var mountedInstances = [];

  function createTippy(reference, passedProps) {
    var props = evaluateProps(reference, Object.assign({}, defaultProps, {}, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
    // 🔒 Private members
    // ===========================================================================

    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
    var currentTarget; // ===========================================================================
    // 🔑 Public members
    // ===========================================================================

    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      // Is the instance currently enabled?
      isEnabled: true,
      // Is the tippy currently showing and not transitioning out?
      isVisible: false,
      // Has the instance been destroyed?
      isDestroyed: false,
      // Is the tippy currently mounted to the DOM?
      isMounted: false,
      // Has the tippy finished transitioning in?
      isShown: false
    };
    var instance = {
      // properties
      id: id,
      reference: reference,
      popper: div(),
      popperInstance: popperInstance,
      props: props,
      state: state,
      plugins: plugins,
      // methods
      clearDelayTimeouts: clearDelayTimeouts,
      setProps: setProps,
      setContent: setContent,
      show: show,
      hide: hide,
      hideWithInteractivity: hideWithInteractivity,
      enable: enable,
      disable: disable,
      unmount: unmount,
      destroy: destroy
    }; // TODO: Investigate why this early return causes a TDZ error in the tests —
    // it doesn't seem to happen in the browser

    /* istanbul ignore if */

    if (!props.render) {
      {
        errorWhen(true, 'render() function has not been supplied.');
      }
      return instance;
    } // ===========================================================================
    // Initial mutations
    // ===========================================================================


    var _props$render = props.render(instance),
        popper = _props$render.popper,
        onUpdate = _props$render.onUpdate;

    popper.setAttribute('data-tippy-root', '');
    popper.id = "tippy-" + instance.id;
    instance.popper = popper;
    reference._tippy = instance;
    popper._tippy = instance;
    var pluginsHooks = plugins.map(function (plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference.hasAttribute('aria-expanded');
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook('onCreate', [instance]);

    if (props.showOnCreate) {
      scheduleShow();
    } // Prevent a tippy with a delay from hiding if the cursor left then returned
    // before it started hiding


    popper.addEventListener('mouseenter', function () {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper.addEventListener('mouseleave', function (event) {
      if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
        debouncedOnMouseMove(event);
      }
    });
    return instance; // ===========================================================================
    // 🔒 Private methods
    // ===========================================================================

    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }

    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === 'hold';
    }

    function getIsDefaultRenderFn() {
      var _instance$props$rende; // @ts-ignore


      return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
    }

    function getCurrentTarget() {
      return currentTarget || reference;
    }

    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }

    function getDefaultTemplateChildren() {
      return getChildren(popper);
    }

    function getDelay(isShow) {
      // For touch or keyboard input, force `0` delay for UX reasons
      // Also if the instance is mounted but not visible (transitioning out),
      // ignore delay
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
        return 0;
      }

      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }

    function handleStyles() {
      popper.style.pointerEvents = instance.props.interactive && instance.state.isVisible ? '' : 'none';
      popper.style.zIndex = "" + instance.props.zIndex;
    }

    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }

      pluginsHooks.forEach(function (pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(void 0, args);
        }
      });

      if (shouldInvokePropsHook) {
        var _instance$props;

        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }

    function handleAriaContentAttribute() {
      var aria = instance.props.aria;

      if (!aria.content) {
        return;
      }

      var attr = "aria-" + aria.content;
      var id = popper.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        var currentValue = node.getAttribute(attr);

        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
        } else {
          var nextValue = currentValue && currentValue.replace(id, '').trim();

          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }

    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        if (instance.props.interactive) {
          node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
        } else {
          node.removeAttribute('aria-expanded');
        }
      });
    }

    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
        return listener !== debouncedOnMouseMove;
      });
    }

    function onDocumentPress(event) {
      // Moved finger to scroll instead of an intentional tap outside
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === 'mousedown') {
          return;
        }
      } // Clicked on interactive popper


      if (instance.props.interactive && popper.contains(event.target)) {
        return;
      } // Clicked on the event listeners target


      if (getCurrentTarget().contains(event.target)) {
        if (currentInput.isTouch) {
          return;
        }

        if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
          return;
        }
      } else {
        invokeHook('onClickOutside', [instance, event]);
      }

      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
        // currentTarget. This lets a tippy with `focus` trigger know that it
        // should not show

        didHideDueToDocumentMouseDown = true;
        setTimeout(function () {
          didHideDueToDocumentMouseDown = false;
        }); // The listener gets added in `scheduleShow()`, but this may be hiding it
        // before it shows, and hide()'s early bail-out behavior can prevent it
        // from being cleaned up

        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }

    function onTouchMove() {
      didTouchMove = true;
    }

    function onTouchStart() {
      didTouchMove = false;
    }

    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener('mousedown', onDocumentPress, true);
      doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener('mousedown', onDocumentPress, true);
      doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function () {
        if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
          callback();
        }
      });
    }

    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }

    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;

      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, 'remove', listener);
          callback();
        }
      } // Make callback synchronous if duration is 0
      // `transitionend` won't fire otherwise


      if (duration === 0) {
        return callback();
      }

      updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
      updateTransitionEndListener(box, 'add', listener);
      currentTransitionEndListener = listener;
    }

    function on(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node: node,
          eventType: eventType,
          handler: handler,
          options: options
        });
      });
    }

    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on('touchstart', onTrigger, {
          passive: true
        });
        on('touchend', onMouseLeave, {
          passive: true
        });
      }

      splitBySpaces(instance.props.trigger).forEach(function (eventType) {
        if (eventType === 'manual') {
          return;
        }

        on(eventType, onTrigger);

        switch (eventType) {
          case 'mouseenter':
            on('mouseleave', onMouseLeave);
            break;

          case 'focus':
            on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);
            break;

          case 'focusin':
            on('focusout', onBlurOrFocusOut);
            break;
        }
      });
    }

    function removeListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function onTrigger(event) {
      var _lastTriggerEvent;

      var shouldScheduleClickHide = false;

      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }

      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();

      if (!instance.state.isVisible && isMouseEvent(event)) {
        // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved
        mouseMoveListeners.forEach(function (listener) {
          return listener(event);
        });
      } // Toggle show/hide when clicking click-triggered tooltips


      if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }

      if (event.type === 'click') {
        isVisibleFromClick = !shouldScheduleClickHide;
      }

      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }

    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

      if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
        return;
      }

      var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
        var _instance$popperInsta;

        var instance = popper._tippy;
        var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

        if (state) {
          return {
            popperRect: popper.getBoundingClientRect(),
            popperState: state,
            props: props
          };
        }

        return null;
      }).filter(Boolean);

      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }

    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

      if (shouldBail) {
        return;
      }

      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }

      scheduleHide(event);
    }

    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
        return;
      } // If focus was moved to within the popper


      if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
        return;
      }

      scheduleHide(event);
    }

    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
    }

    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props,
          popperOptions = _instance$props2.popperOptions,
          placement = _instance$props2.placement,
          offset = _instance$props2.offset,
          getReferenceClientRect = _instance$props2.getReferenceClientRect,
          moveTransition = _instance$props2.moveTransition;
      var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference;
      var tippyModifier = {
        name: '$$tippy',
        enabled: true,
        phase: 'beforeWrite',
        requires: ['computeStyles'],
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                box = _getDefaultTemplateCh.box;

            ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
              if (attr === 'placement') {
                box.setAttribute('data-placement', state.placement);
              } else {
                if (state.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, '');
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: 'offset',
        options: {
          offset: offset
        }
      }, {
        name: 'preventOverflow',
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: 'flip',
        options: {
          padding: 5
        }
      }, {
        name: 'computeStyles',
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];

      if (getIsDefaultRenderFn() && arrow) {
        modifiers.push({
          name: 'arrow',
          options: {
            element: arrow,
            padding: 3
          }
        });
      }

      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = core.createPopper(computedReference, popper, Object.assign({}, popperOptions, {
        placement: placement,
        onFirstUpdate: onFirstUpdate,
        modifiers: modifiers
      }));
    }

    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }

    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
      // it's directly after the reference element so the elements inside the
      // tippy can be tabbed to
      // If there are clipping issues, the user can specify a different appendTo
      // and ensure focus management is handled correctly manually

      var node = getCurrentTarget();

      if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      } // The popper element needs to exist on the DOM before its position can be
      // updated as Popper needs to read its dimensions


      if (!parentNode.contains(popper)) {
        parentNode.appendChild(popper);
      }

      createPopperInstance();
      /* istanbul ignore else */

      {
        // Accessibility check
        warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
      }
    }

    function getNestedPopperTree() {
      return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
    }

    function scheduleShow(event) {
      instance.clearDelayTimeouts();

      if (event) {
        invokeHook('onTrigger', [instance, event]);
      }

      addDocumentPress();
      var delay = getDelay(true);

      var _getNormalizedTouchSe = getNormalizedTouchSettings(),
          touchValue = _getNormalizedTouchSe[0],
          touchDelay = _getNormalizedTouchSe[1];

      if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
        delay = touchDelay;
      }

      if (delay) {
        showTimeout = setTimeout(function () {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }

    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook('onUntrigger', [instance, event]);

      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      } // For interactive tippies, scheduleHide is added to a document.body handler
      // from onMouseLeave so must intercept scheduled hides from mousemove/leave
      // events when trigger contains mouseenter and click, and the tip is
      // currently shown as a result of a click.


      if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }

      var delay = getDelay(false);

      if (delay) {
        hideTimeout = setTimeout(function () {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        // Fixes a `transitionend` problem when it fires 1 frame too
        // late sometimes, we don't want hide() to be called.
        scheduleHideAnimationFrame = requestAnimationFrame(function () {
          instance.hide();
        });
      }
    } // ===========================================================================
    // 🔑 Public methods
    // ===========================================================================


    function enable() {
      instance.state.isEnabled = true;
    }

    function disable() {
      // Disabling the instance should also hide it
      // https://github.com/atomiks/tippy.js-react/issues/106
      instance.hide();
      instance.state.isEnabled = false;
    }

    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }

    function setProps(partialProps) {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
      }

      if (instance.state.isDestroyed) {
        return;
      }

      invokeHook('onBeforeUpdate', [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference, Object.assign({}, instance.props, {}, partialProps, {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();

      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
      } // Ensure stale aria-expanded attributes are removed


      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
          node.removeAttribute('aria-expanded');
        });
      } else if (nextProps.triggerTarget) {
        reference.removeAttribute('aria-expanded');
      }

      handleAriaExpandedAttribute();
      handleStyles();

      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }

      if (instance.popperInstance) {
        createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
        // and the nested ones get re-rendered first.
        // https://github.com/atomiks/tippyjs-react/issues/177
        // TODO: find a cleaner / more efficient solution(!)

        getNestedPopperTree().forEach(function (nestedPopper) {
          // React (and other UI libs likely) requires a rAF wrapper as it flushes
          // its work in one
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }

      invokeHook('onAfterUpdate', [instance, partialProps]);
    }

    function setContent(content) {
      instance.setProps({
        content: content
      });
    }

    function show() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
      } // Early bail-out

      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      } // Normalize `disabled` behavior across browsers.
      // Firefox allows events on disabled elements, but Chrome doesn't.
      // Using a wrapper element (i.e. <span>) is recommended.


      if (getCurrentTarget().hasAttribute('disabled')) {
        return;
      }

      invokeHook('onShow', [instance], false);

      if (instance.props.onShow(instance) === false) {
        return;
      }

      instance.state.isVisible = true;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'visible';
      }

      handleStyles();
      addDocumentPress();

      if (!instance.state.isMounted) {
        popper.style.transition = 'none';
      } // If flipping to the opposite side after hiding at least once, the
      // animation will use the wrong placement without resetting the duration


      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh2.box,
            content = _getDefaultTemplateCh2.content;

        setTransitionDuration([box, content], 0);
      }

      onFirstUpdate = function onFirstUpdate() {
        var _instance$popperInsta2;

        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }

        ignoreOnFirstUpdate = true; // reflow

        void popper.offsetHeight;
        popper.style.transition = instance.props.moveTransition;

        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
              _box = _getDefaultTemplateCh3.box,
              _content = _getDefaultTemplateCh3.content;

          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], 'visible');
        }

        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
        // popper has been positioned for the first time

        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        instance.state.isMounted = true;
        invokeHook('onMount', [instance]);

        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function () {
            instance.state.isShown = true;
            invokeHook('onShown', [instance]);
          });
        }
      };

      mount();
    }

    function hide() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
      } // Early bail-out

      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }

      invokeHook('onHide', [instance], false);

      if (instance.props.onHide(instance) === false) {
        return;
      }

      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'hidden';
      }

      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles();

      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh4.box,
            content = _getDefaultTemplateCh4.content;

        if (instance.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], 'hidden');
        }
      }

      handleAriaContentAttribute();
      handleAriaExpandedAttribute();

      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }

    function hideWithInteractivity(event) {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
      }
      getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }

    function unmount() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
      }

      if (instance.state.isVisible) {
        instance.hide();
      }

      if (!instance.state.isMounted) {
        return;
      }

      destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
      // tree by default. This seems mainly for interactive tippies, but we should
      // find a workaround if possible

      getNestedPopperTree().forEach(function (nestedPopper) {
        nestedPopper._tippy.unmount();
      });

      if (popper.parentNode) {
        popper.parentNode.removeChild(popper);
      }

      mountedInstances = mountedInstances.filter(function (i) {
        return i !== instance;
      });
      instance.state.isMounted = false;
      invokeHook('onHidden', [instance]);
    }

    function destroy() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
      }

      if (instance.state.isDestroyed) {
        return;
      }

      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference._tippy;
      instance.state.isDestroyed = true;
      invokeHook('onDestroy', [instance]);
    }
  }

  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }

    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    /* istanbul ignore else */

    {
      validateTargets(targets);
      validateProps(optionalProps, plugins);
    }
    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins: plugins
    });
    var elements = getArrayOfElements(targets);
    /* istanbul ignore else */

    {
      var isSingleContentElement = isElement(passedProps.content);
      var isMoreThanOneReferenceElement = elements.length > 1;
      warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
    }
    var instances = elements.reduce(function (acc, reference) {
      var instance = reference && createTippy(reference, passedProps);

      if (instance) {
        acc.push(instance);
      }

      return acc;
    }, []);
    return isElement(targets) ? instances[0] : instances;
  }

  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;

  var hideAll = function hideAll(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        excludedReferenceOrInstance = _ref.exclude,
        duration = _ref.duration;

    mountedInstances.forEach(function (instance) {
      var isExcluded = false;

      if (excludedReferenceOrInstance) {
        isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
      }

      if (!isExcluded) {
        var originalDuration = instance.props.duration;
        instance.setProps({
          duration: duration
        });
        instance.hide();

        if (!instance.state.isDestroyed) {
          instance.setProps({
            duration: originalDuration
          });
        }
      }
    });
  }; // every time the popper is destroyed (i.e. a new target), removing the styles
  // and causing transitions to break for singletons when the console is open, but
  // most notably for non-transform styles being used, `gpuAcceleration: false`.


  var applyStylesModifier = Object.assign({}, core.applyStyles, {
    effect: function effect(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      } // intentionally return no cleanup function
      // return () => { ... }

    }
  });

  var createSingleton = function createSingleton(tippyInstances, optionalProps) {
    var _optionalProps$popper;

    if (optionalProps === void 0) {
      optionalProps = {};
    }
    /* istanbul ignore else */


    {
      errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of', 'tippy instances. The passed value was', String(tippyInstances)].join(' '));
    }
    var individualInstances = tippyInstances;
    var references = [];
    var currentTarget;
    var overrides = optionalProps.overrides;
    var interceptSetPropsCleanups = [];
    var shownOnCreate = false;

    function setReferences() {
      references = individualInstances.map(function (instance) {
        return instance.reference;
      });
    }

    function enableInstances(isEnabled) {
      individualInstances.forEach(function (instance) {
        if (isEnabled) {
          instance.enable();
        } else {
          instance.disable();
        }
      });
    }

    function interceptSetProps(singleton) {
      return individualInstances.map(function (instance) {
        var originalSetProps = instance.setProps;

        instance.setProps = function (props) {
          originalSetProps(props);

          if (instance.reference === currentTarget) {
            singleton.setProps(props);
          }
        };

        return function () {
          instance.setProps = originalSetProps;
        };
      });
    } // have to pass singleton, as it maybe undefined on first call


    function prepareInstance(singleton, target) {
      var index = references.indexOf(target); // bail-out

      if (target === currentTarget) {
        return;
      }

      currentTarget = target;
      var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {
        acc[prop] = individualInstances[index].props[prop];
        return acc;
      }, {});
      singleton.setProps(Object.assign({}, overrideProps, {
        getReferenceClientRect: typeof overrideProps.getReferenceClientRect === 'function' ? overrideProps.getReferenceClientRect : function () {
          return target.getBoundingClientRect();
        }
      }));
    }

    enableInstances(false);
    setReferences();
    var plugin = {
      fn: function fn() {
        return {
          onDestroy: function onDestroy() {
            enableInstances(true);
          },
          onHidden: function onHidden() {
            currentTarget = null;
          },
          onClickOutside: function onClickOutside(instance) {
            if (instance.props.showOnCreate && !shownOnCreate) {
              shownOnCreate = true;
              currentTarget = null;
            }
          },
          onShow: function onShow(instance) {
            if (instance.props.showOnCreate && !shownOnCreate) {
              shownOnCreate = true;
              prepareInstance(instance, references[0]);
            }
          },
          onTrigger: function onTrigger(instance, event) {
            prepareInstance(instance, event.currentTarget);
          }
        };
      }
    };
    var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {
      plugins: [plugin].concat(optionalProps.plugins || []),
      triggerTarget: references,
      popperOptions: Object.assign({}, optionalProps.popperOptions, {
        modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [applyStylesModifier])
      })
    }));
    var originalShow = singleton.show;

    singleton.show = function (target) {
      originalShow(); // first time, showOnCreate or programmatic call with no params
      // default to showing first instance

      if (!currentTarget && target == null) {
        return prepareInstance(singleton, references[0]);
      } // triggered from event (do nothing as prepareInstance already called by onTrigger)
      // programmatic call with no params when already visible (do nothing again)


      if (currentTarget && target == null) {
        return;
      } // target is index of instance


      if (typeof target === 'number') {
        return references[target] && prepareInstance(singleton, references[target]);
      } // target is a child tippy instance


      if (individualInstances.includes(target)) {
        var ref = target.reference;
        return prepareInstance(singleton, ref);
      } // target is a ReferenceElement


      if (references.includes(target)) {
        return prepareInstance(singleton, target);
      }
    };

    singleton.showNext = function () {
      var first = references[0];

      if (!currentTarget) {
        return singleton.show(0);
      }

      var index = references.indexOf(currentTarget);
      singleton.show(references[index + 1] || first);
    };

    singleton.showPrevious = function () {
      var last = references[references.length - 1];

      if (!currentTarget) {
        return singleton.show(last);
      }

      var index = references.indexOf(currentTarget);
      var target = references[index - 1] || last;
      singleton.show(target);
    };

    var originalSetProps = singleton.setProps;

    singleton.setProps = function (props) {
      overrides = props.overrides || overrides;
      originalSetProps(props);
    };

    singleton.setInstances = function (nextInstances) {
      enableInstances(true);
      interceptSetPropsCleanups.forEach(function (fn) {
        return fn();
      });
      individualInstances = nextInstances;
      enableInstances(false);
      setReferences();
      interceptSetProps(singleton);
      singleton.setProps({
        triggerTarget: references
      });
    };

    interceptSetPropsCleanups = interceptSetProps(singleton);
    return singleton;
  };

  var BUBBLING_EVENTS_MAP = {
    mouseover: 'mouseenter',
    focusin: 'focus',
    click: 'click'
  };
  /**
   * Creates a delegate instance that controls the creation of tippy instances
   * for child elements (`target` CSS selector).
   */

  function delegate(targets, props) {
    /* istanbul ignore else */
    {
      errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));
    }
    var listeners = [];
    var childTippyInstances = [];
    var disabled = false;
    var target = props.target;
    var nativeProps = removeProperties(props, ['target']);
    var parentProps = Object.assign({}, nativeProps, {
      trigger: 'manual',
      touch: false
    });
    var childProps = Object.assign({}, nativeProps, {
      showOnCreate: true
    });
    var returnValue = tippy(targets, parentProps);
    var normalizedReturnValue = normalizeToArray(returnValue);

    function onTrigger(event) {
      if (!event.target || disabled) {
        return;
      }

      var targetNode = event.target.closest(target);

      if (!targetNode) {
        return;
      } // Get relevant trigger with fallbacks:
      // 1. Check `data-tippy-trigger` attribute on target node
      // 2. Fallback to `trigger` passed to `delegate()`
      // 3. Fallback to `defaultProps.trigger`


      var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore

      if (targetNode._tippy) {
        return;
      }

      if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {
        return;
      }

      if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0) {
        return;
      }

      var instance = tippy(targetNode, childProps);

      if (instance) {
        childTippyInstances = childTippyInstances.concat(instance);
      }
    }

    function on(node, eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      node.addEventListener(eventType, handler, options);
      listeners.push({
        node: node,
        eventType: eventType,
        handler: handler,
        options: options
      });
    }

    function addEventListeners(instance) {
      var reference = instance.reference;
      on(reference, 'touchstart', onTrigger, TOUCH_OPTIONS);
      on(reference, 'mouseover', onTrigger);
      on(reference, 'focusin', onTrigger);
      on(reference, 'click', onTrigger);
    }

    function removeEventListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function applyMutations(instance) {
      var originalDestroy = instance.destroy;
      var originalEnable = instance.enable;
      var originalDisable = instance.disable;

      instance.destroy = function (shouldDestroyChildInstances) {
        if (shouldDestroyChildInstances === void 0) {
          shouldDestroyChildInstances = true;
        }

        if (shouldDestroyChildInstances) {
          childTippyInstances.forEach(function (instance) {
            instance.destroy();
          });
        }

        childTippyInstances = [];
        removeEventListeners();
        originalDestroy();
      };

      instance.enable = function () {
        originalEnable();
        childTippyInstances.forEach(function (instance) {
          return instance.enable();
        });
        disabled = false;
      };

      instance.disable = function () {
        originalDisable();
        childTippyInstances.forEach(function (instance) {
          return instance.disable();
        });
        disabled = true;
      };

      addEventListeners(instance);
    }

    normalizedReturnValue.forEach(applyMutations);
    return returnValue;
  }

  var animateFill = {
    name: 'animateFill',
    defaultValue: false,
    fn: function fn(instance) {
      var _instance$props$rende; // @ts-ignore


      if (!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy)) {
        {
          errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');
        }
        return {};
      }

      var _getChildren = getChildren(instance.popper),
          box = _getChildren.box,
          content = _getChildren.content;

      var backdrop = instance.props.animateFill ? createBackdropElement() : null;
      return {
        onCreate: function onCreate() {
          if (backdrop) {
            box.insertBefore(backdrop, box.firstElementChild);
            box.setAttribute('data-animatefill', '');
            box.style.overflow = 'hidden';
            instance.setProps({
              arrow: false,
              animation: 'shift-away'
            });
          }
        },
        onMount: function onMount() {
          if (backdrop) {
            var transitionDuration = box.style.transitionDuration;
            var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the
            // tooltip element. `clip-path` is the other alternative but is not
            // well-supported and is buggy on some devices.

            content.style.transitionDelay = Math.round(duration / 10) + "ms";
            backdrop.style.transitionDuration = transitionDuration;
            setVisibilityState([backdrop], 'visible');
          }
        },
        onShow: function onShow() {
          if (backdrop) {
            backdrop.style.transitionDuration = '0ms';
          }
        },
        onHide: function onHide() {
          if (backdrop) {
            setVisibilityState([backdrop], 'hidden');
          }
        }
      };
    }
  };

  function createBackdropElement() {
    var backdrop = div();
    backdrop.className = BACKDROP_CLASS;
    setVisibilityState([backdrop], 'hidden');
    return backdrop;
  }

  var mouseCoords = {
    clientX: 0,
    clientY: 0
  };
  var activeInstances = [];

  function storeMouseCoords(_ref) {
    var clientX = _ref.clientX,
        clientY = _ref.clientY;
    mouseCoords = {
      clientX: clientX,
      clientY: clientY
    };
  }

  function addMouseCoordsListener(doc) {
    doc.addEventListener('mousemove', storeMouseCoords);
  }

  function removeMouseCoordsListener(doc) {
    doc.removeEventListener('mousemove', storeMouseCoords);
  }

  var followCursor = {
    name: 'followCursor',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference;
      var doc = getOwnerDocument(instance.props.triggerTarget || reference);
      var isInternalUpdate = false;
      var wasFocusEvent = false;
      var isUnmounted = true;
      var prevProps = instance.props;

      function getIsInitialBehavior() {
        return instance.props.followCursor === 'initial' && instance.state.isVisible;
      }

      function addListener() {
        doc.addEventListener('mousemove', onMouseMove);
      }

      function removeListener() {
        doc.removeEventListener('mousemove', onMouseMove);
      }

      function unsetGetReferenceClientRect() {
        isInternalUpdate = true;
        instance.setProps({
          getReferenceClientRect: null
        });
        isInternalUpdate = false;
      }

      function onMouseMove(event) {
        // If the instance is interactive, avoid updating the position unless it's
        // over the reference element
        var isCursorOverReference = event.target ? reference.contains(event.target) : true;
        var followCursor = instance.props.followCursor;
        var clientX = event.clientX,
            clientY = event.clientY;
        var rect = reference.getBoundingClientRect();
        var relativeX = clientX - rect.left;
        var relativeY = clientY - rect.top;

        if (isCursorOverReference || !instance.props.interactive) {
          instance.setProps({
            getReferenceClientRect: function getReferenceClientRect() {
              var rect = reference.getBoundingClientRect();
              var x = clientX;
              var y = clientY;

              if (followCursor === 'initial') {
                x = rect.left + relativeX;
                y = rect.top + relativeY;
              }

              var top = followCursor === 'horizontal' ? rect.top : y;
              var right = followCursor === 'vertical' ? rect.right : x;
              var bottom = followCursor === 'horizontal' ? rect.bottom : y;
              var left = followCursor === 'vertical' ? rect.left : x;
              return {
                width: right - left,
                height: bottom - top,
                top: top,
                right: right,
                bottom: bottom,
                left: left
              };
            }
          });
        }
      }

      function create() {
        if (instance.props.followCursor) {
          activeInstances.push({
            instance: instance,
            doc: doc
          });
          addMouseCoordsListener(doc);
        }
      }

      function destroy() {
        activeInstances = activeInstances.filter(function (data) {
          return data.instance !== instance;
        });

        if (activeInstances.filter(function (data) {
          return data.doc === doc;
        }).length === 0) {
          removeMouseCoordsListener(doc);
        }
      }

      return {
        onCreate: create,
        onDestroy: destroy,
        onBeforeUpdate: function onBeforeUpdate() {
          prevProps = instance.props;
        },
        onAfterUpdate: function onAfterUpdate(_, _ref2) {
          var followCursor = _ref2.followCursor;

          if (isInternalUpdate) {
            return;
          }

          if (followCursor !== undefined && prevProps.followCursor !== followCursor) {
            destroy();

            if (followCursor) {
              create();

              if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {
                addListener();
              }
            } else {
              removeListener();
              unsetGetReferenceClientRect();
            }
          }
        },
        onMount: function onMount() {
          if (instance.props.followCursor && !wasFocusEvent) {
            if (isUnmounted) {
              onMouseMove(mouseCoords);
              isUnmounted = false;
            }

            if (!getIsInitialBehavior()) {
              addListener();
            }
          }
        },
        onTrigger: function onTrigger(_, event) {
          if (isMouseEvent(event)) {
            mouseCoords = {
              clientX: event.clientX,
              clientY: event.clientY
            };
          }

          wasFocusEvent = event.type === 'focus';
        },
        onHidden: function onHidden() {
          if (instance.props.followCursor) {
            unsetGetReferenceClientRect();
            removeListener();
            isUnmounted = true;
          }
        }
      };
    }
  };

  function getProps(props, modifier) {
    var _props$popperOptions;

    return {
      popperOptions: Object.assign({}, props.popperOptions, {
        modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {
          var name = _ref.name;
          return name !== modifier.name;
        }), [modifier])
      })
    };
  }

  var inlinePositioning = {
    name: 'inlinePositioning',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference;

      function isEnabled() {
        return !!instance.props.inlinePositioning;
      }

      var placement;
      var cursorRectIndex = -1;
      var isInternalUpdate = false;
      var modifier = {
        name: 'tippyInlinePositioning',
        enabled: true,
        phase: 'afterWrite',
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (isEnabled()) {
            if (placement !== state.placement) {
              instance.setProps({
                getReferenceClientRect: function getReferenceClientRect() {
                  return _getReferenceClientRect(state.placement);
                }
              });
            }

            placement = state.placement;
          }
        }
      };

      function _getReferenceClientRect(placement) {
        return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);
      }

      function setInternalProps(partialProps) {
        isInternalUpdate = true;
        instance.setProps(partialProps);
        isInternalUpdate = false;
      }

      function addModifier() {
        if (!isInternalUpdate) {
          setInternalProps(getProps(instance.props, modifier));
        }
      }

      return {
        onCreate: addModifier,
        onAfterUpdate: addModifier,
        onTrigger: function onTrigger(_, event) {
          if (isMouseEvent(event)) {
            var rects = arrayFrom(instance.reference.getClientRects());
            var cursorRect = rects.find(function (rect) {
              return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;
            });
            cursorRectIndex = rects.indexOf(cursorRect);
          }
        },
        onUntrigger: function onUntrigger() {
          cursorRectIndex = -1;
        }
      };
    }
  };

  function getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {
    // Not an inline element, or placement is not yet known
    if (clientRects.length < 2 || currentBasePlacement === null) {
      return boundingRect;
    } // There are two rects and they are disjoined


    if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {
      return clientRects[cursorRectIndex] || boundingRect;
    }

    switch (currentBasePlacement) {
      case 'top':
      case 'bottom':
        {
          var firstRect = clientRects[0];
          var lastRect = clientRects[clientRects.length - 1];
          var isTop = currentBasePlacement === 'top';
          var top = firstRect.top;
          var bottom = lastRect.bottom;
          var left = isTop ? firstRect.left : lastRect.left;
          var right = isTop ? firstRect.right : lastRect.right;
          var width = right - left;
          var height = bottom - top;
          return {
            top: top,
            bottom: bottom,
            left: left,
            right: right,
            width: width,
            height: height
          };
        }

      case 'left':
      case 'right':
        {
          var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {
            return rects.left;
          }));
          var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {
            return rects.right;
          }));
          var measureRects = clientRects.filter(function (rect) {
            return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;
          });
          var _top = measureRects[0].top;
          var _bottom = measureRects[measureRects.length - 1].bottom;
          var _left = minLeft;
          var _right = maxRight;

          var _width = _right - _left;

          var _height = _bottom - _top;

          return {
            top: _top,
            bottom: _bottom,
            left: _left,
            right: _right,
            width: _width,
            height: _height
          };
        }

      default:
        {
          return boundingRect;
        }
    }
  }

  var sticky = {
    name: 'sticky',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference,
          popper = instance.popper;

      function getReference() {
        return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;
      }

      function shouldCheck(value) {
        return instance.props.sticky === true || instance.props.sticky === value;
      }

      var prevRefRect = null;
      var prevPopRect = null;

      function updatePosition() {
        var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
        var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;

        if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
          if (instance.popperInstance) {
            instance.popperInstance.update();
          }
        }

        prevRefRect = currentRefRect;
        prevPopRect = currentPopRect;

        if (instance.state.isMounted) {
          requestAnimationFrame(updatePosition);
        }
      }

      return {
        onMount: function onMount() {
          if (instance.props.sticky) {
            updatePosition();
          }
        }
      };
    }
  };

  function areRectsDifferent(rectA, rectB) {
    if (rectA && rectB) {
      return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
    }

    return true;
  }

  if (isBrowser) {
    injectCSS(css);
  }

  tippy.setDefaultProps({
    plugins: [animateFill, followCursor, inlinePositioning, sticky],
    render: render
  });
  tippy.createSingleton = createSingleton;
  tippy.delegate = delegate;
  tippy.hideAll = hideAll;
  tippy.roundArrow = ROUND_ARROW;
  return tippy;
});
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @overview better-dom: Live extension playground
 * @version 2.1.1 Tue, 16 Dec 2014 14:27:26 GMT
 * @copyright 2013-2014 Maksim Chemerisuk
 * @license MIT
 * @see https://github.com/chemerisuk/better-dom
 */
(function () {
  "use strict";

  var SLICE$0 = Array.prototype.slice;
  var WINDOW = window;
  var DOCUMENT = document;
  var HTML = DOCUMENT.documentElement;
  var userAgent = WINDOW.navigator.userAgent;
  var jscriptVersion = WINDOW.ScriptEngineMajorVersion;
  var JSCRIPT_VERSION = jscriptVersion && jscriptVersion();
  var LEGACY_ANDROID = ~userAgent.indexOf("Android") && userAgent.indexOf("Chrome") < 0;
  var WEBKIT_PREFIX = WINDOW.WebKitAnimationEvent ? "-webkit-" : "";
  var CUSTOM_EVENT_TYPE = "dataavailable";

  function $NullElement() {}

  function $Element(node) {
    if (this instanceof $Element) {
      if (node) {
        // use a generated property to store a reference
        // to the wrapper for circular object binding
        node["__2001001__"] = this;
        this[0] = node;
        this._ = {
          "handler2001001": [],
          "watcher2001001": {},
          "extension2001001": [],
          "context2001001": {}
        };
      }
    } else if (node) {
      var cached = node["__2001001__"]; // create a wrapper only once for each native element

      return cached ? cached : new $Element(node);
    } else {
      return new $NullElement();
    }
  }

  $Element.prototype = {
    constructor: function constructor(node) {
      // filter non elements like text nodes, comments etc.
      return $Element(node && node.nodeType === 1 ? node : null);
    },
    toString: function toString() {
      var node = this[0];
      return node ? "<" + node.tagName.toLowerCase() + ">" : "";
    },
    version: "2.1.1"
  };
  $NullElement.prototype = new $Element();

  function $Document(node) {
    if (node && node.nodeType === 9) {
      node = node.documentElement;
    }

    $Element.call(this, node);
  }

  $Document.prototype = new $Element();
  var DOM = new $Document(DOCUMENT);
  var util$index$$arrayProto = Array.prototype;
  var util$index$$default = {
    computeStyle: function computeStyle(node) {
      if (JSCRIPT_VERSION < 9) {
        return node.currentStyle;
      } else {
        return node.ownerDocument.defaultView.getComputedStyle(node);
      }
    },
    injectElement: function injectElement(node) {
      if (node && node.nodeType === 1) {
        return node.ownerDocument.getElementsByTagName("head")[0].appendChild(node);
      }
    },
    // utilites
    every: util$index$$arrayProto.every,
    each: util$index$$arrayProto.forEach,
    filter: util$index$$arrayProto.filter,
    map: util$index$$arrayProto.map,
    slice: util$index$$arrayProto.slice,
    isArray: Array.isArray,
    keys: Object.keys,
    safeCall: function safeCall(context, fn, arg1, arg2) {
      if (typeof fn === "string") fn = context[fn];

      try {
        return fn.call(context, arg1, arg2);
      } catch (err) {
        WINDOW.setTimeout(function () {
          throw err;
        }, 1);
        return false;
      }
    },
    register: function register(mixins, defaultBehavior) {
      defaultBehavior = defaultBehavior || function () {};

      Object.keys(mixins).forEach(function (key) {
        var defaults = defaultBehavior(key) || function () {
          return this;
        };

        $Element.prototype[key] = mixins[key];
        $NullElement.prototype[key] = defaults;
      });
    },
    getLegacyFile: function getLegacyFile(type) {
      if (JSCRIPT_VERSION < 10) {
        var legacyScripts = util$index$$arrayProto.filter.call(DOCUMENT.scripts, function (el) {
          return el.src.indexOf("better-dom-legacy.js") >= 0;
        });

        if (legacyScripts.length < 1) {
          throw new Error("In order to use live extensions in IE < 10 you have to include extra files. See https://github.com/chemerisuk/better-dom#notes-about-old-ies for details.");
        }

        return legacyScripts[0].src.replace(".js", "." + type);
      }
    }
  }; // customized errors

  function errors$$MethodError(methodName, args) {
    var type = arguments[2];
    if (type === void 0) type = "$Element";
    var url = "http://chemerisuk.github.io/better-dom/" + type + ".html#" + methodName,
        line = "invalid call `" + type + (type === "DOM" ? "." : "#") + methodName + "(";
    line += util$index$$default.map.call(args, function (arg) {
      return String(arg);
    }).join(", ") + ")`;";
    this.message = line + " check " + url + " to verify the function arguments";
  }

  errors$$MethodError.prototype = new TypeError();

  function errors$$StaticMethodError(methodName, args) {
    errors$$MethodError.call(this, methodName, args, "DOM");
  }

  errors$$StaticMethodError.prototype = new TypeError();

  var // operator type / priority object
  global$emmet$$operators = {
    "(": 1,
    ")": 2,
    "^": 3,
    ">": 4,
    "+": 5,
    "*": 6,
    "`": 7,
    "[": 8,
    ".": 8,
    "#": 8
  },
      global$emmet$$reParse = /`[^`]*`|\[[^\]]*\]|\.[^()>^+*`[#]+|[^()>^+*`[#.]+|\^+|./g,
      global$emmet$$reAttr = /\s*([\w\-]+)(?:=((?:`([^`]*)`)|[^\s]*))?/g,
      global$emmet$$reIndex = /(\$+)(?:@(-)?(\d+)?)?/g,
      global$emmet$$reDot = /\./g,
      global$emmet$$reDollar = /\$/g,
      global$emmet$$tagCache = {
    "": ""
  },
      global$emmet$$normalizeAttrs = function global$emmet$$normalizeAttrs(_, name, value, rawValue) {
    // try to detemnie which kind of quotes to use
    var quote = value && value.indexOf("\"") >= 0 ? "'" : "\"";

    if (typeof rawValue === "string") {
      // grab unquoted value for smart quotes
      value = rawValue;
    } else if (typeof value !== "string") {
      // handle boolean attributes by using name as value
      value = name;
    } // always wrap attribute values with quotes even they don't exist


    return " " + name + "=" + quote + value + quote;
  },
      global$emmet$$injectTerm = function global$emmet$$injectTerm(term, end) {
    return function (html) {
      // find index of where to inject the term
      var index = end ? html.lastIndexOf("<") : html.indexOf(">"); // inject the term into the HTML string

      return html.slice(0, index) + term + html.slice(index);
    };
  },
      global$emmet$$makeTerm = function global$emmet$$makeTerm(tag) {
    return global$emmet$$tagCache[tag] || (global$emmet$$tagCache[tag] = "<" + tag + "></" + tag + ">");
  },
      global$emmet$$makeIndexedTerm = function global$emmet$$makeIndexedTerm(n, term) {
    var result = Array(n),
        i;

    for (i = 0; i < n; ++i) {
      result[i] = term.replace(global$emmet$$reIndex, function (expr, fmt, sign, base) {
        var index = (sign ? n - i - 1 : i) + (base ? +base : 1); // handle zero-padded index values, like $$$ etc.

        return (fmt + index).slice(-fmt.length).replace(global$emmet$$reDollar, "0");
      });
    }

    return result;
  },
      global$emmet$$reUnsafe = /[&<>"']/g,
      // http://stackoverflow.com/questions/6234773/can-i-escape-html-special-chars-in-javascript
  global$emmet$$safeSymbol = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    "\"": "&quot;",
    "'": "&#039;"
  }; // populate empty tag names with result


  "area base br col hr img input link meta param command keygen source".split(" ").forEach(function (tag) {
    global$emmet$$tagCache[tag] = "<" + tag + ">";
  });

  DOM.emmet = function (template, varMap) {
    var $D$0;
    var $D$1;
    var $D$2;
    if (typeof template !== "string") throw new errors$$StaticMethodError("emmet", arguments);
    if (varMap) template = DOM.format(template, varMap);

    if (template in global$emmet$$tagCache) {
      return global$emmet$$tagCache[template];
    } // transform template string into RPN


    var stack = [],
        output = [];
    $D$2 = template.match(global$emmet$$reParse);
    $D$0 = 0;
    $D$1 = $D$2.length;

    for (var str; $D$0 < $D$1;) {
      str = $D$2[$D$0++];
      var op = str[0];
      var priority = global$emmet$$operators[op];

      if (priority) {
        if (str !== "(") {
          // for ^ operator need to skip > str.length times
          for (var i = 0, n = op === "^" ? str.length : 1; i < n; ++i) {
            while (stack[0] !== op && global$emmet$$operators[stack[0]] >= priority) {
              var head = stack.shift();
              output.push(head); // for ^ operator stop shifting when the first > is found

              if (op === "^" && head === ">") break;
            }
          }
        }

        if (str === ")") {
          stack.shift(); // remove "(" symbol from stack
        } else {
          // handle values inside of `...` and [...] sections
          if (op === "[" || op === "`") {
            output.push(str.slice(1, -1));
          } // handle multiple classes, e.g. a.one.two


          if (op === ".") {
            output.push(str.slice(1).replace(global$emmet$$reDot, " "));
          }

          stack.unshift(op);
        }
      } else {
        output.push(str);
      }
    }

    ;
    $D$0 = $D$1 = $D$2 = void 0;
    output = output.concat(stack); // transform RPN into html nodes

    stack = [];
    $D$0 = 0;
    $D$1 = output.length;

    for (var str$0; $D$0 < $D$1;) {
      str$0 = output[$D$0++];

      if (str$0 in global$emmet$$operators) {
        var value = stack.shift();
        var node = stack.shift();

        if (typeof node === "string") {
          node = [global$emmet$$makeTerm(node)];
        }

        switch (str$0) {
          case ".":
            value = global$emmet$$injectTerm(" class=\"" + value + "\"");
            break;

          case "#":
            value = global$emmet$$injectTerm(" id=\"" + value + "\"");
            break;

          case "[":
            value = global$emmet$$injectTerm(value.replace(global$emmet$$reAttr, global$emmet$$normalizeAttrs));
            break;

          case "*":
            node = global$emmet$$makeIndexedTerm(+value, node.join(""));
            break;

          case "`":
            stack.unshift(node); // escape unsafe HTML symbols

            node = [value.replace(global$emmet$$reUnsafe, function (ch) {
              return global$emmet$$safeSymbol[ch];
            })];
            break;

          default:
            value = typeof value === "string" ? global$emmet$$makeTerm(value) : value.join("");

            if (str$0 === ">") {
              value = global$emmet$$injectTerm(value, true);
            } else {
              node.push(value);
            }

        }

        str$0 = typeof value === "function" ? node.map(value) : node;
      }

      stack.unshift(str$0);
    }

    ;
    $D$0 = $D$1 = void 0;

    if (output.length === 1) {
      // handle single tag case
      output = global$emmet$$makeTerm(stack[0]);
    } else {
      output = stack[0].join("");
    }

    return output;
  };

  var global$emmet$$default = global$emmet$$tagCache;

  var document$create$$makeMethod = function document$create$$makeMethod(all) {
    return function (value, varMap) {
      var doc = this[0].ownerDocument,
          sandbox = this._["sandbox2001001"];

      if (!sandbox) {
        sandbox = doc.createElement("div");
        this._["sandbox2001001"] = sandbox;
      }

      var nodes, el;

      if (value && value in global$emmet$$default) {
        nodes = doc.createElement(value);
        if (all) nodes = [new $Element(nodes)];
      } else {
        value = value.trim();

        if (value[0] === "<" && value[value.length - 1] === ">") {
          value = varMap ? DOM.format(value, varMap) : value;
        } else {
          value = DOM.emmet(value, varMap);
        }

        sandbox.innerHTML = value; // parse input HTML string

        for (nodes = all ? [] : null; el = sandbox.firstChild;) {
          sandbox.removeChild(el); // detach element from the sandbox

          if (el.nodeType === 1) {
            if (all) {
              nodes.push(new $Element(el));
            } else {
              nodes = el;
              break; // stop early, because need only the first element
            }
          }
        }
      }

      return all ? nodes : $Element(nodes);
    };
  };

  $Document.prototype.create = document$create$$makeMethod("");
  $Document.prototype.createAll = document$create$$makeMethod("All");

  $Document.prototype.importScripts = function () {
    var urls = SLICE$0.call(arguments, 0);
    var doc = this[0].ownerDocument;

    var callback = function callback() {
      var arg = urls.shift(),
          argType = _typeof(arg),
          script;

      if (argType === "string") {
        script = doc.createElement("script");
        script.src = arg;
        script.onload = callback;
        script.async = true;
        util$index$$default.injectElement(script);
      } else if (argType === "function") {
        arg();
      } else if (arg) {
        throw new errors$$StaticMethodError("importScripts", arguments);
      }
    };

    callback();
  };

  $Document.prototype.importStyles = function (selector, cssText) {
    var styleSheet = this._["styles2001001"];

    if (!styleSheet) {
      var doc = this[0].ownerDocument,
          styleNode = util$index$$default.injectElement(doc.createElement("style"));
      styleSheet = styleNode.sheet || styleNode.styleSheet; // store object internally

      this._["styles2001001"] = styleSheet;
    }

    if (typeof selector !== "string" || typeof cssText !== "string") {
      throw new errors$$StaticMethodError("importStyles", arguments);
    } // insert rules one by one because of several reasons:
    // 1. IE8 does not support comma in a selector string
    // 2. if one selector fails it doesn't break others


    selector.split(",").forEach(function (selector) {
      try {
        if (styleSheet.cssRules) {
          styleSheet.insertRule(selector + "{" + cssText + "}", styleSheet.cssRules.length);
        } else if (selector[0] !== "@") {
          styleSheet.addRule(selector, cssText);
        } else {
          // addRule doesn't support at-rules, use cssText instead
          styleSheet.cssText += selector + "{" + cssText + "}";
        }
      } catch (err) {// silently ignore invalid rules
      }
    });
  }; // Helper for css selectors


  var util$selectormatcher$$rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\[([\w\-\=]+)\])?(?:\.([\w\-]+))?$/,
      util$selectormatcher$$propName = "m oM msM mozM webkitM".split(" ").reduce(function (result, prefix) {
    var propertyName = prefix + "atchesSelector";
    return result || HTML[propertyName] && propertyName;
  }, null);

  var util$selectormatcher$$default = function util$selectormatcher$$default(selector, context) {
    if (typeof selector !== "string") return null;
    var quick = util$selectormatcher$$rquickIs.exec(selector);

    if (quick) {
      // Quick matching is inspired by jQuery:
      //   0  1    2   3          4
      // [ _, tag, id, attribute, class ]
      if (quick[1]) quick[1] = quick[1].toLowerCase();
      if (quick[3]) quick[3] = quick[3].split("=");
      if (quick[4]) quick[4] = " " + quick[4] + " ";
    }

    return function (node) {
      var $D$3;
      var $D$4;
      var result, found;

      if (!quick && !util$selectormatcher$$propName) {
        found = (context || node.ownerDocument).querySelectorAll(selector);
      }

      for (; node && node.nodeType === 1; node = node.parentNode) {
        if (quick) {
          result = (!quick[1] || node.nodeName.toLowerCase() === quick[1]) && (!quick[2] || node.id === quick[2]) && (!quick[3] || (quick[3][1] ? node.getAttribute(quick[3][0]) === quick[3][1] : node.hasAttribute(quick[3][0]))) && (!quick[4] || (" " + node.className + " ").indexOf(quick[4]) >= 0);
        } else {
          if (util$selectormatcher$$propName) {
            result = node[util$selectormatcher$$propName](selector);
          } else {
            $D$3 = 0;
            $D$4 = found.length;

            for (var n; $D$3 < $D$4;) {
              n = found[$D$3++];
              if (n === node) return n;
            }

            ;
            $D$3 = $D$4 = void 0;
          }
        }

        if (result || !context || node === context) break;
      }

      return result && node;
    };
  };

  var element$children$$makeMethod = function element$children$$makeMethod(all) {
    return function (selector) {
      if (all) {
        if (selector && typeof selector !== "string") throw new errors$$MethodError("children", arguments);
      } else {
        if (selector && typeof selector !== "number") throw new errors$$MethodError("child", arguments);
      }

      var node = this[0],
          matcher = util$selectormatcher$$default(selector),
          children = node.children;

      if (JSCRIPT_VERSION < 9) {
        // fix IE8 bug with children collection
        children = util$index$$default.filter.call(children, function (node) {
          return node.nodeType === 1;
        });
      }

      if (all) {
        if (matcher) children = util$index$$default.filter.call(children, matcher);
        return util$index$$default.map.call(children, $Element);
      } else {
        if (selector < 0) selector = children.length + selector;
        return $Element(children[selector]);
      }
    };
  };

  util$index$$default.register({
    child: element$children$$makeMethod(false),
    children: element$children$$makeMethod(true)
  }, function (methodName) {
    return methodName === "child" ? function () {
      return new $NullElement();
    } : function () {
      return [];
    };
  });

  var element$classes$$reSpace = /[\n\t\r]/g,
      element$classes$$makeMethod = function element$classes$$makeMethod(nativeMethodName, strategy) {
    var methodName = nativeMethodName === "contains" ? "hasClass" : nativeMethodName + "Class";

    if (HTML.classList) {
      // use native classList property if possible
      strategy = function strategy(el, token) {
        return el[0].classList[nativeMethodName](token);
      };
    }

    if (methodName === "hasClass" || methodName === "toggleClass") {
      return function (token, force) {
        if (typeof force === "boolean" && methodName === "toggleClass") {
          this[force ? "addClass" : "removeClass"](token);
          return force;
        }

        if (typeof token !== "string") throw new errors$$MethodError(methodName, arguments);
        return strategy(this, token);
      };
    } else {
      return function () {
        var $D$5;
        var $D$6;
        var tokens = arguments;
        $D$5 = 0;
        $D$6 = tokens.length;

        for (var token; $D$5 < $D$6;) {
          token = tokens[$D$5++];
          if (typeof token !== "string") throw new errors$$MethodError(methodName, arguments);
          strategy(this, token);
        }

        ;
        $D$5 = $D$6 = void 0;
        return this;
      };
    }
  };

  util$index$$default.register({
    hasClass: element$classes$$makeMethod("contains", function (el, token) {
      return (" " + el[0].className + " ").replace(element$classes$$reSpace, " ").indexOf(" " + token + " ") >= 0;
    }),
    addClass: element$classes$$makeMethod("add", function (el, token) {
      if (!el.hasClass(token)) el[0].className += " " + token;
    }),
    removeClass: element$classes$$makeMethod("remove", function (el, token) {
      el[0].className = (" " + el[0].className + " ").replace(element$classes$$reSpace, " ").replace(" " + token + " ", " ").trim();
    }),
    toggleClass: element$classes$$makeMethod("toggle", function (el, token) {
      var hasClass = el.hasClass(token);

      if (hasClass) {
        el.removeClass(token);
      } else {
        el[0].className += " " + token;
      }

      return !hasClass;
    })
  }, function (methodName) {
    if (methodName === "hasClass" || methodName === "toggleClass") {
      return function () {
        return false;
      };
    }
  });
  util$index$$default.register({
    clone: function clone(deep) {
      if (typeof deep !== "boolean") throw new errors$$MethodError("clone", arguments);
      var node = this[0],
          result;

      if (JSCRIPT_VERSION < 9) {
        result = DOM.create(node.outerHTML);
        if (!deep) result.set("");
      } else {
        result = new $Element(node.cloneNode(deep));
      }

      return result;
    }
  }, function () {
    return function () {
      return new $NullElement();
    };
  });
  util$index$$default.register({
    contains: function contains(element) {
      var node = this[0];

      if (element instanceof $Element) {
        var otherNode = element[0];
        if (otherNode === node) return true;

        if (node.contains) {
          return node.contains(otherNode);
        } else {
          return node.compareDocumentPosition(otherNode) & 16;
        }
      }

      throw new errors$$MethodError("contains", arguments);
    }
  }, function () {
    return function () {
      return false;
    };
  }); // Inspired by the article written by Daniel Buchner:
  // http://www.backalleycoder.com/2014/04/18/element-queries-from-the-feet-up/

  var element$context$$CONTEXT_TEMPLATE = "div[style=overflow:hidden]>object[data=`about:blank` type=text/html style=`position:absolute` width=100% height=100%]";

  if (JSCRIPT_VERSION) {
    // use calc to cut ugly frame border in IE>8
    element$context$$CONTEXT_TEMPLATE = element$context$$CONTEXT_TEMPLATE.replace("position:absolute", "width:calc(100% + 4px);height:calc(100% + 4px);left:-2px;top:-2px;position:absolute");

    if (JSCRIPT_VERSION > 8) {
      // for IE>8 have to set the data attribute AFTER adding element to the DOM
      element$context$$CONTEXT_TEMPLATE = element$context$$CONTEXT_TEMPLATE.replace("data=`about:blank` ", "");
    } else {
      // IE8 fails with about:blank, use better-dom-legacy.html instead
      element$context$$CONTEXT_TEMPLATE = element$context$$CONTEXT_TEMPLATE.replace("about:blank", util$index$$default.getLegacyFile("html"));
    }
  } // Chrome/Safari/Opera have serious bug with tabbing to the <object> tree:
  // https://code.google.com/p/chromium/issues/detail?id=255150


  util$index$$default.register({
    context: function context(name) {
      var callback = arguments[1];
      if (callback === void 0) callback = function callback() {};
      var contexts = this._["context2001001"],
          data = contexts[name] || [];

      if (data[0]) {
        // callback is always async
        WINDOW.setTimeout(function () {
          callback(data[1]);
        }, 1);
        return data[0];
      } // use innerHTML instead of creating element manually because of IE8


      var ctx = DOM.create(element$context$$CONTEXT_TEMPLATE);
      var object = ctx.get("firstChild"); // set onload handler before adding element to the DOM

      object.onload = function () {
        // apply user-defined styles for the context
        // need to add class in ready callback because of IE8
        if (ctx.addClass(name).css("position") === "static") {
          ctx.css("position", "relative");
        } // store new context root internally and invoke callback


        callback(data[1] = new $Document(object.contentDocument));
      };

      this.before(ctx);

      if (JSCRIPT_VERSION) {
        // IE doesn't work if to set the data attribute before adding
        // the <object> element to the DOM. IE8 will ignore this change
        // and won't start builing a new document for about:blank
        object.data = "about:blank";

        if (JSCRIPT_VERSION < 9) {
          // IE8 does not support onload - use timeout instead
          DOM.requestFrame(function repeat() {
            if (!object.contentDocument) {
              return DOM.requestFrame(repeat);
            }

            var frameId; // add extra sizes and cut the frame border

            ctx[0].attachEvent("onresize", function () {
              frameId = frameId || DOM.requestFrame(function () {
                object.width = ctx[0].offsetWidth + 4;
                object.height = ctx[0].offsetHeight + 4;
                frameId = null;
              });
            });
            object.onload();
          });
        }
      } // store context data internally


      contexts[name] = data;
      return data[0] = ctx;
    }
  }); // Helper for CSS properties access

  var util$stylehooks$$reDash = /\-./g,
      util$stylehooks$$cssPrefixes = ["Webkit", "O", "Moz", "ms"],
      util$stylehooks$$hooks = {
    get: {},
    set: {},
    find: function find(name, style) {
      var propName = name.replace(util$stylehooks$$reDash, function (str) {
        return str[1].toUpperCase();
      });

      if (!(propName in style)) {
        propName = util$stylehooks$$cssPrefixes.map(function (prefix) {
          return prefix + propName[0].toUpperCase() + propName.slice(1);
        }).filter(function (prop) {
          return prop in style;
        })[0];
      }

      return this.get[name] = this.set[name] = propName;
    }
  },
      util$stylehooks$$directions = ["Top", "Right", "Bottom", "Left"],
      util$stylehooks$$shortCuts = {
    font: ["fontStyle", "fontSize", "/", "lineHeight", "fontFamily"],
    padding: util$stylehooks$$directions.map(function (dir) {
      return "padding" + dir;
    }),
    margin: util$stylehooks$$directions.map(function (dir) {
      return "margin" + dir;
    }),
    "border-width": util$stylehooks$$directions.map(function (dir) {
      return "border" + dir + "Width";
    }),
    "border-style": util$stylehooks$$directions.map(function (dir) {
      return "border" + dir + "Style";
    })
  }; // Exclude the following css properties from adding px

  " float fill-opacity font-weight line-height opacity orphans widows z-index zoom ".split(" ").forEach(function (propName) {
    var stylePropName = propName.replace(util$stylehooks$$reDash, function (str) {
      return str[1].toUpperCase();
    });

    if (propName === "float") {
      stylePropName = "cssFloat" in HTML.style ? "cssFloat" : "styleFloat"; // normalize float css property

      util$stylehooks$$hooks.get[propName] = util$stylehooks$$hooks.set[propName] = stylePropName;
    } else {
      util$stylehooks$$hooks.get[propName] = stylePropName;

      util$stylehooks$$hooks.set[propName] = function (value, style) {
        style[stylePropName] = value.toString();
      };
    }
  }); // normalize property shortcuts

  util$index$$default.keys(util$stylehooks$$shortCuts).forEach(function (key) {
    var props = util$stylehooks$$shortCuts[key];

    util$stylehooks$$hooks.get[key] = function (style) {
      var result = [],
          hasEmptyStyleValue = function hasEmptyStyleValue(prop, index) {
        result.push(prop === "/" ? prop : style[prop]);
        return !result[index];
      };

      return props.some(hasEmptyStyleValue) ? "" : result.join(" ");
    };

    util$stylehooks$$hooks.set[key] = function (value, style) {
      if (value && "cssText" in style) {
        // normalize setting complex property across browsers
        style.cssText += ";" + key + ":" + value;
      } else {
        props.forEach(function (name) {
          return style[name] = typeof value === "number" ? value + "px" : value.toString();
        });
      }
    };
  });
  var util$stylehooks$$default = util$stylehooks$$hooks;
  util$index$$default.register({
    css: function css(name, value) {
      var this$0 = this;
      var len = arguments.length,
          node = this[0],
          style = node.style,
          computed;

      if (len === 1 && (typeof name === "string" || util$index$$default.isArray(name))) {
        var strategy = function strategy(name) {
          var getter = util$stylehooks$$default.get[name] || util$stylehooks$$default.find(name, style),
              value = typeof getter === "function" ? getter(style) : style[getter];

          if (!value) {
            if (!computed) computed = util$index$$default.computeStyle(node);
            value = typeof getter === "function" ? getter(computed) : computed[getter];
          }

          return value;
        };

        if (typeof name === "string") {
          return strategy(name);
        } else {
          return name.map(strategy).reduce(function (memo, value, index) {
            memo[name[index]] = value;
            return memo;
          }, {});
        }
      }

      if (len === 2 && typeof name === "string") {
        var setter = util$stylehooks$$default.set[name] || util$stylehooks$$default.find(name, style);

        if (typeof value === "function") {
          value = value(this);
        }

        if (value == null) value = "";

        if (typeof setter === "function") {
          setter(value, style);
        } else {
          style[setter] = typeof value === "number" ? value + "px" : value.toString();
        }
      } else if (len === 1 && name && _typeof(name) === "object") {
        util$index$$default.keys(name).forEach(function (key) {
          this$0.css(key, name[key]);
        });
      } else {
        throw new errors$$MethodError("css", arguments);
      }

      return this;
    }
  }, function () {
    return function (name) {
      if (arguments.length === 1 && util$index$$default.isArray(name)) {
        return {};
      }

      if (arguments.length !== 1 || typeof name !== "string") {
        return this;
      }
    };
  });
  var element$define$$ATTR_CASE = JSCRIPT_VERSION < 9 ? "toUpperCase" : "toLowerCase";
  util$index$$default.register({
    define: function define(name, getter, setter) {
      var this$0 = this;
      var node = this[0];

      if (typeof name !== "string" || typeof getter !== "function" || typeof setter !== "function") {
        throw new errors$$MethodError("define", arguments);
      } // Use trick to fix infinite recursion in IE8:
      // http://www.smashingmagazine.com/2014/11/28/complete-polyfill-html5-details-element/


      var attrName = name[element$define$$ATTR_CASE]();
      var _setAttribute = node.setAttribute;
      var _removeAttribute = node.removeAttribute;

      if (JSCRIPT_VERSION < 9) {
        // read attribute before the defineProperty call
        // to set the correct initial state for IE8
        var initialValue = node.getAttribute(name);

        if (initialValue !== null) {
          node[attrName] = initialValue;
        }
      }

      Object.defineProperty(node, name, {
        get: function get() {
          var attrValue = node.getAttribute(attrName, 1); // attr value -> prop value

          return getter.call(this$0, attrValue);
        },
        set: function set(propValue) {
          // prop value -> attr value
          var attrValue = setter.call(this$0, propValue);

          if (attrValue == null) {
            _removeAttribute.call(node, attrName, 1);
          } else {
            _setAttribute.call(node, attrName, attrValue, 1);
          }
        }
      }); // override methods to catch changes from attributes too

      node.setAttribute = function (name, value, flags) {
        if (attrName === name[element$define$$ATTR_CASE]()) {
          node[name] = getter.call(this$0, value);
        } else {
          _setAttribute.call(node, name, value, flags);
        }
      };

      node.removeAttribute = function (name, flags) {
        if (attrName === name[element$define$$ATTR_CASE]()) {
          node[name] = getter.call(this$0, null);
        } else {
          _removeAttribute.call(node, name, flags);
        }
      };

      return this;
    }
  });
  util$index$$default.register({
    empty: function empty() {
      return this.set("");
    }
  }); // big part of code inspired by Sizzle:
  // https://github.com/jquery/sizzle/blob/master/sizzle.js

  var element$find$$rquick = DOCUMENT.getElementsByClassName ? /^(?:(\w+)|\.([\w\-]+))$/ : /^(?:(\w+))$/,
      element$find$$rescape = /'|\\/g,
      element$find$$makeMethod = function element$find$$makeMethod(all) {
    return function (selector) {
      if (typeof selector !== "string") throw new errors$$MethodError("find" + all, arguments);
      var node = this[0],
          quickMatch = element$find$$rquick.exec(selector),
          result,
          old,
          nid,
          context;

      if (quickMatch) {
        if (quickMatch[1]) {
          // speed-up: "TAG"
          result = node.getElementsByTagName(selector);
        } else {
          // speed-up: ".CLASS"
          result = node.getElementsByClassName(quickMatch[2]);
        }

        if (result && !all) result = result[0];
      } else {
        old = true;
        context = node;

        if (node !== node.ownerDocument.documentElement) {
          // qSA works strangely on Element-rooted queries
          // We can work around this by specifying an extra ID on the root
          // and working up from there (Thanks to Andrew Dupont for the technique)
          if (old = node.getAttribute("id")) {
            nid = old.replace(element$find$$rescape, "\\$&");
          } else {
            nid = "DOM2001001";
            node.setAttribute("id", nid);
          }

          nid = "[id='" + nid + "'] ";
          selector = nid + selector.split(",").join("," + nid);
        }

        result = util$index$$default.safeCall(context, "querySelector" + all, selector);
        if (!old) node.removeAttribute("id");
      }

      return all ? util$index$$default.map.call(result, $Element) : $Element(result);
    };
  };

  util$index$$default.register({
    find: element$find$$makeMethod(""),
    findAll: element$find$$makeMethod("All")
  }, function (methodName) {
    return methodName === "find" ? function () {
      return new $NullElement();
    } : function () {
      return [];
    };
  });
  var util$eventhooks$$hooks = {};

  if ("onfocusin" in DOCUMENT.documentElement) {
    util$eventhooks$$hooks.focus = function (handler) {
      handler._type = "focusin";
    };

    util$eventhooks$$hooks.blur = function (handler) {
      handler._type = "focusout";
    };
  } else {
    // firefox doesn't support focusin/focusout events
    util$eventhooks$$hooks.focus = util$eventhooks$$hooks.blur = function (handler) {
      handler.capturing = true;
    };
  }

  if (DOCUMENT.createElement("input").validity) {
    util$eventhooks$$hooks.invalid = function (handler) {
      handler.capturing = true;
    };
  }

  if (JSCRIPT_VERSION < 9) {
    // fix non-bubbling form events for IE8 therefore
    // use custom event type instead of original one
    ["submit", "change", "reset"].forEach(function (name) {
      util$eventhooks$$hooks[name] = function (handler) {
        handler._type = "_";
      };
    });
  }

  var util$eventhooks$$default = util$eventhooks$$hooks;

  function util$eventhandler$$getEventProperty(name, e, type, node, target, currentTarget) {
    if (typeof name === "number") {
      var args = e["__2001001__"];
      return args ? args[name] : void 0;
    }

    if (JSCRIPT_VERSION < 9) {
      var docEl = node.ownerDocument.documentElement;

      switch (name) {
        case "which":
          return e.keyCode;

        case "button":
          var button = e.button; // click: 1 === left; 2 === middle; 3 === right

          return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;

        case "pageX":
          return e.clientX + docEl.scrollLeft - docEl.clientLeft;

        case "pageY":
          return e.clientY + docEl.scrollTop - docEl.clientTop;

        case "preventDefault":
          return function () {
            return e.returnValue = false;
          };

        case "stopPropagation":
          return function () {
            return e.cancelBubble = true;
          };
      }
    }

    switch (name) {
      case "type":
        return type;

      case "defaultPrevented":
        // IE8 and Android 2.3 use returnValue instead of defaultPrevented
        return "defaultPrevented" in e ? e.defaultPrevented : e.returnValue === false;

      case "target":
        return $Element(target);

      case "currentTarget":
        return $Element(currentTarget);

      case "relatedTarget":
        return $Element(e.relatedTarget || e[(e.toElement === node ? "from" : "to") + "Element"]);
    }

    var value = e[name];

    if (typeof value === "function") {
      return function () {
        return value.apply(e, arguments);
      };
    }

    return value;
  }

  function util$eventhandler$$EventHandler(type, selector, callback, props, el, once) {
    var node = el[0],
        hook = util$eventhooks$$default[type],
        matcher = util$selectormatcher$$default(selector, node),
        _handler = function handler(e) {
      e = e || WINDOW.event; // early stop in case of default action

      if (util$eventhandler$$EventHandler.skip === type) return;

      if (_handler._type === CUSTOM_EVENT_TYPE && e.srcUrn !== type) {
        return; // handle custom events in legacy IE
      } // srcElement can be null in legacy IE when target is document


      var target = e.target || e.srcElement || node.ownerDocument.documentElement,
          currentTarget = matcher ? matcher(target) : node,
          args = props || []; // early stop for late binding or when target doesn't match selector

      if (!currentTarget) return; // off callback even if it throws an exception later

      if (once) el.off(type, callback);

      if (props) {
        args = args.map(function (name) {
          return util$eventhandler$$getEventProperty(name, e, type, node, target, currentTarget);
        });
      } else {
        args = util$index$$default.slice.call(e["__2001001__"] || [0], 1);
      } // prevent default if handler returns false


      if (callback.apply(el, args) === false) {
        if (JSCRIPT_VERSION < 9) {
          e.returnValue = false;
        } else {
          e.preventDefault();
        }
      }
    };

    if (hook) _handler = hook(_handler, type) || _handler;

    if (JSCRIPT_VERSION < 9 && !("on" + (_handler._type || type) in node)) {
      // handle custom events for IE8
      _handler._type = CUSTOM_EVENT_TYPE;
    }

    _handler.type = type;
    _handler.callback = callback;
    _handler.selector = selector;
    return _handler;
  }

  var util$eventhandler$$default = util$eventhandler$$EventHandler;
  util$index$$default.register({
    fire: function fire(type) {
      var node = this[0],
          e,
          eventType,
          canContinue;

      if (typeof type === "string") {
        var hook = util$eventhooks$$default[type],
            handler = {};
        if (hook) handler = hook(handler) || handler;
        eventType = handler._type || type;
      } else {
        throw new errors$$MethodError("fire", arguments);
      }

      if (JSCRIPT_VERSION < 9) {
        e = node.ownerDocument.createEventObject();
        e["__2001001__"] = arguments; // handle custom events for legacy IE

        if (!("on" + eventType in node)) eventType = CUSTOM_EVENT_TYPE; // store original event type

        if (eventType === CUSTOM_EVENT_TYPE) e.srcUrn = type;
        node.fireEvent("on" + eventType, e);
        canContinue = e.returnValue !== false;
      } else {
        e = node.ownerDocument.createEvent("HTMLEvents");
        e["__2001001__"] = arguments;
        e.initEvent(eventType, true, true);
        canContinue = node.dispatchEvent(e);
      } // call native function to trigger default behavior


      if (canContinue && node[type]) {
        // prevent re-triggering of the current event
        util$eventhandler$$default.skip = type;
        util$index$$default.safeCall(node, type);
        util$eventhandler$$default.skip = null;
      }

      return canContinue;
    }
  }, function () {
    return function () {
      return true;
    };
  });
  var util$accessorhooks$$hooks = {
    get: {},
    set: {}
  }; // fix camel cased attributes

  "tabIndex readOnly maxLength cellSpacing cellPadding rowSpan colSpan useMap frameBorder contentEditable".split(" ").forEach(function (key) {
    util$accessorhooks$$hooks.get[key.toLowerCase()] = function (node) {
      return node[key];
    };
  }); // style hook

  util$accessorhooks$$hooks.get.style = function (node) {
    return node.style.cssText;
  };

  util$accessorhooks$$hooks.set.style = function (node, value) {
    node.style.cssText = value;
  }; // title hook for DOM


  util$accessorhooks$$hooks.get.title = function (node) {
    var doc = node.ownerDocument;
    return node === doc.documentElement ? doc.title : node.title;
  };

  util$accessorhooks$$hooks.set.title = function (node, value) {
    var doc = node.ownerDocument;
    (node === doc.documentElement ? doc : node).title = value;
  };

  util$accessorhooks$$hooks.get.undefined = function (node) {
    var name;

    switch (node.tagName) {
      case "SELECT":
        return ~node.selectedIndex ? node.options[node.selectedIndex].value : "";

      case "OPTION":
        name = node.hasAttribute("value") ? "value" : "text";
        break;

      default:
        name = node.type && "value" in node ? "value" : "innerHTML";
    }

    return node[name];
  };

  util$accessorhooks$$hooks.set.value = function (node, value) {
    if (node.tagName === "SELECT") {
      // selectbox has special case
      if (util$index$$default.every.call(node.options, function (o) {
        return !(o.selected = o.value === value);
      })) {
        node.selectedIndex = -1;
      }
    } else {
      // for IE use innerText for textareabecause it doesn't trigger onpropertychange
      node[JSCRIPT_VERSION < 9 && node.type === "textarea" ? "innerText" : "value"] = value;
    }
  }; // some browsers don't recognize input[type=email] etc.


  util$accessorhooks$$hooks.get.type = function (node) {
    return node.getAttribute("type") || node.type;
  };

  if (JSCRIPT_VERSION < 9) {
    // IE8 has innerText but not textContent
    util$accessorhooks$$hooks.get.textContent = function (node) {
      return node.innerText;
    };

    util$accessorhooks$$hooks.set.textContent = function (node, value) {
      node.innerText = value;
    }; // IE8 sometimes breaks on innerHTML


    util$accessorhooks$$hooks.set.innerHTML = function (node, value) {
      try {
        node.innerHTML = value;
      } catch (err) {
        node.innerText = "";
        DOM.createAll(value).forEach(function (x) {
          node.appendChild(x);
        });
      }
    };
  }

  var util$accessorhooks$$default = util$accessorhooks$$hooks;

  var element$get$$reUpper = /[A-Z]/g,
      element$get$$readPrivateProperty = function element$get$$readPrivateProperty(node, key) {
    // convert from camel case to dash-separated value
    key = key.replace(element$get$$reUpper, function (l) {
      return "-" + l.toLowerCase();
    });
    var value = node.getAttribute("data-" + key);

    if (value != null) {
      // try to recognize and parse  object notation syntax
      if (value[0] === "{" && value[value.length - 1] === "}") {
        try {
          value = JSON.parse(value);
        } catch (err) {// just return the value itself
        }
      }
    }

    return value;
  };

  util$index$$default.register({
    get: function get(name) {
      var this$0 = this;
      var node = this[0],
          hook = util$accessorhooks$$default.get[name];
      if (hook) return hook(node, name);

      if (typeof name === "string") {
        if (name in node) {
          return node[name];
        } else if (name[0] !== "_") {
          return node.getAttribute(name);
        } else {
          var key = name.slice(1),
              data = this._;

          if (!(key in data)) {
            data[key] = element$get$$readPrivateProperty(node, key);
          }

          return data[key];
        }
      } else if (util$index$$default.isArray(name)) {
        return name.reduce(function (memo, key) {
          return memo[key] = this$0.get(key), memo;
        }, {});
      } else {
        throw new errors$$MethodError("get", arguments);
      }
    }
  }, function () {
    return function () {
      return void 0;
    };
  });

  var element$manipulation$$makeMethod = function element$manipulation$$makeMethod(methodName, fastStrategy, requiresParent, strategy) {
    return function () {
      var contents = SLICE$0.call(arguments, 0);
      var this$0 = this;
      var node = this[0];
      if (requiresParent && !node.parentNode) return this; // the idea of the algorithm is to construct HTML string
      // when possible or use document fragment as a fallback to
      // invoke manipulation using a single method call

      var fragment = fastStrategy ? "" : node.ownerDocument.createDocumentFragment();
      contents.forEach(function (content) {
        if (typeof content === "function") {
          content = content(this$0);
        }

        if (typeof content === "string") {
          if (typeof fragment === "string") {
            fragment += content.trim();
          } else {
            content = DOM.createAll(content);
          }
        } else if (content instanceof $Element) {
          content = [content];
        }

        if (util$index$$default.isArray(content)) {
          if (typeof fragment === "string") {
            // append existing string to fragment
            content = DOM.createAll(fragment).concat(content); // fallback to document fragment strategy

            fragment = node.ownerDocument.createDocumentFragment();
          }

          content.forEach(function (el) {
            fragment.appendChild(el[0]);
          });
        }
      });

      if (typeof fragment === "string") {
        node.insertAdjacentHTML(fastStrategy, fragment);
      } else {
        strategy(node, fragment);
      }

      return this;
    };
  };

  util$index$$default.register({
    after: element$manipulation$$makeMethod("after", "afterend", true, function (node, relatedNode) {
      node.parentNode.insertBefore(relatedNode, node.nextSibling);
    }),
    before: element$manipulation$$makeMethod("before", "beforebegin", true, function (node, relatedNode) {
      node.parentNode.insertBefore(relatedNode, node);
    }),
    prepend: element$manipulation$$makeMethod("prepend", "afterbegin", false, function (node, relatedNode) {
      node.insertBefore(relatedNode, node.firstChild);
    }),
    append: element$manipulation$$makeMethod("append", "beforeend", false, function (node, relatedNode) {
      node.appendChild(relatedNode);
    }),
    replace: element$manipulation$$makeMethod("replace", "", true, function (node, relatedNode) {
      node.parentNode.replaceChild(relatedNode, node);
    }),
    remove: element$manipulation$$makeMethod("remove", "", true, function (node) {
      node.parentNode.removeChild(node);
    })
  });
  util$index$$default.register({
    map: function map(fn, context) {
      if (typeof fn !== "function") {
        throw new errors$$MethodError("map", arguments);
      }

      return [fn.call(context, this)];
    }
  }, function () {
    return function () {
      return [];
    };
  });

  var util$selectorhooks$$isHidden = function util$selectorhooks$$isHidden(node) {
    var computed = util$index$$default.computeStyle(node);
    return computed.visibility === "hidden" || computed.display === "none";
  };

  var util$selectorhooks$$default = {
    ":focus": function focus(node) {
      return node === node.ownerDocument.activeElement;
    },
    ":visible": function visible(node) {
      return !util$selectorhooks$$isHidden(node);
    },
    ":hidden": util$selectorhooks$$isHidden
  };
  util$index$$default.register({
    matches: function matches(selector) {
      if (!selector || typeof selector !== "string") throw new errors$$MethodError("matches", arguments);
      var checker = util$selectorhooks$$default[selector] || util$selectormatcher$$default(selector);
      return !!checker(this[0]);
    }
  }, function () {
    return function () {
      return false;
    };
  });
  util$index$$default.register({
    off: function off(type, selector, callback) {
      if (typeof type !== "string") throw new errors$$MethodError("off", arguments);

      if (callback === void 0) {
        callback = selector;
        selector = void 0;
      }

      var node = this[0];
      this._["handler2001001"] = this._["handler2001001"].filter(function (handler) {
        var skip = type !== handler.type;
        skip = skip || selector && selector !== handler.selector;
        skip = skip || callback && callback !== handler.callback;
        if (skip) return true;
        type = handler._type || handler.type;

        if (JSCRIPT_VERSION < 9) {
          node.detachEvent("on" + type, handler);
        } else {
          node.removeEventListener(type, handler, !!handler.capturing);
        }
      });
      return this;
    }
  });
  util$index$$default.register({
    offset: function offset() {
      var node = this[0],
          docEl = node.ownerDocument.documentElement,
          clientTop = docEl.clientTop,
          clientLeft = docEl.clientLeft,
          scrollTop = WINDOW.pageYOffset || docEl.scrollTop,
          scrollLeft = WINDOW.pageXOffset || docEl.scrollLeft,
          boundingRect = node.getBoundingClientRect();
      return {
        top: boundingRect.top + scrollTop - clientTop,
        left: boundingRect.left + scrollLeft - clientLeft,
        right: boundingRect.right + scrollLeft - clientLeft,
        bottom: boundingRect.bottom + scrollTop - clientTop,
        width: boundingRect.right - boundingRect.left,
        height: boundingRect.bottom - boundingRect.top
      };
    }
  }, function () {
    return function () {
      return {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        width: 0,
        height: 0
      };
    };
  });

  var element$on$$makeMethod = function element$on$$makeMethod(method) {
    return function (type, selector, args, callback) {
      var this$0 = this;

      if (typeof type === "string") {
        if (typeof args === "function") {
          callback = args;

          if (typeof selector === "string") {
            args = null;
          } else {
            args = selector;
            selector = null;
          }
        }

        if (typeof selector === "function") {
          callback = selector;
          selector = null;
          args = null;
        }

        if (typeof callback !== "function") {
          throw new errors$$MethodError(method, arguments);
        }

        var node = this[0],
            handler = util$eventhandler$$default(type, selector, callback, args, this, method === "once");

        if (handler) {
          if (JSCRIPT_VERSION < 9) {
            node.attachEvent("on" + (handler._type || type), handler);
          } else {
            node.addEventListener(handler._type || type, handler, !!handler.capturing);
          } // store event entry


          this._["handler2001001"].push(handler);
        }
      } else if (_typeof(type) === "object") {
        if (util$index$$default.isArray(type)) {
          type.forEach(function (name) {
            this$0[method](name, selector, args, callback);
          });
        } else {
          util$index$$default.keys(type).forEach(function (name) {
            this$0[method](name, type[name]);
          });
        }
      } else {
        throw new errors$$MethodError(method, arguments);
      }

      return this;
    };
  };

  util$index$$default.register({
    on: element$on$$makeMethod("on"),
    once: element$on$$makeMethod("once")
  });
  util$index$$default.register({
    set: function set(name, value) {
      var this$0 = this;
      var node = this[0]; // handle the value shortcut

      if (arguments.length === 1) {
        if (typeof name === "function") {
          value = name;
        } else {
          value = name == null ? "" : String(name);
        }

        if (value !== "[object Object]") {
          var tag = node.tagName;

          if (tag === "INPUT" || tag === "TEXTAREA" || tag === "SELECT" || tag === "OPTION") {
            name = "value";
          } else {
            name = "innerHTML";
          }
        }
      }

      var hook = util$accessorhooks$$default.set[name],
          watchers = this._["watcher2001001"][name],
          oldValue;

      if (watchers) {
        oldValue = this.get(name);
      }

      if (typeof name === "string") {
        if (name[0] === "_") {
          this._[name.slice(1)] = value;
        } else {
          if (typeof value === "function") {
            value = value(this);
          }

          if (hook) {
            hook(node, value);
          } else if (value == null) {
            node.removeAttribute(name);
          } else if (name in node) {
            node[name] = value;
          } else {
            node.setAttribute(name, value);
          }

          if (JSCRIPT_VERSION < 9 || LEGACY_ANDROID) {
            // always trigger reflow manually for IE8 and legacy Android
            node.className = node.className;
          }
        }
      } else if (util$index$$default.isArray(name)) {
        name.forEach(function (key) {
          this$0.set(key, value);
        });
      } else if (_typeof(name) === "object") {
        util$index$$default.keys(name).forEach(function (key) {
          this$0.set(key, name[key]);
        });
      } else {
        throw new errors$$MethodError("set", arguments);
      }

      if (watchers && oldValue !== value) {
        watchers.forEach(function (w) {
          util$index$$default.safeCall(this$0, w, value, oldValue);
        });
      }

      return this;
    }
  });

  var element$traversing$$makeMethod = function element$traversing$$makeMethod(methodName, propertyName, all) {
    return function (selector) {
      if (selector && typeof selector !== "string") throw new errors$$MethodError(methodName, arguments);
      var matcher = util$selectormatcher$$default(selector),
          nodes = all ? [] : null,
          it = this[0]; // method closest starts traversing from the element itself
      // except no selector was specified where it returns parent

      if (!matcher || methodName !== "closest") {
        it = it[propertyName];
      }

      for (; it; it = it[propertyName]) {
        if (it.nodeType === 1 && (!matcher || matcher(it))) {
          if (!all) break;
          nodes.push(it);
        }
      }

      return all ? util$index$$default.map.call(nodes, $Element) : $Element(it);
    };
  };

  util$index$$default.register({
    next: element$traversing$$makeMethod("next", "nextSibling"),
    prev: element$traversing$$makeMethod("prev", "previousSibling"),
    nextAll: element$traversing$$makeMethod("nextAll", "nextSibling", true),
    prevAll: element$traversing$$makeMethod("prevAll", "previousSibling", true),
    closest: element$traversing$$makeMethod("closest", "parentNode")
  }, function (methodName) {
    if (methodName.slice(-3) === "All") {
      return function () {
        return [];
      };
    } else {
      return function () {
        return new $NullElement();
      };
    }
  });
  util$index$$default.register({
    value: function value(val) {
      if (arguments.length === 0) {
        return this.get();
      } else if (typeof val === "string") {
        return this.set(val);
      } else {
        return this.set("").append(val);
      }
    }
  });

  var util$animationhandler$$TRANSITION_PROPS = ["timing-function", "property", "duration", "delay"].map(function (prop) {
    return "transition-" + prop;
  }),
      util$animationhandler$$parseTimeValue = function util$animationhandler$$parseTimeValue(value) {
    var result = parseFloat(value) || 0; // if duration is in seconds, then multiple result value by 1000

    return !result || value.slice(-2) === "ms" ? result : result * 1000;
  },
      util$animationhandler$$calcTransitionDuration = function util$animationhandler$$calcTransitionDuration(transitionValues) {
    var delays = transitionValues[3],
        durations = transitionValues[2];
    return Math.max.apply(Math, durations.map(function (value, index) {
      return util$animationhandler$$parseTimeValue(value) + (util$animationhandler$$parseTimeValue(delays[index]) || 0);
    }));
  }; // initialize hooks for properties used below


  util$animationhandler$$TRANSITION_PROPS.concat("animation-duration").forEach(function (prop) {
    util$stylehooks$$default.find(prop, HTML.style);
  });

  var util$animationhandler$$default = function util$animationhandler$$default(node, computed, animationName, hiding, done) {
    var rules, duration; // Legacy Android is usually slow and has lots of bugs in the
    // CSS animations implementation, so skip any animations for it

    if (LEGACY_ANDROID || JSCRIPT_VERSION < 10) return null;

    if (animationName) {
      duration = util$animationhandler$$parseTimeValue(computed[util$stylehooks$$default.get["animation-duration"]]);
      if (!duration) return; // skip animations with zero duration

      rules = [WEBKIT_PREFIX + "animation-direction:" + (hiding ? "normal" : "reverse"), WEBKIT_PREFIX + "animation-name:" + animationName, // for CSS3 animation element should always be visible
      "visibility:inherit"];
    } else {
      var transitionValues = util$animationhandler$$TRANSITION_PROPS.map(function (prop, index) {
        // have to use regexp to split transition-timing-function value
        return computed[util$stylehooks$$default.get[prop]].split(index ? ", " : /, (?!\d)/);
      });
      duration = util$animationhandler$$calcTransitionDuration(transitionValues);
      if (!duration) return; // skip transitions with zero duration

      if (transitionValues[1].indexOf("all") < 0) {
        // try to find existing or use 0s length or make a new visibility transition
        var visibilityIndex = transitionValues[1].indexOf("visibility");
        if (visibilityIndex < 0) visibilityIndex = transitionValues[2].indexOf("0s");
        if (visibilityIndex < 0) visibilityIndex = transitionValues[1].length;
        transitionValues[0][visibilityIndex] = "linear";
        transitionValues[1][visibilityIndex] = "visibility";
        transitionValues[hiding ? 2 : 3][visibilityIndex] = "0s";
        transitionValues[hiding ? 3 : 2][visibilityIndex] = duration + "ms";
      }

      rules = transitionValues.map(function (props, index) {
        // fill holes in a trasition property value
        for (var i = 0, n = props.length; i < n; ++i) {
          props[i] = props[i] || props[i - 1] || "initial";
        }

        return WEBKIT_PREFIX + util$animationhandler$$TRANSITION_PROPS[index] + ":" + props.join(", ");
      });
      rules.push( // append target visibility value to trigger transition
      "visibility:" + (hiding ? "hidden" : "inherit"), // use willChange to improve performance in modern browsers:
      // http://dev.opera.com/articles/css-will-change-property/
      "will-change:" + transitionValues[1].join(", "));
    }

    return {
      cssText: rules.join(";"),
      initialCssText: node.style.cssText,
      // this function used to trigger callback
      handleEvent: function handleEvent(e) {
        if (e.target === node) {
          if (animationName) {
            if (e.animationName !== animationName) return;
          } else {
            if (e.propertyName !== "visibility") return;
          }

          e.stopPropagation(); // this is an internal event

          done();
        }
      }
    };
  };

  var element$visibility$$TRANSITION_EVENT_TYPE = WEBKIT_PREFIX ? "webkitTransitionEnd" : "transitionend",
      element$visibility$$ANIMATION_EVENT_TYPE = WEBKIT_PREFIX ? "webkitAnimationEnd" : "animationend",
      element$visibility$$makeMethod = function element$visibility$$makeMethod(name, condition) {
    return function (animationName, callback) {
      var this$0 = this;

      if (typeof animationName !== "string") {
        callback = animationName;
        animationName = null;
      }

      if (callback && typeof callback !== "function") {
        throw new errors$$MethodError(name, arguments);
      }

      var node = this[0],
          style = node.style,
          computed = util$index$$default.computeStyle(node),
          hiding = condition,
          frameId = this._["frame2001001"],
          done = function done() {
        if (animationHandler) {
          node.removeEventListener(eventType, animationHandler, true); // clear inline style adjustments were made previously

          style.cssText = animationHandler.initialCssText;
        } else {
          this$0.set("aria-hidden", String(hiding));
        } // always update element visibility property: use value "inherit"
        // to respect parent container visibility. Should be a separate
        // from setting cssText because of Opera 12 quirks


        style.visibility = hiding ? "hidden" : "inherit";
        this$0._["frame2001001"] = null;
        if (callback) callback(this$0);
      };

      if (typeof hiding !== "boolean") {
        hiding = computed.visibility !== "hidden";
      } // cancel previous frame if it exists


      if (frameId) DOM.cancelFrame(frameId);

      if (!node.ownerDocument.documentElement.contains(node)) {
        // apply attribute/visibility syncronously for detached DOM elements
        // because browser returns zero animation/transition duration for them
        done();
      } else {
        var animationHandler = util$animationhandler$$default(node, computed, animationName, hiding, done),
            eventType = animationName ? element$visibility$$ANIMATION_EVENT_TYPE : element$visibility$$TRANSITION_EVENT_TYPE; // use requestAnimationFrame to avoid animation quirks for
        // new elements inserted into the DOM
        // http://christianheilmann.com/2013/09/19/quicky-fading-in-a-newly-created-element-using-css/

        this._["frame2001001"] = DOM.requestFrame(!animationHandler ? done : function () {
          node.addEventListener(eventType, animationHandler, true); // update modified style rules

          style.cssText = animationHandler.initialCssText + animationHandler.cssText; // trigger CSS3 transition / animation

          this$0.set("aria-hidden", String(hiding));
        });
      }

      return this;
    };
  };

  util$index$$default.register({
    show: element$visibility$$makeMethod("show", false),
    hide: element$visibility$$makeMethod("hide", true),
    toggle: element$visibility$$makeMethod("toggle")
  });
  util$index$$default.register({
    watch: function watch(name, callback) {
      var watchers = this._["watcher2001001"];
      if (!watchers[name]) watchers[name] = [];
      watchers[name].push(callback);
      return this;
    },
    unwatch: function unwatch(name, callback) {
      var watchers = this._["watcher2001001"];

      if (watchers[name]) {
        watchers[name] = watchers[name].filter(function (w) {
          return w !== callback;
        });
      }

      return this;
    }
  });
  var util$extensionhandler$$rePrivateFunction = /^(?:on|do)[A-Z]/;

  var util$extensionhandler$$default = function util$extensionhandler$$default(selector, condition, mixins, index) {
    var ctr = mixins.hasOwnProperty("constructor") && mixins.constructor,
        matcher = util$selectormatcher$$default(selector);
    return function (node, mock) {
      var el = $Element(node); // skip previously invoked or mismatched elements

      if (~el._["extension2001001"].indexOf(index) || !matcher(node)) return; // mark extension as invoked

      el._["extension2001001"].push(index);

      if (mock === true || condition(el) !== false) {
        // apply all private/public members to the element's interface
        var privateFunctions = Object.keys(mixins).filter(function (prop) {
          var value = mixins[prop]; // TODO: private functions are deprecated, remove this line later

          if (util$extensionhandler$$rePrivateFunction.exec(prop)) {
            // preserve context for private functions
            el[prop] = function () {
              return value.apply(el, arguments);
            };

            return !mock;
          }

          if (prop !== "constructor") {
            el[prop] = value;
            return !mock && prop[0] === "_";
          }
        }); // invoke constructor if it exists
        // make a safe call so live extensions can't break each other

        if (ctr) util$index$$default.safeCall(el, ctr); // remove event handlers from element's interface

        privateFunctions.forEach(function (prop) {
          delete el[prop];
        });
      }
    };
  }; // Inspired by trick discovered by Daniel Buchner:
  // https://github.com/csuwldcat/SelectorListener


  var global$extend$$extensions = [],
      global$extend$$returnTrue = function global$extend$$returnTrue() {
    return true;
  },
      global$extend$$returnFalse = function global$extend$$returnFalse() {
    return false;
  },
      global$extend$$cssText;

  DOM.extend = function (selector, condition, definition) {
    if (arguments.length === 2) {
      definition = condition;
      condition = true;
    }

    if (typeof condition === "boolean") condition = condition ? global$extend$$returnTrue : global$extend$$returnFalse;
    if (typeof definition === "function") definition = {
      constructor: definition
    };
    if (!definition || _typeof(definition) !== "object" || typeof condition !== "function") throw new errors$$StaticMethodError("extend", arguments);

    if (selector === "*") {
      util$index$$default.keys(definition).forEach(function (methodName) {
        $Element.prototype[methodName] = definition[methodName];
      });
    } else {
      var ext = util$extensionhandler$$default(selector, condition, definition, global$extend$$extensions.length);
      global$extend$$extensions.push(ext); // initialize extension manually to make sure that all elements
      // have appropriate methods before they are used in other DOM.extend.
      // Also fixes legacy IEs when the HTC behavior is already attached

      util$index$$default.each.call(DOCUMENT.querySelectorAll(selector), ext); // MUST be after querySelectorAll because of legacy IEs quirks

      DOM.importStyles(selector, global$extend$$cssText);
    }
  };

  if (JSCRIPT_VERSION < 10) {
    global$extend$$cssText = "-ms-behavior:url(" + util$index$$default.getLegacyFile("htc") + ") !important";
    DOCUMENT.attachEvent("on" + CUSTOM_EVENT_TYPE, function () {
      var e = WINDOW.event;

      if (e.srcUrn === CUSTOM_EVENT_TYPE) {
        global$extend$$extensions.forEach(function (ext) {
          ext(e.srcElement);
        });
      }
    });
  } else {
    var global$extend$$_extend = DOM.extend;
    global$extend$$cssText = WEBKIT_PREFIX + "animation-name:DOM2001001 !important;";
    global$extend$$cssText += WEBKIT_PREFIX + "animation-duration:1ms !important";

    DOM.extend = function () {
      // declare the fake animation on the first DOM.extend method call
      DOM.importStyles("@" + WEBKIT_PREFIX + "keyframes DOM2001001", "from {opacity:.99} to {opacity:1}"); // restore original method and invoke it

      (DOM.extend = global$extend$$_extend).apply(DOM, arguments);
    }; // use capturing to suppress internal animationstart events


    DOCUMENT.addEventListener(WEBKIT_PREFIX ? "webkitAnimationStart" : "animationstart", function (e) {
      if (e.animationName === "DOM2001001") {
        global$extend$$extensions.forEach(function (ext) {
          ext(e.target);
        }); // this is an internal event - stop it immediately

        e.stopImmediatePropagation();
      }
    }, true);
  }

  var global$extend$$default = global$extend$$extensions;
  var global$format$$reVar = /\{([\w\-]+)\}/g;

  DOM.format = function (tmpl, varMap) {
    if (typeof tmpl !== "string") tmpl = String(tmpl);
    if (!varMap || _typeof(varMap) !== "object") varMap = {};
    return tmpl.replace(global$format$$reVar, function (x, name, index) {
      if (name in varMap) {
        x = varMap[name];
        if (typeof x === "function") x = x(index);
        x = String(x);
      }

      return x;
    });
  };

  var global$frame$$raf = WINDOW.requestAnimationFrame,
      global$frame$$craf = WINDOW.cancelAnimationFrame,
      global$frame$$lastTime = 0;

  if (!(global$frame$$raf && global$frame$$craf)) {
    ["ms", "moz", "webkit", "o"].forEach(function (prefix) {
      global$frame$$raf = global$frame$$raf || WINDOW[prefix + "RequestAnimationFrame"];
      global$frame$$craf = global$frame$$craf || WINDOW[prefix + "CancelAnimationFrame"];
    });
  }

  DOM.requestFrame = function (callback) {
    if (global$frame$$raf) {
      return global$frame$$raf.call(WINDOW, callback);
    } else {
      // use idea from Erik Möller's polyfill:
      // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
      var currTime = Date.now();
      var timeToCall = Math.max(0, 16 - (currTime - global$frame$$lastTime));
      global$frame$$lastTime = currTime + timeToCall;
      return WINDOW.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
    }
  };

  DOM.cancelFrame = function (frameId) {
    if (global$frame$$craf) {
      global$frame$$craf.call(WINDOW, frameId);
    } else {
      WINDOW.clearTimeout(frameId);
    }
  };

  function global$mock$$applyExtensions(node) {
    global$extend$$default.forEach(function (ext) {
      ext(node, true);
    });
    util$index$$default.each.call(node.children, global$mock$$applyExtensions);
  }

  DOM.mock = function (content, varMap) {
    if (!content) return new $NullElement();
    var result = DOM.create(content, varMap);
    global$mock$$applyExtensions(result[0]);
    return result;
  };

  var exports$$_DOM = WINDOW.DOM;

  DOM.noConflict = function () {
    if (WINDOW.DOM === DOM) {
      WINDOW.DOM = exports$$_DOM;
    }

    return DOM;
  };

  WINDOW.DOM = DOM;
})();
"use strict";

/**
 * better-details-polyfill: <details> polyfill for better-dom
 * @version 2.1.0 Tue, 16 Dec 2014 17:37:23 GMT
 * @link https://github.com/chemerisuk/better-details-polyfill
 * @copyright 2014 Maksim Chemerisuk
 * @license MIT
 */
(function (DOM, VK_SPACE, VK_ENTER) {
  "use strict"; // add ARIA attributes for ALL browsers because current
  // native implementaions are weak:
  // https://bugs.webkit.org/show_bug.cgi?id=131111

  var hasNativeSupport = typeof DOM.create("details").get("open") === "boolean";

  if (hasNativeSupport) {
    return;
  }

  document.documentElement.dataset.detailsPolyfilled = true;
  DOM.extend("details", {
    constructor: function constructor() {
      // http://www.w3.org/html/wg/drafts/html/master/interactive-elements.html#the-details-element
      this.set("role", "group").on("toggle", ["stopPropagation"], this._changeOpen.bind(this));
      var firstSummary = this.children("summary")[0]; // If there is no child summary element, the user agent
      // should provide its own legend (e.g. "Details")

      if (!firstSummary) firstSummary = DOM.create("summary>`Details`"); // make the first <summary> always to be the first child

      if (this.child(0) !== firstSummary) {
        this.prepend(firstSummary);
      } // http://www.w3.org/html/wg/drafts/html/master/interactive-elements.html#the-summary-element


      firstSummary.set("role", "button");
      /* istanbul ignore if */

      if (!hasNativeSupport) {
        this.define("open", this._getOpen, this._setOpen);

        this._initSummary(firstSummary);
      }

      this._changeOpen();
    },
    _initSummary: function _initSummary(summary) {
      summary.set("tabindex", 0).on("keydown", ["which"], this._toggleOpen.bind(this)).on("click", this._toggleOpen.bind(this));
    },
    _changeOpen: function _changeOpen(stop) {
      this.set("aria-expanded", this.get("open"));
      if (stop) stop(); // toggle event should not bubble
    },
    _getOpen: function _getOpen(attrValue) {
      attrValue = String(attrValue).toLowerCase();
      return attrValue === "" || attrValue === "open";
    },
    _setOpen: function _setOpen(propValue) {
      var this$0 = this;
      var currentValue = this.get("open");
      propValue = !!propValue;

      if (currentValue !== propValue) {
        // have to use setTimeout because the event should
        // fire AFTER the attribute was updated
        setTimeout(function () {
          this$0.fire("toggle");
        }, 0);
      }

      return propValue ? "" : null;
    },
    _toggleOpen: function _toggleOpen(key) {
      if (!key || key === VK_SPACE || key === VK_ENTER) {
        this.set("open", !this.get("open")); // need to prevent default, because
        // the enter key usually submits a form

        return false;
      }
    }
  });
})(window.DOM, 32, 13); // DOM.importStyles("@media all", "summary:first-child~*{display:none}details[open]>*{display:block}details>summary:first-child{display:block}details:before{content:'\\25BA';font-family:serif;font-size:.75em;margin-top:.25em;margin-left:.25em;position:absolute}details[open]:before{content:'\\25BC'}summary:first-child{text-indent:1.25em}details::before{content:'';width:0;height:0;border:solid transparent;border-left-color:inherit;border-width:.25em .5em;margin-top:.75em;margin-left:.5em;-webkit-transform:rotate(0deg) scale(1.5);-ms-transform:rotate(0deg) scale(1.5);transform:rotate(0deg) scale(1.5);-webkit-transform-origin:25% 50%;-ms-transform-origin:25% 50%;transform-origin:25% 50%;-webkit-transition:-webkit-transform .15s ease-out;transition:transform .15s ease-out}details[open]::before{content:'';-webkit-transform:rotate(90deg) scale(1.5);-ms-transform:rotate(90deg) scale(1.5);transform:rotate(90deg) scale(1.5)}summary::-webkit-details-marker{display:none}");
// DOM.importStyles("@media all", `html[data-details-polyfilled="true"] summary:first-child~*{display:none}html[data-details-polyfilled="true"] details[open]>*{display:block} html[data-details-polyfilled="true"] details>summary:first-child{display:block}html[data-details-polyfilled="true"] details:before{content:'\\25BA';font-family:serif;font-size:.75em;margin-top:.25em;margin-left:.25em;position:absolute}html[data-details-polyfilled="true"] details[open]:before{content:'\\25BC'}html[data-details-polyfilled="true"] summary:first-child{text-indent:1.25em}html[data-details-polyfilled="true"] details::before{content:'';width:0;height:0;border:solid transparent;border-left-color:inherit;border-width:.25em .5em;margin-top:.75em;margin-left:.5em;-webkit-transform:rotate(0deg) scale(1.5);-ms-transform:rotate(0deg) scale(1.5);transform:rotate(0deg) scale(1.5);-webkit-transform-origin:25% 50%;-ms-transform-origin:25% 50%;transform-origin:25% 50%;-webkit-transition:-webkit-transform .15s ease-out;transition:transform .15s ease-out}html[data-details-polyfilled="true"] details[open]::before{content:'';-webkit-transform:rotate(90deg) scale(1.5);-ms-transform:rotate(90deg) scale(1.5);transform:rotate(90deg) scale(1.5)}html[data-details-polyfilled="true"] summary::-webkit-details-marker{display:none}`);
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(function ($) {
  "use strict";

  var setHeight = function setHeight(details) {
    var open = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    details.open = open;
    var rect = details.getBoundingClientRect();
    details.dataset.width = rect.width;

    if (open) {
      details.dataset.panelHeight = details.querySelector('.panel').offsetHeight;
    }

    details.style.setProperty(open ? "--expanded" : "--collapsed", "".concat(rect.height, "px"));
  };

  var __details = [];

  var __openDetails;

  var __observer;

  var Accordion = /*#__PURE__*/function () {
    function Accordion(el) {
      _classCallCheck(this, Accordion);

      this.el = el;
      this.panel = el.querySelector('.panel');
      this.initialize();
    }

    _createClass(Accordion, [{
      key: "initialize",
      value: function initialize() {
        var _this = this;

        if (!window.ResizeObserver) {
          // not supported; punt
          return;
        }

        if (!__observer) {
          __observer = new ResizeObserver(function (entries) {
            return entries.forEach(function (entry) {
              var el = entry.target;

              if (el.nodeName == 'DETAILS') {
                var width = parseInt(el.dataset.width, 10);
                var openState = el.open; // if (width !== entry.contentRect.width) {

                if (width !== el.clientWidth) {
                  el.removeAttribute('style');
                  setHeight(el);
                  setHeight(el, true);
                  el.open = el.dataset.interactive == 'false' ? true : openState;
                }
              } else if (el.nodeName == 'DIV') {
                var details = el.closest('details');
                var summary = details.querySelector('summary');
                var panelHeight = parseInt(details.dataset.panelHeight || 0, 10);
                var offsetHeight = el.offsetHeight;
                requestAnimationFrame(function () {
                  el.clientWidth; // force a reflow

                  HT.log("-- panel check", panelHeight, offsetHeight, el.offsetHeight > 0);
                  var updated_expanded = "".concat(el.offsetHeight + summary.offsetHeight + 45, "px");
                  var expanded = details.style.getPropertyValue('--expanded');

                  if (updated_expanded != expanded) {
                    details.style.setProperty("--expanded", updated_expanded);
                  }
                });
                HT.log("-- panel", panelHeight, el.offsetHeight, entry.contentRect.height);
              }
            });
          });
        }

        __observer.observe(this.el);

        __observer.observe(this.el.querySelector('.panel'));

        __details.push(this.el);

        this.el.addEventListener('toggle', function (event) {
          if (_this.el.open && _this.el.dataset.interactive != 'false') {
            // close the other details
            if (__openDetails && __openDetails != _this.el) {
              __openDetails.open = false;
            }

            __openDetails = _this.el;
            requestAnimationFrame(function () {
              if (_this.el.dataset.ignoreScrollIntoView == 'true') {
                _this.el.dataset.ignoreScrollIntoView = false;
                return;
              }

              _this.el.scrollIntoView(true);
            });
          }
        });
      }
    }]);

    return Accordion;
  }();

  Accordion.configure = function (selector) {
    var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    wrapper.querySelectorAll(selector).forEach(function (details) {
      new Accordion(details);
    });
  };

  $.Accordion = Accordion;
  window.addEventListener('load', function (event) {
    Accordion.configure('details[data-role="accordion"]');
  });
})(window, 32, 13);
"use strict";

head.ready(function () {
  // initialize tooltips
  tippy.delegate('#root', {
    target: '[data-tippy-role="tooltip"]',
    interactive: true,
    content: function content(reference) {
      // reference.dataset.untoggledLabel = reference.getAttribute('aria-label');
      // return reference.dataset.untoggledLabel;
      if (reference.dataset.toggledLabel && !reference.dataset.untoggledLabel) {
        reference.dataset.untoggledLabel = reference.getAttribute('aria-label');
      }

      return reference.getAttribute('aria-label');
    },
    theme: 'hathitrust'
  });
  setTimeout(function () {
    document.querySelectorAll('.share-toolbar button').forEach(function (button) {
      button.dataset.tippyRole = 'tooltip';
      button.dataset.role = null;
    });
  }, 100);
});
"use strict";

var HT = HT || {};
HT.isLogging = false;

HT.log = function () {
  if (HT.isLogging) {
    console.log.apply(console, arguments);
  }
};

head.ready(function () {
  HT.renew_auth = function (entityID) {
    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image';

    if (HT.__renewing) {
      return;
    }

    HT.__renewing = true;
    setTimeout(function () {
      var reauth_url = "https://".concat(HT.service_domain, "/Shibboleth.sso/Login?entityID=").concat(entityID, "&target=").concat(encodeURIComponent(window.location.href));
      var retval = window.confirm("We're having a problem with your session; select OK to log in again.");

      if (retval) {
        window.location.href = reauth_url;
      }
    }, 100);
  };

  HT.analytics = HT.analytics || {};

  HT.analytics.logAction = function (href, trigger) {
    if (href === undefined) {
      href = location.href;
    }

    var delim = href.indexOf(';') > -1 ? ';' : '&';

    if (trigger == null) {
      trigger = '-';
    }

    href += delim + 'a=' + trigger;
    $.ajax(href, {
      complete: function complete(xhr, status) {
        var entityID = xhr.getResponseHeader('x-hathitrust-renew');

        if (entityID) {
          HT.renew_auth(entityID, 'logAction');
        }
      }
    });
  };

  $("body").on('click', 'a[data-tracking-category="outLinks"]', function (event) {
    var trigger = 'out' + $(this).attr('href');
    HT.analytics.logAction(undefined, trigger);
  });
});
"use strict";

head.ready(function () {
  var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var $emergency_access = $("#access-emergency-access");
  var delta = 5 * 60 * 1000;
  var last_seconds;

  var toggle_renew_link = function toggle_renew_link(date) {
    var now = Date.now();

    if (now >= date.getTime()) {
      var $link = $emergency_access.find("a[disabled]");
      $link.attr("disabled", null);
    }
  };

  var observe_expiration_timestamp = function observe_expiration_timestamp() {
    if (!HT || !HT.params || !HT.params.id) {
      return;
    }

    var data = $.cookie('HTexpiration', undefined, {
      json: true
    });

    if (!data) {
      return;
    }

    var seconds = data[HT.params.id];

    if (seconds == -1) {
      var $link = $emergency_access.find("p a").clone();
      $emergency_access.find("p").text("Your access has expired and cannot be renewed. Reload the page or try again later. Access has been provided through the ");
      $emergency_access.find("p").append($link);
      var $action = $emergency_access.find(".alert--emergency-access--options a");
      $action.attr('href', window.location.href);
      $action.text('Reload');
      return;
    }

    if (seconds > last_seconds) {
      var message = time2message(seconds);
      last_seconds = seconds;
      $emergency_access.find(".expires-display").text(message);
    }
  };

  var time2message = function time2message(seconds) {
    var date = new Date(seconds * 1000);
    var hours = date.getHours();
    var ampm = 'AM';

    if (hours > 12) {
      hours -= 12;
      ampm = 'PM';
    }

    if (hours == 12) {
      ampm = 'PM';
    }

    var minutes = date.getMinutes();

    if (minutes < 10) {
      minutes = "0".concat(minutes);
    }

    var message = "".concat(hours, ":").concat(minutes).concat(ampm, " ").concat(MONTHS[date.getMonth()], " ").concat(date.getDate());
    return message;
  };

  if ($emergency_access.length) {
    var expiration = $emergency_access.data('accessExpires');
    var seconds = parseInt($emergency_access.data('accessExpiresSeconds'), 10);
    var granted = $emergency_access.data('accessGranted');
    var now = Date.now() / 1000;
    var message = time2message(seconds);
    $emergency_access.find(".expires-display").text(message);
    $emergency_access.get(0).dataset.initialized = 'true';

    if (granted) {
      // set up a watch for the expiration time
      last_seconds = seconds;
      setInterval(function () {
        // toggle_renew_link(date);
        observe_expiration_timestamp();
      }, 500);
    }
  }

  if ($('#accessBannerID').length > 0) {
    var suppress = $('html').hasClass('supaccban');

    if (suppress) {
      return;
    }

    var debug = $('html').hasClass('htdev');
    var idhash = $.cookie('access.hathitrust.org', undefined, {
      json: true
    });
    var url = $.url(); // parse the current page URL

    var currid = url.param('id');

    if (idhash == null) {
      idhash = {};
    }

    var ids = [];

    for (var id in idhash) {
      if (idhash.hasOwnProperty(id)) {
        ids.push(id);
      }
    }

    if (ids.indexOf(currid) < 0 || debug) {
      var showAlert = function showAlert() {
        var html = $('#accessBannerID').html();
        var $alert = bootbox.dialog(html, [{
          label: "OK",
          "class": "btn btn-primary btn-dismiss"
        }], {
          header: 'Special access',
          role: 'alertdialog'
        });
      };

      idhash[currid] = 1; // session cookie

      $.cookie('access.hathitrust.org', idhash, {
        json: true,
        path: '/',
        domain: '.hathitrust.org'
      });
      window.setTimeout(showAlert, 3000, true);
    }
  }

  $("details.details--alert").on('toggle', function (event) {
    var detail = event.target;
    var prefs = HT.prefs.get();
    prefs.pt = prefs.pt || {};
    prefs.pt.alerts = prefs.pt.alerts || {};
    prefs.pt.alerts[detail.getAttribute('id')] = detail.open ? 'open' : 'closed';
    HT.prefs.set(prefs);
  });
});
"use strict";

/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.2.20171210
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */
if ("document" in self) {
  // Full polyfill for browsers with no classList support
  // Including IE < Edge missing SVGElement.classList
  if (!("classList" in document.createElement("_")) || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) {
    (function (view) {
      "use strict";

      if (!('Element' in view)) return;

      var classListProp = "classList",
          protoProp = "prototype",
          elemCtrProto = view.Element[protoProp],
          objCtr = Object,
          strTrim = String[protoProp].trim || function () {
        return this.replace(/^\s+|\s+$/g, "");
      },
          arrIndexOf = Array[protoProp].indexOf || function (item) {
        var i = 0,
            len = this.length;

        for (; i < len; i++) {
          if (i in this && this[i] === item) {
            return i;
          }
        }

        return -1;
      } // Vendors: please allow content code to instantiate DOMExceptions
      ,
          DOMEx = function DOMEx(type, message) {
        this.name = type;
        this.code = DOMException[type];
        this.message = message;
      },
          checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {
        if (token === "") {
          throw new DOMEx("SYNTAX_ERR", "The token must not be empty.");
        }

        if (/\s/.test(token)) {
          throw new DOMEx("INVALID_CHARACTER_ERR", "The token must not contain space characters.");
        }

        return arrIndexOf.call(classList, token);
      },
          ClassList = function ClassList(elem) {
        var trimmedClasses = strTrim.call(elem.getAttribute("class") || ""),
            classes = trimmedClasses ? trimmedClasses.split(/\s+/) : [],
            i = 0,
            len = classes.length;

        for (; i < len; i++) {
          this.push(classes[i]);
        }

        this._updateClassName = function () {
          elem.setAttribute("class", this.toString());
        };
      },
          classListProto = ClassList[protoProp] = [],
          classListGetter = function classListGetter() {
        return new ClassList(this);
      }; // Most DOMException implementations don't allow calling DOMException's toString()
      // on non-DOMExceptions. Error's toString() is sufficient here.


      DOMEx[protoProp] = Error[protoProp];

      classListProto.item = function (i) {
        return this[i] || null;
      };

      classListProto.contains = function (token) {
        return ~checkTokenAndGetIndex(this, token + "");
      };

      classListProto.add = function () {
        var tokens = arguments,
            i = 0,
            l = tokens.length,
            token,
            updated = false;

        do {
          token = tokens[i] + "";

          if (!~checkTokenAndGetIndex(this, token)) {
            this.push(token);
            updated = true;
          }
        } while (++i < l);

        if (updated) {
          this._updateClassName();
        }
      };

      classListProto.remove = function () {
        var tokens = arguments,
            i = 0,
            l = tokens.length,
            token,
            updated = false,
            index;

        do {
          token = tokens[i] + "";
          index = checkTokenAndGetIndex(this, token);

          while (~index) {
            this.splice(index, 1);
            updated = true;
            index = checkTokenAndGetIndex(this, token);
          }
        } while (++i < l);

        if (updated) {
          this._updateClassName();
        }
      };

      classListProto.toggle = function (token, force) {
        var result = this.contains(token),
            method = result ? force !== true && "remove" : force !== false && "add";

        if (method) {
          this[method](token);
        }

        if (force === true || force === false) {
          return force;
        } else {
          return !result;
        }
      };

      classListProto.replace = function (token, replacement_token) {
        var index = checkTokenAndGetIndex(token + "");

        if (~index) {
          this.splice(index, 1, replacement_token);

          this._updateClassName();
        }
      };

      classListProto.toString = function () {
        return this.join(" ");
      };

      if (objCtr.defineProperty) {
        var classListPropDesc = {
          get: classListGetter,
          enumerable: true,
          configurable: true
        };

        try {
          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
        } catch (ex) {
          // IE 8 doesn't support enumerable:true
          // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
          // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
          if (ex.number === undefined || ex.number === -0x7FF5EC54) {
            classListPropDesc.enumerable = false;
            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
          }
        }
      } else if (objCtr[protoProp].__defineGetter__) {
        elemCtrProto.__defineGetter__(classListProp, classListGetter);
      }
    })(self);
  } // There is full or partial native classList support, so just check if we need
  // to normalize the add/remove and toggle APIs.


  (function () {
    "use strict";

    var testElement = document.createElement("_");
    testElement.classList.add("c1", "c2"); // Polyfill for IE 10/11 and Firefox <26, where classList.add and
    // classList.remove exist but support only one argument at a time.

    if (!testElement.classList.contains("c2")) {
      var createMethod = function createMethod(method) {
        var original = DOMTokenList.prototype[method];

        DOMTokenList.prototype[method] = function (token) {
          var i,
              len = arguments.length;

          for (i = 0; i < len; i++) {
            token = arguments[i];
            original.call(this, token);
          }
        };
      };

      createMethod('add');
      createMethod('remove');
    }

    testElement.classList.toggle("c3", false); // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
    // support the second argument.

    if (testElement.classList.contains("c3")) {
      var _toggle = DOMTokenList.prototype.toggle;

      DOMTokenList.prototype.toggle = function (token, force) {
        if (1 in arguments && !this.contains(token) === !force) {
          return force;
        } else {
          return _toggle.call(this, token);
        }
      };
    } // replace() polyfill


    if (!("replace" in document.createElement("_").classList)) {
      DOMTokenList.prototype.replace = function (token, replacement_token) {
        var tokens = this.toString().split(" "),
            index = tokens.indexOf(token + "");

        if (~index) {
          tokens = tokens.slice(index);
          this.remove.apply(this, tokens);
          this.add(replacement_token);
          this.add.apply(this, tokens.slice(1));
        }
      };
    }

    testElement = null;
  })();
}
"use strict";

head.ready(function () {
  var DEFAULT_COLL_MENU_OPTION = "a";
  var NEW_COLL_MENU_OPTION = '__NEW__'; // "b";

  var IN_YOUR_COLLS_LABEL = 'This item is in your collection(s):';
  var $toolbar = $(".collectionLinks .select-collection");
  var $errormsg = $(".errormsg");
  var $infomsg = $(".infomsg");

  function display_error(msg) {
    if (!$errormsg.length) {
      $errormsg = $('<div class="alert alert-error errormsg" style="margin-top: 0.5rem"></div>').insertAfter($toolbar);
    }

    $errormsg.text(msg).show();
    HT.update_status(msg);
  }

  function display_info(msg) {
    if (!$infomsg.length) {
      $infomsg = $('<div class="alert alert-info infomsg" style="margin-top: 0.5rem"></div>').insertAfter($toolbar);
    }

    $infomsg.text(msg).show();
    HT.update_status(msg);
  }

  function hide_error() {
    $errormsg.hide().text();
  }

  function hide_info() {
    $infomsg.hide().text();
  }

  function get_url() {
    var url = "/cgi/mb";

    if (location.pathname.indexOf("/shcgi/") > -1) {
      url = "/shcgi/mb";
    }

    return url;
  }

  function parse_line(data) {
    var retval = {};
    var tmp = data.split("|");

    for (var i = 0; i < tmp.length; i++) {
      var kv = tmp[i].split("=");
      retval[kv[0]] = kv[1];
    }

    return retval;
  }

  function edit_collection_metadata(args) {
    var options = $.extend({
      creating: false,
      label: "Save Changes"
    }, args);
    var $block = $('<form class="form-horizontal" action="mb">' + '<div class="control-group">' + '<label class="control-label" for="edit-cn">Collection Name</label>' + '<div class="controls">' + '<input type="text" class="input-large" maxlength="100" name="cn" id="edit-cn" value="" placeholder="Your collection name" required />' + '<span class="label counter" id="edit-cn-count">100 <span class="offscreen">characters remaining</span></span>' + '</div>' + '</div>' + '<div class="control-group">' + '<label class="control-label" for="edit-desc">Description</label>' + '<div class="controls">' + '<textarea id="edit-desc" name="desc" rows="4" maxlength="255" class="input-large" placeholder="Add your collection description."></textarea>' + '<span class="label counter" id="edit-desc-count">255 <span class="offscreen">characters remaining</span></span>' + '</div>' + '</div>' + '<div class="control-group">' + '<label class="control-label">Is this collection <strong>Public</strong> or <strong>Private</strong>?</label>' + '<div class="controls">' + '<input type="radio" name="shrd" id="edit-shrd-0" value="0" checked="checked" > ' + '<label class="radio inline" for="edit-shrd-0">' + 'Private ' + '</label>' + '<input type="radio" name="shrd" id="edit-shrd-1" value="1" > ' + '<label class="radio inline" for="edit-shrd-1">' + 'Public ' + '</label>' + '</div>' + '</div>' + '</form>');

    if (options.cn) {
      $block.find("input[name=cn]").val(options.cn);
    }

    if (options.desc) {
      $block.find("textarea[name=desc]").val(options.desc);
    }

    if (options.shrd != null) {
      $block.find("input[name=shrd][value=" + options.shrd + ']').attr("checked", "checked");
    } else if (!HT.login_status.logged_in) {
      $block.find("input[name=shrd][value=0]").attr("checked", "checked");
      $('<div class="alert alert-info"><strong>This collection will be temporary</strong>. Log in to create permanent and public collections.</div>').appendTo($block); // remove the <label> that wraps the radio button

      $block.find("input[name=shrd][value=1]").remove();
      $block.find("label[for='edit-shrd-1']").remove();
    }

    if (options.$hidden) {
      options.$hidden.clone().appendTo($block);
    } else {
      $("<input type='hidden' name='c' />").appendTo($block).val(options.c);
      $("<input type='hidden' name='a' />").appendTo($block).val(options.a);
    }

    if (options.iid) {
      $("<input type='hidden' name='iid' />").appendTo($block).val(options.iid);
    }

    var $dialog = bootbox.dialog($block, [{
      "label": "Cancel",
      "class": "btn-dismiss"
    }, {
      "label": options.label,
      "class": "btn btn-primary btn-dismiss",
      callback: function callback() {
        var form = $block.get(0);

        if (!form.checkValidity()) {
          form.reportValidity();
          return false;
        }

        var cn = $.trim($block.find("input[name=cn]").val());
        var desc = $.trim($block.find("textarea[name=desc]").val());

        if (!cn) {
          // $('<div class="alert alert-error">You must enter a collection name.</div>').appendTo($block);
          return false;
        }

        display_info("Submitting; please wait...");
        submit_post({
          a: 'additsnc',
          cn: cn,
          desc: desc,
          shrd: $block.find("input[name=shrd]:checked").val()
        });
      }
    }]);
    $dialog.find("input[type=text],textarea").each(function () {
      var $this = $(this);
      var $count = $("#" + $this.attr('id') + "-count");
      var limit = $this.attr("maxlength");
      var num_remaining = limit - $this.val().length;
      $count.html("".concat(num_remaining, " <span class=\"offscreen\">characters remaining</span>"));
      $this.bind('keyup', function () {
        num_remaining = limit - $this.val().length;
        $count.html("".concat(num_remaining, " <span class=\"offscreen\">characters remaining</span>"));

        if (num_remaining <= 0) {
          var $label = $this.parents(".control-group").find("label");
          HT.update_status("".concat($.trim($label.text()), " has a maximum size of ").concat(limit, "."));
        } // $count.text(limit - $this.val().length);

      });
    });
  }

  function submit_post(params) {
    var data = $.extend({}, {
      page: 'ajax',
      id: HT.params.id
    }, params);
    $.ajax({
      url: get_url(),
      data: data
    }).done(function (data) {
      var params = parse_line(data);
      hide_info();

      if (params.result == 'ADD_ITEM_SUCCESS') {
        // do something
        add_item_to_collist(params);
      } else if (params.result == 'ADD_ITEM_FAILURE') {
        display_error("Item could not be added at this time.");
      } else {
        console.log(data);
      }
    }).fail(function (jqXHR, textStatus, errorThrown) {
      console.log(textStatus, errorThrown);
    });
  }

  function add_item_to_collist(params) {
    var $ul = $(".collection-membership");
    var coll_href = get_url() + "?a=listis;c=" + params.coll_id;
    var $a = $("<a>").attr("href", coll_href).text(params.coll_name);
    $("<li></li>").appendTo($ul).append($a);
    $ul.parents("div").removeClass("hide"); // $(".collection-membership-summary").text(IN_YOUR_COLLS_LABEL);
    // and then filter out the list from the select

    var $option = $toolbar.find("option[value='" + params.coll_id + "']");
    $option.remove();
    HT.update_status("Added collection ".concat(params.coll_name, " to your list."));
  }

  function confirm_large(collSize, addNumItems, callback) {
    if (collSize <= 1000 && collSize + addNumItems > 1000) {
      var numStr;

      if (addNumItems > 1) {
        numStr = "these " + addNumItems + " items";
      } else {
        numStr = "this item";
      }

      var msg = "Note: Your collection contains " + collSize + " items.  Adding " + numStr + " to your collection will increase its size to more than 1000 items.  This means your collection will not be searchable until it is indexed, usually within 48 hours.  After that, just newly added items will see this delay before they can be searched. \n\nDo you want to proceed?";
      confirm(msg, function (answer) {
        if (answer) {
          callback();
        }
      });
    } else {
      // all other cases are okay
      callback();
    }
  } // $("#PTaddItemBtn").click(function(e) {


  $("body").on('click', '#PTaddItemBtn', function (e) {
    e.preventDefault();
    var action = 'addI';
    hide_error();
    var selected_collection_id = $toolbar.find("select").val();
    var selected_collection_name = $toolbar.find("select option:selected").text();

    if (selected_collection_id == DEFAULT_COLL_MENU_OPTION) {
      display_error("You must select a collection.");
      return;
    }

    if (selected_collection_id == NEW_COLL_MENU_OPTION) {
      // deal with new collection
      edit_collection_metadata({
        creating: true,
        c: selected_collection_id,
        id: HT.params.id,
        a: action
      });
      return;
    } // var add_num_items = 1;
    // var COLL_SIZE_ARRAY = getCollSizeArray();
    // var coll_size = COLL_SIZE_ARRAY[selected_collection_id];
    // confirm_large(coll_size, add_num_items, function() {
    //     $form.submit();
    // })


    display_info("Adding item to your collection; please wait...");
    submit_post({
      c2: selected_collection_id,
      a: 'addits'
    });
  });
});
"use strict";

head.ready(function () {
  if (!$("html").is(".crms")) {
    return;
  } // if ( $(".navbar-static-top").data('loggedin') != 'YES' && window.location.protocol == 'https:' ) {
  //     // horrible hack
  //     var target = window.location.href.replace(/\$/g, '%24');
  //     var href = 'https://' + window.location.hostname + '/Shibboleth.sso/Login?entityID=https://shibboleth.umich.edu/idp/shibboleth&target=' + target;
  //     window.location.href = href;
  //     return;
  // }
  // define CRMS state


  HT.crms_state = 'CRMS-US'; // force CRMS users to a fixed image size

  HT.force_size = 200;
  var i = window.location.href.indexOf('skin=crmsworld');

  if (i + 1 != 0) {
    HT.crms_state = 'CRMS-World';
  } // display bib information


  var $div = $(".bibLinks");
  var $p = $div.find("p:first");
  $p.find("span:empty").each(function () {
    // $(this).text($(this).attr("content")).addClass("blocked");
    var fragment = '<span class="blocked"><strong>{label}:</strong> {content}</span>';
    fragment = fragment.replace('{label}', $(this).attr('property').substr(3)).replace('{content}', $(this).attr("content"));
    $p.append(fragment);
  });
  $p.removeClass('offscreen');
  var panel = document.querySelector('#panel-search');

  if (panel) {
    panel.open = false;
  }

  panel = document.querySelector('#panel-sections');

  if (panel) {
    panel.dataset.ignoreScrollIntoView = true;
    panel.open = true;
  }
});
"use strict";

// downloader
var HT = HT || {};
var photocopier_message = 'The copyright law of the United States (Title 17, U.S. Code) governs the making of reproductions of copyrighted material. Under certain conditions specified in the law, libraries and archives are authorized to furnish a reproduction. One of these specific conditions is that the reproduction is not to be “used for any purpose other than private study, scholarship, or research.” If a user makes a request for, or later uses, a reproduction for purposes in excess of “fair use,” that user may be liable for copyright infringement.';
HT.Downloader = {
  init: function init(options) {
    this.options = $.extend({}, this.options, options);
    this.id = this.options.params.id;
    this.pdf = {};
    this.options.superuser = this.options.params.debug && this.options.params.debug.indexOf('super') > -1;
    return this;
  },
  options: {},
  start: function start() {
    var self = this;
    this.bindEvents();
  },
  bindEvents: function bindEvents() {
    var self = this;
  },
  explainPdfAccess: function explainPdfAccess(link) {
    var html = $("#noDownloadAccess").html();
    html = html.replace('{DOWNLOAD_LINK}', $(this).attr("href"));
    this.$dialog = bootbox.alert(html);
  },
  downloadPdf: function downloadPdf(config) {
    var self = this;
    self.src = config.src;
    self.item_title = config.item_title;
    self.$config = config;
    var html = "<div class=\"initial\"><p>Setting up the download...</div>" + "<div class=\"offscreen\" role=\"status\" aria-atomic=\"true\" aria-live=\"polite\"></div>" + '<div class="progress progress-striped active hide" aria-hidden="true">' + '<div class="bar" width="0%"></div>' + '</div>' + "<div><p><a href=\"https://www.hathitrust.org/help_digital_library#DownloadTime\" target=\"_blank\">What affects the download speed?</a></p></div>";
    var header = 'Building your ' + self.item_title;
    var total = self.$config.selection.pages.length;

    if (total > 0) {
      var suffix = total == 1 ? 'page' : 'pages';
      header += ' (' + total + ' ' + suffix + ')';
    }

    self.$dialog = bootbox.dialog(html, [{
      label: 'Cancel',
      'class': 'btn-x-dismiss btn',
      callback: function callback() {
        if (self.$dialog.data('deactivated')) {
          self.$dialog.closeModal();
          return;
        }

        $.ajax({
          url: self.src + ';callback=HT.downloader.cancelDownload;stop=1',
          dataType: 'script',
          cache: false,
          error: function error(req, textStatus, errorThrown) {
            console.log("DOWNLOAD CANCELLED ERROR"); // self.$dialog.closeModal();

            console.log(req, textStatus, errorThrown);

            if (req.status == 503) {
              self.displayWarning(req);
            } else {
              self.displayError();
            }
          }
        });
      }
    }], {
      header: header,
      id: 'download'
    });
    self.$status = self.$dialog.find("div[role=status]");
    self.requestDownload();
  },
  requestDownload: function requestDownload() {
    var self = this;
    var data = {};

    if (self.$config.selection.pages.length > 0) {
      data['seq'] = self.$config.selection.seq;
    }

    switch (self.$config.downloadFormat) {
      case 'image-jpeg':
      case 'image-tiff':
        data['format'] = self.$config.downloadFormat == 'image-tiff' ? 'image/tiff' : 'image/jpeg';
        data['target_ppi'] = self.$config.imageResolution; // 300;

        data['bundle_format'] = 'zip';
        break;

      case 'plaintext-zip':
        data['bundle_format'] = 'zip';
        break;

      case 'plaintext':
        data['bundle_format'] = 'text';
        break;
    }

    if (self.options.superuser) {
      data['debug'] = 'super';
    }

    $.ajax({
      url: self.src.replace(/;/g, '&') + '&callback=HT.downloader.startDownloadMonitor',
      dataType: 'script',
      cache: false,
      data: data,
      error: function error(req, textStatus, errorThrown) {
        console.log("DOWNLOAD STARTUP NOT DETECTED");

        if (self.$dialog) {
          self.$dialog.closeModal();
        }

        if (req.status == 429) {
          self.displayWarning(req);
        } else if (req.status == 403) {
          self.display403(req);
        } else {
          self.displayError(req);
        }
      }
    });
  },
  cancelDownload: function cancelDownload(progress_url, download_url, total) {
    var self = this;
    self.clearTimer();
    self.$dialog.closeModal();
  },
  startDownloadMonitor: function startDownloadMonitor(progress_url, download_url, total) {
    var self = this;

    if (self.timer) {
      console.log("ALREADY POLLING");
      return;
    }

    self.pdf.progress_url = progress_url;
    self.pdf.download_url = download_url;
    self.pdf.total = total;

    if (self.options.superuser) {
      self.pdf.download_url += ';debug=super';
    }

    self.is_running = true;
    self.num_processed = 0;
    self.i = 0;
    self.timer = setInterval(function () {
      self.checkStatus();
    }, 2500); // do it once the first time

    self.checkStatus();
  },
  checkStatus: function checkStatus() {
    var self = this;
    self.i += 1;
    $.ajax({
      url: self.pdf.progress_url,
      data: {
        ts: new Date().getTime()
      },
      cache: false,
      dataType: 'json',
      success: function success(data) {
        var status = self.updateProgress(data);
        self.num_processed += 1;

        if (status.done) {
          self.clearTimer();
        } else if (status.error && status.num_attempts > 100) {
          self.$dialog.closeModal();
          self.displayProcessError();
          self.clearTimer();
          self.logError();
        } else if (status.error) {
          self.$dialog.closeModal();
          self.displayError();
          self.clearTimer();
        }
      },
      error: function error(req, textStatus, errorThrown) {
        console.log("FAILED: ", req, "/", textStatus, "/", errorThrown);
        self.$dialog.closeModal();
        self.clearTimer();

        if (req.status == 404 && (self.i > 25 || self.num_processed > 0)) {
          self.displayError();
        }
      }
    });
  },
  updateProgress: function updateProgress(data) {
    var self = this;
    var status = {
      done: false,
      error: false
    };
    var percent;
    var current = data.status;

    if (current == 'EOT' || current == 'DONE') {
      status.done = true;
      percent = 100;
    } else {
      current = data.current_page;
      percent = 100 * (current / self.pdf.total);
    }

    if (self.last_percent != percent) {
      self.last_percent = percent;
      self.num_attempts = 0;
    } else {
      self.num_attempts += 1;
    } // try 100 times, which amounts to ~100 seconds


    if (self.num_attempts > 100) {
      status.error = true;
    }

    if (self.$dialog.find(".initial").is(":visible")) {
      self.$dialog.find(".initial").html("<p>Please wait while we build your ".concat(self.item_title, ".</p>"));
      self.$dialog.find(".progress").removeClass("hide");
      self.updateStatusText("Please wait while we build your ".concat(self.item_title, "."));
    }

    self.$dialog.find(".bar").css({
      width: percent + '%'
    });

    if (percent == 100 && status.done) {
      self.$dialog.find(".progress").hide();
      var download_key = navigator.userAgent.indexOf('Mac OS X') != -1 ? 'RETURN' : 'ENTER';
      self.$dialog.find(".initial").html("<p>All done! Your ".concat(self.item_title, " is ready for download. <span class=\"offscreen\">Select ").concat(download_key, " to download.</span></p>"));
      self.updateStatusText("All done! Your ".concat(self.item_title, " is ready for download. Select ").concat(download_key, " to download.")); // self.$dialog.find(".done").show();

      var $download_btn = self.$dialog.find('.download-pdf');

      if (!$download_btn.length) {
        $download_btn = $('<a class="download-pdf btn btn-primary" download="download">Download {ITEM_TITLE}</a>'.replace('{ITEM_TITLE}', self.item_title)).attr('href', self.pdf.download_url);

        if ($download_btn.get(0).download == undefined) {
          $download_btn.attr('target', '_blank');
        }

        $download_btn.appendTo(self.$dialog.find(".modal__footer")).on('click', function (e) {
          // self.$link.trigger("click.google");
          var analyticsAction = "PT Download - ".concat(self.$config.downloadFormat.toUpperCase(), " - ").concat(self.$config.trackingAction);

          if (self.$config.downloadFormat.indexOf('image-') > -1) {
            analyticsAction += ' - ' + (self.$config.imageResolution == 0 ? 'full' : self.$config.imageResolution);
          }

          HT.analytics.trackEvent({
            label: '-',
            category: 'PT',
            action: analyticsAction
          });

          if (window.hj) {
            hj('tagRecording', ["PT Download - ".concat(self.$config.downloadFormat.toUpperCase(), " - ").concat(self.$config.trackingAction)]);
          }

          ;
          setTimeout(function () {
            self.$dialog.closeModal();
            $download_btn.remove(); // HT.reader.controls.selectinator._clearSelection();
            // HT.reader.emit('downloadDone');
          }, 1500);
          e.stopPropagation();
        });
        $download_btn.focus();
      }

      self.$dialog.data('deactivated', true); // self.updateStatusText(`Your ${self.item_title} is ready for download. Press return to download.`);
      // still could cancel
    } else {
      var message = data.message ? data.message : "Please wait while we build your ".concat(self.item_title);
      self.$dialog.find(".initial").text("".concat(message, " (").concat(Math.ceil(percent), "% completed)."));
      self.updateStatusText("".concat(Math.ceil(percent), "% completed"));
    }

    return status;
  },
  clearTimer: function clearTimer() {
    var self = this;

    if (self.timer) {
      clearInterval(self.timer);
      self.timer = null;
    }
  },
  displayWarning: function displayWarning(req) {
    var self = this;
    var timeout = parseInt(req.getResponseHeader('X-Choke-UntilEpoch'));
    var rate = req.getResponseHeader('X-Choke-Rate');

    if (timeout <= 5) {
      // just punt and wait it out
      setTimeout(function () {
        self.requestDownload();
      }, 5000);
      return;
    }

    timeout *= 1000;
    var now = new Date().getTime();
    var countdown = Math.ceil((timeout - now) / 1000);
    var html = ('<div>' + '<p>You have exceeded the download rate of {rate}. You may proceed in <span id="throttle-timeout">{countdown}</span> seconds.</p>' + '<p>Download limits protect HathiTrust resources from abuse and help ensure a consistent experience for everyone.</p>' + '</div>').replace('{rate}', rate).replace('{countdown}', countdown);
    self.$dialog = bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-primary',
      callback: function callback() {
        clearInterval(self.countdown_timer);
        return true;
      }
    }]);
    self.countdown_timer = setInterval(function () {
      countdown -= 1;
      self.$dialog.find("#throttle-timeout").text(countdown);

      if (countdown == 0) {
        clearInterval(self.countdown_timer);
      }

      console.log("TIC TOC", countdown);
    }, 1000);
  },
  displayProcessError: function displayProcessError(req) {
    var html = '<p>' + 'Unfortunately, the process for creating your PDF has been interrupted. ' + 'Please click "OK" and try again.' + '</p>' + '<p>' + 'If this problem persists and you are unable to download this PDF after repeated attempts, ' + 'please notify us at <a href="/cgi/feedback/?page=form" data=m="pt" data-toggle="feedback tracking-action" data-tracking-action="Show Feedback">feedback@issues.hathitrust.org</a> ' + 'and include the URL of the book you were trying to access when the problem occurred.' + '</p>'; // bootbox.alert(html);

    bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-inverse'
    }], {
      classes: 'error'
    });
    console.log(req);
  },
  display403: function display403(req) {
    var responseText = req.responseText;
    responseText = responseText.replace('<html><body>', '').replace('</body></html>', '');
    var html = '<p>' + responseText + '</p>'; // bootbox.alert(html);

    bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-inverse'
    }], {
      classes: 'error'
    });
  },
  displayError: function displayError(req) {
    var html = '<p>' + 'There was a problem building your ' + this.item_title + '; staff have been notified.' + '</p>' + '<p>' + 'Please try again in 24 hours.' + '</p>'; // bootbox.alert(html);

    bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-inverse'
    }], {
      classes: 'error'
    });
    console.log(req);
  },
  logError: function logError() {
    var self = this;
    $.get(self.src + ';num_attempts=' + self.num_attempts);
  },
  updateStatusText: function updateStatusText(message) {
    var self = this;

    if (self._lastMessage != message) {
      if (self._lastTimer) {
        clearTimeout(self._lastTimer);
        self._lastTimer = null;
      }

      setTimeout(function () {
        self.$status.text(message);
        self._lastMessage = message;
        console.log("-- status:", message);
      }, 50);
      self._lastTimer = setTimeout(function () {
        self.$status.get(0).innerText = '';
      }, 500);
    }
  },
  EOT: true
};
var downloadForm;
var downloadFormatOptions;
var rangeOptions;
var downloadIdx = 0;
head.ready(function () {
  downloadForm = document.querySelector('#form-download-module');

  if (!downloadForm) {
    return;
  }

  HT.downloader = Object.create(HT.Downloader).init({
    params: HT.params
  });
  HT.downloader.start(); // non-jquery?

  downloadFormatOptions = Array.prototype.slice.call(downloadForm.querySelectorAll('input[name="download_format"]'));
  rangeOptions = Array.prototype.slice.call(downloadForm.querySelectorAll('.form-control[data-download-format-target]'));
  var downloadSubmit = downloadForm.querySelector('[type="submit"]');
  var hasFullPdfAccess = downloadForm.dataset.fullPdfAccess == 'allow';

  var updateDownloadFormatRangeOptions = function updateDownloadFormatRangeOptions(option) {
    var current_view = HT.reader && HT.reader.view ? HT.reader.view.name : 'search'; // pick a default

    rangeOptions.forEach(function (rangeOption) {
      var input = rangeOption.querySelector('input');
      input.disabled = !rangeOption.matches("[data-download-format-target~=\"".concat(option.value, "\"][data-view-target~=\"").concat(current_view, "\"]"));
    });

    if (option.value == 'epub') {
      rangeOptions.find(function (input) {
        return input.value == 'volume';
      }).checked = true;
    } // if ( ! hasFullPdfAccess ) {
    //   var checked = downloadForm.querySelector(`[data-download-format-target][data-view-target~="${HT.reader.view.name}"] input:checked`);
    //   if ( ! checked ) {
    //       // check the first one
    //       var input = downloadForm.querySelector(`[data-download-format-target][data-view-target~="${HT.reader.view.name}"] input`);
    //       input.checked = true;
    //   }
    // }


    var checked = downloadForm.querySelector("[data-download-format-target][data-view-target~=\"".concat(current_view, "\"] input:checked"));

    if (!checked) {
      // check the first one
      var input = downloadForm.querySelector("[data-download-format-target][data-view-target~=\"".concat(current_view, "\"] input"));

      if (input) {
        input.checked = true;
      }
    }
  };

  downloadFormatOptions.forEach(function (option) {
    option.addEventListener('change', function (event) {
      downloadForm.dataset.format = this.value;
      updateDownloadFormatRangeOptions(this);
    });
  });
  rangeOptions.forEach(function (div) {
    var input = div.querySelector('input');
    input.addEventListener('change', function (event) {
      downloadFormatOptions.forEach(function (formatOption) {
        formatOption.disabled = !(div.dataset.downloadFormatTarget.indexOf(formatOption.value) > -1);
      });

      if (this.value.indexOf('current-page') > -1 && HT.reader) {
        var seq = this.dataset.seq;

        HT.reader._updateImageResolution(seq);
      }
    });
  });

  HT.downloader.updateDownloadFormatRangeOptions = function () {
    var formatOption = downloadFormatOptions.find(function (input) {
      return input.checked;
    });
    updateDownloadFormatRangeOptions(formatOption);
  };

  HT.downloader.selectRangeOption = function (option) {
    var formatOption = downloadFormatOptions.find(function (input) {
      return input.checked;
    });

    if (formatOption.value == 'epub') {
      return;
    }

    var rangeOption = downloadForm.querySelector("input[name=\"range\"][value=\"".concat(option, "\"]"));
    rangeOption.checked = true;
    var div = rangeOption.parentElement;
    downloadFormatOptions.forEach(function (formatOption) {
      formatOption.disabled = !(div.dataset.downloadFormatTarget.indexOf(formatOption.value) > -1);
    });
  }; // default to PDF


  var pdfFormatOption = downloadFormatOptions.find(function (input) {
    return input.value == 'pdf';
  });
  pdfFormatOption.checked = true;
  updateDownloadFormatRangeOptions(pdfFormatOption);
  var tunnelForm = document.querySelector('#tunnel-download-module');

  if (HT.params.debug && HT.params.debug.indexOf('super') > -1) {
    var input = document.createElement('input');
    input.setAttribute('type', 'hidden');
    input.setAttribute('name', 'debug');
    input.setAttribute('value', 'super');
    input.setAttribute('data-fixed', 'true');
    tunnelForm.appendChild(input);
  }

  downloadForm.addEventListener('submit', function (event) {
    var formatOption = downloadForm.querySelector('input[name="download_format"]:checked');
    var rangeOption = downloadForm.querySelector('input[name="range"]:checked:not(:disabled)');
    var image_resolution_option = downloadForm.querySelector('input[name="target-ppi"]:checked');
    HT.prefs.set({
      pt: {
        dl: {
          imageRes: image_resolution_option.value
        }
      }
    }); // log 

    HT.analytics.logAction(undefined, 'download');
    var printable;
    event.preventDefault();
    event.stopPropagation();

    if (!rangeOption) {
      // no valid range option was chosen
      alert("Please choose a valid range for this download format.");
      event.preventDefault();
      return false;
    }

    var action = tunnelForm.dataset.actionTemplate + formatOption.value.split('-')[0]; // var action = tunnelForm.dataset.actionTemplate + ( formatOption.value == 'plaintext-zip' ? 'plaintext' : formatOption.value );

    var selection = {
      pages: []
    };

    if (rangeOption.value == 'selected-pages') {
      selection.pages = HT.reader.controls.selectinator._getPageSelection();
      selection.isSelection = true;

      if (selection.pages.length == 0) {
        var buttons = [];
        var msg = ["<p>You haven't selected any pages to download.</p>"];
        msg.push("<p>To select pages, use the page selection checkbox in the page toolbar.");
        msg.push("<p class=\"centered\" style=\"text-align: center\"><img alt=\"animation of checking page selection in the page toolbar\" src=\"/pt/web/graphics/page-selection.gif\" /></p>");
        msg.push("<p><tt>shift + click</tt> to de/select the pages between this page and a previously selected page.");
        msg.push("<p>Pages you select will be listed in the download module.");
        msg = msg.join("\n");
        buttons.push({
          label: "OK",
          'class': 'btn-dismiss'
        });
        bootbox.dialog(msg, buttons);
        event.preventDefault();
        return false;
      }
    } else if (rangeOption.value.indexOf('current-page') > -1) {
      var page;

      switch (rangeOption.value) {
        case 'current-page':
          page = [HT.reader.view.currentLocation()];
          break;

        case 'current-page-verso':
          page = [HT.reader.view.currentLocation('VERSO')];
          break;

        case 'current-page-recto':
          page = [HT.reader.view.currentLocation('RECTO')];
          break;
      }

      if (!page) {// probably impossible?
      }

      selection.pages = [page];
    }

    if (selection.pages.length > 0) {
      selection.seq = HT.reader.controls.selectinator ? HT.reader.controls.selectinator._getFlattenedSelection(selection.pages) : selection.pages;
    } // image-tiff is slow enough that it should fall to the modal sooner


    var partialUpperLmit = formatOption.value == 'image-tiff' ? 1 : 10;

    if (rangeOption.dataset.isPartial == 'true' && selection.pages.length <= partialUpperLmit) {
      // delete any existing inputs
      tunnelForm.querySelectorAll('input:not([data-fixed])').forEach(function (input) {
        tunnelForm.removeChild(input);
      });

      if (formatOption.value == 'image-tiff' || formatOption.value == 'image-jpeg') {
        var size_attr = "target_ppi";
        var image_format_attr = 'format';
        var size_value = image_resolution_option.value;

        if (selection.pages.length == 1) {
          // slight difference
          action = '/cgi/imgsrv/image';
          size_attr = "size";
          size_value = size_value == '0' ? 'full' : "ppi:".concat(size_value);
        }

        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", size_attr);
        input.setAttribute("value", size_value);
        tunnelForm.appendChild(input);
        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", image_format_attr);
        input.setAttribute("value", 'image/' + formatOption.value.split('-')[1]);
        tunnelForm.appendChild(input);
      } else if (formatOption.value == 'plaintext-zip') {
        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", 'bundle_format');
        input.setAttribute("value", "zip");
        tunnelForm.appendChild(input);
      }

      selection.seq.forEach(function (range) {
        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", "seq");
        input.setAttribute("value", range);
        tunnelForm.appendChild(input);
      });
      tunnelForm.action = action; // HT.disableUnloadTimeout = true;
      // remove old iframes

      document.querySelectorAll('iframe.download-module').forEach(function (iframe) {
        document.body.removeChild(iframe);
      });
      downloadIdx += 1;
      var tracker = "D".concat(downloadIdx, ":");
      var tracker_input = document.createElement('input');
      tracker_input.setAttribute('type', 'hidden');
      tracker_input.setAttribute('name', 'tracker');
      tracker_input.setAttribute('value', tracker);
      tunnelForm.appendChild(tracker_input);
      var iframe = document.createElement('iframe');
      iframe.setAttribute('name', "download-module-".concat(downloadIdx));
      iframe.setAttribute('aria-hidden', 'true');
      iframe.setAttribute('class', 'download-module');
      iframe.style.opacity = 0;
      document.body.appendChild(iframe);
      tunnelForm.setAttribute('target', iframe.getAttribute('name'));
      downloadSubmit.disabled = true;
      downloadSubmit.classList.add('btn-loading');
      var trackerInterval = setInterval(function () {
        var value = $.cookie('tracker') || '';

        if (HT.is_dev) {
          console.log("--?", tracker, value);
        }

        if (value.indexOf(tracker) > -1) {
          $.removeCookie('tracker', {
            path: '/'
          });
          clearInterval(trackerInterval);
          downloadSubmit.classList.remove('btn-loading');
          downloadSubmit.disabled = false;
          HT.disableUnloadTimeout = false;
        }
      }, 100);
      var analyticsAction = "PT Download - ".concat(formatOption.value.toUpperCase(), " - ").concat(rangeOption.value);

      if (formatOption.value.indexOf('image-') > -1) {
        analyticsAction += ' - ' + (image_resolution_option.value == '0' ? 'full' : image_resolution_option.value);
      }

      HT.analytics.trackEvent({
        label: '-',
        category: 'PT',
        action: analyticsAction
      });

      if (window.hj) {
        hj('tagRecording', ["PT Download - ".concat(formatOption.value.toUpperCase(), " - ").concat(rangeOption.value)]);
      }

      ;
      tunnelForm.submit();
      return false;
    }

    var _format_titles = {};
    _format_titles.pdf = 'PDF';
    _format_titles.epub = 'EPUB';
    _format_titles.plaintext = 'Text (.txt)';
    _format_titles['plaintext-zip'] = 'Text (.zip)';
    _format_titles['image-jpeg'] = 'Image (JPEG)';
    _format_titles['image-tiff'] = 'Image (TIFF)'; // _format_titles.image = `Image (${image_format_option.value == 'image/jpeg' ? 'JPEG' : 'TIFF'})`;
    // _format_titles.image = 'Image (JPEG)';
    // invoke the downloader

    HT.downloader.downloadPdf({
      src: action + '?id=' + HT.params.id,
      item_title: _format_titles[formatOption.value],
      selection: selection,
      downloadFormat: formatOption.value,
      trackingAction: rangeOption.value,
      imageResolution: image_resolution_option.value
    });
    return false;
  });
});
"use strict";

// supply method for creating an embeddable URL
head.ready(function () {
  var side_short = "450";
  var side_long = "700";
  var htId = HT.params.id;
  var embedHelpLink = "https://www.hathitrust.org/embed";
  var codeblock_txt;

  var codeblock_txt_a = function codeblock_txt_a(w, h) {
    return '<iframe width="' + w + '" height="' + h + '" ';
  };

  var codeblock_txt_b = 'src="https://hdl.handle.net/2027/' + htId + '?urlappend=%3Bui=embed"></iframe>';
  var $block = $('<div class="embedUrlContainer">' + '<h3>Embed This Book ' + '<a id="embedHelpIcon" default-form="data-default-form" ' + 'href="' + embedHelpLink + '" target="_blank"><i class="icomoon icomoon-help" aria-hidden="true"></i><span class="offscreen">Help: Embedding HathiTrust Books</span></a></h3>' + '<form>' + '    <span class="help-block">Copy the code below and paste it into the HTML of any website or blog.</span>' + '    <label for="codeblock" class="offscreen">Code Block</label>' + '    <textarea class="input-xlarge" id="codeblock" name="codeblock" rows="3">' + codeblock_txt_a(side_short, side_long) + codeblock_txt_b + '</textarea>' + '<div class="controls">' + '<input type="radio" name="view" id="view-scroll" value="0" checked="checked" >' + '<label class="radio inline" for="view-scroll">' + '<span class="icomoon icomoon-scroll"/> Scroll View ' + '</label>' + '<input type="radio" name="view" id="view-flip" value="1" >' + '<label class="radio inline" for="view-flip">' + '<span class="icomoon icomoon-book-alt2"/> Flip View ' + '</label>' + '</div>' + '</form>' + '</div>'); // $("#embedHtml").click(function(e) {

  $("body").on('click', '#embedHtml', function (e) {
    e.preventDefault();
    bootbox.dialog($block, [{
      "label": "Cancel",
      "class": "btn-dismiss"
    }]); // Custom width for bounding '.modal' 

    $block.closest('.modal').addClass("bootboxMediumWidth"); // Select entirety of codeblock for easy copying

    var textarea = $block.find("textarea[name=codeblock]");
    textarea.on("click", function () {
      $(this).select();
    }); // Modify codeblock to one of two views 

    $('input:radio[id="view-scroll"]').click(function () {
      codeblock_txt = codeblock_txt_a(side_short, side_long) + codeblock_txt_b;
      textarea.val(codeblock_txt);
    });
    $('input:radio[id="view-flip"]').click(function () {
      codeblock_txt = codeblock_txt_a(side_long, side_short) + codeblock_txt_b;
      textarea.val(codeblock_txt);
    });
  });
});
"use strict";

// supply method for feedback system
var HT = HT || {};
HT.feedback = {};

HT.feedback.dialog = function () {
  var html = '<form>' + '    <fieldset>' + '        <legend>Email Address</legend>' + '        <label for="email" class="offscreen">EMail Address</label>' + '        <input type="text" class="input-xlarge" placeholder="[Your email address]" name="email" id="email" />' + '        <span class="help-block">We will make every effort to address copyright issues by the next business day after notification.</span>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Overall page readability and quality</legend>' + '        <div class="alert alert-help">Select one option that applies</div>' + '        <div class="control">' + '            <input type="radio" name="Quality" id="pt-feedback-quality-1" value="readable" />' + '            <label class="radio" for="pt-feedback-quality-1" >' + '                Few problems, entire page is readable' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Quality" id="pt-feedback-quality-2" value="someproblems" />' + '            <label class="radio" for="pt-feedback-quality-2">' + '                Some problems, but still readable' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Quality" value="difficult" id="pt-feedback-quality-3" />' + '            <label class="radio" for="pt-feedback-quality-3">' + '                Significant problems, difficult or impossible to read' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Quality" value="none" checked="checked" id="pt-feedback-quality-4" />' + '            <label class="radio" for="pt-feedback-quality-4">' + '                (No problems)' + '            </label>' + '        </div>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Specific page image problems?</legend>' + '        <div class="alert alert-help">Select any that apply</div>' + '        <div class="control">' + '            <input type="checkbox" name="blurry" value="1" id="pt-feedback-problems-1" />' + '            <label for="pt-feedback-problems-1">' + '                Missing parts of the page' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="checkbox" name="blurry" value="1" id="pt-feedback-problems-2"  />' + '            <label for="pt-feedback-problems-2">' + '                Blurry text' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="checkbox" name="curved" value="1" id="pt-feedback-problems-3"  />' + '            <label for="pt-feedback-problems-3">' + '                Curved or distorted text' + '            </label>' + '        </div>' + '        <div class="control">' + '            <label for="pt-feedback-problems-other">Other problem </label><input type="text" class="input-medium" name="other" value="" id="pt-feedback-problems-other"  />' + '        </div>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Problems with access rights?</legend>' + '        <span class="help-block" style="margin-bottom: 1rem;"><strong>' + '            (See also: <a href="http://www.hathitrust.org/take_down_policy" target="_blank">take-down policy</a>)' + '        </strong></span>' + '        <div class="alert alert-help">Select one option that applies</div>' + '        <div class="control">' + '            <input type="radio" name="Rights" value="noaccess" id="pt-feedback-access-1" />' + '            <label for="pt-feedback-access-1">' + '                This item is in the public domain, but I don\'t have access to it.' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Rights" value="access" id="pt-feedback-access-2" />' + '            <label for="pt-feedback-access-2">' + '                    I have access to this item, but should not.' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Rights" value="none" checked="checked" id="pt-feedback-access-3" />' + '            <label for="pt-feedback-access-3">' + '                (No problems)' + '            </label>' + '        </div>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Other problems or comments?</legend>' + '        <p>' + '            <label class="offscreen" for="comments">Other problems or comments?</label>' + '            <textarea id="comments" name="comments" rows="3"></textarea>' + '        </p>' + '    </fieldset>' + '</form>';
  var $form = $(html); // hidden fields

  $("<input type='hidden' name='SysID' />").val(HT.params.id).appendTo($form);
  $("<input type='hidden' name='RecordURL' />").val(HT.params.RecordURL).appendTo($form);

  if (HT.crms_state) {
    $("<input type='hidden' name='CRMS' />").val(HT.crms_state).appendTo($form);
    var $email = $form.find("#email");
    $email.val(HT.crms_state);
    $email.hide();
    $("<span>" + HT.crms_state + "</span><br />").insertAfter($email);
    $form.find(".help-block").hide();
  }

  if (HT.reader) {
    $("<input type='hidden' name='SeqNo' />").val(HT.params.seq).appendTo($form);
  } else if (HT.params.seq) {
    $("<input type='hidden' name='SeqNo' />").val(HT.params.seq).appendTo($form);
  }

  $("<input type='hidden' name='view' />").val(HT.params.view).appendTo($form);

  if (HT.params.skin) {
    $("<input type='hidden' name='skin' />").val(HT.params.skin).appendTo($form);
  } // if ( HT.crms_state ) {
  //     $form.find("#email").val(HT.crms_state);
  // }


  return $form;
};
"use strict";

var HT = HT || {};
head.ready(function () {
  HT.analytics.getContentGroupData = function () {
    // cheat
    var suffix = '';
    var content_group = 4;

    if ($("#section").data("view") == 'restricted') {
      content_group = 2;
      suffix = '#restricted';
    } else if (window.location.href.indexOf("debug=super") > -1) {
      content_group = 3;
      suffix = '#super';
    }

    return {
      index: content_group,
      value: HT.params.id + suffix
    };
  };

  HT.analytics._simplifyPageHref = function (href) {
    var url = $.url(href);
    var new_href = url.segment();
    new_href.push($("html").data('content-provider'));
    new_href.push(url.param("id"));
    var qs = '?skin=2021';

    if (new_href.indexOf("search") > -1 && url.param('q1')) {
      qs += '&q1=' + url.param('q1');
    }

    new_href = "/" + new_href.join("/") + qs;
    return new_href;
  };

  HT.analytics.getPageHref = function () {
    return HT.analytics._simplifyPageHref();
  };

  HT.analytics.getTitle = function () {
    var title = document.querySelector('title');

    if (location.pathname == '/cgi/pt' && title.dataset.title) {
      return title.dataset.title;
    }

    return document.title;
  };

  document.querySelector('title').dataset.title = document.title;
  $("body").on('click', ".shepherd-footer .shepherd-button", function (event) {
    var $button = $(this);
    var action = $button.text() == 'Exit' ? 'exit' : 'next';
    var $modal = $button.parents(".shepherd-element");
    var stepId = $modal.attr('data-shepherd-step-id');
    HT.analytics.trackEvent({
      category: 'PT.walkthrough',
      action: "".concat(stepId, ":").concat(action),
      label: "".concat(stepId, ":").concat(action)
    });
  });
});
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (typeof Object.assign != 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target, varArgs) {
      // .length of function is 2
      'use strict';

      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }

      return to;
    },
    writable: true,
    configurable: true
  });
} // // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
// // https://tc39.github.io/ecma262/#sec-array.prototype.find
// if (!Array.prototype.find) {
//   Object.defineProperty(Array.prototype, 'find', {
//     value: function(predicate) {
//       // 1. Let O be ? ToObject(this value).
//       if (this == null) {
//         throw TypeError('"this" is null or not defined');
//       }
//       var o = Object(this);
//       // 2. Let len be ? ToLength(? Get(O, "length")).
//       var len = o.length >>> 0;
//       // 3. If IsCallable(predicate) is false, throw a TypeError exception.
//       if (typeof predicate !== 'function') {
//         throw TypeError('predicate must be a function');
//       }
//       // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
//       var thisArg = arguments[1];
//       // 5. Let k be 0.
//       var k = 0;
//       // 6. Repeat, while k < len
//       while (k < len) {
//         // a. Let Pk be ! ToString(k).
//         // b. Let kValue be ? Get(O, Pk).
//         // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
//         // d. If testResult is true, return kValue.
//         var kValue = o[k];
//         if (predicate.call(thisArg, kValue, k, o)) {
//           return kValue;
//         }
//         // e. Increase k by 1.
//         k++;
//       }
//       // 7. Return undefined.
//       return undefined;
//     },
//     configurable: true,
//     writable: true
//   });
// }
// https://developer.mozilla.org/en-US/docs/Web/API/Element/closest


if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}

if (!Element.prototype.closest) {
  Element.prototype.closest = function (s) {
    var el = this;

    do {
      if (Element.prototype.matches.call(el, s)) return el;
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1);

    return null;
  };
} // from: https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/after()/after().md


(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('after')) {
      return;
    }

    Object.defineProperty(item, 'after', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function after() {
        var argArr = Array.prototype.slice.call(arguments),
            docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this.nextSibling);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

function ReplaceWithPolyfill() {
  'use-strict'; // For safari, and IE > 10

  var parent = this.parentNode,
      i = arguments.length,
      currentNode;
  if (!parent) return;
  if (!i) // if there are no arguments
    parent.removeChild(this);

  while (i--) {
    // i-- decrements i and returns the value of i before the decrement
    currentNode = arguments[i];

    if (_typeof(currentNode) !== 'object') {
      currentNode = this.ownerDocument.createTextNode(currentNode);
    } else if (currentNode.parentNode) {
      currentNode.parentNode.removeChild(currentNode);
    } // the value of "i" below is after the decrement


    if (!i) // if currentNode is the first argument (currentNode === arguments[0])
      parent.replaceChild(currentNode, this);else // if currentNode isn't the first
      parent.insertBefore(currentNode, this.previousSibling);
  }
}

if (!Element.prototype.replaceWith) Element.prototype.replaceWith = ReplaceWithPolyfill;
if (!CharacterData.prototype.replaceWith) CharacterData.prototype.replaceWith = ReplaceWithPolyfill;
if (!DocumentType.prototype.replaceWith) DocumentType.prototype.replaceWith = ReplaceWithPolyfill;
"use strict";

head.ready(function () {
  if (location.pathname != '/cgi/pt/search') {
    return;
  }

  var $form = $(".form-search-volume");
  var $input_q1 = $form.find("input[name='q1']");
  var $input_sort = $form.find("input[name='sort']");
  var $input_start = $form.find("input[name='start']");
  var $body = $("body");

  var submit_form = function submit_form(event) {
    HT.beforeUnloadTimeout = 15000;
    var $form_ = $form;
    var $submit = $form_.find("button[type=submit]");

    if ($submit.hasClass("btn-loading")) {
      alert("Your search query has been submitted and is currently being processed.");

      if (event) {
        event.preventDefault();
      }

      return false;
    }

    var $input = $form_.find("input[type=text]");

    if (!$.trim($input.val())) {
      bootbox.alert("Please enter a term in the search box.");

      if (event) {
        event.preventDefault();
      }

      return false;
    }

    $submit.addClass("btn-loading").attr("disabled", "disabled");
    $(window).on('unload', function () {
      $(window).trigger('undo-loading');
    });
    return true;
  };

  $(window).on('undo-loading', function () {
    $("button.btn-loading").removeAttr("disabled").removeClass("btn-loading");
  });
  $("body").on('submit', 'form.form-search-volume', function (event) {
    return submit_form(event);
  });
  $("button[data-action='sort']").on('click', function (event) {
    var target = this;
    var value = target.dataset.value;

    if (value != $input_sort.val()) {
      $input_sort.val(value);
      $form.submit();
    }

    return;
  });
  $("button[data-action='clear-search']").on('click', function (event) {
    event.stopPropagation();
    $input_q1.val('');
    $(".results-search-form").nextAll().remove();
  });
  $("#action-start-jump").on('change', function () {
    var sz = parseInt($(this).data('sz'), 10);
    var value = parseInt($(this).val(), 10);
    var max = parseInt(this.max);
    var min = parseInt(this.min);

    if (isNaN(value) || value > max || value < min) {
      this.value = this.dataset.value;
      $("#action-start-jump-error").show();
      alert("Please enter a number between ".concat(min, " - ").concat(max));
      return;
    }

    var start = (value - 1) * sz + 1;
    $input_start.val(start);
    $form.submit(); // var $form_ = $("#form-search-volume");
    // $form_.append(`<input name='start' type="hidden" value="${start}" />`);
    // $form_.append(`<input name='sz' type="hidden" value="${sz}" />`);
    // $form_.submit();
  });
});
"use strict";

head.ready(function () {
  $("body").on('click', '#versionIcon', function (e) {
    e.preventDefault();
    bootbox.alert("<p>This is the date when this item was last updated. Version dates are updated when improvements such as higher quality scans or more complete scans have been made. <br /><br /><a href=\"/cgi/feedback?page=form\" data-default-form=\"data-default-form\" data-toggle=\"feedback tracking-action\" data-id=\"\" data-tracking-action=\"Show Feedback\">Contact us</a> for more information.</p>");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1cmwuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldFdpbmRvdy5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2lzU2Nyb2xsUGFyZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0U2Nyb2xsUGFyZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsIi4uLy4uL3NyYy91dGlscy9vcmRlck1vZGlmaWVycy5qcyIsIi4uLy4uL3NyYy91dGlscy9kZWJvdW5jZS5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9jb250YWlucy5qcyIsIi4uLy4uL3NyYy91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzIiwiLi4vLi4vc3JjL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanMiLCIuLi8uLi9zcmMvZW51bXMuanMiLCIuLi8uLi9zcmMvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcyIsIi4uLy4uL3NyYy9kb20tdXRpbHMvZ2V0RG9jdW1lbnRSZWN0LmpzIiwiLi4vLi4vc3JjL3V0aWxzL2dldFZhcmlhdGlvbi5qcyIsIi4uLy4uL3NyYy91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCIuLi8uLi9zcmMvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCIuLi8uLi9zcmMvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwiLi4vLi4vc3JjL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qcyIsIi4uLy4uL3NyYy91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCIuLi8uLi9zcmMvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCIuLi8uLi9zcmMvY3JlYXRlUG9wcGVyLmpzIiwiLi4vLi4vc3JjL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwiLi4vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwiLi4vLi4vc3JjL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9oaWRlLmpzIiwiLi4vLi4vc3JjL3V0aWxzL21hdGguanMiLCIuLi8uLi9zcmMvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcyIsIi4uLy4uL3NyYy9tb2RpZmllcnMvb2Zmc2V0LmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9mbGlwLmpzIiwiLi4vLi4vc3JjL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzIiwiLi4vLi4vc3JjL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanMiLCIuLi8uLi9zcmMvdXRpbHMvZ2V0QWx0QXhpcy5qcyIsIi4uLy4uL3NyYy91dGlscy93aXRoaW4uanMiLCIuLi8uLi9zcmMvbW9kaWZpZXJzL2Fycm93LmpzIiwiLi4vLi4vc3JjL3BvcHBlci1saXRlLmpzIiwiLi4vLi4vc3JjL3BvcHBlci5qcyIsIi4uL3NyYy9jc3MudHMiLCIuLi9zcmMvYnJvd3Nlci50cyIsIi4uL3NyYy9jb25zdGFudHMudHMiLCIuLi9zcmMvdXRpbHMudHMiLCIuLi9zcmMvZG9tLXV0aWxzLnRzIiwiLi4vc3JjL2JpbmRHbG9iYWxFdmVudExpc3RlbmVycy50cyIsIi4uL3NyYy92YWxpZGF0aW9uLnRzIiwiLi4vc3JjL3Byb3BzLnRzIiwiLi4vc3JjL3RlbXBsYXRlLnRzIiwiLi4vc3JjL2NyZWF0ZVRpcHB5LnRzIiwiLi4vc3JjL2luZGV4LnRzIiwiLi4vc3JjL2FkZG9ucy9jcmVhdGVTaW5nbGV0b24udHMiLCIuLi9zcmMvYWRkb25zL2RlbGVnYXRlLnRzIiwiLi4vc3JjL3BsdWdpbnMvYW5pbWF0ZUZpbGwudHMiLCIuLi9zcmMvcGx1Z2lucy9mb2xsb3dDdXJzb3IudHMiLCIuLi9zcmMvcGx1Z2lucy9pbmxpbmVQb3NpdGlvbmluZy50cyIsIi4uL3NyYy9wbHVnaW5zL3N0aWNreS50cyIsIi4uL2J1aWxkL2J1bmRsZS11bWQuanMiLCJfMDEtYmV0dGVyLWRvbS5qcyIsIl8wMi1iZXR0ZXItZGV0YWlscy1wb2x5ZmlsbC5qcyIsIl8wMy1hY2NvcmRpb25zLmpzIiwiXzA0LXRvb2x0aXBzLmpzIiwiX2Jhc2UuanMiLCJhY2Nlc3NfYmFubmVyLmpzIiwiY2xhc3NMaXN0LmpzIiwiY29sbGVjdGlvbl90b29scy5qcyIsImNybXMuanMiLCJkb3dubG9hZGVyLmpzIiwiZW1iZWRIVE1MX3BvcHVwLmpzIiwiZmVlZGJhY2suanMiLCJnb29nbGVfYW5hbHl0aWNzLmpzIiwicG9seWZpbGxzLmpzIiwic2VhcmNoX2luX2l0ZW0uanMiLCJ2ZXJzaW9uX3BvcHVwLmpzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJqUXVlcnkiLCIkIiwidW5kZWZpbmVkIiwidGFnMmF0dHIiLCJhIiwiaW1nIiwiZm9ybSIsImJhc2UiLCJzY3JpcHQiLCJpZnJhbWUiLCJsaW5rIiwia2V5IiwiYWxpYXNlcyIsInBhcnNlciIsInN0cmljdCIsImxvb3NlIiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJpc2ludCIsInBhcnNlVXJpIiwidXJsIiwic3RyaWN0TW9kZSIsInN0ciIsImRlY29kZVVSSSIsInJlcyIsImV4ZWMiLCJ1cmkiLCJhdHRyIiwicGFyYW0iLCJzZWciLCJpIiwicGFyc2VTdHJpbmciLCJwYXRoIiwicmVwbGFjZSIsInNwbGl0IiwiZnJhZ21lbnQiLCJob3N0IiwicHJvdG9jb2wiLCJwb3J0IiwiZ2V0QXR0ck5hbWUiLCJlbG0iLCJ0biIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInByb21vdGUiLCJwYXJlbnQiLCJsZW5ndGgiLCJ0IiwicGFyc2UiLCJwYXJ0cyIsInZhbCIsInBhcnQiLCJzaGlmdCIsImlzQXJyYXkiLCJwdXNoIiwib2JqIiwia2V5cyIsImluZGV4T2YiLCJzdWJzdHIiLCJ0ZXN0IiwibWVyZ2UiLCJsZW4iLCJsYXN0IiwiayIsInNldCIsInJlZHVjZSIsIlN0cmluZyIsInJldCIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIiwiZXFsIiwiYnJhY2UiLCJsYXN0QnJhY2VJbktleSIsInYiLCJjIiwiYWNjdW11bGF0b3IiLCJsIiwiY3VyciIsImFyZ3VtZW50cyIsImNhbGwiLCJ2QXJnIiwicHJvcCIsImhhc093blByb3BlcnR5IiwicHVybCIsIndpbmRvdyIsImxvY2F0aW9uIiwiZGF0YSIsInF1ZXJ5IiwiZnBhcmFtIiwic2VnbWVudCIsImZzZWdtZW50IiwiZm4iLCJnZXRXaW5kb3ciLCJub2RlIiwib3duZXJEb2N1bWVudCIsImlzRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50IiwiaW5jbHVkZVNjYWxlIiwicmVjdCIsInNjYWxlWCIsInNjYWxlWSIsIm9mZnNldEhlaWdodCIsIm9mZnNldFdpZHRoIiwid2lkdGgiLCJyb3VuZCIsImhlaWdodCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIngiLCJ5IiwiZ2V0V2luZG93U2Nyb2xsIiwic2Nyb2xsTGVmdCIsIndpbiIsInNjcm9sbFRvcCIsImdldE5vZGVOYW1lIiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImdldENvbXB1dGVkU3R5bGUiLCJpc1Njcm9sbFBhcmVudCIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsIm9mZnNldFBhcmVudCIsImlzRml4ZWQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsImlzRWxlbWVudFNjYWxlZCIsIm9mZnNldFBhcmVudElzU2NhbGVkIiwib2Zmc2V0cyIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbCIsImdldExheW91dFJlY3QiLCJjbGllbnRSZWN0IiwiTWF0aCIsImdldFBhcmVudE5vZGUiLCJnZXRTY3JvbGxQYXJlbnQiLCJsaXN0U2Nyb2xsUGFyZW50cyIsImxpc3QiLCJzY3JvbGxQYXJlbnQiLCJpc0JvZHkiLCJ0YXJnZXQiLCJ1cGRhdGVkTGlzdCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJnZXRPZmZzZXRQYXJlbnQiLCJpc0ZpcmVmb3giLCJuYXZpZ2F0b3IiLCJnZXRDb250YWluaW5nQmxvY2siLCJjdXJyZW50Tm9kZSIsImNzcyIsIm9yZGVyIiwibW9kaWZpZXJzIiwibW9kaWZpZXIiLCJ2aXNpdGVkIiwiZGVwIiwiZGVwTW9kaWZpZXIiLCJtYXAiLCJzb3J0IiwiTWFwIiwiU2V0IiwicmVzdWx0IiwiZGVib3VuY2UiLCJwZW5kaW5nIiwiUHJvbWlzZSIsImdldEJhc2VQbGFjZW1lbnQiLCJwbGFjZW1lbnQiLCJjb250YWlucyIsImNoaWxkIiwicm9vdE5vZGUiLCJuZXh0IiwicmVjdFRvQ2xpZW50UmVjdCIsImdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlIiwiY2xpcHBpbmdQYXJlbnQiLCJ2aWV3cG9ydCIsImh0bWwiLCJ2aXN1YWxWaWV3cG9ydCIsIndpblNjcm9sbCIsImJvZHkiLCJtYXgiLCJnZXRDbGlwcGluZ1JlY3QiLCJib3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsIm1haW5DbGlwcGluZ1BhcmVudHMiLCJnZXRDbGlwcGluZ1BhcmVudHMiLCJjbGlwcGluZ1BhcmVudHMiLCJjbGlwcGVyRWxlbWVudCIsImFjY1JlY3QiLCJtaW4iLCJjbGlwcGluZ1JlY3QiLCJnZXRWYXJpYXRpb24iLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJjb21wdXRlT2Zmc2V0cyIsInJlZmVyZW5jZSIsImJhc2VQbGFjZW1lbnQiLCJjb21tb25YIiwiY29tbW9uWSIsIm1haW5BeGlzIiwidmFyaWF0aW9uIiwic3RhcnQiLCJlbmQiLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwidmFsdWUiLCJoYXNoTWFwIiwiZGV0ZWN0T3ZlcmZsb3ciLCJzdGF0ZSIsIm9wdGlvbnMiLCJwb3BwZXIiLCJhbHRCb3VuZGFyeSIsInBhZGRpbmciLCJiYXNlUGxhY2VtZW50cyIsImVsZW1lbnRDb250ZXh0IiwicG9wcGVyUmVjdCIsInN0cmF0ZWd5IiwicG9wcGVyT2Zmc2V0cyIsInBvcHBlckNsaWVudFJlY3QiLCJyZWZlcmVuY2VDbGllbnRSZWN0Iiwib3ZlcmZsb3dPZmZzZXRzIiwiY2xpcHBpbmdDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvZmZzZXREYXRhIiwib2Zmc2V0IiwibXVsdGlwbHkiLCJheGlzIiwiYXJlVmFsaWRFbGVtZW50cyIsImFyZ3MiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiZGVmYXVsdE1vZGlmaWVycyIsImRlZmF1bHRPcHRpb25zIiwiREVGQVVMVF9PUFRJT05TIiwiZWZmZWN0Q2xlYW51cEZucyIsIm9yZGVyZWRNb2RpZmllcnMiLCJtb2RpZmllcnNEYXRhIiwiZWxlbWVudHMiLCJhdHRyaWJ1dGVzIiwic3R5bGVzIiwiaXNEZXN0cm95ZWQiLCJpbnN0YW5jZSIsInNldE9wdGlvbnMiLCJzZXRPcHRpb25zQWN0aW9uIiwib3JkZXJNb2RpZmllcnMiLCJhY2MiLCJwaGFzZSIsIm1lcmdlQnlOYW1lIiwibWVyZ2VkIiwiY3VycmVudCIsImV4aXN0aW5nIiwibSIsIm5hbWUiLCJjbGVhbnVwRm4iLCJlZmZlY3QiLCJub29wRm4iLCJmb3JjZVVwZGF0ZSIsImluZGV4IiwidXBkYXRlIiwicmVzb2x2ZSIsImRlc3Ryb3kiLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwibWFwVG9TdHlsZXMiLCJwb3NpdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwicm91bmRPZmZzZXRzQnlEUFIiLCJkcHIiLCJoYXNYIiwic2lkZVgiLCJzaWRlWSIsImhlaWdodFByb3AiLCJ3aWR0aFByb3AiLCJjb21tb25TdHlsZXMiLCJ1bnNldFNpZGVzIiwiaGFzWSIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwiZ2V0U2lkZU9mZnNldHMiLCJvdmVyZmxvdyIsInByZXZlbnRlZE9mZnNldHMiLCJpc0FueVNpZGVGdWxseUNsaXBwZWQiLCJzaWRlIiwidmFyaWF0aW9uUGxhY2VtZW50cyIsInBsYWNlbWVudHMiLCJhdXRvIiwibW9kaWZpZXJQaGFzZXMiLCJwYXNzaXZlIiwiZW5hYmxlZCIsImVmZmVjdCQyIiwicmVzaXplIiwic2Nyb2xsUGFyZW50cyIsImNvbXB1dGVTdHlsZXMiLCJhcHBseVN0eWxlcyIsInN0eWxlIiwiZWZmZWN0JDEiLCJpbml0aWFsU3R5bGVzIiwibWFyZ2luIiwiYXJyb3ciLCJwcm9wZXJ0eSIsImF0dHJpYnV0ZSIsInJlcXVpcmVzIiwiZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkiLCJpbnZlcnREaXN0YW5jZSIsInJlY3RzIiwiZGlzdGFuY2UiLCJza2lkZGluZyIsImhhc2giLCJmbGlwIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJhbGxQbGFjZW1lbnRzIiwiYWxsb3dlZFBsYWNlbWVudHMiLCJvdmVyZmxvd3MiLCJiIiwiY2hlY2tzTWFwIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImNoZWNrcyIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVjayIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpdHRpbmdQbGFjZW1lbnQiLCJyZXF1aXJlc0lmRXhpc3RzIiwiX3NraXAiLCJwcmV2ZW50T3ZlcmZsb3ciLCJjaGVja01haW5BeGlzIiwiY2hlY2tBbHRBeGlzIiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsInRldGhlck9mZnNldFZhbHVlIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJ0ZXRoZXIiLCJtaW5MZW4iLCJhcnJvd0VsZW1lbnQiLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJtYXRoTWF4IiwibWluJDEiLCJtYXRoTWluIiwiYXJyb3dSZWN0IiwiYXJyb3dMZW4iLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJtYXhMZW4iLCJtaW5PZmZzZXQiLCJvZmZzZXRNb2RpZmllclZhbHVlIiwiYXJyb3dPZmZzZXRQYXJlbnQiLCJtYXhPZmZzZXQiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJhbHRBeGlzIiwibWluUHJvcCIsIm1heFByb3AiLCJlbmREaWZmIiwic3RhcnREaWZmIiwiY2VudGVyIiwiY2xpZW50U2l6ZSIsImhpZGUiLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsImNyZWF0ZVBvcHBlciIsImRlZmF1bHRNb2RpZmllcnMkMSIsImV2ZW50TGlzdGVuZXJzIiwiZG9jdW1lbnQiLCJoZWFkIiwiZmlyc3RTdHlsZU9yTGlua1RhZyIsImlzQnJvd3NlciIsInVhIiwiaXNJRSIsIlJPVU5EX0FSUk9XIiwiQk9YX0NMQVNTIiwiQ09OVEVOVF9DTEFTUyIsIkJBQ0tEUk9QX0NMQVNTIiwiQVJST1dfQ0xBU1MiLCJTVkdfQVJST1dfQ0xBU1MiLCJUT1VDSF9PUFRJT05TIiwiY2FwdHVyZSIsIkFycmF5IiwiZGVmYXVsdFZhbHVlIiwidHlwZSIsIm1zIiwiY2xlYXJUaW1lb3V0IiwidGltZW91dCIsInNldFRpbWVvdXQiLCJjbG9uZSIsImFyciIsImlzVHlwZSIsImlzTm9kZUxpc3QiLCJhcnJheUZyb20iLCJlbHMiLCJlbCIsIm5vcm1hbGl6ZVRvQXJyYXkiLCJjbGllbnRYIiwiZXZlbnQiLCJjbGllbnRZIiwicG9wcGVyU3RhdGUiLCJwcm9wcyIsImludGVyYWN0aXZlQm9yZGVyIiwidG9wRGlzdGFuY2UiLCJib3R0b21EaXN0YW5jZSIsImxlZnREaXN0YW5jZSIsInJpZ2h0RGlzdGFuY2UiLCJleGNlZWRzVG9wIiwiZXhjZWVkc0JvdHRvbSIsImV4Y2VlZHNMZWZ0IiwiZXhjZWVkc1JpZ2h0IiwibWV0aG9kIiwiYWN0aW9uIiwiYm94IiwiY3VycmVudElucHV0IiwiaXNUb3VjaCIsImxhc3RNb3VzZU1vdmVUaW1lIiwibm93IiwicGVyZm9ybWFuY2UiLCJhY3RpdmVFbGVtZW50IiwiaXNSZWZlcmVuY2VFbGVtZW50IiwidHh0Iiwic3BhY2VzQW5kVGFicyIsImxpbmVTdGFydFdpdGhTcGFjZXMiLCJjbGVhbiIsImdldERldk1lc3NhZ2UiLCJyZXNldFZpc2l0ZWRNZXNzYWdlcyIsInZpc2l0ZWRNZXNzYWdlcyIsImNvbmRpdGlvbiIsImdldEZvcm1hdHRlZE1lc3NhZ2UiLCJkaWRQYXNzRmFsc3lWYWx1ZSIsImRpZFBhc3NQbGFpbk9iamVjdCIsInRhcmdldHMiLCJlcnJvcldoZW4iLCJwbHVnaW5Qcm9wcyIsImFuaW1hdGVGaWxsIiwiZm9sbG93Q3Vyc29yIiwiaW5saW5lUG9zaXRpb25pbmciLCJzdGlja3kiLCJyZW5kZXJQcm9wcyIsImFsbG93SFRNTCIsImFuaW1hdGlvbiIsImNvbnRlbnQiLCJpbmVydGlhIiwibWF4V2lkdGgiLCJyb2xlIiwidGhlbWUiLCJ6SW5kZXgiLCJkZWZhdWx0UHJvcHMiLCJhcHBlbmRUbyIsImFyaWEiLCJleHBhbmRlZCIsImRlbGF5IiwiZHVyYXRpb24iLCJnZXRSZWZlcmVuY2VDbGllbnRSZWN0IiwiaGlkZU9uQ2xpY2siLCJpZ25vcmVBdHRyaWJ1dGVzIiwiaW50ZXJhY3RpdmUiLCJpbnRlcmFjdGl2ZURlYm91bmNlIiwibW92ZVRyYW5zaXRpb24iLCJvbkFmdGVyVXBkYXRlIiwib25CZWZvcmVVcGRhdGUiLCJvbkNyZWF0ZSIsIm9uRGVzdHJveSIsIm9uSGlkZGVuIiwib25IaWRlIiwib25Nb3VudCIsIm9uU2hvdyIsIm9uU2hvd24iLCJvblRyaWdnZXIiLCJvblVudHJpZ2dlciIsIm9uQ2xpY2tPdXRzaWRlIiwicGx1Z2lucyIsInBvcHBlck9wdGlvbnMiLCJyZW5kZXIiLCJzaG93T25DcmVhdGUiLCJ0b3VjaCIsInRyaWdnZXIiLCJ0cmlnZ2VyVGFyZ2V0IiwiZGVmYXVsdEtleXMiLCJzZXREZWZhdWx0UHJvcHMiLCJ2YWxpZGF0ZVByb3BzIiwicGFydGlhbFByb3BzIiwicGFzc2VkUHJvcHMiLCJwbHVnaW4iLCJwcm9wS2V5cyIsImdldEV4dGVuZGVkUGFzc2VkUHJvcHMiLCJ2YWx1ZUFzU3RyaW5nIiwiSlNPTiIsIm91dCIsImludm9rZVdpdGhBcmdzT3JSZXR1cm4iLCJnZXREYXRhQXR0cmlidXRlUHJvcHMiLCJub25QbHVnaW5Qcm9wcyIsInJlbW92ZVByb3BlcnRpZXMiLCJkaWRQYXNzVW5rbm93blByb3AiLCJ3YXJuV2hlbiIsImlubmVySFRNTCIsImRpdiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiYm94Q2hpbGRyZW4iLCJiYWNrZHJvcCIsInNldENvbnRlbnQiLCJvblVwZGF0ZSIsImdldENoaWxkcmVuIiwibmV4dFByb3BzIiwicHJldlByb3BzIiwiY3JlYXRlQXJyb3dFbGVtZW50IiwiaWRDb3VudGVyIiwibW91c2VNb3ZlTGlzdGVuZXJzIiwibW91bnRlZEluc3RhbmNlcyIsImV2YWx1YXRlUHJvcHMiLCJyZW1vdmVVbmRlZmluZWRQcm9wcyIsImlzVmlzaWJsZUZyb21DbGljayIsImRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duIiwiZGlkVG91Y2hNb3ZlIiwiaWdub3JlT25GaXJzdFVwZGF0ZSIsImxpc3RlbmVycyIsImRlYm91bmNlZE9uTW91c2VNb3ZlIiwiaWQiLCJwb3BwZXJJbnN0YW5jZSIsInVuaXF1ZSIsImlzRW5hYmxlZCIsImlzVmlzaWJsZSIsImlzTW91bnRlZCIsImlzU2hvd24iLCJjbGVhckRlbGF5VGltZW91dHMiLCJzZXRQcm9wcyIsInNob3ciLCJoaWRlV2l0aEludGVyYWN0aXZpdHkiLCJlbmFibGUiLCJkaXNhYmxlIiwidW5tb3VudCIsInBsdWdpbnNIb29rcyIsImhhc0FyaWFFeHBhbmRlZCIsImFkZExpc3RlbmVycyIsImhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSIsImhhbmRsZVN0eWxlcyIsImludm9rZUhvb2siLCJzY2hlZHVsZVNob3ciLCJnZXREb2N1bWVudCIsImdldE5vcm1hbGl6ZWRUb3VjaFNldHRpbmdzIiwiY3VycmVudFRhcmdldCIsImdldEN1cnJlbnRUYXJnZXQiLCJnZXRPd25lckRvY3VtZW50IiwibGFzdFRyaWdnZXJFdmVudCIsImdldFZhbHVlQXRJbmRleE9yUmV0dXJuIiwiaXNTaG93Iiwic2hvdWxkSW52b2tlUHJvcHNIb29rIiwicGx1Z2luSG9va3MiLCJub2RlcyIsImN1cnJlbnRWYWx1ZSIsIm5leHRWYWx1ZSIsImxpc3RlbmVyIiwicmVtb3ZlRG9jdW1lbnRQcmVzcyIsImRvYyIsIm9uVHJhbnNpdGlvbkVuZCIsImNhbGxiYWNrIiwiZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4iLCJ1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIiLCJjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiZXZlbnRUeXBlIiwiaGFuZGxlciIsImdldElzQ3VzdG9tVG91Y2hCZWhhdmlvciIsIm9uIiwic3BsaXRCeVNwYWNlcyIsInNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlIiwiaXNFdmVudExpc3RlbmVyU3RvcHBlZCIsIndhc0ZvY3VzZWQiLCJpc01vdXNlRXZlbnQiLCJzY2hlZHVsZUhpZGUiLCJpc0N1cnNvck92ZXJSZWZlcmVuY2VPclBvcHBlciIsInBvcHBlclRyZWVEYXRhIiwiaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIiLCJjbGVhbnVwSW50ZXJhY3RpdmVNb3VzZUxpc3RlbmVycyIsInNob3VsZEJhaWwiLCJkZXN0cm95UG9wcGVySW5zdGFuY2UiLCJnZXRJc0RlZmF1bHRSZW5kZXJGbiIsImNvbXB1dGVkUmVmZXJlbmNlIiwiY29udGV4dEVsZW1lbnQiLCJ0aXBweU1vZGlmaWVyIiwib25GaXJzdFVwZGF0ZSIsInBhcmVudE5vZGUiLCJjcmVhdGVQb3BwZXJJbnN0YW5jZSIsImFkZERvY3VtZW50UHJlc3MiLCJnZXREZWxheSIsInRvdWNoVmFsdWUiLCJ0b3VjaERlbGF5Iiwic2hvd1RpbWVvdXQiLCJoaWRlVGltZW91dCIsInNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjcmVhdGVNZW1vcnlMZWFrV2FybmluZyIsInJlbW92ZUxpc3RlbmVycyIsImdldE5lc3RlZFBvcHBlclRyZWUiLCJuZXN0ZWRQb3BwZXIiLCJpc0FscmVhZHlWaXNpYmxlIiwiaXNEaXNhYmxlZCIsImlzVG91Y2hBbmRUb3VjaERpc2FibGVkIiwic2V0VHJhbnNpdGlvbkR1cmF0aW9uIiwic2V0VmlzaWJpbGl0eVN0YXRlIiwiaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUiLCJwdXNoSWZVbmlxdWUiLCJvblRyYW5zaXRpb25lZEluIiwibW91bnQiLCJpc0FscmVhZHlIaWRkZW4iLCJvblRyYW5zaXRpb25lZE91dCIsIm9wdGlvbmFsUHJvcHMiLCJ2YWxpZGF0ZVRhcmdldHMiLCJiaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMiLCJnZXRBcnJheU9mRWxlbWVudHMiLCJpc1NpbmdsZUNvbnRlbnRFbGVtZW50IiwiaXNNb3JlVGhhbk9uZVJlZmVyZW5jZUVsZW1lbnQiLCJpbnN0YW5jZXMiLCJjcmVhdGVUaXBweSIsInRpcHB5IiwiaGlkZUFsbCIsImV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSIsImV4Y2x1ZGUiLCJpc0V4Y2x1ZGVkIiwib3JpZ2luYWxEdXJhdGlvbiIsImFwcGx5U3R5bGVzTW9kaWZpZXIiLCJjcmVhdGVTaW5nbGV0b24iLCJpbmRpdmlkdWFsSW5zdGFuY2VzIiwicmVmZXJlbmNlcyIsIm92ZXJyaWRlcyIsImludGVyY2VwdFNldFByb3BzQ2xlYW51cHMiLCJzaG93bk9uQ3JlYXRlIiwib3JpZ2luYWxTZXRQcm9wcyIsInNpbmdsZXRvbiIsIm92ZXJyaWRlUHJvcHMiLCJlbmFibGVJbnN0YW5jZXMiLCJzZXRSZWZlcmVuY2VzIiwicHJlcGFyZUluc3RhbmNlIiwib3JpZ2luYWxTaG93IiwicmVmIiwiZmlyc3QiLCJpbnRlcmNlcHRTZXRQcm9wcyIsIkJVQkJMSU5HX0VWRU5UU19NQVAiLCJtb3VzZW92ZXIiLCJmb2N1c2luIiwiY2xpY2siLCJjaGlsZFRpcHB5SW5zdGFuY2VzIiwiZGlzYWJsZWQiLCJuYXRpdmVQcm9wcyIsInBhcmVudFByb3BzIiwiY2hpbGRQcm9wcyIsInJldHVyblZhbHVlIiwibm9ybWFsaXplZFJldHVyblZhbHVlIiwidGFyZ2V0Tm9kZSIsIm9yaWdpbmFsRGVzdHJveSIsIm9yaWdpbmFsRW5hYmxlIiwib3JpZ2luYWxEaXNhYmxlIiwic2hvdWxkRGVzdHJveUNoaWxkSW5zdGFuY2VzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVycyIsImNyZWF0ZUJhY2tkcm9wRWxlbWVudCIsInRyYW5zaXRpb25EdXJhdGlvbiIsIk51bWJlciIsIm1vdXNlQ29vcmRzIiwiYWN0aXZlSW5zdGFuY2VzIiwiaXNJbnRlcm5hbFVwZGF0ZSIsIndhc0ZvY3VzRXZlbnQiLCJpc1VubW91bnRlZCIsImlzQ3Vyc29yT3ZlclJlZmVyZW5jZSIsInJlbGF0aXZlWCIsInJlbGF0aXZlWSIsImFkZE1vdXNlQ29vcmRzTGlzdGVuZXIiLCJyZW1vdmVNb3VzZUNvb3Jkc0xpc3RlbmVyIiwiY3JlYXRlIiwiZ2V0SXNJbml0aWFsQmVoYXZpb3IiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwidW5zZXRHZXRSZWZlcmVuY2VDbGllbnRSZWN0Iiwib25Nb3VzZU1vdmUiLCJjdXJzb3JSZWN0SW5kZXgiLCJnZXRJbmxpbmVCb3VuZGluZ0NsaWVudFJlY3QiLCJzZXRJbnRlcm5hbFByb3BzIiwiZ2V0UHJvcHMiLCJjdXJzb3JSZWN0IiwiY2xpZW50UmVjdHMiLCJjdXJyZW50QmFzZVBsYWNlbWVudCIsImZpcnN0UmVjdCIsImxhc3RSZWN0IiwiaXNUb3AiLCJtaW5MZWZ0IiwibWF4UmlnaHQiLCJtZWFzdXJlUmVjdHMiLCJwcmV2UmVmUmVjdCIsInByZXZQb3BSZWN0IiwiY3VycmVudFJlZlJlY3QiLCJzaG91bGRDaGVjayIsImdldFJlZmVyZW5jZSIsImN1cnJlbnRQb3BSZWN0IiwiYXJlUmVjdHNEaWZmZXJlbnQiLCJ1cGRhdGVQb3NpdGlvbiIsInJlY3RBIiwicmVjdEIiLCJpbmplY3RDU1MiLCJTTElDRSQwIiwic2xpY2UiLCJXSU5ET1ciLCJET0NVTUVOVCIsIkhUTUwiLCJ1c2VyQWdlbnQiLCJqc2NyaXB0VmVyc2lvbiIsIlNjcmlwdEVuZ2luZU1ham9yVmVyc2lvbiIsIkpTQ1JJUFRfVkVSU0lPTiIsIkxFR0FDWV9BTkRST0lEIiwiV0VCS0lUX1BSRUZJWCIsIldlYktpdEFuaW1hdGlvbkV2ZW50IiwiQ1VTVE9NX0VWRU5UX1RZUEUiLCIkTnVsbEVsZW1lbnQiLCIkRWxlbWVudCIsIl8iLCJjYWNoZWQiLCJjb25zdHJ1Y3RvciIsIm5vZGVUeXBlIiwidmVyc2lvbiIsIiREb2N1bWVudCIsIkRPTSIsInV0aWwkaW5kZXgkJGFycmF5UHJvdG8iLCJ1dGlsJGluZGV4JCRkZWZhdWx0IiwiY29tcHV0ZVN0eWxlIiwiY3VycmVudFN0eWxlIiwiZGVmYXVsdFZpZXciLCJpbmplY3RFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImV2ZXJ5IiwiZWFjaCIsImZvckVhY2giLCJmaWx0ZXIiLCJzYWZlQ2FsbCIsImNvbnRleHQiLCJhcmcxIiwiYXJnMiIsImVyciIsInJlZ2lzdGVyIiwibWl4aW5zIiwiZGVmYXVsdEJlaGF2aW9yIiwiZGVmYXVsdHMiLCJnZXRMZWdhY3lGaWxlIiwibGVnYWN5U2NyaXB0cyIsInNjcmlwdHMiLCJzcmMiLCJFcnJvciIsImVycm9ycyQkTWV0aG9kRXJyb3IiLCJtZXRob2ROYW1lIiwibGluZSIsImFyZyIsImpvaW4iLCJtZXNzYWdlIiwiVHlwZUVycm9yIiwiZXJyb3JzJCRTdGF0aWNNZXRob2RFcnJvciIsImdsb2JhbCRlbW1ldCQkb3BlcmF0b3JzIiwiZ2xvYmFsJGVtbWV0JCRyZVBhcnNlIiwiZ2xvYmFsJGVtbWV0JCRyZUF0dHIiLCJnbG9iYWwkZW1tZXQkJHJlSW5kZXgiLCJnbG9iYWwkZW1tZXQkJHJlRG90IiwiZ2xvYmFsJGVtbWV0JCRyZURvbGxhciIsImdsb2JhbCRlbW1ldCQkdGFnQ2FjaGUiLCJnbG9iYWwkZW1tZXQkJG5vcm1hbGl6ZUF0dHJzIiwicmF3VmFsdWUiLCJxdW90ZSIsImdsb2JhbCRlbW1ldCQkaW5qZWN0VGVybSIsInRlcm0iLCJsYXN0SW5kZXhPZiIsImdsb2JhbCRlbW1ldCQkbWFrZVRlcm0iLCJ0YWciLCJnbG9iYWwkZW1tZXQkJG1ha2VJbmRleGVkVGVybSIsIm4iLCJleHByIiwiZm10Iiwic2lnbiIsImdsb2JhbCRlbW1ldCQkcmVVbnNhZmUiLCJnbG9iYWwkZW1tZXQkJHNhZmVTeW1ib2wiLCJlbW1ldCIsInRlbXBsYXRlIiwidmFyTWFwIiwiJEQkMCIsIiREJDEiLCIkRCQyIiwiZm9ybWF0Iiwic3RhY2siLCJvdXRwdXQiLCJtYXRjaCIsIm9wIiwicHJpb3JpdHkiLCJ1bnNoaWZ0IiwiY29uY2F0Iiwic3RyJDAiLCJjaCIsImdsb2JhbCRlbW1ldCQkZGVmYXVsdCIsImRvY3VtZW50JGNyZWF0ZSQkbWFrZU1ldGhvZCIsImFsbCIsInNhbmRib3giLCJjcmVhdGVFbGVtZW50IiwidHJpbSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImNyZWF0ZUFsbCIsImltcG9ydFNjcmlwdHMiLCJ1cmxzIiwiYXJnVHlwZSIsIm9ubG9hZCIsImFzeW5jIiwiaW1wb3J0U3R5bGVzIiwic2VsZWN0b3IiLCJjc3NUZXh0Iiwic3R5bGVTaGVldCIsInN0eWxlTm9kZSIsInNoZWV0IiwiY3NzUnVsZXMiLCJpbnNlcnRSdWxlIiwiYWRkUnVsZSIsInV0aWwkc2VsZWN0b3JtYXRjaGVyJCRycXVpY2tJcyIsInV0aWwkc2VsZWN0b3JtYXRjaGVyJCRwcm9wTmFtZSIsInByZWZpeCIsInByb3BlcnR5TmFtZSIsInV0aWwkc2VsZWN0b3JtYXRjaGVyJCRkZWZhdWx0IiwicXVpY2siLCIkRCQzIiwiJEQkNCIsImZvdW5kIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwiY2xhc3NOYW1lIiwiZWxlbWVudCRjaGlsZHJlbiQkbWFrZU1ldGhvZCIsIm1hdGNoZXIiLCJjaGlsZHJlbiIsImVsZW1lbnQkY2xhc3NlcyQkcmVTcGFjZSIsImVsZW1lbnQkY2xhc3NlcyQkbWFrZU1ldGhvZCIsIm5hdGl2ZU1ldGhvZE5hbWUiLCJjbGFzc0xpc3QiLCJ0b2tlbiIsImZvcmNlIiwiJEQkNSIsIiREJDYiLCJ0b2tlbnMiLCJoYXNDbGFzcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImRlZXAiLCJvdXRlckhUTUwiLCJjbG9uZU5vZGUiLCJvdGhlck5vZGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImVsZW1lbnQkY29udGV4dCQkQ09OVEVYVF9URU1QTEFURSIsImNvbnRleHRzIiwiY3R4Iiwib2JqZWN0IiwiZ2V0IiwiY29udGVudERvY3VtZW50IiwiYmVmb3JlIiwicmVxdWVzdEZyYW1lIiwicmVwZWF0IiwiZnJhbWVJZCIsImF0dGFjaEV2ZW50IiwidXRpbCRzdHlsZWhvb2tzJCRyZURhc2giLCJ1dGlsJHN0eWxlaG9va3MkJGNzc1ByZWZpeGVzIiwidXRpbCRzdHlsZWhvb2tzJCRob29rcyIsImZpbmQiLCJwcm9wTmFtZSIsInRvVXBwZXJDYXNlIiwidXRpbCRzdHlsZWhvb2tzJCRkaXJlY3Rpb25zIiwidXRpbCRzdHlsZWhvb2tzJCRzaG9ydEN1dHMiLCJmb250IiwiZGlyIiwic3R5bGVQcm9wTmFtZSIsImhhc0VtcHR5U3R5bGVWYWx1ZSIsInNvbWUiLCJ1dGlsJHN0eWxlaG9va3MkJGRlZmF1bHQiLCJ0aGlzJDAiLCJjb21wdXRlZCIsImdldHRlciIsIm1lbW8iLCJzZXR0ZXIiLCJlbGVtZW50JGRlZmluZSQkQVRUUl9DQVNFIiwiYXR0ck5hbWUiLCJfc2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiX3JlbW92ZUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImluaXRpYWxWYWx1ZSIsImRlZmluZVByb3BlcnR5IiwiYXR0clZhbHVlIiwicHJvcFZhbHVlIiwiZmxhZ3MiLCJlbXB0eSIsImVsZW1lbnQkZmluZCQkcnF1aWNrIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImVsZW1lbnQkZmluZCQkcmVzY2FwZSIsImVsZW1lbnQkZmluZCQkbWFrZU1ldGhvZCIsInF1aWNrTWF0Y2giLCJvbGQiLCJuaWQiLCJmaW5kQWxsIiwidXRpbCRldmVudGhvb2tzJCRob29rcyIsImZvY3VzIiwiX3R5cGUiLCJibHVyIiwiY2FwdHVyaW5nIiwidmFsaWRpdHkiLCJpbnZhbGlkIiwidXRpbCRldmVudGhvb2tzJCRkZWZhdWx0IiwidXRpbCRldmVudGhhbmRsZXIkJGdldEV2ZW50UHJvcGVydHkiLCJkb2NFbCIsImtleUNvZGUiLCJidXR0b24iLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiY2FuY2VsQnViYmxlIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0b0VsZW1lbnQiLCJhcHBseSIsInV0aWwkZXZlbnRoYW5kbGVyJCRFdmVudEhhbmRsZXIiLCJvbmNlIiwiaG9vayIsInNraXAiLCJzcmNVcm4iLCJzcmNFbGVtZW50Iiwib2ZmIiwicHJldmVudERlZmF1bHQiLCJ1dGlsJGV2ZW50aGFuZGxlciQkZGVmYXVsdCIsImZpcmUiLCJjYW5Db250aW51ZSIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZmlyZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwidXRpbCRhY2Nlc3Nvcmhvb2tzJCRob29rcyIsInRpdGxlIiwic2VsZWN0ZWRJbmRleCIsIm8iLCJzZWxlY3RlZCIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0IiwidXRpbCRhY2Nlc3Nvcmhvb2tzJCRkZWZhdWx0IiwiZWxlbWVudCRnZXQkJHJlVXBwZXIiLCJlbGVtZW50JGdldCQkcmVhZFByaXZhdGVQcm9wZXJ0eSIsImVsZW1lbnQkbWFuaXB1bGF0aW9uJCRtYWtlTWV0aG9kIiwiZmFzdFN0cmF0ZWd5IiwicmVxdWlyZXNQYXJlbnQiLCJjb250ZW50cyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJhZnRlciIsInJlbGF0ZWROb2RlIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJwcmVwZW5kIiwiYXBwZW5kIiwicmVwbGFjZUNoaWxkIiwicmVtb3ZlIiwidXRpbCRzZWxlY3Rvcmhvb2tzJCRpc0hpZGRlbiIsInZpc2liaWxpdHkiLCJkaXNwbGF5IiwidXRpbCRzZWxlY3Rvcmhvb2tzJCRkZWZhdWx0IiwibWF0Y2hlcyIsImNoZWNrZXIiLCJkZXRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwiYm91bmRpbmdSZWN0IiwiZWxlbWVudCRvbiQkbWFrZU1ldGhvZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3YXRjaGVycyIsIm9sZFZhbHVlIiwidyIsImVsZW1lbnQkdHJhdmVyc2luZyQkbWFrZU1ldGhvZCIsIml0IiwicHJldiIsIm5leHRBbGwiLCJwcmV2QWxsIiwiY2xvc2VzdCIsInV0aWwkYW5pbWF0aW9uaGFuZGxlciQkVFJBTlNJVElPTl9QUk9QUyIsInV0aWwkYW5pbWF0aW9uaGFuZGxlciQkcGFyc2VUaW1lVmFsdWUiLCJwYXJzZUZsb2F0IiwidXRpbCRhbmltYXRpb25oYW5kbGVyJCRjYWxjVHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblZhbHVlcyIsImRlbGF5cyIsImR1cmF0aW9ucyIsInV0aWwkYW5pbWF0aW9uaGFuZGxlciQkZGVmYXVsdCIsImFuaW1hdGlvbk5hbWUiLCJoaWRpbmciLCJkb25lIiwicnVsZXMiLCJ2aXNpYmlsaXR5SW5kZXgiLCJpbml0aWFsQ3NzVGV4dCIsImhhbmRsZUV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiZWxlbWVudCR2aXNpYmlsaXR5JCRUUkFOU0lUSU9OX0VWRU5UX1RZUEUiLCJlbGVtZW50JHZpc2liaWxpdHkkJEFOSU1BVElPTl9FVkVOVF9UWVBFIiwiZWxlbWVudCR2aXNpYmlsaXR5JCRtYWtlTWV0aG9kIiwiYW5pbWF0aW9uSGFuZGxlciIsImNhbmNlbEZyYW1lIiwidG9nZ2xlIiwid2F0Y2giLCJ1bndhdGNoIiwidXRpbCRleHRlbnNpb25oYW5kbGVyJCRyZVByaXZhdGVGdW5jdGlvbiIsInV0aWwkZXh0ZW5zaW9uaGFuZGxlciQkZGVmYXVsdCIsImN0ciIsIm1vY2siLCJwcml2YXRlRnVuY3Rpb25zIiwiZ2xvYmFsJGV4dGVuZCQkZXh0ZW5zaW9ucyIsImdsb2JhbCRleHRlbmQkJHJldHVyblRydWUiLCJnbG9iYWwkZXh0ZW5kJCRyZXR1cm5GYWxzZSIsImdsb2JhbCRleHRlbmQkJGNzc1RleHQiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiZXh0IiwiZ2xvYmFsJGV4dGVuZCQkX2V4dGVuZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImdsb2JhbCRleHRlbmQkJGRlZmF1bHQiLCJnbG9iYWwkZm9ybWF0JCRyZVZhciIsInRtcGwiLCJnbG9iYWwkZnJhbWUkJHJhZiIsImdsb2JhbCRmcmFtZSQkY3JhZiIsImdsb2JhbCRmcmFtZSQkbGFzdFRpbWUiLCJjdXJyVGltZSIsIkRhdGUiLCJ0aW1lVG9DYWxsIiwiZ2xvYmFsJG1vY2skJGFwcGx5RXh0ZW5zaW9ucyIsImV4cG9ydHMkJF9ET00iLCJub0NvbmZsaWN0IiwiVktfU1BBQ0UiLCJWS19FTlRFUiIsImhhc05hdGl2ZVN1cHBvcnQiLCJkYXRhc2V0IiwiZGV0YWlsc1BvbHlmaWxsZWQiLCJfY2hhbmdlT3BlbiIsImJpbmQiLCJmaXJzdFN1bW1hcnkiLCJfZ2V0T3BlbiIsIl9zZXRPcGVuIiwiX2luaXRTdW1tYXJ5Iiwic3VtbWFyeSIsIl90b2dnbGVPcGVuIiwic3RvcCIsInNldEhlaWdodCIsImRldGFpbHMiLCJvcGVuIiwicGFuZWxIZWlnaHQiLCJxdWVyeVNlbGVjdG9yIiwic2V0UHJvcGVydHkiLCJfX2RldGFpbHMiLCJfX29wZW5EZXRhaWxzIiwiX19vYnNlcnZlciIsIkFjY29yZGlvbiIsInBhbmVsIiwiaW5pdGlhbGl6ZSIsIlJlc2l6ZU9ic2VydmVyIiwiZW50cmllcyIsImVudHJ5IiwicGFyc2VJbnQiLCJvcGVuU3RhdGUiLCJjbGllbnRXaWR0aCIsIkhUIiwibG9nIiwidXBkYXRlZF9leHBhbmRlZCIsImdldFByb3BlcnR5VmFsdWUiLCJjb250ZW50UmVjdCIsIm9ic2VydmUiLCJpZ25vcmVTY3JvbGxJbnRvVmlldyIsInNjcm9sbEludG9WaWV3IiwiY29uZmlndXJlIiwid3JhcHBlciIsInJlYWR5IiwiZGVsZWdhdGUiLCJ0b2dnbGVkTGFiZWwiLCJ1bnRvZ2dsZWRMYWJlbCIsInRpcHB5Um9sZSIsImlzTG9nZ2luZyIsImNvbnNvbGUiLCJyZW5ld19hdXRoIiwiZW50aXR5SUQiLCJzb3VyY2UiLCJfX3JlbmV3aW5nIiwicmVhdXRoX3VybCIsInNlcnZpY2VfZG9tYWluIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaHJlZiIsInJldHZhbCIsImNvbmZpcm0iLCJhbmFseXRpY3MiLCJsb2dBY3Rpb24iLCJkZWxpbSIsImFqYXgiLCJjb21wbGV0ZSIsInhociIsInN0YXR1cyIsImdldFJlc3BvbnNlSGVhZGVyIiwiTU9OVEhTIiwiJGVtZXJnZW5jeV9hY2Nlc3MiLCJkZWx0YSIsImxhc3Rfc2Vjb25kcyIsInRvZ2dsZV9yZW5ld19saW5rIiwiZGF0ZSIsImdldFRpbWUiLCIkbGluayIsIm9ic2VydmVfZXhwaXJhdGlvbl90aW1lc3RhbXAiLCJwYXJhbXMiLCJjb29raWUiLCJqc29uIiwic2Vjb25kcyIsInRleHQiLCIkYWN0aW9uIiwidGltZTJtZXNzYWdlIiwiaG91cnMiLCJnZXRIb3VycyIsImFtcG0iLCJtaW51dGVzIiwiZ2V0TWludXRlcyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImV4cGlyYXRpb24iLCJncmFudGVkIiwiaW5pdGlhbGl6ZWQiLCJzZXRJbnRlcnZhbCIsInN1cHByZXNzIiwiZGVidWciLCJpZGhhc2giLCJjdXJyaWQiLCJpZHMiLCJzaG93QWxlcnQiLCIkYWxlcnQiLCJib290Ym94IiwiZGlhbG9nIiwibGFiZWwiLCJoZWFkZXIiLCJkb21haW4iLCJkZXRhaWwiLCJwcmVmcyIsInB0IiwiYWxlcnRzIiwic2VsZiIsImNyZWF0ZUVsZW1lbnROUyIsInZpZXciLCJjbGFzc0xpc3RQcm9wIiwicHJvdG9Qcm9wIiwiZWxlbUN0clByb3RvIiwiRWxlbWVudCIsIm9iakN0ciIsInN0clRyaW0iLCJhcnJJbmRleE9mIiwiaXRlbSIsIkRPTUV4IiwiY29kZSIsIkRPTUV4Y2VwdGlvbiIsImNoZWNrVG9rZW5BbmRHZXRJbmRleCIsIkNsYXNzTGlzdCIsImVsZW0iLCJ0cmltbWVkQ2xhc3NlcyIsImNsYXNzZXMiLCJfdXBkYXRlQ2xhc3NOYW1lIiwiY2xhc3NMaXN0UHJvdG8iLCJjbGFzc0xpc3RHZXR0ZXIiLCJhZGQiLCJ1cGRhdGVkIiwic3BsaWNlIiwicmVwbGFjZW1lbnRfdG9rZW4iLCJjbGFzc0xpc3RQcm9wRGVzYyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJleCIsIm51bWJlciIsIl9fZGVmaW5lR2V0dGVyX18iLCJ0ZXN0RWxlbWVudCIsImNyZWF0ZU1ldGhvZCIsIm9yaWdpbmFsIiwiRE9NVG9rZW5MaXN0IiwiX3RvZ2dsZSIsIkRFRkFVTFRfQ09MTF9NRU5VX09QVElPTiIsIk5FV19DT0xMX01FTlVfT1BUSU9OIiwiSU5fWU9VUl9DT0xMU19MQUJFTCIsIiR0b29sYmFyIiwiJGVycm9ybXNnIiwiJGluZm9tc2ciLCJkaXNwbGF5X2Vycm9yIiwibXNnIiwiaW5zZXJ0QWZ0ZXIiLCJ1cGRhdGVfc3RhdHVzIiwiZGlzcGxheV9pbmZvIiwiaGlkZV9lcnJvciIsImhpZGVfaW5mbyIsImdldF91cmwiLCJwYXRobmFtZSIsInBhcnNlX2xpbmUiLCJ0bXAiLCJrdiIsImVkaXRfY29sbGVjdGlvbl9tZXRhZGF0YSIsImNyZWF0aW5nIiwiJGJsb2NrIiwiY24iLCJkZXNjIiwic2hyZCIsImxvZ2luX3N0YXR1cyIsImxvZ2dlZF9pbiIsIiRoaWRkZW4iLCJpaWQiLCIkZGlhbG9nIiwiY2hlY2tWYWxpZGl0eSIsInJlcG9ydFZhbGlkaXR5Iiwic3VibWl0X3Bvc3QiLCIkdGhpcyIsIiRjb3VudCIsImxpbWl0IiwibnVtX3JlbWFpbmluZyIsIiRsYWJlbCIsInBhcmVudHMiLCJwYWdlIiwiYWRkX2l0ZW1fdG9fY29sbGlzdCIsImZhaWwiLCJqcVhIUiIsInRleHRTdGF0dXMiLCJlcnJvclRocm93biIsIiR1bCIsImNvbGxfaHJlZiIsImNvbGxfaWQiLCIkYSIsImNvbGxfbmFtZSIsIiRvcHRpb24iLCJjb25maXJtX2xhcmdlIiwiY29sbFNpemUiLCJhZGROdW1JdGVtcyIsIm51bVN0ciIsImFuc3dlciIsInNlbGVjdGVkX2NvbGxlY3Rpb25faWQiLCJzZWxlY3RlZF9jb2xsZWN0aW9uX25hbWUiLCJjMiIsImlzIiwiY3Jtc19zdGF0ZSIsImZvcmNlX3NpemUiLCIkZGl2IiwiJHAiLCJwaG90b2NvcGllcl9tZXNzYWdlIiwiRG93bmxvYWRlciIsImluaXQiLCJwZGYiLCJzdXBlcnVzZXIiLCJiaW5kRXZlbnRzIiwiZXhwbGFpblBkZkFjY2VzcyIsImFsZXJ0IiwiZG93bmxvYWRQZGYiLCJjb25maWciLCJpdGVtX3RpdGxlIiwiJGNvbmZpZyIsInRvdGFsIiwic2VsZWN0aW9uIiwicGFnZXMiLCJzdWZmaXgiLCJjbG9zZU1vZGFsIiwiZGF0YVR5cGUiLCJjYWNoZSIsImVycm9yIiwicmVxIiwiZGlzcGxheVdhcm5pbmciLCJkaXNwbGF5RXJyb3IiLCIkc3RhdHVzIiwicmVxdWVzdERvd25sb2FkIiwic2VxIiwiZG93bmxvYWRGb3JtYXQiLCJpbWFnZVJlc29sdXRpb24iLCJkaXNwbGF5NDAzIiwiY2FuY2VsRG93bmxvYWQiLCJwcm9ncmVzc191cmwiLCJkb3dubG9hZF91cmwiLCJjbGVhclRpbWVyIiwic3RhcnREb3dubG9hZE1vbml0b3IiLCJ0aW1lciIsImlzX3J1bm5pbmciLCJudW1fcHJvY2Vzc2VkIiwiY2hlY2tTdGF0dXMiLCJ0cyIsInN1Y2Nlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsIm51bV9hdHRlbXB0cyIsImRpc3BsYXlQcm9jZXNzRXJyb3IiLCJsb2dFcnJvciIsInBlcmNlbnQiLCJjdXJyZW50X3BhZ2UiLCJsYXN0X3BlcmNlbnQiLCJ1cGRhdGVTdGF0dXNUZXh0IiwiZG93bmxvYWRfa2V5IiwiJGRvd25sb2FkX2J0biIsImRvd25sb2FkIiwiYW5hbHl0aWNzQWN0aW9uIiwidHJhY2tpbmdBY3Rpb24iLCJ0cmFja0V2ZW50IiwiY2F0ZWdvcnkiLCJoaiIsImNlaWwiLCJjbGVhckludGVydmFsIiwicmF0ZSIsImNvdW50ZG93biIsImNvdW50ZG93bl90aW1lciIsInJlc3BvbnNlVGV4dCIsIl9sYXN0TWVzc2FnZSIsIl9sYXN0VGltZXIiLCJFT1QiLCJkb3dubG9hZEZvcm0iLCJkb3dubG9hZEZvcm1hdE9wdGlvbnMiLCJyYW5nZU9wdGlvbnMiLCJkb3dubG9hZElkeCIsImRvd25sb2FkZXIiLCJkb3dubG9hZFN1Ym1pdCIsImhhc0Z1bGxQZGZBY2Nlc3MiLCJmdWxsUGRmQWNjZXNzIiwidXBkYXRlRG93bmxvYWRGb3JtYXRSYW5nZU9wdGlvbnMiLCJvcHRpb24iLCJjdXJyZW50X3ZpZXciLCJyZWFkZXIiLCJyYW5nZU9wdGlvbiIsImlucHV0IiwiY2hlY2tlZCIsImZvcm1hdE9wdGlvbiIsImRvd25sb2FkRm9ybWF0VGFyZ2V0IiwiX3VwZGF0ZUltYWdlUmVzb2x1dGlvbiIsInNlbGVjdFJhbmdlT3B0aW9uIiwicGFyZW50RWxlbWVudCIsInBkZkZvcm1hdE9wdGlvbiIsInR1bm5lbEZvcm0iLCJpbWFnZV9yZXNvbHV0aW9uX29wdGlvbiIsImRsIiwiaW1hZ2VSZXMiLCJwcmludGFibGUiLCJhY3Rpb25UZW1wbGF0ZSIsImNvbnRyb2xzIiwic2VsZWN0aW5hdG9yIiwiX2dldFBhZ2VTZWxlY3Rpb24iLCJpc1NlbGVjdGlvbiIsImJ1dHRvbnMiLCJjdXJyZW50TG9jYXRpb24iLCJfZ2V0RmxhdHRlbmVkU2VsZWN0aW9uIiwicGFydGlhbFVwcGVyTG1pdCIsImlzUGFydGlhbCIsInNpemVfYXR0ciIsImltYWdlX2Zvcm1hdF9hdHRyIiwic2l6ZV92YWx1ZSIsInJhbmdlIiwidHJhY2tlciIsInRyYWNrZXJfaW5wdXQiLCJvcGFjaXR5IiwidHJhY2tlckludGVydmFsIiwiaXNfZGV2IiwicmVtb3ZlQ29va2llIiwiZGlzYWJsZVVubG9hZFRpbWVvdXQiLCJzdWJtaXQiLCJfZm9ybWF0X3RpdGxlcyIsImVwdWIiLCJwbGFpbnRleHQiLCJzaWRlX3Nob3J0Iiwic2lkZV9sb25nIiwiaHRJZCIsImVtYmVkSGVscExpbmsiLCJjb2RlYmxvY2tfdHh0IiwiY29kZWJsb2NrX3R4dF9hIiwiaCIsImNvZGVibG9ja190eHRfYiIsInRleHRhcmVhIiwic2VsZWN0IiwiZmVlZGJhY2siLCIkZm9ybSIsIlJlY29yZFVSTCIsIiRlbWFpbCIsInNraW4iLCJnZXRDb250ZW50R3JvdXBEYXRhIiwiY29udGVudF9ncm91cCIsIl9zaW1wbGlmeVBhZ2VIcmVmIiwibmV3X2hyZWYiLCJxcyIsImdldFBhZ2VIcmVmIiwiZ2V0VGl0bGUiLCIkYnV0dG9uIiwiJG1vZGFsIiwic3RlcElkIiwiYXNzaWduIiwidmFyQXJncyIsInRvIiwibmV4dFNvdXJjZSIsIm5leHRLZXkiLCJ3cml0YWJsZSIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsImFyZ0FyciIsImRvY0ZyYWciLCJhcmdJdGVtIiwiaXNOb2RlIiwiTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiQ2hhcmFjdGVyRGF0YSIsIkRvY3VtZW50VHlwZSIsIlJlcGxhY2VXaXRoUG9seWZpbGwiLCJwcmV2aW91c1NpYmxpbmciLCJyZXBsYWNlV2l0aCIsIiRpbnB1dF9xMSIsIiRpbnB1dF9zb3J0IiwiJGlucHV0X3N0YXJ0IiwiJGJvZHkiLCJzdWJtaXRfZm9ybSIsImJlZm9yZVVubG9hZFRpbWVvdXQiLCIkZm9ybV8iLCIkc3VibWl0IiwiJGlucHV0IiwicmVtb3ZlQXR0ciIsInN6IiwiaXNOYU4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFBQyxDQUFDLFVBQVNBLE9BQVQsRUFBa0I7QUFDbkIsTUFBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxNQUFNLENBQUNDLEdBQTNDLEVBQWdEO0FBQy9DO0FBQ0EsUUFBSyxPQUFPQyxNQUFQLEtBQWtCLFdBQXZCLEVBQXFDO0FBQ3BDRixNQUFBQSxNQUFNLENBQUMsQ0FBQyxRQUFELENBQUQsRUFBYUQsT0FBYixDQUFOO0FBQ0EsS0FGRCxNQUVPO0FBQ05DLE1BQUFBLE1BQU0sQ0FBQyxFQUFELEVBQUtELE9BQUwsQ0FBTjtBQUNBO0FBQ0QsR0FQRCxNQU9PO0FBQ047QUFDQSxRQUFLLE9BQU9HLE1BQVAsS0FBa0IsV0FBdkIsRUFBcUM7QUFDcENILE1BQUFBLE9BQU8sQ0FBQ0csTUFBRCxDQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ05ILE1BQUFBLE9BQU87QUFDUDtBQUNEO0FBQ0QsQ0FoQkEsRUFnQkUsVUFBU0ksQ0FBVCxFQUFZQyxTQUFaLEVBQXVCO0FBRXpCLE1BQUlDLFFBQVEsR0FBRztBQUNiQyxJQUFBQSxDQUFDLEVBQVMsTUFERztBQUViQyxJQUFBQSxHQUFHLEVBQU8sS0FGRztBQUdiQyxJQUFBQSxJQUFJLEVBQU0sUUFIRztBQUliQyxJQUFBQSxJQUFJLEVBQU0sTUFKRztBQUtiQyxJQUFBQSxNQUFNLEVBQUksS0FMRztBQU1iQyxJQUFBQSxNQUFNLEVBQUksS0FORztBQU9iQyxJQUFBQSxJQUFJLEVBQU07QUFQRyxHQUFmO0FBQUEsTUFVQ0MsR0FBRyxHQUFHLENBQUMsUUFBRCxFQUFXLFVBQVgsRUFBdUIsV0FBdkIsRUFBb0MsVUFBcEMsRUFBZ0QsTUFBaEQsRUFBd0QsVUFBeEQsRUFBb0UsTUFBcEUsRUFBNEUsTUFBNUUsRUFBb0YsVUFBcEYsRUFB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QkQ7QUF3QkQsQ0FwRkQ7OztBQ0RBejlCLElBQUksQ0FBQ2lzQixLQUFMLENBQVcsWUFBVztBQUVsQmhrQyxFQUFBQSxDQUFDLENBQUMsTUFBRCxDQUFELENBQVVpa0IsRUFBVixDQUFhLE9BQWIsRUFBc0IsY0FBdEIsRUFBc0MsVUFBUzNmLENBQVQsRUFBWTtBQUM5Q0EsSUFBQUEsQ0FBQyxDQUFDdTJCLGNBQUY7QUFDQThNLElBQUFBLE9BQU8sQ0FBQ29ILEtBQVIsQ0FBYyxvWUFBZDtBQUNILEdBSEQ7QUFLSCxDQVBEIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIEpRdWVyeSBVUkwgUGFyc2VyIHBsdWdpbiwgdjIuMi4xXG4gKiBEZXZlbG9wZWQgYW5kIG1haW50YW5pbmVkIGJ5IE1hcmsgUGVya2lucywgbWFya0BhbGxtYXJrZWR1cC5jb21cbiAqIFNvdXJjZSByZXBvc2l0b3J5OiBodHRwczovL2dpdGh1Yi5jb20vYWxsbWFya2VkdXAvalF1ZXJ5LVVSTC1QYXJzZXJcbiAqIExpY2Vuc2VkIHVuZGVyIGFuIE1JVC1zdHlsZSBsaWNlbnNlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FsbG1hcmtlZHVwL2pRdWVyeS1VUkwtUGFyc2VyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UgZm9yIGRldGFpbHMuXG4gKi8gXG5cbjsoZnVuY3Rpb24oZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EIGF2YWlsYWJsZTsgdXNlIGFub255bW91cyBtb2R1bGVcblx0XHRpZiAoIHR5cGVvZiBqUXVlcnkgIT09ICd1bmRlZmluZWQnICkge1xuXHRcdFx0ZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1x0XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdC8vIE5vIEFNRCBhdmFpbGFibGU7IG11dGF0ZSBnbG9iYWwgdmFyc1xuXHRcdGlmICggdHlwZW9mIGpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cdFx0XHRmYWN0b3J5KGpRdWVyeSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZhY3RvcnkoKTtcblx0XHR9XG5cdH1cbn0pKGZ1bmN0aW9uKCQsIHVuZGVmaW5lZCkge1xuXHRcblx0dmFyIHRhZzJhdHRyID0ge1xuXHRcdFx0YSAgICAgICA6ICdocmVmJyxcblx0XHRcdGltZyAgICAgOiAnc3JjJyxcblx0XHRcdGZvcm0gICAgOiAnYWN0aW9uJyxcblx0XHRcdGJhc2UgICAgOiAnaHJlZicsXG5cdFx0XHRzY3JpcHQgIDogJ3NyYycsXG5cdFx0XHRpZnJhbWUgIDogJ3NyYycsXG5cdFx0XHRsaW5rICAgIDogJ2hyZWYnXG5cdFx0fSxcblx0XHRcblx0XHRrZXkgPSBbJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdmcmFnbWVudCddLCAvLyBrZXlzIGF2YWlsYWJsZSB0byBxdWVyeVxuXHRcdFxuXHRcdGFsaWFzZXMgPSB7ICdhbmNob3InIDogJ2ZyYWdtZW50JyB9LCAvLyBhbGlhc2VzIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eVxuXHRcdFxuXHRcdHBhcnNlciA9IHtcblx0XHRcdHN0cmljdCA6IC9eKD86KFteOlxcLz8jXSspOik/KD86XFwvXFwvKCg/OigoW146QF0qKTo/KFteOkBdKikpP0ApPyhbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPygoKCg/OltePyNcXC9dKlxcLykqKShbXj8jXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLywgIC8vbGVzcyBpbnR1aXRpdmUsIG1vcmUgYWNjdXJhdGUgdG8gdGhlIHNwZWNzXG5cdFx0XHRsb29zZSA6ICAvXig/Oig/IVteOkBdKzpbXjpAXFwvXSpAKShbXjpcXC8/Iy5dKyk6KT8oPzpcXC9cXC8pPygoPzooKFteOkBdKik6PyhbXjpAXSopKT9AKT8oW146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLyAvLyBtb3JlIGludHVpdGl2ZSwgZmFpbHMgb24gcmVsYXRpdmUgcGF0aHMgYW5kIGRldmlhdGVzIGZyb20gc3BlY3Ncblx0XHR9LFxuXHRcdFxuXHRcdHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0XHRcblx0XHRpc2ludCA9IC9eWzAtOV0rJC87XG5cdFxuXHRmdW5jdGlvbiBwYXJzZVVyaSggdXJsLCBzdHJpY3RNb2RlICkge1xuXHRcdHZhciBzdHIgPSBkZWNvZGVVUkkoIHVybCApLFxuXHRcdHJlcyAgID0gcGFyc2VyWyBzdHJpY3RNb2RlIHx8IGZhbHNlID8gJ3N0cmljdCcgOiAnbG9vc2UnIF0uZXhlYyggc3RyICksXG5cdFx0dXJpID0geyBhdHRyIDoge30sIHBhcmFtIDoge30sIHNlZyA6IHt9IH0sXG5cdFx0aSAgID0gMTQ7XG5cdFx0XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR1cmkuYXR0clsga2V5W2ldIF0gPSByZXNbaV0gfHwgJyc7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIGJ1aWxkIHF1ZXJ5IGFuZCBmcmFnbWVudCBwYXJhbWV0ZXJzXHRcdFxuXHRcdHVyaS5wYXJhbVsncXVlcnknXSA9IHBhcnNlU3RyaW5nKHVyaS5hdHRyWydxdWVyeSddKTtcblx0XHR1cmkucGFyYW1bJ2ZyYWdtZW50J10gPSBwYXJzZVN0cmluZyh1cmkuYXR0clsnZnJhZ21lbnQnXSk7XG5cdFx0XG5cdFx0Ly8gc3BsaXQgcGF0aCBhbmQgZnJhZ2VtZW50IGludG8gc2VnbWVudHNcdFx0XG5cdFx0dXJpLnNlZ1sncGF0aCddID0gdXJpLmF0dHIucGF0aC5yZXBsYWNlKC9eXFwvK3xcXC8rJC9nLCcnKS5zcGxpdCgnLycpOyAgICAgXG5cdFx0dXJpLnNlZ1snZnJhZ21lbnQnXSA9IHVyaS5hdHRyLmZyYWdtZW50LnJlcGxhY2UoL15cXC8rfFxcLyskL2csJycpLnNwbGl0KCcvJyk7XG5cdFx0XG5cdFx0Ly8gY29tcGlsZSBhICdiYXNlJyBkb21haW4gYXR0cmlidXRlICAgICAgICBcblx0XHR1cmkuYXR0clsnYmFzZSddID0gdXJpLmF0dHIuaG9zdCA/ICh1cmkuYXR0ci5wcm90b2NvbCA/ICB1cmkuYXR0ci5wcm90b2NvbCsnOi8vJyt1cmkuYXR0ci5ob3N0IDogdXJpLmF0dHIuaG9zdCkgKyAodXJpLmF0dHIucG9ydCA/ICc6Jyt1cmkuYXR0ci5wb3J0IDogJycpIDogJyc7ICAgICAgXG5cdFx0ICBcblx0XHRyZXR1cm4gdXJpO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZ2V0QXR0ck5hbWUoIGVsbSApIHtcblx0XHR2YXIgdG4gPSBlbG0udGFnTmFtZTtcblx0XHRpZiAoIHR5cGVvZiB0biAhPT0gJ3VuZGVmaW5lZCcgKSByZXR1cm4gdGFnMmF0dHJbdG4udG9Mb3dlckNhc2UoKV07XG5cdFx0cmV0dXJuIHRuO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBwcm9tb3RlKHBhcmVudCwga2V5KSB7XG5cdFx0aWYgKHBhcmVudFtrZXldLmxlbmd0aCA9PSAwKSByZXR1cm4gcGFyZW50W2tleV0gPSB7fTtcblx0XHR2YXIgdCA9IHt9O1xuXHRcdGZvciAodmFyIGkgaW4gcGFyZW50W2tleV0pIHRbaV0gPSBwYXJlbnRba2V5XVtpXTtcblx0XHRwYXJlbnRba2V5XSA9IHQ7XG5cdFx0cmV0dXJuIHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZShwYXJ0cywgcGFyZW50LCBrZXksIHZhbCkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcblx0XHRpZiAoIXBhcnQpIHtcblx0XHRcdGlmIChpc0FycmF5KHBhcmVudFtrZXldKSkge1xuXHRcdFx0XHRwYXJlbnRba2V5XS5wdXNoKHZhbCk7XG5cdFx0XHR9IGVsc2UgaWYgKCdvYmplY3QnID09IHR5cGVvZiBwYXJlbnRba2V5XSkge1xuXHRcdFx0XHRwYXJlbnRba2V5XSA9IHZhbDtcblx0XHRcdH0gZWxzZSBpZiAoJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIHBhcmVudFtrZXldKSB7XG5cdFx0XHRcdHBhcmVudFtrZXldID0gdmFsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGFyZW50W2tleV0gPSBbcGFyZW50W2tleV0sIHZhbF07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBvYmogPSBwYXJlbnRba2V5XSA9IHBhcmVudFtrZXldIHx8IFtdO1xuXHRcdFx0aWYgKCddJyA9PSBwYXJ0KSB7XG5cdFx0XHRcdGlmIChpc0FycmF5KG9iaikpIHtcblx0XHRcdFx0XHRpZiAoJycgIT0gdmFsKSBvYmoucHVzaCh2YWwpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCdvYmplY3QnID09IHR5cGVvZiBvYmopIHtcblx0XHRcdFx0XHRvYmpba2V5cyhvYmopLmxlbmd0aF0gPSB2YWw7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0b2JqID0gcGFyZW50W2tleV0gPSBbcGFyZW50W2tleV0sIHZhbF07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAofnBhcnQuaW5kZXhPZignXScpKSB7XG5cdFx0XHRcdHBhcnQgPSBwYXJ0LnN1YnN0cigwLCBwYXJ0Lmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRpZiAoIWlzaW50LnRlc3QocGFydCkgJiYgaXNBcnJheShvYmopKSBvYmogPSBwcm9tb3RlKHBhcmVudCwga2V5KTtcblx0XHRcdFx0cGFyc2UocGFydHMsIG9iaiwgcGFydCwgdmFsKTtcblx0XHRcdFx0Ly8ga2V5XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoIWlzaW50LnRlc3QocGFydCkgJiYgaXNBcnJheShvYmopKSBvYmogPSBwcm9tb3RlKHBhcmVudCwga2V5KTtcblx0XHRcdFx0cGFyc2UocGFydHMsIG9iaiwgcGFydCwgdmFsKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBtZXJnZShwYXJlbnQsIGtleSwgdmFsKSB7XG5cdFx0aWYgKH5rZXkuaW5kZXhPZignXScpKSB7XG5cdFx0XHR2YXIgcGFydHMgPSBrZXkuc3BsaXQoJ1snKSxcblx0XHRcdGxlbiA9IHBhcnRzLmxlbmd0aCxcblx0XHRcdGxhc3QgPSBsZW4gLSAxO1xuXHRcdFx0cGFyc2UocGFydHMsIHBhcmVudCwgJ2Jhc2UnLCB2YWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIWlzaW50LnRlc3Qoa2V5KSAmJiBpc0FycmF5KHBhcmVudC5iYXNlKSkge1xuXHRcdFx0XHR2YXIgdCA9IHt9O1xuXHRcdFx0XHRmb3IgKHZhciBrIGluIHBhcmVudC5iYXNlKSB0W2tdID0gcGFyZW50LmJhc2Vba107XG5cdFx0XHRcdHBhcmVudC5iYXNlID0gdDtcblx0XHRcdH1cblx0XHRcdHNldChwYXJlbnQuYmFzZSwga2V5LCB2YWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyZW50O1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VTdHJpbmcoc3RyKSB7XG5cdFx0cmV0dXJuIHJlZHVjZShTdHJpbmcoc3RyKS5zcGxpdCgvJnw7LyksIGZ1bmN0aW9uKHJldCwgcGFpcikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cGFpciA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcblx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHQvLyBpZ25vcmVcblx0XHRcdH1cblx0XHRcdHZhciBlcWwgPSBwYWlyLmluZGV4T2YoJz0nKSxcblx0XHRcdFx0YnJhY2UgPSBsYXN0QnJhY2VJbktleShwYWlyKSxcblx0XHRcdFx0a2V5ID0gcGFpci5zdWJzdHIoMCwgYnJhY2UgfHwgZXFsKSxcblx0XHRcdFx0dmFsID0gcGFpci5zdWJzdHIoYnJhY2UgfHwgZXFsLCBwYWlyLmxlbmd0aCksXG5cdFx0XHRcdHZhbCA9IHZhbC5zdWJzdHIodmFsLmluZGV4T2YoJz0nKSArIDEsIHZhbC5sZW5ndGgpO1xuXG5cdFx0XHRpZiAoJycgPT0ga2V5KSBrZXkgPSBwYWlyLCB2YWwgPSAnJztcblxuXHRcdFx0cmV0dXJuIG1lcmdlKHJldCwga2V5LCB2YWwpO1xuXHRcdH0sIHsgYmFzZToge30gfSkuYmFzZTtcblx0fVxuXHRcblx0ZnVuY3Rpb24gc2V0KG9iaiwga2V5LCB2YWwpIHtcblx0XHR2YXIgdiA9IG9ialtrZXldO1xuXHRcdGlmICh1bmRlZmluZWQgPT09IHYpIHtcblx0XHRcdG9ialtrZXldID0gdmFsO1xuXHRcdH0gZWxzZSBpZiAoaXNBcnJheSh2KSkge1xuXHRcdFx0di5wdXNoKHZhbCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9ialtrZXldID0gW3YsIHZhbF07XG5cdFx0fVxuXHR9XG5cdFxuXHRmdW5jdGlvbiBsYXN0QnJhY2VJbktleShzdHIpIHtcblx0XHR2YXIgbGVuID0gc3RyLmxlbmd0aCxcblx0XHRcdCBicmFjZSwgYztcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHRjID0gc3RyW2ldO1xuXHRcdFx0aWYgKCddJyA9PSBjKSBicmFjZSA9IGZhbHNlO1xuXHRcdFx0aWYgKCdbJyA9PSBjKSBicmFjZSA9IHRydWU7XG5cdFx0XHRpZiAoJz0nID09IGMgJiYgIWJyYWNlKSByZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHJlZHVjZShvYmosIGFjY3VtdWxhdG9yKXtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsID0gb2JqLmxlbmd0aCA+PiAwLFxuXHRcdFx0Y3VyciA9IGFyZ3VtZW50c1syXTtcblx0XHR3aGlsZSAoaSA8IGwpIHtcblx0XHRcdGlmIChpIGluIG9iaikgY3VyciA9IGFjY3VtdWxhdG9yLmNhbGwodW5kZWZpbmVkLCBjdXJyLCBvYmpbaV0sIGksIG9iaik7XG5cdFx0XHQrK2k7XG5cdFx0fVxuXHRcdHJldHVybiBjdXJyO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBpc0FycmF5KHZBcmcpIHtcblx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZBcmcpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGtleXMob2JqKSB7XG5cdFx0dmFyIGtleXMgPSBbXTtcblx0XHRmb3IgKCBwcm9wIGluIG9iaiApIHtcblx0XHRcdGlmICggb2JqLmhhc093blByb3BlcnR5KHByb3ApICkga2V5cy5wdXNoKHByb3ApO1xuXHRcdH1cblx0XHRyZXR1cm4ga2V5cztcblx0fVxuXHRcdFxuXHRmdW5jdGlvbiBwdXJsKCB1cmwsIHN0cmljdE1vZGUgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHVybCA9PT0gdHJ1ZSApIHtcblx0XHRcdHN0cmljdE1vZGUgPSB0cnVlO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRzdHJpY3RNb2RlID0gc3RyaWN0TW9kZSB8fCBmYWxzZTtcblx0XHR1cmwgPSB1cmwgfHwgd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCk7XG5cdFxuXHRcdHJldHVybiB7XG5cdFx0XHRcblx0XHRcdGRhdGEgOiBwYXJzZVVyaSh1cmwsIHN0cmljdE1vZGUpLFxuXHRcdFx0XG5cdFx0XHQvLyBnZXQgdmFyaW91cyBhdHRyaWJ1dGVzIGZyb20gdGhlIFVSSVxuXHRcdFx0YXR0ciA6IGZ1bmN0aW9uKCBhdHRyICkge1xuXHRcdFx0XHRhdHRyID0gYWxpYXNlc1thdHRyXSB8fCBhdHRyO1xuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGF0dHIgIT09ICd1bmRlZmluZWQnID8gdGhpcy5kYXRhLmF0dHJbYXR0cl0gOiB0aGlzLmRhdGEuYXR0cjtcblx0XHRcdH0sXG5cdFx0XHRcblx0XHRcdC8vIHJldHVybiBxdWVyeSBzdHJpbmcgcGFyYW1ldGVyc1xuXHRcdFx0cGFyYW0gOiBmdW5jdGlvbiggcGFyYW0gKSB7XG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcGFyYW0gIT09ICd1bmRlZmluZWQnID8gdGhpcy5kYXRhLnBhcmFtLnF1ZXJ5W3BhcmFtXSA6IHRoaXMuZGF0YS5wYXJhbS5xdWVyeTtcblx0XHRcdH0sXG5cdFx0XHRcblx0XHRcdC8vIHJldHVybiBmcmFnbWVudCBwYXJhbWV0ZXJzXG5cdFx0XHRmcGFyYW0gOiBmdW5jdGlvbiggcGFyYW0gKSB7XG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcGFyYW0gIT09ICd1bmRlZmluZWQnID8gdGhpcy5kYXRhLnBhcmFtLmZyYWdtZW50W3BhcmFtXSA6IHRoaXMuZGF0YS5wYXJhbS5mcmFnbWVudDtcblx0XHRcdH0sXG5cdFx0XHRcblx0XHRcdC8vIHJldHVybiBwYXRoIHNlZ21lbnRzXG5cdFx0XHRzZWdtZW50IDogZnVuY3Rpb24oIHNlZyApIHtcblx0XHRcdFx0aWYgKCB0eXBlb2Ygc2VnID09PSAndW5kZWZpbmVkJyApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5kYXRhLnNlZy5wYXRoO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNlZyA9IHNlZyA8IDAgPyB0aGlzLmRhdGEuc2VnLnBhdGgubGVuZ3RoICsgc2VnIDogc2VnIC0gMTsgLy8gbmVnYXRpdmUgc2VnbWVudHMgY291bnQgZnJvbSB0aGUgZW5kXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5zZWcucGF0aFtzZWddOyAgICAgICAgICAgICAgICAgICAgXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRcblx0XHRcdC8vIHJldHVybiBmcmFnbWVudCBzZWdtZW50c1xuXHRcdFx0ZnNlZ21lbnQgOiBmdW5jdGlvbiggc2VnICkge1xuXHRcdFx0XHRpZiAoIHR5cGVvZiBzZWcgPT09ICd1bmRlZmluZWQnICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmRhdGEuc2VnLmZyYWdtZW50OyAgICAgICAgICAgICAgICAgICAgXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VnID0gc2VnIDwgMCA/IHRoaXMuZGF0YS5zZWcuZnJhZ21lbnQubGVuZ3RoICsgc2VnIDogc2VnIC0gMTsgLy8gbmVnYXRpdmUgc2VnbWVudHMgY291bnQgZnJvbSB0aGUgZW5kXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5zZWcuZnJhZ21lbnRbc2VnXTsgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdCAgICBcdFxuXHRcdH07XG5cdFxuXHR9O1xuXHRcblx0aWYgKCB0eXBlb2YgJCAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cdFx0XG5cdFx0JC5mbi51cmwgPSBmdW5jdGlvbiggc3RyaWN0TW9kZSApIHtcblx0XHRcdHZhciB1cmwgPSAnJztcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdHVybCA9ICQodGhpcykuYXR0ciggZ2V0QXR0ck5hbWUodGhpc1swXSkgKSB8fCAnJztcblx0XHRcdH0gICAgXG5cdFx0XHRyZXR1cm4gcHVybCggdXJsLCBzdHJpY3RNb2RlICk7XG5cdFx0fTtcblx0XHRcblx0XHQkLnVybCA9IHB1cmw7XG5cdFx0XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LnB1cmwgPSBwdXJsO1xuXHR9XG5cbn0pO1xuXG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5kZWNsYXJlIGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlOiBOb2RlIHwgV2luZG93KTogV2luZG93O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmIChub2RlLnRvU3RyaW5nKCkgIT09ICdbb2JqZWN0IFdpbmRvd10nKSB7XG4gICAgY29uc3Qgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5cbmRlY2xhcmUgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IG1peGVkKTogYm9vbGVhbiAlY2hlY2tzKG5vZGUgaW5zdGFuY2VvZlxuICBFbGVtZW50KTtcbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIGNvbnN0IE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5kZWNsYXJlIGZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZTogbWl4ZWQpOiBib29sZWFuICVjaGVja3Mobm9kZSBpbnN0YW5jZW9mXG4gIEhUTUxFbGVtZW50KTtcbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICBjb25zdCBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5kZWNsYXJlIGZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyhub2RlIGluc3RhbmNlb2ZcbiAgU2hhZG93Um9vdCk7XG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9O1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgQ2xpZW50UmVjdE9iamVjdCwgVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcblxuY29uc3Qgcm91bmQgPSBNYXRoLnJvdW5kO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoXG4gIGVsZW1lbnQ6IEVsZW1lbnQgfCBWaXJ0dWFsRWxlbWVudCxcbiAgaW5jbHVkZVNjYWxlOiBib29sZWFuID0gZmFsc2Vcbik6IENsaWVudFJlY3RPYmplY3Qge1xuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgbGV0IHNjYWxlWCA9IDE7XG4gIGxldCBzY2FsZVkgPSAxO1xuXG4gIGlmIChpc0hUTUxFbGVtZW50KGVsZW1lbnQpICYmIGluY2x1ZGVTY2FsZSkge1xuICAgIGNvbnN0IG9mZnNldEhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgIGNvbnN0IG9mZnNldFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcblxuICAgIC8vIERvIG5vdCBhdHRlbXB0IHRvIGRpdmlkZSBieSAwLCBvdGhlcndpc2Ugd2UgZ2V0IGBJbmZpbml0eWAgYXMgc2NhbGVcbiAgICAvLyBGYWxsYmFjayB0byAxIGluIGNhc2UgYm90aCB2YWx1ZXMgYXJlIGAwYFxuICAgIGlmIChvZmZzZXRXaWR0aCA+IDApIHtcbiAgICAgIHNjYWxlWCA9IHJlY3Qud2lkdGggLyBvZmZzZXRXaWR0aCB8fCAxO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0SGVpZ2h0ID4gMCkge1xuICAgICAgc2NhbGVZID0gcmVjdC5oZWlnaHQgLyBvZmZzZXRIZWlnaHQgfHwgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByb3VuZChyZWN0LndpZHRoIC8gc2NhbGVYKSxcbiAgICBoZWlnaHQ6IHJvdW5kKHJlY3QuaGVpZ2h0IC8gc2NhbGVZKSxcbiAgICB0b3A6IHJvdW5kKHJlY3QudG9wIC8gc2NhbGVZKSxcbiAgICByaWdodDogcm91bmQocmVjdC5yaWdodCAvIHNjYWxlWCksXG4gICAgYm90dG9tOiByb3VuZChyZWN0LmJvdHRvbSAvIHNjYWxlWSksXG4gICAgbGVmdDogcm91bmQocmVjdC5sZWZ0IC8gc2NhbGVYKSxcbiAgICB4OiByb3VuZChyZWN0LmxlZnQgLyBzY2FsZVgpLFxuICAgIHk6IHJvdW5kKHJlY3QudG9wIC8gc2NhbGVZKSxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZTogTm9kZSB8IFdpbmRvdykge1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wLFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50OiA/Tm9kZSB8IFdpbmRvdyk6ID9zdHJpbmcge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuaW1wb3J0IHR5cGUgeyBXaW5kb3cgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChcbiAgZWxlbWVudDogRWxlbWVudCB8IFdpbmRvd1xuKTogSFRNTEVsZW1lbnQge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gIHJldHVybiAoXG4gICAgKGlzRWxlbWVudChlbGVtZW50KVxuICAgICAgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnRcbiAgICAgIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudFxuICApLmRvY3VtZW50RWxlbWVudDtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0JztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tICcuL2dldFdpbmRvd1Njcm9sbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudDogRWxlbWVudCk6IG51bWJlciB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gKFxuICAgIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgK1xuICAgIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0XG4gICk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoXG4gIGVsZW1lbnQ6IEVsZW1lbnRcbik6IENTU1N0eWxlRGVjbGFyYXRpb24ge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICBjb25zdCB7IG92ZXJmbG93LCBvdmVyZmxvd1gsIG92ZXJmbG93WSB9ID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBSZWN0LCBWaXJ0dWFsRWxlbWVudCwgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0Tm9kZVNjcm9sbCBmcm9tICcuL2dldE5vZGVTY3JvbGwnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tICcuL2dldFdpbmRvd1Njcm9sbEJhclgnO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tICcuL2dldERvY3VtZW50RWxlbWVudCc7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSAnLi9pc1Njcm9sbFBhcmVudCc7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudFNjYWxlZChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3Qgc2NhbGVYID0gcmVjdC53aWR0aCAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgY29uc3Qgc2NhbGVZID0gcmVjdC5oZWlnaHQgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuXG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufVxuXG4vLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KFxuICBlbGVtZW50T3JWaXJ0dWFsRWxlbWVudDogRWxlbWVudCB8IFZpcnR1YWxFbGVtZW50LFxuICBvZmZzZXRQYXJlbnQ6IEVsZW1lbnQgfCBXaW5kb3csXG4gIGlzRml4ZWQ6IGJvb2xlYW4gPSBmYWxzZVxuKTogUmVjdCB7XG4gIGNvbnN0IGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9XG4gICAgaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGlzRWxlbWVudFNjYWxlZChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChcbiAgICBlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCxcbiAgICBvZmZzZXRQYXJlbnRJc1NjYWxlZFxuICApO1xuXG4gIGxldCBzY3JvbGwgPSB7IHNjcm9sbExlZnQ6IDAsIHNjcm9sbFRvcDogMCB9O1xuICBsZXQgb2Zmc2V0cyA9IHsgeDogMCwgeTogMCB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAoIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSkge1xuICAgIGlmIChcbiAgICAgIGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMDc4XG4gICAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpXG4gICAgKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSAnLi9nZXRXaW5kb3dTY3JvbGwnO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tICcuL2dldFdpbmRvdyc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tICcuL2dldEhUTUxFbGVtZW50U2Nyb2xsJztcbmltcG9ydCB0eXBlIHsgV2luZG93IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGU6IE5vZGUgfCBXaW5kb3cpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59XG4iLCIvLyBAZmxvd1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRIVE1MRWxlbWVudFNjcm9sbChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wLFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUmVjdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSAnLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuXG4vLyBSZXR1cm5zIHRoZSBsYXlvdXQgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuIExheW91dFxuLy8gbWVhbnMgaXQgZG9lc24ndCB0YWtlIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50OiBIVE1MRWxlbWVudCk6IFJlY3Qge1xuICBjb25zdCBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpO1xuXG4gIC8vIFVzZSB0aGUgY2xpZW50UmVjdCBzaXplcyBpZiBpdCdzIG5vdCBiZWVuIHRyYW5zZm9ybWVkLlxuICAvLyBGaXhlcyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEyMjNcbiAgbGV0IHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgbGV0IGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LndpZHRoIC0gd2lkdGgpIDw9IDEpIHtcbiAgICB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGg7XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC5oZWlnaHQgLSBoZWlnaHQpIDw9IDEpIHtcbiAgICBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgfTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSAnLi9nZXROb2RlTmFtZSc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4vZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudDogTm9kZSB8IFNoYWRvd1Jvb3QpOiBOb2RlIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICAoaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcbiAgKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gJy4vaXNTY3JvbGxQYXJlbnQnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gJy4vaW5zdGFuY2VPZic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChub2RlOiBOb2RlKTogSFRNTEVsZW1lbnQge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gJy4vZ2V0U2Nyb2xsUGFyZW50JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCB0eXBlIHsgV2luZG93LCBWaXN1YWxWaWV3cG9ydCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tICcuL2lzU2Nyb2xsUGFyZW50JztcblxuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhcbiAgZWxlbWVudDogTm9kZSxcbiAgbGlzdDogQXJyYXk8RWxlbWVudCB8IFdpbmRvdz4gPSBbXVxuKTogQXJyYXk8RWxlbWVudCB8IFdpbmRvdyB8IFZpc3VhbFZpZXdwb3J0PiB7XG4gIGNvbnN0IHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgY29uc3QgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ/LmJvZHk7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICBjb25zdCB0YXJnZXQgPSBpc0JvZHlcbiAgICA/IFt3aW5dLmNvbmNhdChcbiAgICAgICAgd2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLFxuICAgICAgICBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW11cbiAgICAgIClcbiAgICA6IHNjcm9sbFBhcmVudDtcbiAgY29uc3QgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuXG4gIHJldHVybiBpc0JvZHlcbiAgICA/IHVwZGF0ZWRMaXN0XG4gICAgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgICAgIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tICcuL2dldE5vZGVOYW1lJztcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gJy4vZ2V0Q29tcHV0ZWRTdHlsZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcbmltcG9ydCBpc1RhYmxlRWxlbWVudCBmcm9tICcuL2lzVGFibGVFbGVtZW50JztcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gJy4vZ2V0UGFyZW50Tm9kZSc7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudDogRWxlbWVudCk6ID9FbGVtZW50IHtcbiAgaWYgKFxuICAgICFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uID09PSAnZml4ZWQnXG4gICkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufVxuXG4vLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5mdW5jdGlvbiBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudDogRWxlbWVudCkge1xuICBjb25zdCBpc0ZpcmVmb3ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMTtcbiAgY29uc3QgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpICE9PSAtMTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIGNvbnN0IGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIHdoaWxlIChcbiAgICBpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJlxuICAgIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMFxuICApIHtcbiAgICBjb25zdCBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTtcblxuICAgIC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcbiAgICBpZiAoXG4gICAgICBjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHxcbiAgICAgIGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8XG4gICAgICBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fFxuICAgICAgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHxcbiAgICAgIChpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInKSB8fFxuICAgICAgKGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJylcbiAgICApIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuXG4gIGxldCBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChcbiAgICBvZmZzZXRQYXJlbnQgJiZcbiAgICBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmXG4gICAgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJ1xuICApIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAoXG4gICAgb2Zmc2V0UGFyZW50ICYmXG4gICAgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fFxuICAgICAgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJlxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSlcbiAgKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSAnLi9nZXROb2RlTmFtZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuIFsndGFibGUnLCAndGQnLCAndGgnXS5pbmRleE9mKGdldE5vZGVOYW1lKGVsZW1lbnQpKSA+PSAwO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBtb2RpZmllclBoYXNlcyB9IGZyb20gJy4uL2VudW1zJztcblxuLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgbW9kaWZpZXJzLmZvckVhY2gobW9kaWZpZXIgPT4ge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTtcblxuICAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXI6IE1vZGlmaWVyPGFueSwgYW55Pikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuXG4gICAgY29uc3QgcmVxdWlyZXMgPSBbXG4gICAgICAuLi4obW9kaWZpZXIucmVxdWlyZXMgfHwgW10pLFxuICAgICAgLi4uKG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pLFxuICAgIF07XG5cbiAgICByZXF1aXJlcy5mb3JFYWNoKGRlcCA9PiB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgY29uc3QgZGVwTW9kaWZpZXIgPSBtYXAuZ2V0KGRlcCk7XG5cbiAgICAgICAgaWYgKGRlcE1vZGlmaWVyKSB7XG4gICAgICAgICAgc29ydChkZXBNb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKG1vZGlmaWVyID0+IHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKG1vZGlmaWVyLm5hbWUpKSB7XG4gICAgICAvLyBjaGVjayBmb3IgdmlzaXRlZCBvYmplY3RcbiAgICAgIHNvcnQobW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMoXG4gIG1vZGlmaWVyczogQXJyYXk8TW9kaWZpZXI8YW55LCBhbnk+PlxuKTogQXJyYXk8TW9kaWZpZXI8YW55LCBhbnk+PiB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICBjb25zdCBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTtcblxuICAvLyBvcmRlciBiYXNlZCBvbiBwaGFzZVxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKChhY2MsIHBoYXNlKSA9PiB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihtb2RpZmllciA9PiBtb2RpZmllci5waGFzZSA9PT0gcGhhc2UpXG4gICAgKTtcbiAgfSwgW10pO1xufVxuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2U8VD4oZm46IEZ1bmN0aW9uKTogKCkgPT4gUHJvbWlzZTxUPiB7XG4gIGxldCBwZW5kaW5nO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlPFQ+KHJlc29sdmUgPT4ge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgdHlwZSBCYXNlUGxhY2VtZW50LCB0eXBlIFBsYWNlbWVudCwgYXV0byB9IGZyb20gJy4uL2VudW1zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChcbiAgcGxhY2VtZW50OiBQbGFjZW1lbnQgfCB0eXBlb2YgYXV0b1xuKTogQmFzZVBsYWNlbWVudCB7XG4gIHJldHVybiAocGxhY2VtZW50LnNwbGl0KCctJylbMF06IGFueSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSAnLi9pbnN0YW5jZU9mJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50OiBFbGVtZW50LCBjaGlsZDogRWxlbWVudCkge1xuICBjb25zdCByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7XG5cbiAgLy8gRmlyc3QsIGF0dGVtcHQgd2l0aCBmYXN0ZXIgbmF0aXZlIG1ldGhvZFxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICBsZXQgbmV4dCA9IGNoaWxkO1xuICAgIGRvIHtcbiAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgfSB3aGlsZSAobmV4dCk7XG4gIH1cblxuICAvLyBHaXZlIHVwLCB0aGUgcmVzdWx0IGlzIGZhbHNlXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFJlY3QsIENsaWVudFJlY3RPYmplY3QgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdDogUmVjdCk6IENsaWVudFJlY3RPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIC4uLnJlY3QsXG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHQsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBDbGllbnRSZWN0T2JqZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBCb3VuZGFyeSwgUm9vdEJvdW5kYXJ5IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gJy4vZ2V0Vmlld3BvcnRSZWN0JztcbmltcG9ydCBnZXREb2N1bWVudFJlY3QgZnJvbSAnLi9nZXREb2N1bWVudFJlY3QnO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gJy4vbGlzdFNjcm9sbFBhcmVudHMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4vZ2V0RG9jdW1lbnRFbGVtZW50JztcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gJy4vZ2V0Q29tcHV0ZWRTdHlsZSc7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tICcuL2luc3RhbmNlT2YnO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tICcuL2dldEJvdW5kaW5nQ2xpZW50UmVjdCc7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tICcuL2dldFBhcmVudE5vZGUnO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gJy4vY29udGFpbnMnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4vZ2V0Tm9kZU5hbWUnO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSAnLi4vdXRpbHMvcmVjdFRvQ2xpZW50UmVjdCc7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50OiBFbGVtZW50KSB7XG4gIGNvbnN0IHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCk7XG5cbiAgcmVjdC50b3AgPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICByZWN0LmxlZnQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIHJlY3QuYm90dG9tID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3Qud2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LmhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuXG4gIHJldHVybiByZWN0O1xufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgY2xpcHBpbmdQYXJlbnQ6IEVsZW1lbnQgfCBSb290Qm91bmRhcnlcbik6IENsaWVudFJlY3RPYmplY3Qge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0XG4gICAgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50KSlcbiAgICA6IGlzSFRNTEVsZW1lbnQoY2xpcHBpbmdQYXJlbnQpXG4gICAgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudClcbiAgICA6IHJlY3RUb0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkpO1xufVxuXG4vLyBBIFwiY2xpcHBpbmcgcGFyZW50XCIgaXMgYW4gb3ZlcmZsb3dhYmxlIGNvbnRhaW5lciB3aXRoIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZlxuLy8gY2xpcHBpbmcgKG9yIGhpZGluZykgb3ZlcmZsb3dpbmcgZWxlbWVudHMgd2l0aCBhIHBvc2l0aW9uIGRpZmZlcmVudCBmcm9tXG4vLyBgaW5pdGlhbGBcbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50OiBFbGVtZW50KTogQXJyYXk8RWxlbWVudD4ge1xuICBjb25zdCBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgY29uc3QgY2FuRXNjYXBlQ2xpcHBpbmcgPVxuICAgIFsnYWJzb2x1dGUnLCAnZml4ZWQnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24pID49IDA7XG4gIGNvbnN0IGNsaXBwZXJFbGVtZW50ID1cbiAgICBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpXG4gICAgICA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KVxuICAgICAgOiBlbGVtZW50O1xuXG4gIGlmICghaXNFbGVtZW50KGNsaXBwZXJFbGVtZW50KSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKFxuICAgIChjbGlwcGluZ1BhcmVudCkgPT5cbiAgICAgIGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgJiZcbiAgICAgIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiZcbiAgICAgIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknXG4gICk7XG59XG5cbi8vIEdldHMgdGhlIG1heGltdW0gYXJlYSB0aGF0IHRoZSBlbGVtZW50IGlzIHZpc2libGUgaW4gZHVlIHRvIGFueSBudW1iZXIgb2Zcbi8vIGNsaXBwaW5nIHBhcmVudHNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeVxuKTogQ2xpZW50UmVjdE9iamVjdCB7XG4gIGNvbnN0IG1haW5DbGlwcGluZ1BhcmVudHMgPVxuICAgIGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJ1xuICAgICAgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudClcbiAgICAgIDogW10uY29uY2F0KGJvdW5kYXJ5KTtcbiAgY29uc3QgY2xpcHBpbmdQYXJlbnRzID0gWy4uLm1haW5DbGlwcGluZ1BhcmVudHMsIHJvb3RCb3VuZGFyeV07XG4gIGNvbnN0IGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG5cbiAgY29uc3QgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdQYXJlbnRzLnJlZHVjZSgoYWNjUmVjdCwgY2xpcHBpbmdQYXJlbnQpID0+IHtcbiAgICBjb25zdCByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuXG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcblxuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50KSk7XG5cbiAgY2xpcHBpbmdSZWN0LndpZHRoID0gY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC5oZWlnaHQgPSBjbGlwcGluZ1JlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgY2xpcHBpbmdSZWN0LnggPSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LnkgPSBjbGlwcGluZ1JlY3QudG9wO1xuXG4gIHJldHVybiBjbGlwcGluZ1JlY3Q7XG59XG4iLCIvLyBAZmxvd1xuZXhwb3J0IGNvbnN0IHRvcDogJ3RvcCcgPSAndG9wJztcbmV4cG9ydCBjb25zdCBib3R0b206ICdib3R0b20nID0gJ2JvdHRvbSc7XG5leHBvcnQgY29uc3QgcmlnaHQ6ICdyaWdodCcgPSAncmlnaHQnO1xuZXhwb3J0IGNvbnN0IGxlZnQ6ICdsZWZ0JyA9ICdsZWZ0JztcbmV4cG9ydCBjb25zdCBhdXRvOiAnYXV0bycgPSAnYXV0byc7XG5leHBvcnQgdHlwZSBCYXNlUGxhY2VtZW50ID1cbiAgfCB0eXBlb2YgdG9wXG4gIHwgdHlwZW9mIGJvdHRvbVxuICB8IHR5cGVvZiByaWdodFxuICB8IHR5cGVvZiBsZWZ0O1xuZXhwb3J0IGNvbnN0IGJhc2VQbGFjZW1lbnRzOiBBcnJheTxCYXNlUGxhY2VtZW50PiA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuXG5leHBvcnQgY29uc3Qgc3RhcnQ6ICdzdGFydCcgPSAnc3RhcnQnO1xuZXhwb3J0IGNvbnN0IGVuZDogJ2VuZCcgPSAnZW5kJztcbmV4cG9ydCB0eXBlIFZhcmlhdGlvbiA9IHR5cGVvZiBzdGFydCB8IHR5cGVvZiBlbmQ7XG5cbmV4cG9ydCBjb25zdCBjbGlwcGluZ1BhcmVudHM6ICdjbGlwcGluZ1BhcmVudHMnID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgY29uc3Qgdmlld3BvcnQ6ICd2aWV3cG9ydCcgPSAndmlld3BvcnQnO1xuZXhwb3J0IHR5cGUgQm91bmRhcnkgPVxuICB8IEhUTUxFbGVtZW50XG4gIHwgQXJyYXk8SFRNTEVsZW1lbnQ+XG4gIHwgdHlwZW9mIGNsaXBwaW5nUGFyZW50cztcbmV4cG9ydCB0eXBlIFJvb3RCb3VuZGFyeSA9IHR5cGVvZiB2aWV3cG9ydCB8ICdkb2N1bWVudCc7XG5cbmV4cG9ydCBjb25zdCBwb3BwZXI6ICdwb3BwZXInID0gJ3BvcHBlcic7XG5leHBvcnQgY29uc3QgcmVmZXJlbmNlOiAncmVmZXJlbmNlJyA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHR5cGUgQ29udGV4dCA9IHR5cGVvZiBwb3BwZXIgfCB0eXBlb2YgcmVmZXJlbmNlO1xuXG5leHBvcnQgdHlwZSBWYXJpYXRpb25QbGFjZW1lbnQgPVxuICB8ICd0b3Atc3RhcnQnXG4gIHwgJ3RvcC1lbmQnXG4gIHwgJ2JvdHRvbS1zdGFydCdcbiAgfCAnYm90dG9tLWVuZCdcbiAgfCAncmlnaHQtc3RhcnQnXG4gIHwgJ3JpZ2h0LWVuZCdcbiAgfCAnbGVmdC1zdGFydCdcbiAgfCAnbGVmdC1lbmQnO1xuZXhwb3J0IHR5cGUgQXV0b1BsYWNlbWVudCA9ICdhdXRvJyB8ICdhdXRvLXN0YXJ0JyB8ICdhdXRvLWVuZCc7XG5leHBvcnQgdHlwZSBDb21wdXRlZFBsYWNlbWVudCA9IFZhcmlhdGlvblBsYWNlbWVudCB8IEJhc2VQbGFjZW1lbnQ7XG5leHBvcnQgdHlwZSBQbGFjZW1lbnQgPSBBdXRvUGxhY2VtZW50IHwgQmFzZVBsYWNlbWVudCB8IFZhcmlhdGlvblBsYWNlbWVudDtcblxuZXhwb3J0IGNvbnN0IHZhcmlhdGlvblBsYWNlbWVudHM6IEFycmF5PFZhcmlhdGlvblBsYWNlbWVudD4gPSBiYXNlUGxhY2VtZW50cy5yZWR1Y2UoXG4gIChhY2M6IEFycmF5PFZhcmlhdGlvblBsYWNlbWVudD4sIHBsYWNlbWVudDogQmFzZVBsYWNlbWVudCkgPT5cbiAgICBhY2MuY29uY2F0KFsoYCR7cGxhY2VtZW50fS0ke3N0YXJ0fWA6IGFueSksIChgJHtwbGFjZW1lbnR9LSR7ZW5kfWA6IGFueSldKSxcbiAgW11cbik7XG5leHBvcnQgY29uc3QgcGxhY2VtZW50czogQXJyYXk8UGxhY2VtZW50PiA9IFsuLi5iYXNlUGxhY2VtZW50cywgYXV0b10ucmVkdWNlKFxuICAoXG4gICAgYWNjOiBBcnJheTxQbGFjZW1lbnQ+LFxuICAgIHBsYWNlbWVudDogQmFzZVBsYWNlbWVudCB8IHR5cGVvZiBhdXRvXG4gICk6IEFycmF5PFBsYWNlbWVudD4gPT5cbiAgICBhY2MuY29uY2F0KFtcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIChgJHtwbGFjZW1lbnR9LSR7c3RhcnR9YDogYW55KSxcbiAgICAgIChgJHtwbGFjZW1lbnR9LSR7ZW5kfWA6IGFueSksXG4gICAgXSksXG4gIFtdXG4pO1xuXG4vLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuZXhwb3J0IGNvbnN0IGJlZm9yZVJlYWQ6ICdiZWZvcmVSZWFkJyA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCBjb25zdCByZWFkOiAncmVhZCcgPSAncmVhZCc7XG5leHBvcnQgY29uc3QgYWZ0ZXJSZWFkOiAnYWZ0ZXJSZWFkJyA9ICdhZnRlclJlYWQnO1xuLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcbmV4cG9ydCBjb25zdCBiZWZvcmVNYWluOiAnYmVmb3JlTWFpbicgPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgY29uc3QgbWFpbjogJ21haW4nID0gJ21haW4nO1xuZXhwb3J0IGNvbnN0IGFmdGVyTWFpbjogJ2FmdGVyTWFpbicgPSAnYWZ0ZXJNYWluJztcbi8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcbmV4cG9ydCBjb25zdCBiZWZvcmVXcml0ZTogJ2JlZm9yZVdyaXRlJyA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgY29uc3Qgd3JpdGU6ICd3cml0ZScgPSAnd3JpdGUnO1xuZXhwb3J0IGNvbnN0IGFmdGVyV3JpdGU6ICdhZnRlcldyaXRlJyA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCBjb25zdCBtb2RpZmllclBoYXNlczogQXJyYXk8TW9kaWZpZXJQaGFzZXM+ID0gW1xuICBiZWZvcmVSZWFkLFxuICByZWFkLFxuICBhZnRlclJlYWQsXG4gIGJlZm9yZU1haW4sXG4gIG1haW4sXG4gIGFmdGVyTWFpbixcbiAgYmVmb3JlV3JpdGUsXG4gIHdyaXRlLFxuICBhZnRlcldyaXRlLFxuXTtcblxuZXhwb3J0IHR5cGUgTW9kaWZpZXJQaGFzZXMgPVxuICB8IHR5cGVvZiBiZWZvcmVSZWFkXG4gIHwgdHlwZW9mIHJlYWRcbiAgfCB0eXBlb2YgYWZ0ZXJSZWFkXG4gIHwgdHlwZW9mIGJlZm9yZU1haW5cbiAgfCB0eXBlb2YgbWFpblxuICB8IHR5cGVvZiBhZnRlck1haW5cbiAgfCB0eXBlb2YgYmVmb3JlV3JpdGVcbiAgfCB0eXBlb2Ygd3JpdGVcbiAgfCB0eXBlb2YgYWZ0ZXJXcml0ZTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gJy4vZ2V0V2luZG93JztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSAnLi9nZXRXaW5kb3dTY3JvbGxCYXJYJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICBjb25zdCBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICBjb25zdCB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcblxuICBsZXQgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICBsZXQgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuXG4gIC8vIE5COiBUaGlzIGlzbid0IHN1cHBvcnRlZCBvbiBpT1MgPD0gMTIuIElmIHRoZSBrZXlib2FyZCBpcyBvcGVuLCB0aGUgcG9wcGVyXG4gIC8vIGNhbiBiZSBvYnNjdXJlZCB1bmRlcm5lYXRoIGl0LlxuICAvLyBBbHNvLCBgaHRtbC5jbGllbnRIZWlnaHRgIGFkZHMgdGhlIGJvdHRvbSBiYXIgaGVpZ2h0IGluIFNhZmFyaSBpT1MsIGV2ZW5cbiAgLy8gaWYgaXQgaXNuJ3Qgb3Blbiwgc28gaWYgdGhpcyBpc24ndCBhdmFpbGFibGUsIHRoZSBwb3BwZXIgd2lsbCBiZSBkZXRlY3RlZFxuICAvLyB0byBvdmVyZmxvdyB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gdG9vIGVhcmx5LlxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcblxuICAgIC8vIFVzZXMgTGF5b3V0IFZpZXdwb3J0IChsaWtlIENocm9tZTsgU2FmYXJpIGRvZXMgbm90IGN1cnJlbnRseSlcbiAgICAvLyBJbiBDaHJvbWUsIGl0IHJldHVybnMgYSB2YWx1ZSB2ZXJ5IGNsb3NlIHRvIDAgKCsvLSkgYnV0IGNvbnRhaW5zIHJvdW5kaW5nXG4gICAgLy8gZXJyb3JzIGR1ZSB0byBmbG9hdGluZyBwb2ludCBudW1iZXJzLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHByZWNpc2lvbi5cbiAgICAvLyBTYWZhcmkgcmV0dXJucyBhIG51bWJlciA8PSAwLCB1c3VhbGx5IDwgLTEgd2hlbiBwaW5jaC16b29tZWRcblxuICAgIC8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZhaWxzIGluIG1vYmlsZSBlbXVsYXRpb24gbW9kZSBpbiBDaHJvbWUuXG4gICAgLy8gTWF0aC5hYnMod2luLmlubmVyV2lkdGggLyB2aXN1YWxWaWV3cG9ydC5zY2FsZSAtIHZpc3VhbFZpZXdwb3J0LndpZHRoKSA8XG4gICAgLy8gMC4wMDFcbiAgICAvLyBGYWxsYmFjayBoZXJlOiBcIk5vdCBTYWZhcmlcIiB1c2VyQWdlbnRcbiAgICBpZiAoIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5LFxuICB9O1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUmVjdCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi9nZXRDb21wdXRlZFN0eWxlJztcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsQmFyWCc7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gJy4vZ2V0V2luZG93U2Nyb2xsJztcbmltcG9ydCB7IG1heCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG4vLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBSZWN0IHtcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgY29uc3Qgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICBjb25zdCBib2R5ID0gZWxlbWVudC5vd25lckRvY3VtZW50Py5ib2R5O1xuXG4gIGNvbnN0IHdpZHRoID0gbWF4KFxuICAgIGh0bWwuc2Nyb2xsV2lkdGgsXG4gICAgaHRtbC5jbGllbnRXaWR0aCxcbiAgICBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsXG4gICAgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwXG4gICk7XG4gIGNvbnN0IGhlaWdodCA9IG1heChcbiAgICBodG1sLnNjcm9sbEhlaWdodCxcbiAgICBodG1sLmNsaWVudEhlaWdodCxcbiAgICBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLFxuICAgIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDBcbiAgKTtcblxuICBsZXQgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIGNvbnN0IHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4geyB3aWR0aCwgaGVpZ2h0LCB4LCB5IH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgdHlwZSBWYXJpYXRpb24sIHR5cGUgUGxhY2VtZW50IH0gZnJvbSAnLi4vZW51bXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50OiBQbGFjZW1lbnQpOiA/VmFyaWF0aW9uIHtcbiAgcmV0dXJuIChwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTogYW55KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudFxuKTogJ3gnIHwgJ3knIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gJy4vZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gJy4vZ2V0VmFyaWF0aW9uJztcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSAnLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQnO1xuaW1wb3J0IHR5cGUge1xuICBSZWN0LFxuICBQb3NpdGlvbmluZ1N0cmF0ZWd5LFxuICBPZmZzZXRzLFxuICBDbGllbnRSZWN0T2JqZWN0LFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0LCBlbmQsIHR5cGUgUGxhY2VtZW50IH0gZnJvbSAnLi4vZW51bXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyh7XG4gIHJlZmVyZW5jZSxcbiAgZWxlbWVudCxcbiAgcGxhY2VtZW50LFxufToge1xuICByZWZlcmVuY2U6IFJlY3QgfCBDbGllbnRSZWN0T2JqZWN0LFxuICBlbGVtZW50OiBSZWN0IHwgQ2xpZW50UmVjdE9iamVjdCxcbiAgc3RyYXRlZ3k6IFBvc2l0aW9uaW5nU3RyYXRlZ3ksXG4gIHBsYWNlbWVudD86IFBsYWNlbWVudCxcbn0pOiBPZmZzZXRzIHtcbiAgY29uc3QgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudCA/IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA6IG51bGw7XG4gIGNvbnN0IHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgY29uc3QgY29tbW9uWCA9IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoIC8gMiAtIGVsZW1lbnQud2lkdGggLyAyO1xuICBjb25zdCBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGVsZW1lbnQuaGVpZ2h0IC8gMjtcblxuICBsZXQgb2Zmc2V0cztcbiAgc3dpdGNoIChiYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSB0b3A6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSAtIGVsZW1lbnQuaGVpZ2h0LFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0LFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgcmlnaHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWSxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIGxlZnQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGVsZW1lbnQud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vblksXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueSxcbiAgICAgIH07XG4gIH1cblxuICBjb25zdCBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnRcbiAgICA/IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KVxuICAgIDogbnVsbDtcblxuICBpZiAobWFpbkF4aXMgIT0gbnVsbCkge1xuICAgIGNvbnN0IGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPVxuICAgICAgICAgIG9mZnNldHNbbWFpbkF4aXNdIC0gKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9XG4gICAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gKyAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFNpZGVPYmplY3QgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gJy4vZ2V0RnJlc2hTaWRlT2JqZWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KFxuICBwYWRkaW5nT2JqZWN0OiAkU2hhcGU8U2lkZU9iamVjdD5cbik6IFNpZGVPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIC4uLmdldEZyZXNoU2lkZU9iamVjdCgpLFxuICAgIC4uLnBhZGRpbmdPYmplY3QsXG4gIH07XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBTaWRlT2JqZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKTogU2lkZU9iamVjdCB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICB9O1xufVxuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwPFxuICBUOiBudW1iZXIgfCBzdHJpbmcgfCBib29sZWFuLFxuICBLOiBzdHJpbmdcbj4odmFsdWU6IFQsIGtleXM6IEFycmF5PEs+KTogeyBba2V5OiBzdHJpbmddOiBUIH0ge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGhhc2hNYXAsIGtleSkgPT4ge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBTdGF0ZSwgU2lkZU9iamVjdCwgUGFkZGluZyB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50LCBCb3VuZGFyeSwgUm9vdEJvdW5kYXJ5LCBDb250ZXh0IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0JztcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSAnLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudCc7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gJy4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QnO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gJy4vY29tcHV0ZU9mZnNldHMnO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSAnLi9yZWN0VG9DbGllbnRSZWN0JztcbmltcG9ydCB7XG4gIGNsaXBwaW5nUGFyZW50cyxcbiAgcmVmZXJlbmNlLFxuICBwb3BwZXIsXG4gIGJvdHRvbSxcbiAgdG9wLFxuICByaWdodCxcbiAgYmFzZVBsYWNlbWVudHMsXG4gIHZpZXdwb3J0LFxufSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuLi9kb20tdXRpbHMvaW5zdGFuY2VPZic7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gJy4vbWVyZ2VQYWRkaW5nT2JqZWN0JztcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSAnLi9leHBhbmRUb0hhc2hNYXAnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeSxcbiAgZWxlbWVudENvbnRleHQ6IENvbnRleHQsXG4gIGFsdEJvdW5kYXJ5OiBib29sZWFuLFxuICBwYWRkaW5nOiBQYWRkaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coXG4gIHN0YXRlOiBTdGF0ZSxcbiAgb3B0aW9uczogJFNoYXBlPE9wdGlvbnM+ID0ge31cbik6IFNpZGVPYmplY3Qge1xuICBjb25zdCB7XG4gICAgcGxhY2VtZW50ID0gc3RhdGUucGxhY2VtZW50LFxuICAgIGJvdW5kYXJ5ID0gY2xpcHBpbmdQYXJlbnRzLFxuICAgIHJvb3RCb3VuZGFyeSA9IHZpZXdwb3J0LFxuICAgIGVsZW1lbnRDb250ZXh0ID0gcG9wcGVyLFxuICAgIGFsdEJvdW5kYXJ5ID0gZmFsc2UsXG4gICAgcGFkZGluZyA9IDAsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QoXG4gICAgdHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInXG4gICAgICA/IHBhZGRpbmdcbiAgICAgIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKVxuICApO1xuXG4gIGNvbnN0IGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuXG4gIGNvbnN0IHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIGNvbnN0IGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG5cbiAgY29uc3QgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KFxuICAgIGlzRWxlbWVudChlbGVtZW50KVxuICAgICAgPyBlbGVtZW50XG4gICAgICA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksXG4gICAgYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5XG4gICk7XG5cbiAgY29uc3QgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UpO1xuXG4gIGNvbnN0IHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50LFxuICB9KTtcblxuICBjb25zdCBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdCh7XG4gICAgLi4ucG9wcGVyUmVjdCxcbiAgICAuLi5wb3BwZXJPZmZzZXRzLFxuICB9KTtcblxuICBjb25zdCBlbGVtZW50Q2xpZW50UmVjdCA9XG4gICAgZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0O1xuXG4gIC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuICBjb25zdCBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOlxuICAgICAgZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC1cbiAgICAgIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gK1xuICAgICAgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OlxuICAgICAgZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0LFxuICB9O1xuXG4gIGNvbnN0IG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDtcblxuICAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG5cbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgY29uc3QgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICBjb25zdCBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7XG4gIFN0YXRlLFxuICBPcHRpb25zR2VuZXJpYyxcbiAgTW9kaWZpZXIsXG4gIEluc3RhbmNlLFxuICBWaXJ0dWFsRWxlbWVudCxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tICcuL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0JztcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gJy4vZG9tLXV0aWxzL2dldExheW91dFJlY3QnO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gJy4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzJztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gJy4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IG9yZGVyTW9kaWZpZXJzIGZyb20gJy4vdXRpbHMvb3JkZXJNb2RpZmllcnMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gJy4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMnO1xuaW1wb3J0IHVuaXF1ZUJ5IGZyb20gJy4vdXRpbHMvdW5pcXVlQnknO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi91dGlscy9nZXRCYXNlUGxhY2VtZW50JztcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tICcuL3V0aWxzL21lcmdlQnlOYW1lJztcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tICcuL3V0aWxzL2RldGVjdE92ZXJmbG93JztcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4vZG9tLXV0aWxzL2luc3RhbmNlT2YnO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gJy4vZW51bXMnO1xuXG5jb25zdCBJTlZBTElEX0VMRU1FTlRfRVJST1IgPVxuICAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbmNvbnN0IElORklOSVRFX0xPT1BfRVJST1IgPVxuICAnUG9wcGVyOiBBbiBpbmZpbml0ZSBsb29wIGluIHRoZSBtb2RpZmllcnMgY3ljbGUgaGFzIGJlZW4gZGV0ZWN0ZWQhIFRoZSBjeWNsZSBoYXMgYmVlbiBpbnRlcnJ1cHRlZCB0byBwcmV2ZW50IGEgYnJvd3NlciBjcmFzaC4nO1xuXG5jb25zdCBERUZBVUxUX09QVElPTlM6IE9wdGlvbnNHZW5lcmljPGFueT4gPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxufTtcblxudHlwZSBQb3BwZXJHZW5lcmF0b3JBcmdzID0ge1xuICBkZWZhdWx0TW9kaWZpZXJzPzogQXJyYXk8TW9kaWZpZXI8YW55LCBhbnk+PixcbiAgZGVmYXVsdE9wdGlvbnM/OiAkU2hhcGU8T3B0aW9uc0dlbmVyaWM8YW55Pj4sXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKC4uLmFyZ3M6IEFycmF5PGFueT4pOiBib29sZWFuIHtcbiAgcmV0dXJuICFhcmdzLnNvbWUoXG4gICAgKGVsZW1lbnQpID0+XG4gICAgICAhKGVsZW1lbnQgJiYgdHlwZW9mIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnM6IFBvcHBlckdlbmVyYXRvckFyZ3MgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdE1vZGlmaWVycyA9IFtdLFxuICAgIGRlZmF1bHRPcHRpb25zID0gREVGQVVMVF9PUFRJT05TLFxuICB9ID0gZ2VuZXJhdG9yT3B0aW9ucztcblxuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyPFRNb2RpZmllcjogJFNoYXBlPE1vZGlmaWVyPGFueSwgYW55Pj4+KFxuICAgIHJlZmVyZW5jZTogRWxlbWVudCB8IFZpcnR1YWxFbGVtZW50LFxuICAgIHBvcHBlcjogSFRNTEVsZW1lbnQsXG4gICAgb3B0aW9uczogJFNoYXBlPE9wdGlvbnNHZW5lcmljPFRNb2RpZmllcj4+ID0gZGVmYXVsdE9wdGlvbnNcbiAgKTogSW5zdGFuY2Uge1xuICAgIGxldCBzdGF0ZTogJFNoYXBlPFN0YXRlPiA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IHsgLi4uREVGQVVMVF9PUFRJT05TLCAuLi5kZWZhdWx0T3B0aW9ucyB9LFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcixcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge30sXG4gICAgfTtcblxuICAgIGxldCBlZmZlY3RDbGVhbnVwRm5zOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuICAgIGxldCBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuXG4gICAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID1cbiAgICAgICAgICB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBzZXRPcHRpb25zQWN0aW9uKHN0YXRlLm9wdGlvbnMpXG4gICAgICAgICAgICA6IHNldE9wdGlvbnNBY3Rpb247XG5cbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuXG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSB7XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZVtleHBvbmVudGlhbC1zcHJlYWRdXG4gICAgICAgICAgLi4uZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgICAgLi4uc3RhdGUub3B0aW9ucyxcbiAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB9O1xuXG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKVxuICAgICAgICAgICAgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpXG4gICAgICAgICAgICA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudFxuICAgICAgICAgICAgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpXG4gICAgICAgICAgICA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuICAgICAgICBjb25zdCBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMoXG4gICAgICAgICAgbWVyZ2VCeU5hbWUoWy4uLmRlZmF1bHRNb2RpZmllcnMsIC4uLnN0YXRlLm9wdGlvbnMubW9kaWZpZXJzXSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcigobSkgPT4gbS5lbmFibGVkKTtcblxuICAgICAgICAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgY29uc3QgbW9kaWZpZXJzID0gdW5pcXVlQnkoXG4gICAgICAgICAgICBbLi4ub3JkZXJlZE1vZGlmaWVycywgLi4uc3RhdGUub3B0aW9ucy5tb2RpZmllcnNdLFxuICAgICAgICAgICAgKHsgbmFtZSB9KSA9PiBuYW1lXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIGNvbnN0IGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChcbiAgICAgICAgICAgICAgKHsgbmFtZSB9KSA9PiBuYW1lID09PSAnZmxpcCdcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsXG4gICAgICAgICAgICAgICAgICAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLicsXG4gICAgICAgICAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBtYXJnaW5Ub3AsXG4gICAgICAgICAgICBtYXJnaW5SaWdodCxcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgIG1hcmdpbkxlZnQsXG4gICAgICAgICAgfSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKTtcblxuICAgICAgICAgIC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKChtYXJnaW4pID0+XG4gICAgICAgICAgICAgIHBhcnNlRmxvYXQobWFyZ2luKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLFxuICAgICAgICAgICAgICAgICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLFxuICAgICAgICAgICAgICAgICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJyxcbiAgICAgICAgICAgICAgICAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLFxuICAgICAgICAgICAgICAgICdtb2RpZmllcnMuJyxcbiAgICAgICAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcblxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgcmVmZXJlbmNlLCBwb3BwZXIgfSA9IHN0YXRlLmVsZW1lbnRzO1xuXG4gICAgICAgIC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KFxuICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksXG4gICAgICAgICAgICBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcblxuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcblxuICAgICAgICAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChcbiAgICAgICAgICAobW9kaWZpZXIpID0+XG4gICAgICAgICAgICAoc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgLi4ubW9kaWZpZXIuZGF0YSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IF9fZGVidWdfbG9vcHNfXyA9IDA7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHsgZm4sIG9wdGlvbnMgPSB7fSwgbmFtZSB9ID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF07XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHsgc3RhdGUsIG9wdGlvbnMsIG5hbWUsIGluc3RhbmNlIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2U8JFNoYXBlPFN0YXRlPj4oXG4gICAgICAgICgpID0+XG4gICAgICAgICAgbmV3IFByb21pc2U8JFNoYXBlPFN0YXRlPj4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgICB9KVxuICAgICAgKSxcblxuICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKChzdGF0ZSkgPT4ge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaCgoeyBuYW1lLCBvcHRpb25zID0ge30sIGVmZmVjdCB9KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29uc3QgY2xlYW51cEZuID0gZWZmZWN0KHsgc3RhdGUsIG5hbWUsIGluc3RhbmNlLCBvcHRpb25zIH0pO1xuICAgICAgICAgIGNvbnN0IG5vb3BGbiA9ICgpID0+IHt9O1xuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVBvcHBlciA9IHBvcHBlckdlbmVyYXRvcigpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9O1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKFxuICBtb2RpZmllcnM6IEFycmF5PCRTaGFwZTxNb2RpZmllcjxhbnksIGFueT4+PlxuKTogQXJyYXk8JFNoYXBlPE1vZGlmaWVyPGFueSwgYW55Pj4+IHtcbiAgY29uc3QgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZSgobWVyZ2VkLCBjdXJyZW50KSA9PiB7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nXG4gICAgICA/IHtcbiAgICAgICAgICAuLi5leGlzdGluZyxcbiAgICAgICAgICAuLi5jdXJyZW50LFxuICAgICAgICAgIG9wdGlvbnM6IHsgLi4uZXhpc3Rpbmcub3B0aW9ucywgLi4uY3VycmVudC5vcHRpb25zIH0sXG4gICAgICAgICAgZGF0YTogeyAuLi5leGlzdGluZy5kYXRhLCAuLi5jdXJyZW50LmRhdGEgfSxcbiAgICAgICAgfVxuICAgICAgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTtcblxuICAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoa2V5ID0+IG1lcmdlZFtrZXldKTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7XG4gIFBvc2l0aW9uaW5nU3RyYXRlZ3ksXG4gIE9mZnNldHMsXG4gIE1vZGlmaWVyLFxuICBNb2RpZmllckFyZ3VtZW50cyxcbiAgUmVjdCxcbiAgV2luZG93LFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICB0eXBlIEJhc2VQbGFjZW1lbnQsXG4gIHR5cGUgVmFyaWF0aW9uLFxuICB0b3AsXG4gIGxlZnQsXG4gIHJpZ2h0LFxuICBib3R0b20sXG4gIGVuZCxcbn0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi4vZG9tLXV0aWxzL2dldFdpbmRvdyc7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gJy4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQnO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSAnLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gJy4uL3V0aWxzL2dldFZhcmlhdGlvbic7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uL3V0aWxzL21hdGgnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBSb3VuZE9mZnNldHMgPSAoXG4gIG9mZnNldHM6ICRTaGFwZTx7IHg6IG51bWJlciwgeTogbnVtYmVyLCBjZW50ZXJPZmZzZXQ6IG51bWJlciB9PlxuKSA9PiBPZmZzZXRzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBncHVBY2NlbGVyYXRpb246IGJvb2xlYW4sXG4gIGFkYXB0aXZlOiBib29sZWFuLFxuICByb3VuZE9mZnNldHM/OiBib29sZWFuIHwgUm91bmRPZmZzZXRzLFxufTtcblxuY29uc3QgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bycsXG59O1xuXG4vLyBSb3VuZCB0aGUgb2Zmc2V0cyB0byB0aGUgbmVhcmVzdCBzdWl0YWJsZSBzdWJwaXhlbCBiYXNlZCBvbiB0aGUgRFBSLlxuLy8gWm9vbWluZyBjYW4gY2hhbmdlIHRoZSBEUFIsIGJ1dCBpdCBzZWVtcyB0byByZXBvcnQgYSB2YWx1ZSB0aGF0IHdpbGxcbi8vIGNsZWFubHkgZGl2aWRlIHRoZSB2YWx1ZXMgaW50byB0aGUgYXBwcm9wcmlhdGUgc3VicGl4ZWxzLlxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoeyB4LCB5IH0pOiBPZmZzZXRzIHtcbiAgY29uc3Qgd2luOiBXaW5kb3cgPSB3aW5kb3c7XG4gIGNvbnN0IGRwciA9IHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZChyb3VuZCh4ICogZHByKSAvIGRwcikgfHwgMCxcbiAgICB5OiByb3VuZChyb3VuZCh5ICogZHByKSAvIGRwcikgfHwgMCxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKHtcbiAgcG9wcGVyLFxuICBwb3BwZXJSZWN0LFxuICBwbGFjZW1lbnQsXG4gIHZhcmlhdGlvbixcbiAgb2Zmc2V0cyxcbiAgcG9zaXRpb24sXG4gIGdwdUFjY2VsZXJhdGlvbixcbiAgYWRhcHRpdmUsXG4gIHJvdW5kT2Zmc2V0cyxcbn06IHtcbiAgcG9wcGVyOiBIVE1MRWxlbWVudCxcbiAgcG9wcGVyUmVjdDogUmVjdCxcbiAgcGxhY2VtZW50OiBCYXNlUGxhY2VtZW50LFxuICB2YXJpYXRpb246ID9WYXJpYXRpb24sXG4gIG9mZnNldHM6ICRTaGFwZTx7IHg6IG51bWJlciwgeTogbnVtYmVyLCBjZW50ZXJPZmZzZXQ6IG51bWJlciB9PixcbiAgcG9zaXRpb246IFBvc2l0aW9uaW5nU3RyYXRlZ3ksXG4gIGdwdUFjY2VsZXJhdGlvbjogYm9vbGVhbixcbiAgYWRhcHRpdmU6IGJvb2xlYW4sXG4gIHJvdW5kT2Zmc2V0czogYm9vbGVhbiB8IFJvdW5kT2Zmc2V0cyxcbn0pIHtcbiAgbGV0IHsgeCA9IDAsIHkgPSAwIH0gPVxuICAgIHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZVxuICAgICAgPyByb3VuZE9mZnNldHNCeURQUihvZmZzZXRzKVxuICAgICAgOiB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHJvdW5kT2Zmc2V0cyhvZmZzZXRzKVxuICAgICAgOiBvZmZzZXRzO1xuXG4gIGNvbnN0IGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIGNvbnN0IGhhc1kgPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd5Jyk7XG5cbiAgbGV0IHNpZGVYOiBzdHJpbmcgPSBsZWZ0O1xuICBsZXQgc2lkZVk6IHN0cmluZyA9IHRvcDtcblxuICBjb25zdCB3aW46IFdpbmRvdyA9IHdpbmRvdztcblxuICBpZiAoYWRhcHRpdmUpIHtcbiAgICBsZXQgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KHBvcHBlcik7XG4gICAgbGV0IGhlaWdodFByb3AgPSAnY2xpZW50SGVpZ2h0JztcbiAgICBsZXQgd2lkdGhQcm9wID0gJ2NsaWVudFdpZHRoJztcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcblxuICAgICAgaWYgKFxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmXG4gICAgICAgIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnXG4gICAgICApIHtcbiAgICAgICAgaGVpZ2h0UHJvcCA9ICdzY3JvbGxIZWlnaHQnO1xuICAgICAgICB3aWR0aFByb3AgPSAnc2Nyb2xsV2lkdGgnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuICAgIG9mZnNldFBhcmVudCA9IChvZmZzZXRQYXJlbnQ6IEVsZW1lbnQpO1xuXG4gICAgaWYgKFxuICAgICAgcGxhY2VtZW50ID09PSB0b3AgfHxcbiAgICAgICgocGxhY2VtZW50ID09PSBsZWZ0IHx8IHBsYWNlbWVudCA9PT0gcmlnaHQpICYmIHZhcmlhdGlvbiA9PT0gZW5kKVxuICAgICkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIHkgLT0gb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBwbGFjZW1lbnQgPT09IGxlZnQgfHxcbiAgICAgICgocGxhY2VtZW50ID09PSB0b3AgfHwgcGxhY2VtZW50ID09PSBib3R0b20pICYmIHZhcmlhdGlvbiA9PT0gZW5kKVxuICAgICkge1xuICAgICAgc2lkZVggPSByaWdodDtcbiAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgeCAtPSBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXSAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb21tb25TdHlsZXMgPSB7XG4gICAgcG9zaXRpb24sXG4gICAgLi4uKGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpLFxuICB9O1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29tbW9uU3R5bGVzLFxuICAgICAgW3NpZGVZXTogaGFzWSA/ICcwJyA6ICcnLFxuICAgICAgW3NpZGVYXTogaGFzWCA/ICcwJyA6ICcnLFxuICAgICAgLy8gTGF5ZXIgYWNjZWxlcmF0aW9uIGNhbiBkaXNhYmxlIHN1YnBpeGVsIHJlbmRlcmluZyB3aGljaCBjYXVzZXMgc2xpZ2h0bHlcbiAgICAgIC8vIGJsdXJyeSB0ZXh0IG9uIGxvdyBQUEkgZGlzcGxheXMsIHNvIHdlIHdhbnQgdG8gdXNlIDJEIHRyYW5zZm9ybXNcbiAgICAgIC8vIGluc3RlYWRcbiAgICAgIHRyYW5zZm9ybTpcbiAgICAgICAgKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDw9IDFcbiAgICAgICAgICA/IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYFxuICAgICAgICAgIDogYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAwKWAsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4uY29tbW9uU3R5bGVzLFxuICAgIFtzaWRlWV06IGhhc1kgPyBgJHt5fXB4YCA6ICcnLFxuICAgIFtzaWRlWF06IGhhc1ggPyBgJHt4fXB4YCA6ICcnLFxuICAgIHRyYW5zZm9ybTogJycsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoeyBzdGF0ZSwgb3B0aW9ucyB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBjb25zdCB7XG4gICAgZ3B1QWNjZWxlcmF0aW9uID0gdHJ1ZSxcbiAgICBhZGFwdGl2ZSA9IHRydWUsXG4gICAgLy8gZGVmYXVsdHMgdG8gdXNlIGJ1aWx0aW4gYHJvdW5kT2Zmc2V0c0J5RFBSYFxuICAgIHJvdW5kT2Zmc2V0cyA9IHRydWUsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BlcnR5ID1cbiAgICAgIGdldENvbXB1dGVkU3R5bGUoc3RhdGUuZWxlbWVudHMucG9wcGVyKS50cmFuc2l0aW9uUHJvcGVydHkgfHwgJyc7XG5cbiAgICBpZiAoXG4gICAgICBhZGFwdGl2ZSAmJlxuICAgICAgWyd0cmFuc2Zvcm0nLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uc29tZShcbiAgICAgICAgKHByb3BlcnR5KSA9PiB0cmFuc2l0aW9uUHJvcGVydHkuaW5kZXhPZihwcm9wZXJ0eSkgPj0gMFxuICAgICAgKVxuICAgICkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBbXG4gICAgICAgICAgJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJyxcbiAgICAgICAgICAnQ1NTIHByb3BlcnRpZXM6IFwidHJhbnNmb3JtXCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIuJyxcbiAgICAgICAgICAnXFxuXFxuJyxcbiAgICAgICAgICAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JyxcbiAgICAgICAgICAnZm9yIHNtb290aCB0cmFuc2l0aW9ucywgb3IgcmVtb3ZlIHRoZXNlIHByb3BlcnRpZXMgZnJvbSB0aGUgQ1NTJyxcbiAgICAgICAgICAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJyxcbiAgICAgICAgICAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsXG4gICAgICAgICAgJ1xcblxcbicsXG4gICAgICAgICAgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsXG4gICAgICAgICAgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nLFxuICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgdmFyaWF0aW9uOiBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uLFxuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSB7XG4gICAgICAuLi5zdGF0ZS5zdHlsZXMucG9wcGVyLFxuICAgICAgLi4ubWFwVG9TdHlsZXMoe1xuICAgICAgICAuLi5jb21tb25TdHlsZXMsXG4gICAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxcbiAgICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICAgIGFkYXB0aXZlLFxuICAgICAgICByb3VuZE9mZnNldHMsXG4gICAgICB9KSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3cgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5hcnJvdyA9IHtcbiAgICAgIC4uLnN0YXRlLnN0eWxlcy5hcnJvdyxcbiAgICAgIC4uLm1hcFRvU3R5bGVzKHtcbiAgICAgICAgLi4uY29tbW9uU3R5bGVzLFxuICAgICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93LFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgICByb3VuZE9mZnNldHMsXG4gICAgICB9KSxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSB7XG4gICAgLi4uc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsXG4gICAgJ2RhdGEtcG9wcGVyLXBsYWNlbWVudCc6IHN0YXRlLnBsYWNlbWVudCxcbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgQ29tcHV0ZVN0eWxlc01vZGlmaWVyID0gTW9kaWZpZXI8J2NvbXB1dGVTdHlsZXMnLCBPcHRpb25zPjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fSxcbn06IENvbXB1dGVTdHlsZXNNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5cbmNvbnN0IGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50OiBQbGFjZW1lbnQpOiBQbGFjZW1lbnQge1xuICByZXR1cm4gKHBsYWNlbWVudC5yZXBsYWNlKFxuICAgIC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZyxcbiAgICBtYXRjaGVkID0+IGhhc2hbbWF0Y2hlZF1cbiAgKTogYW55KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcblxuY29uc3QgaGFzaCA9IHsgc3RhcnQ6ICdlbmQnLCBlbmQ6ICdzdGFydCcgfTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQoXG4gIHBsYWNlbWVudDogUGxhY2VtZW50XG4pOiBQbGFjZW1lbnQge1xuICByZXR1cm4gKHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgbWF0Y2hlZCA9PiBoYXNoW21hdGNoZWRdKTogYW55KTtcbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7XG4gIE1vZGlmaWVyQXJndW1lbnRzLFxuICBNb2RpZmllcixcbiAgUmVjdCxcbiAgU2lkZU9iamVjdCxcbiAgT2Zmc2V0cyxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4uL3V0aWxzL2RldGVjdE92ZXJmbG93JztcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMoXG4gIG92ZXJmbG93OiBTaWRlT2JqZWN0LFxuICByZWN0OiBSZWN0LFxuICBwcmV2ZW50ZWRPZmZzZXRzOiBPZmZzZXRzID0geyB4OiAwLCB5OiAwIH1cbik6IFNpZGVPYmplY3Qge1xuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54LFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3c6IFNpZGVPYmplY3QpOiBib29sZWFuIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoKHNpZGUpID0+IG92ZXJmbG93W3NpZGVdID49IDApO1xufVxuXG5mdW5jdGlvbiBoaWRlKHsgc3RhdGUsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8e3x8fT4pIHtcbiAgY29uc3QgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgY29uc3QgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgY29uc3QgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuXG4gIGNvbnN0IHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZScsXG4gIH0pO1xuICBjb25zdCBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWUsXG4gIH0pO1xuXG4gIGNvbnN0IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKFxuICAgIHJlZmVyZW5jZU92ZXJmbG93LFxuICAgIHJlZmVyZW5jZVJlY3RcbiAgKTtcbiAgY29uc3QgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKFxuICAgIHBvcHBlckFsdE92ZXJmbG93LFxuICAgIHBvcHBlclJlY3QsXG4gICAgcHJldmVudGVkT2Zmc2V0c1xuICApO1xuXG4gIGNvbnN0IGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIGNvbnN0IGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG5cbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkLFxuICB9O1xuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0ge1xuICAgIC4uLnN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLFxuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkLFxuICB9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBIaWRlTW9kaWZpZXIgPSBNb2RpZmllcjwnaGlkZScsIHt8fH0+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZSxcbn06IEhpZGVNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuZXhwb3J0IGNvbnN0IG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IGNvbnN0IG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IGNvbnN0IHJvdW5kID0gTWF0aC5yb3VuZDtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyQXJndW1lbnRzLCBNb2RpZmllciB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnLi4vZG9tLXV0aWxzL2dldFdpbmRvdyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIHNjcm9sbDogYm9vbGVhbixcbiAgcmVzaXplOiBib29sZWFuLFxufTtcblxuY29uc3QgcGFzc2l2ZSA9IHsgcGFzc2l2ZTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBlZmZlY3QoeyBzdGF0ZSwgaW5zdGFuY2UsIG9wdGlvbnMgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgY29uc3QgeyBzY3JvbGwgPSB0cnVlLCByZXNpemUgPSB0cnVlIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICBjb25zdCBzY3JvbGxQYXJlbnRzID0gW1xuICAgIC4uLnN0YXRlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLFxuICAgIC4uLnN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyLFxuICBdO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goc2Nyb2xsUGFyZW50ID0+IHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goc2Nyb2xsUGFyZW50ID0+IHtcbiAgICAgICAgc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVzaXplKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIEV2ZW50TGlzdGVuZXJzTW9kaWZpZXIgPSBNb2RpZmllcjwnZXZlbnRMaXN0ZW5lcnMnLCBPcHRpb25zPjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdldmVudExpc3RlbmVycycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogKCkgPT4ge30sXG4gIGVmZmVjdCxcbiAgZGF0YToge30sXG59OiBFdmVudExpc3RlbmVyc01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1vZGlmaWVyQXJndW1lbnRzLCBNb2RpZmllciB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tICcuLi91dGlscy9jb21wdXRlT2Zmc2V0cyc7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoeyBzdGF0ZSwgbmFtZSB9OiBNb2RpZmllckFyZ3VtZW50czx7fHx9Pikge1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnQsXG4gIH0pO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBQb3BwZXJPZmZzZXRzTW9kaWZpZXIgPSBNb2RpZmllcjwncG9wcGVyT2Zmc2V0cycsIHt8fH0+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge30sXG59OiBQb3BwZXJPZmZzZXRzTW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIsIE1vZGlmaWVyQXJndW1lbnRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gJy4uL2RvbS11dGlscy9nZXROb2RlTmFtZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YnO1xuXG4vLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyh7IHN0YXRlIH06IE1vZGlmaWVyQXJndW1lbnRzPHt8fH0+KSB7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgY29uc3Qgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG5cbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICBjb25zdCBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG5cbiAgICAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcblxuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KHsgc3RhdGUgfTogTW9kaWZpZXJBcmd1bWVudHM8e3x8fT4pIHtcbiAgY29uc3QgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJyxcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge30sXG4gIH07XG5cbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuXG4gICAgICBjb25zdCBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhcbiAgICAgICAgc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpXG4gICAgICAgICAgPyBzdGF0ZS5zdHlsZXNbbmFtZV1cbiAgICAgICAgICA6IGluaXRpYWxTdHlsZXNbbmFtZV1cbiAgICAgICk7XG5cbiAgICAgIC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG4gICAgICBjb25zdCBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoKHN0eWxlLCBwcm9wZXJ0eSkgPT4ge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pO1xuXG4gICAgICAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcblxuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgQXBwbHlTdHlsZXNNb2RpZmllciA9IE1vZGlmaWVyPCdhcHBseVN0eWxlcycsIHt8fH0+O1xuZXhwb3J0IGRlZmF1bHQgKHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ10sXG59OiBBcHBseVN0eWxlc01vZGlmaWVyKTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyLCBSZWN0LCBPZmZzZXRzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBwbGFjZW1lbnRzIH0gZnJvbSAnLi4vZW51bXMnO1xuXG50eXBlIE9mZnNldHNGdW5jdGlvbiA9ICh7XG4gIHBvcHBlcjogUmVjdCxcbiAgcmVmZXJlbmNlOiBSZWN0LFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbn0pID0+IFs/bnVtYmVyLCA/bnVtYmVyXTtcblxudHlwZSBPZmZzZXQgPSBPZmZzZXRzRnVuY3Rpb24gfCBbP251bWJlciwgP251bWJlcl07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIG9mZnNldDogT2Zmc2V0LFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKFxuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgcmVjdHM6IHsgcG9wcGVyOiBSZWN0LCByZWZlcmVuY2U6IFJlY3QgfSxcbiAgb2Zmc2V0OiBPZmZzZXRcbik6IE9mZnNldHMge1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBjb25zdCBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICBsZXQgW3NraWRkaW5nLCBkaXN0YW5jZV0gPVxuICAgIHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb2Zmc2V0KHtcbiAgICAgICAgICAuLi5yZWN0cyxcbiAgICAgICAgICBwbGFjZW1lbnQsXG4gICAgICAgIH0pXG4gICAgICA6IG9mZnNldDtcblxuICBza2lkZGluZyA9IHNraWRkaW5nIHx8IDA7XG4gIGRpc3RhbmNlID0gKGRpc3RhbmNlIHx8IDApICogaW52ZXJ0RGlzdGFuY2U7XG5cbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwXG4gICAgPyB7IHg6IGRpc3RhbmNlLCB5OiBza2lkZGluZyB9XG4gICAgOiB7IHg6IHNraWRkaW5nLCB5OiBkaXN0YW5jZSB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoeyBzdGF0ZSwgb3B0aW9ucywgbmFtZSB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBjb25zdCB7IG9mZnNldCA9IFswLCAwXSB9ID0gb3B0aW9ucztcblxuICBjb25zdCBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoKGFjYywgcGxhY2VtZW50KSA9PiB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICBjb25zdCB7IHgsIHkgfSA9IGRhdGFbc3RhdGUucGxhY2VtZW50XTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgT2Zmc2V0TW9kaWZpZXIgPSBNb2RpZmllcjwnb2Zmc2V0JywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0LFxufTogT2Zmc2V0TW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgUGxhY2VtZW50LCBCb3VuZGFyeSwgUm9vdEJvdW5kYXJ5IH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IHR5cGUgeyBNb2RpZmllckFyZ3VtZW50cywgTW9kaWZpZXIsIFBhZGRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4uL3V0aWxzL2RldGVjdE92ZXJmbG93JztcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tICcuLi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudCc7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tICcuLi91dGlscy9nZXRWYXJpYXRpb24nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBtYWluQXhpczogYm9vbGVhbixcbiAgYWx0QXhpczogYm9vbGVhbixcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiBBcnJheTxQbGFjZW1lbnQ+LFxuICBwYWRkaW5nOiBQYWRkaW5nLFxuICBib3VuZGFyeTogQm91bmRhcnksXG4gIHJvb3RCb3VuZGFyeTogUm9vdEJvdW5kYXJ5LFxuICBhbHRCb3VuZGFyeTogYm9vbGVhbixcbiAgZmxpcFZhcmlhdGlvbnM6IGJvb2xlYW4sXG4gIGFsbG93ZWRBdXRvUGxhY2VtZW50czogQXJyYXk8UGxhY2VtZW50Pixcbn07XG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudDogUGxhY2VtZW50KTogQXJyYXk8UGxhY2VtZW50PiB7XG4gIGlmIChnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgcmV0dXJuIFtcbiAgICBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLFxuICAgIG9wcG9zaXRlUGxhY2VtZW50LFxuICAgIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gZmxpcCh7IHN0YXRlLCBvcHRpb25zLCBuYW1lIH06IE1vZGlmaWVyQXJndW1lbnRzPE9wdGlvbnM+KSB7XG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICBhbHRBeGlzOiBjaGVja0FsdEF4aXMgPSB0cnVlLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50czogc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgIHBhZGRpbmcsXG4gICAgYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5LFxuICAgIGFsdEJvdW5kYXJ5LFxuICAgIGZsaXBWYXJpYXRpb25zID0gdHJ1ZSxcbiAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHByZWZlcnJlZFBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50O1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICBjb25zdCBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG5cbiAgY29uc3QgZmFsbGJhY2tQbGFjZW1lbnRzID1cbiAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHxcbiAgICAoaXNCYXNlUGxhY2VtZW50IHx8ICFmbGlwVmFyaWF0aW9uc1xuICAgICAgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV1cbiAgICAgIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG5cbiAgY29uc3QgcGxhY2VtZW50cyA9IFtwcmVmZXJyZWRQbGFjZW1lbnQsIC4uLmZhbGxiYWNrUGxhY2VtZW50c10ucmVkdWNlKFxuICAgIChhY2MsIHBsYWNlbWVudCkgPT4ge1xuICAgICAgcmV0dXJuIGFjYy5jb25jYXQoXG4gICAgICAgIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0b1xuICAgICAgICAgID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICAgICAgICBib3VuZGFyeSxcbiAgICAgICAgICAgICAgcm9vdEJvdW5kYXJ5LFxuICAgICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgICBmbGlwVmFyaWF0aW9ucyxcbiAgICAgICAgICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IHBsYWNlbWVudFxuICAgICAgKTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3QgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgY29uc3QgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcblxuICBjb25zdCBjaGVja3NNYXAgPSBuZXcgTWFwKCk7XG4gIGxldCBtYWtlRmFsbGJhY2tDaGVja3MgPSB0cnVlO1xuICBsZXQgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50c1swXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWNlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuICAgIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gICAgY29uc3QgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICBjb25zdCBpc1ZlcnRpY2FsID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgY29uc3QgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIGNvbnN0IG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nLFxuICAgIH0pO1xuXG4gICAgbGV0IG1haW5WYXJpYXRpb25TaWRlOiBhbnkgPSBpc1ZlcnRpY2FsXG4gICAgICA/IGlzU3RhcnRWYXJpYXRpb25cbiAgICAgICAgPyByaWdodFxuICAgICAgICA6IGxlZnRcbiAgICAgIDogaXNTdGFydFZhcmlhdGlvblxuICAgICAgPyBib3R0b21cbiAgICAgIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWx0VmFyaWF0aW9uU2lkZTogYW55ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpblZhcmlhdGlvblNpZGUpO1xuXG4gICAgY29uc3QgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbYmFzZVBsYWNlbWVudF0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgICAgY2hlY2tzLnB1c2goXG4gICAgICAgIG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLFxuICAgICAgICBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChjaGVja3MuZXZlcnkoKGNoZWNrKSA9PiBjaGVjaykpIHtcbiAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudDtcbiAgICAgIG1ha2VGYWxsYmFja0NoZWNrcyA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2hlY2tzTWFwLnNldChwbGFjZW1lbnQsIGNoZWNrcyk7XG4gIH1cblxuICBpZiAobWFrZUZhbGxiYWNrQ2hlY2tzKSB7XG4gICAgLy8gYDJgIG1heSBiZSBkZXNpcmVkIGluIHNvbWUgY2FzZXMg4oCTIHJlc2VhcmNoIGxhdGVyXG4gICAgY29uc3QgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgZm9yIChsZXQgaSA9IG51bWJlck9mQ2hlY2tzOyBpID4gMDsgaS0tKSB7XG4gICAgICBjb25zdCBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKChwbGFjZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBpKS5ldmVyeSgoY2hlY2spID0+IGNoZWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuZXhwb3J0IHR5cGUgRmxpcE1vZGlmaWVyID0gTW9kaWZpZXI8J2ZsaXAnLCBPcHRpb25zPjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHsgX3NraXA6IGZhbHNlIH0sXG59OiBGbGlwTW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgU3RhdGUsIFBhZGRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIFBsYWNlbWVudCxcbiAgQ29tcHV0ZWRQbGFjZW1lbnQsXG4gIEJvdW5kYXJ5LFxuICBSb290Qm91bmRhcnksXG59IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSAnLi9nZXRWYXJpYXRpb24nO1xuaW1wb3J0IHtcbiAgdmFyaWF0aW9uUGxhY2VtZW50cyxcbiAgYmFzZVBsYWNlbWVudHMsXG4gIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyxcbn0gZnJvbSAnLi4vZW51bXMnO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gJy4vZGV0ZWN0T3ZlcmZsb3cnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi9nZXRCYXNlUGxhY2VtZW50JztcblxudHlwZSBPcHRpb25zID0ge1xuICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgcGFkZGluZzogUGFkZGluZyxcbiAgYm91bmRhcnk6IEJvdW5kYXJ5LFxuICByb290Qm91bmRhcnk6IFJvb3RCb3VuZGFyeSxcbiAgZmxpcFZhcmlhdGlvbnM6IGJvb2xlYW4sXG4gIGFsbG93ZWRBdXRvUGxhY2VtZW50cz86IEFycmF5PFBsYWNlbWVudD4sXG59O1xuXG50eXBlIE92ZXJmbG93c01hcCA9IHsgW0NvbXB1dGVkUGxhY2VtZW50XTogbnVtYmVyIH07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KFxuICBzdGF0ZTogJFNoYXBlPFN0YXRlPixcbiAgb3B0aW9uczogT3B0aW9ucyA9IHt9XG4pOiBBcnJheTxDb21wdXRlZFBsYWNlbWVudD4ge1xuICBjb25zdCB7XG4gICAgcGxhY2VtZW50LFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBwYWRkaW5nLFxuICAgIGZsaXBWYXJpYXRpb25zLFxuICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IGFsbFBsYWNlbWVudHMsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuXG4gIGNvbnN0IHBsYWNlbWVudHMgPSB2YXJpYXRpb25cbiAgICA/IGZsaXBWYXJpYXRpb25zXG4gICAgICA/IHZhcmlhdGlvblBsYWNlbWVudHNcbiAgICAgIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoXG4gICAgICAgICAgKHBsYWNlbWVudCkgPT4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvblxuICAgICAgICApXG4gICAgOiBiYXNlUGxhY2VtZW50cztcblxuICBsZXQgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihcbiAgICAocGxhY2VtZW50KSA9PiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDBcbiAgKTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFtcbiAgICAgICAgICAnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JyxcbiAgICAgICAgICAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJyxcbiAgICAgICAgICAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLFxuICAgICAgICAgICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLFxuICAgICAgICAgICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nLFxuICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuICBjb25zdCBvdmVyZmxvd3M6IE92ZXJmbG93c01hcCA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZSgoYWNjLCBwbGFjZW1lbnQpID0+IHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcsXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KChhLCBiKSA9PiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl0pO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgc3RhcnQgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgdHlwZSB7IFBsYWNlbWVudCwgQm91bmRhcnksIFJvb3RCb3VuZGFyeSB9IGZyb20gJy4uL2VudW1zJztcbmltcG9ydCB0eXBlIHsgUmVjdCwgTW9kaWZpZXJBcmd1bWVudHMsIE1vZGlmaWVyLCBQYWRkaW5nIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gJy4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudCc7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tICcuLi91dGlscy9nZXRBbHRBeGlzJztcbmltcG9ydCB3aXRoaW4gZnJvbSAnLi4vdXRpbHMvd2l0aGluJztcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gJy4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0JztcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSAnLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudCc7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSAnLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cnO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tICcuLi91dGlscy9nZXRWYXJpYXRpb24nO1xuaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tICcuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QnO1xuaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSAnLi4vdXRpbHMvbWF0aCc7XG5cbnR5cGUgVGV0aGVyT2Zmc2V0ID1cbiAgfCAoKHtcbiAgICAgIHBvcHBlcjogUmVjdCxcbiAgICAgIHJlZmVyZW5jZTogUmVjdCxcbiAgICAgIHBsYWNlbWVudDogUGxhY2VtZW50LFxuICAgIH0pID0+IG51bWJlcilcbiAgfCBudW1iZXI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XG4gIC8qIFByZXZlbnRzIGJvdW5kYXJpZXMgb3ZlcmZsb3cgb24gdGhlIG1haW4gYXhpcyAqL1xuICBtYWluQXhpczogYm9vbGVhbixcbiAgLyogUHJldmVudHMgYm91bmRhcmllcyBvdmVyZmxvdyBvbiB0aGUgYWx0ZXJuYXRlIGF4aXMgKi9cbiAgYWx0QXhpczogYm9vbGVhbixcbiAgLyogVGhlIGFyZWEgdG8gY2hlY2sgdGhlIHBvcHBlciBpcyBvdmVyZmxvd2luZyBpbiAqL1xuICBib3VuZGFyeTogQm91bmRhcnksXG4gIC8qIElmIHRoZSBwb3BwZXIgaXMgbm90IG92ZXJmbG93aW5nIHRoZSBtYWluIGFyZWEsIGZhbGxiYWNrIHRvIHRoaXMgb25lICovXG4gIHJvb3RCb3VuZGFyeTogUm9vdEJvdW5kYXJ5LFxuICAvKiBVc2UgdGhlIHJlZmVyZW5jZSdzIFwiY2xpcHBpbmdQYXJlbnRzXCIgYm91bmRhcnkgY29udGV4dCAqL1xuICBhbHRCb3VuZGFyeTogYm9vbGVhbixcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgcG9wcGVyIHRvIG92ZXJmbG93IGZyb20gaXRzIGJvdW5kYXJpZXMgdG8ga2VlcCBpdCBuZWFyIGl0c1xuICAgKiByZWZlcmVuY2UgZWxlbWVudFxuICAgKi9cbiAgdGV0aGVyOiBib29sZWFuLFxuICAvKiBPZmZzZXRzIHdoZW4gdGhlIGB0ZXRoZXJgIG9wdGlvbiBzaG91bGQgYWN0aXZhdGUgKi9cbiAgdGV0aGVyT2Zmc2V0OiBUZXRoZXJPZmZzZXQsXG4gIC8qIFNldHMgYSBwYWRkaW5nIHRvIHRoZSBwcm92aWRlZCBib3VuZGFyeSAqL1xuICBwYWRkaW5nOiBQYWRkaW5nLFxufTtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KHsgc3RhdGUsIG9wdGlvbnMsIG5hbWUgfTogTW9kaWZpZXJBcmd1bWVudHM8T3B0aW9ucz4pIHtcbiAgY29uc3Qge1xuICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICBhbHRBeGlzOiBjaGVja0FsdEF4aXMgPSBmYWxzZSxcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgYWx0Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICB0ZXRoZXIgPSB0cnVlLFxuICAgIHRldGhlck9mZnNldCA9IDAsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeSxcbiAgICByb290Qm91bmRhcnksXG4gICAgcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeSxcbiAgfSk7XG4gIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIGNvbnN0IHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICBjb25zdCBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICBjb25zdCBtYWluQXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgY29uc3QgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICBjb25zdCBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICBjb25zdCByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICBjb25zdCBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICBjb25zdCB0ZXRoZXJPZmZzZXRWYWx1ZSA9XG4gICAgdHlwZW9mIHRldGhlck9mZnNldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyB0ZXRoZXJPZmZzZXQoe1xuICAgICAgICAgIC4uLnN0YXRlLnJlY3RzLFxuICAgICAgICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50LFxuICAgICAgICB9KVxuICAgICAgOiB0ZXRoZXJPZmZzZXQ7XG5cbiAgY29uc3QgZGF0YSA9IHsgeDogMCwgeTogMCB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzIHx8IGNoZWNrQWx0QXhpcykge1xuICAgIGNvbnN0IG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgY29uc3QgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICBjb25zdCBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIGNvbnN0IG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuXG4gICAgY29uc3QgbWluID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgY29uc3QgbWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gLSBvdmVyZmxvd1thbHRTaWRlXTtcblxuICAgIGNvbnN0IGFkZGl0aXZlID0gdGV0aGVyID8gLXBvcHBlclJlY3RbbGVuXSAvIDIgOiAwO1xuXG4gICAgY29uc3QgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICBjb25zdCBtYXhMZW4gPSB2YXJpYXRpb24gPT09IHN0YXJ0ID8gLXBvcHBlclJlY3RbbGVuXSA6IC1yZWZlcmVuY2VSZWN0W2xlbl07XG5cbiAgICAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcbiAgICBjb25zdCBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICBjb25zdCBhcnJvd1JlY3QgPVxuICAgICAgdGV0aGVyICYmIGFycm93RWxlbWVudFxuICAgICAgICA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KVxuICAgICAgICA6IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICAgIGNvbnN0IGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXVxuICAgICAgPyBzdGF0ZS5tb2RpZmllcnNEYXRhWydhcnJvdyNwZXJzaXN0ZW50J10ucGFkZGluZ1xuICAgICAgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICBjb25zdCBhcnJvd1BhZGRpbmdNaW4gPSBhcnJvd1BhZGRpbmdPYmplY3RbbWFpblNpZGVdO1xuICAgIGNvbnN0IGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTtcblxuICAgIC8vIElmIHRoZSByZWZlcmVuY2UgbGVuZ3RoIGlzIHNtYWxsZXIgdGhhbiB0aGUgYXJyb3cgbGVuZ3RoLCB3ZSBkb24ndCB3YW50XG4gICAgLy8gdG8gaW5jbHVkZSBpdHMgZnVsbCBzaXplIGluIHRoZSBjYWxjdWxhdGlvbi4gSWYgdGhlIHJlZmVyZW5jZSBpcyBzbWFsbFxuICAgIC8vIGFuZCBuZWFyIHRoZSBlZGdlIG9mIGEgYm91bmRhcnksIHRoZSBwb3BwZXIgY2FuIG92ZXJmbG93IGV2ZW4gaWYgdGhlXG4gICAgLy8gcmVmZXJlbmNlIGlzIG5vdCBvdmVyZmxvd2luZyBhcyB3ZWxsIChlLmcuIHZpcnR1YWwgZWxlbWVudHMgd2l0aCBub1xuICAgIC8vIHdpZHRoIG9yIGhlaWdodClcbiAgICBjb25zdCBhcnJvd0xlbiA9IHdpdGhpbigwLCByZWZlcmVuY2VSZWN0W2xlbl0sIGFycm93UmVjdFtsZW5dKTtcblxuICAgIGNvbnN0IG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudFxuICAgICAgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC1cbiAgICAgICAgYWRkaXRpdmUgLVxuICAgICAgICBhcnJvd0xlbiAtXG4gICAgICAgIGFycm93UGFkZGluZ01pbiAtXG4gICAgICAgIHRldGhlck9mZnNldFZhbHVlXG4gICAgICA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgY29uc3QgbWF4T2Zmc2V0ID0gaXNCYXNlUGxhY2VtZW50XG4gICAgICA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICtcbiAgICAgICAgYWRkaXRpdmUgK1xuICAgICAgICBhcnJvd0xlbiArXG4gICAgICAgIGFycm93UGFkZGluZ01heCArXG4gICAgICAgIHRldGhlck9mZnNldFZhbHVlXG4gICAgICA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWU7XG5cbiAgICBjb25zdCBhcnJvd09mZnNldFBhcmVudCA9XG4gICAgICBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIGNvbnN0IGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50XG4gICAgICA/IG1haW5BeGlzID09PSAneSdcbiAgICAgICAgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMFxuICAgICAgICA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMFxuICAgICAgOiAwO1xuXG4gICAgY29uc3Qgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0XG4gICAgICA/IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0W3N0YXRlLnBsYWNlbWVudF1bbWFpbkF4aXNdXG4gICAgICA6IDA7XG5cbiAgICBjb25zdCB0ZXRoZXJNaW4gPVxuICAgICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIGNvbnN0IHRldGhlck1heCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWF4T2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZTtcblxuICAgIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgICBjb25zdCBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4oXG4gICAgICAgIHRldGhlciA/IG1hdGhNaW4obWluLCB0ZXRoZXJNaW4pIDogbWluLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHRldGhlciA/IG1hdGhNYXgobWF4LCB0ZXRoZXJNYXgpIDogbWF4XG4gICAgICApO1xuXG4gICAgICBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldDtcbiAgICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNvbnN0IG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG4gICAgICBjb25zdCBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1thbHRBeGlzXTtcblxuICAgICAgY29uc3QgbWluID0gb2Zmc2V0ICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgICAgY29uc3QgbWF4ID0gb2Zmc2V0IC0gb3ZlcmZsb3dbYWx0U2lkZV07XG5cbiAgICAgIGNvbnN0IHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbihcbiAgICAgICAgdGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXhcbiAgICAgICk7XG5cbiAgICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgICBkYXRhW2FsdEF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBQcmV2ZW50T3ZlcmZsb3dNb2RpZmllciA9IE1vZGlmaWVyPCdwcmV2ZW50T3ZlcmZsb3cnLCBPcHRpb25zPjtcbmV4cG9ydCBkZWZhdWx0ICh7XG4gIG5hbWU6ICdwcmV2ZW50T3ZlcmZsb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogcHJldmVudE92ZXJmbG93LFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ29mZnNldCddLFxufTogUHJldmVudE92ZXJmbG93TW9kaWZpZXIpO1xuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzOiAneCcgfCAneScpOiAneCcgfCAneScge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gJy4vbWF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhpbihcbiAgbWluOiBudW1iZXIsXG4gIHZhbHVlOiBudW1iZXIsXG4gIG1heDogbnVtYmVyXG4pOiBudW1iZXIge1xuICByZXR1cm4gbWF0aE1heChtaW4sIG1hdGhNaW4odmFsdWUsIG1heCkpO1xufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgTW9kaWZpZXIsIE1vZGlmaWVyQXJndW1lbnRzLCBQYWRkaW5nLCBSZWN0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBQbGFjZW1lbnQgfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tICcuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50JztcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gJy4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0JztcbmltcG9ydCBjb250YWlucyBmcm9tICcuLi9kb20tdXRpbHMvY29udGFpbnMnO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tICcuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50JztcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSAnLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50JztcbmltcG9ydCB3aXRoaW4gZnJvbSAnLi4vdXRpbHMvd2l0aGluJztcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSAnLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0JztcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSAnLi4vdXRpbHMvZXhwYW5kVG9IYXNoTWFwJztcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tICcuLi9lbnVtcyc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBPcHRpb25zID0ge1xuICBlbGVtZW50OiBIVE1MRWxlbWVudCB8IHN0cmluZyB8IG51bGwsXG4gIHBhZGRpbmc6XG4gICAgfCBQYWRkaW5nXG4gICAgfCAoKHt8XG4gICAgICAgIHBvcHBlcjogUmVjdCxcbiAgICAgICAgcmVmZXJlbmNlOiBSZWN0LFxuICAgICAgICBwbGFjZW1lbnQ6IFBsYWNlbWVudCxcbiAgICAgIHx9KSA9PiBQYWRkaW5nKSxcbn07XG5cbmNvbnN0IHRvUGFkZGluZ09iamVjdCA9IChwYWRkaW5nLCBzdGF0ZSkgPT4ge1xuICBwYWRkaW5nID1cbiAgICB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwYWRkaW5nKHsgLi4uc3RhdGUucmVjdHMsIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50IH0pXG4gICAgICA6IHBhZGRpbmc7XG5cbiAgcmV0dXJuIG1lcmdlUGFkZGluZ09iamVjdChcbiAgICB0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcidcbiAgICAgID8gcGFkZGluZ1xuICAgICAgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpXG4gICk7XG59O1xuXG5mdW5jdGlvbiBhcnJvdyh7IHN0YXRlLCBuYW1lLCBvcHRpb25zIH06IE1vZGlmaWVyQXJndW1lbnRzPE9wdGlvbnM+KSB7XG4gIGNvbnN0IGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICBjb25zdCBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICBjb25zdCBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICBjb25zdCBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICBjb25zdCBpc1ZlcnRpY2FsID0gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDA7XG4gIGNvbnN0IGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICBjb25zdCBhcnJvd1JlY3QgPSBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCk7XG4gIGNvbnN0IG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICBjb25zdCBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgY29uc3QgZW5kRGlmZiA9XG4gICAgc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gK1xuICAgIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXSAtXG4gICAgcG9wcGVyT2Zmc2V0c1theGlzXSAtXG4gICAgc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIGNvbnN0IHN0YXJ0RGlmZiA9IHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc107XG5cbiAgY29uc3QgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgY29uc3QgY2xpZW50U2l6ZSA9IGFycm93T2Zmc2V0UGFyZW50XG4gICAgPyBheGlzID09PSAneSdcbiAgICAgID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IHx8IDBcbiAgICAgIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMFxuICAgIDogMDtcblxuICBjb25zdCBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjtcblxuICAvLyBNYWtlIHN1cmUgdGhlIGFycm93IGRvZXNuJ3Qgb3ZlcmZsb3cgdGhlIHBvcHBlciBpZiB0aGUgY2VudGVyIHBvaW50IGlzXG4gIC8vIG91dHNpZGUgb2YgdGhlIHBvcHBlciBib3VuZHNcbiAgY29uc3QgbWluID0gcGFkZGluZ09iamVjdFttaW5Qcm9wXTtcbiAgY29uc3QgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgY29uc3QgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgY29uc3Qgb2Zmc2V0ID0gd2l0aGluKG1pbiwgY2VudGVyLCBtYXgpO1xuXG4gIC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cbiAgY29uc3QgYXhpc1Byb3A6IHN0cmluZyA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgW2F4aXNQcm9wXTogb2Zmc2V0LFxuICAgIGNlbnRlck9mZnNldDogb2Zmc2V0IC0gY2VudGVyLFxuICB9O1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoeyBzdGF0ZSwgb3B0aW9ucyB9OiBNb2RpZmllckFyZ3VtZW50czxPcHRpb25zPikge1xuICBsZXQgeyBlbGVtZW50OiBhcnJvd0VsZW1lbnQgPSAnW2RhdGEtcG9wcGVyLWFycm93XScgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFtcbiAgICAgICAgICAnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJyxcbiAgICAgICAgICAnVG8gdXNlIGFuIFNWRyBhcnJvdywgd3JhcCBpdCBpbiBhbiBIVE1MRWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcycsXG4gICAgICAgICAgJ3RoZSBhcnJvdy4nLFxuICAgICAgICBdLmpvaW4oJyAnKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBbXG4gICAgICAgICAgJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLFxuICAgICAgICAgICdlbGVtZW50LicsXG4gICAgICAgIF0uam9pbignICcpXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgdHlwZSBBcnJvd01vZGlmaWVyID0gTW9kaWZpZXI8J2Fycm93JywgT3B0aW9ucz47XG5leHBvcnQgZGVmYXVsdCAoe1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxufTogQXJyb3dNb2RpZmllcik7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gJy4vY3JlYXRlUG9wcGVyJztcblxuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gJy4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzJztcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gJy4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMnO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSAnLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcyc7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSAnLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMnO1xuXG5leHBvcnQgdHlwZSAqIGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBkZWZhdWx0TW9kaWZpZXJzID0gW1xuICBldmVudExpc3RlbmVycyxcbiAgcG9wcGVyT2Zmc2V0cyxcbiAgY29tcHV0ZVN0eWxlcyxcbiAgYXBwbHlTdHlsZXMsXG5dO1xuXG5jb25zdCBjcmVhdGVQb3BwZXIgPSBwb3BwZXJHZW5lcmF0b3IoeyBkZWZhdWx0TW9kaWZpZXJzIH0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSAnLi9jcmVhdGVQb3BwZXInO1xuXG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSAnLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSAnLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cyc7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tICcuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzJztcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tICcuL21vZGlmaWVycy9hcHBseVN0eWxlcyc7XG5pbXBvcnQgb2Zmc2V0IGZyb20gJy4vbW9kaWZpZXJzL29mZnNldCc7XG5pbXBvcnQgZmxpcCBmcm9tICcuL21vZGlmaWVycy9mbGlwJztcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSAnLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93JztcbmltcG9ydCBhcnJvdyBmcm9tICcuL21vZGlmaWVycy9hcnJvdyc7XG5pbXBvcnQgaGlkZSBmcm9tICcuL21vZGlmaWVycy9oaWRlJztcblxuZXhwb3J0IHR5cGUgKiBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgZGVmYXVsdE1vZGlmaWVycyA9IFtcbiAgZXZlbnRMaXN0ZW5lcnMsXG4gIHBvcHBlck9mZnNldHMsXG4gIGNvbXB1dGVTdHlsZXMsXG4gIGFwcGx5U3R5bGVzLFxuICBvZmZzZXQsXG4gIGZsaXAsXG4gIHByZXZlbnRPdmVyZmxvdyxcbiAgYXJyb3csXG4gIGhpZGUsXG5dO1xuXG5jb25zdCBjcmVhdGVQb3BwZXIgPSBwb3BwZXJHZW5lcmF0b3IoeyBkZWZhdWx0TW9kaWZpZXJzIH0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSAnLi9wb3BwZXItbGl0ZSc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5leHBvcnQgKiBmcm9tICcuL21vZGlmaWVycyc7XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5qZWN0Q1NTKGNzczogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPSBjc3M7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZSgnZGF0YS1fX05BTUVTUEFDRV9QUkVGSVhfXy1zdHlsZXNoZWV0JywgJycpO1xuICBjb25zdCBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgY29uc3QgZmlyc3RTdHlsZU9yTGlua1RhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQ+c3R5bGUsaGVhZD5saW5rJyk7XG5cbiAgaWYgKGZpcnN0U3R5bGVPckxpbmtUYWcpIHtcbiAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgZmlyc3RTdHlsZU9yTGlua1RhZyk7XG4gIH0gZWxzZSB7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5jb25zdCB1YSA9IGlzQnJvd3NlciA/IG5hdmlnYXRvci51c2VyQWdlbnQgOiAnJztcblxuZXhwb3J0IGNvbnN0IGlzSUUgPSAvTVNJRSB8VHJpZGVudFxcLy8udGVzdCh1YSk7XG4iLCJleHBvcnQgY29uc3QgUk9VTkRfQVJST1cgPVxuICAnPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiNlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTAgNnMxLjc5Ni0uMDEzIDQuNjctMy42MTVDNS44NTEuOSA2LjkzLjAwNiA4IDBjMS4wNy0uMDA2IDIuMTQ4Ljg4NyAzLjM0MyAyLjM4NUMxNC4yMzMgNi4wMDUgMTYgNiAxNiA2SDB6XCI+PC9zdmc+JztcblxuZXhwb3J0IGNvbnN0IEJPWF9DTEFTUyA9IGBfX05BTUVTUEFDRV9QUkVGSVhfXy1ib3hgO1xuZXhwb3J0IGNvbnN0IENPTlRFTlRfQ0xBU1MgPSBgX19OQU1FU1BBQ0VfUFJFRklYX18tY29udGVudGA7XG5leHBvcnQgY29uc3QgQkFDS0RST1BfQ0xBU1MgPSBgX19OQU1FU1BBQ0VfUFJFRklYX18tYmFja2Ryb3BgO1xuZXhwb3J0IGNvbnN0IEFSUk9XX0NMQVNTID0gYF9fTkFNRVNQQUNFX1BSRUZJWF9fLWFycm93YDtcbmV4cG9ydCBjb25zdCBTVkdfQVJST1dfQ0xBU1MgPSBgX19OQU1FU1BBQ0VfUFJFRklYX18tc3ZnLWFycm93YDtcblxuZXhwb3J0IGNvbnN0IFRPVUNIX09QVElPTlMgPSB7cGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZX07XG4iLCJpbXBvcnQge0Jhc2VQbGFjZW1lbnQsIFBsYWNlbWVudH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmo6IG9iamVjdCwga2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVBdEluZGV4T3JSZXR1cm48VD4oXG4gIHZhbHVlOiBUIHwgW1QgfCBudWxsLCBUIHwgbnVsbF0sXG4gIGluZGV4OiBudW1iZXIsXG4gIGRlZmF1bHRWYWx1ZTogVCB8IFtULCBUXVxuKTogVCB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IHYgPSB2YWx1ZVtpbmRleF07XG4gICAgcmV0dXJuIHYgPT0gbnVsbFxuICAgICAgPyBBcnJheS5pc0FycmF5KGRlZmF1bHRWYWx1ZSlcbiAgICAgICAgPyBkZWZhdWx0VmFsdWVbaW5kZXhdXG4gICAgICAgIDogZGVmYXVsdFZhbHVlXG4gICAgICA6IHY7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUodmFsdWU6IGFueSwgdHlwZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IHN0ciA9IHt9LnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICByZXR1cm4gc3RyLmluZGV4T2YoJ1tvYmplY3QnKSA9PT0gMCAmJiBzdHIuaW5kZXhPZihgJHt0eXBlfV1gKSA+IC0xO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52b2tlV2l0aEFyZ3NPclJldHVybih2YWx1ZTogYW55LCBhcmdzOiBhbnlbXSk6IGFueSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZSguLi5hcmdzKSA6IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2U8VD4oXG4gIGZuOiAoYXJnOiBUKSA9PiB2b2lkLFxuICBtczogbnVtYmVyXG4pOiAoYXJnOiBUKSA9PiB2b2lkIHtcbiAgLy8gQXZvaWQgd3JhcHBpbmcgaW4gYHNldFRpbWVvdXRgIGlmIG1zIGlzIDAgYW55d2F5XG4gIGlmIChtcyA9PT0gMCkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGxldCB0aW1lb3V0OiBhbnk7XG5cbiAgcmV0dXJuIChhcmcpOiB2b2lkID0+IHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZm4oYXJnKTtcbiAgICB9LCBtcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0aWVzPFQ+KG9iajogVCwga2V5czogc3RyaW5nW10pOiBQYXJ0aWFsPFQ+IHtcbiAgY29uc3QgY2xvbmUgPSB7Li4ub2JqfTtcbiAga2V5cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgKGNsb25lIGFzIGFueSlba2V5XTtcbiAgfSk7XG4gIHJldHVybiBjbG9uZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QnlTcGFjZXModmFsdWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIHZhbHVlLnNwbGl0KC9cXHMrLykuZmlsdGVyKEJvb2xlYW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVG9BcnJheTxUPih2YWx1ZTogVCB8IFRbXSk6IFRbXSB7XG4gIHJldHVybiAoW10gYXMgVFtdKS5jb25jYXQodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVzaElmVW5pcXVlPFQ+KGFycjogVFtdLCB2YWx1ZTogVCk6IHZvaWQge1xuICBpZiAoYXJyLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGFyci5wdXNoKHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kUHhJZk51bWJlcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyBgJHt2YWx1ZX1weGAgOiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaXF1ZTxUPihhcnI6IFRbXSk6IFRbXSB7XG4gIHJldHVybiBhcnIuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4gYXJyLmluZGV4T2YoaXRlbSkgPT09IGluZGV4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE51bWJlcih2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyB2YWx1ZSA6IHBhcnNlRmxvYXQodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQ6IFBsYWNlbWVudCk6IEJhc2VQbGFjZW1lbnQge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMF0gYXMgQmFzZVBsYWNlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5RnJvbSh2YWx1ZTogQXJyYXlMaWtlPGFueT4pOiBhbnlbXSB7XG4gIHJldHVybiBbXS5zbGljZS5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVuZGVmaW5lZFByb3BzKFxuICBvYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG4pOiBQYXJ0aWFsPFJlY29yZDxzdHJpbmcsIHVua25vd24+PiB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBpZiAob2JqW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgKGFjYyBhcyBhbnkpW2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG4iLCJpbXBvcnQge1JlZmVyZW5jZUVsZW1lbnQsIFRhcmdldHN9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtQb3BwZXJUcmVlRGF0YX0gZnJvbSAnLi90eXBlcy1pbnRlcm5hbCc7XG5pbXBvcnQge2FycmF5RnJvbSwgaXNUeXBlLCBub3JtYWxpemVUb0FycmF5LCBnZXRCYXNlUGxhY2VtZW50fSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpdigpOiBIVE1MRGl2RWxlbWVudCB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRWxlbWVudCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50IHtcbiAgcmV0dXJuIFsnRWxlbWVudCcsICdGcmFnbWVudCddLnNvbWUoKHR5cGUpID0+IGlzVHlwZSh2YWx1ZSwgdHlwZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlTGlzdCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIE5vZGVMaXN0IHtcbiAgcmV0dXJuIGlzVHlwZSh2YWx1ZSwgJ05vZGVMaXN0Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01vdXNlRXZlbnQodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBNb3VzZUV2ZW50IHtcbiAgcmV0dXJuIGlzVHlwZSh2YWx1ZSwgJ01vdXNlRXZlbnQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVmZXJlbmNlRWxlbWVudCh2YWx1ZTogYW55KTogdmFsdWUgaXMgUmVmZXJlbmNlRWxlbWVudCB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fdGlwcHkgJiYgdmFsdWUuX3RpcHB5LnJlZmVyZW5jZSA9PT0gdmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJyYXlPZkVsZW1lbnRzKHZhbHVlOiBUYXJnZXRzKTogRWxlbWVudFtdIHtcbiAgaWYgKGlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgfVxuXG4gIGlmIChpc05vZGVMaXN0KHZhbHVlKSkge1xuICAgIHJldHVybiBhcnJheUZyb20odmFsdWUpO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5RnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uRHVyYXRpb24oXG4gIGVsczogKEhUTUxEaXZFbGVtZW50IHwgbnVsbClbXSxcbiAgdmFsdWU6IG51bWJlclxuKTogdm9pZCB7XG4gIGVscy5mb3JFYWNoKChlbCkgPT4ge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dmFsdWV9bXNgO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRWaXNpYmlsaXR5U3RhdGUoXG4gIGVsczogKEhUTUxEaXZFbGVtZW50IHwgbnVsbClbXSxcbiAgc3RhdGU6ICd2aXNpYmxlJyB8ICdoaWRkZW4nXG4pOiB2b2lkIHtcbiAgZWxzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCBzdGF0ZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnQoXG4gIGVsZW1lbnRPckVsZW1lbnRzOiBFbGVtZW50IHwgRWxlbWVudFtdXG4pOiBEb2N1bWVudCB7XG4gIGNvbnN0IFtlbGVtZW50XSA9IG5vcm1hbGl6ZVRvQXJyYXkoZWxlbWVudE9yRWxlbWVudHMpO1xuXG4gIC8vIEVsZW1lbnRzIGNyZWF0ZWQgdmlhIGEgPHRlbXBsYXRlPiBoYXZlIGFuIG93bmVyRG9jdW1lbnQgd2l0aCBubyByZWZlcmVuY2UgdG8gdGhlIGJvZHlcbiAgcmV0dXJuIGVsZW1lbnQ/Lm93bmVyRG9jdW1lbnQ/LmJvZHkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiBkb2N1bWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyKFxuICBwb3BwZXJUcmVlRGF0YTogUG9wcGVyVHJlZURhdGFbXSxcbiAgZXZlbnQ6IE1vdXNlRXZlbnRcbik6IGJvb2xlYW4ge1xuICBjb25zdCB7Y2xpZW50WCwgY2xpZW50WX0gPSBldmVudDtcblxuICByZXR1cm4gcG9wcGVyVHJlZURhdGEuZXZlcnkoKHtwb3BwZXJSZWN0LCBwb3BwZXJTdGF0ZSwgcHJvcHN9KSA9PiB7XG4gICAgY29uc3Qge2ludGVyYWN0aXZlQm9yZGVyfSA9IHByb3BzO1xuICAgIGNvbnN0IGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBvcHBlclN0YXRlLnBsYWNlbWVudCk7XG4gICAgY29uc3Qgb2Zmc2V0RGF0YSA9IHBvcHBlclN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0O1xuXG4gICAgaWYgKCFvZmZzZXREYXRhKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCB0b3BEaXN0YW5jZSA9IGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nID8gb2Zmc2V0RGF0YS50b3AhLnkgOiAwO1xuICAgIGNvbnN0IGJvdHRvbURpc3RhbmNlID0gYmFzZVBsYWNlbWVudCA9PT0gJ3RvcCcgPyBvZmZzZXREYXRhLmJvdHRvbSEueSA6IDA7XG4gICAgY29uc3QgbGVmdERpc3RhbmNlID0gYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0JyA/IG9mZnNldERhdGEubGVmdCEueCA6IDA7XG4gICAgY29uc3QgcmlnaHREaXN0YW5jZSA9IGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0JyA/IG9mZnNldERhdGEucmlnaHQhLnggOiAwO1xuXG4gICAgY29uc3QgZXhjZWVkc1RvcCA9XG4gICAgICBwb3BwZXJSZWN0LnRvcCAtIGNsaWVudFkgKyB0b3BEaXN0YW5jZSA+IGludGVyYWN0aXZlQm9yZGVyO1xuICAgIGNvbnN0IGV4Y2VlZHNCb3R0b20gPVxuICAgICAgY2xpZW50WSAtIHBvcHBlclJlY3QuYm90dG9tIC0gYm90dG9tRGlzdGFuY2UgPiBpbnRlcmFjdGl2ZUJvcmRlcjtcbiAgICBjb25zdCBleGNlZWRzTGVmdCA9XG4gICAgICBwb3BwZXJSZWN0LmxlZnQgLSBjbGllbnRYICsgbGVmdERpc3RhbmNlID4gaW50ZXJhY3RpdmVCb3JkZXI7XG4gICAgY29uc3QgZXhjZWVkc1JpZ2h0ID1cbiAgICAgIGNsaWVudFggLSBwb3BwZXJSZWN0LnJpZ2h0IC0gcmlnaHREaXN0YW5jZSA+IGludGVyYWN0aXZlQm9yZGVyO1xuXG4gICAgcmV0dXJuIGV4Y2VlZHNUb3AgfHwgZXhjZWVkc0JvdHRvbSB8fCBleGNlZWRzTGVmdCB8fCBleGNlZWRzUmlnaHQ7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKFxuICBib3g6IEhUTUxEaXZFbGVtZW50LFxuICBhY3Rpb246ICdhZGQnIHwgJ3JlbW92ZScsXG4gIGxpc3RlbmVyOiAoZXZlbnQ6IFRyYW5zaXRpb25FdmVudCkgPT4gdm9pZFxuKTogdm9pZCB7XG4gIGNvbnN0IG1ldGhvZCA9IGAke2FjdGlvbn1FdmVudExpc3RlbmVyYCBhc1xuICAgIHwgJ2FkZEV2ZW50TGlzdGVuZXInXG4gICAgfCAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cbiAgLy8gc29tZSBicm93c2VycyBhcHBhcmVudGx5IHN1cHBvcnQgYHRyYW5zaXRpb25gICh1bnByZWZpeGVkKSBidXQgb25seSBmaXJlXG4gIC8vIGB3ZWJraXRUcmFuc2l0aW9uRW5kYC4uLlxuICBbJ3RyYW5zaXRpb25lbmQnLCAnd2Via2l0VHJhbnNpdGlvbkVuZCddLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgYm94W21ldGhvZF0oZXZlbnQsIGxpc3RlbmVyIGFzIEV2ZW50TGlzdGVuZXIpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7VE9VQ0hfT1BUSU9OU30gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHtpc1JlZmVyZW5jZUVsZW1lbnR9IGZyb20gJy4vZG9tLXV0aWxzJztcblxuZXhwb3J0IGNvbnN0IGN1cnJlbnRJbnB1dCA9IHtpc1RvdWNoOiBmYWxzZX07XG5sZXQgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuXG4vKipcbiAqIFdoZW4gYSBgdG91Y2hzdGFydGAgZXZlbnQgaXMgZmlyZWQsIGl0J3MgYXNzdW1lZCB0aGUgdXNlciBpcyB1c2luZyB0b3VjaFxuICogaW5wdXQuIFdlJ2xsIGJpbmQgYSBgbW91c2Vtb3ZlYCBldmVudCBsaXN0ZW5lciB0byBsaXN0ZW4gZm9yIG1vdXNlIGlucHV0IGluXG4gKiB0aGUgZnV0dXJlLiBUaGlzIHdheSwgdGhlIGBpc1RvdWNoYCBwcm9wZXJ0eSBpcyBmdWxseSBkeW5hbWljIGFuZCB3aWxsIGhhbmRsZVxuICogaHlicmlkIGRldmljZXMgdGhhdCB1c2UgYSBtaXggb2YgdG91Y2ggKyBtb3VzZSBpbnB1dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uRG9jdW1lbnRUb3VjaFN0YXJ0KCk6IHZvaWQge1xuICBpZiAoY3VycmVudElucHV0LmlzVG91Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjdXJyZW50SW5wdXQuaXNUb3VjaCA9IHRydWU7XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG5cbi8qKlxuICogV2hlbiB0d28gYG1vdXNlbW92ZWAgZXZlbnQgYXJlIGZpcmVkIGNvbnNlY3V0aXZlbHkgd2l0aGluIDIwbXMsIGl0J3MgYXNzdW1lZFxuICogdGhlIHVzZXIgaXMgdXNpbmcgbW91c2UgaW5wdXQgYWdhaW4uIGBtb3VzZW1vdmVgIGNhbiBmaXJlIG9uIHRvdWNoIGRldmljZXMgYXNcbiAqIHdlbGwsIGJ1dCB2ZXJ5IHJhcmVseSB0aGF0IHF1aWNrbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkRvY3VtZW50TW91c2VNb3ZlKCk6IHZvaWQge1xuICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICBpZiAobm93IC0gbGFzdE1vdXNlTW92ZVRpbWUgPCAyMCkge1xuICAgIGN1cnJlbnRJbnB1dC5pc1RvdWNoID0gZmFsc2U7XG5cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkRvY3VtZW50TW91c2VNb3ZlKTtcbiAgfVxuXG4gIGxhc3RNb3VzZU1vdmVUaW1lID0gbm93O1xufVxuXG4vKipcbiAqIFdoZW4gYW4gZWxlbWVudCBpcyBpbiBmb2N1cyBhbmQgaGFzIGEgdGlwcHksIGxlYXZpbmcgdGhlIHRhYi93aW5kb3cgYW5kXG4gKiByZXR1cm5pbmcgY2F1c2VzIGl0IHRvIHNob3cgYWdhaW4uIEZvciBtb3VzZSB1c2VycyB0aGlzIGlzIHVuZXhwZWN0ZWQsIGJ1dFxuICogZm9yIGtleWJvYXJkIHVzZSBpdCBtYWtlcyBzZW5zZS5cbiAqIFRPRE86IGZpbmQgYSBiZXR0ZXIgdGVjaG5pcXVlIHRvIHNvbHZlIHRoaXMgcHJvYmxlbVxuICovXG5leHBvcnQgZnVuY3Rpb24gb25XaW5kb3dCbHVyKCk6IHZvaWQge1xuICBjb25zdCBhY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCB8IG51bGw7XG5cbiAgaWYgKGlzUmVmZXJlbmNlRWxlbWVudChhY3RpdmVFbGVtZW50KSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gYWN0aXZlRWxlbWVudC5fdGlwcHkhO1xuXG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQuYmx1ciAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCk6IHZvaWQge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Eb2N1bWVudFRvdWNoU3RhcnQsIFRPVUNIX09QVElPTlMpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uV2luZG93Qmx1cik7XG59XG4iLCJpbXBvcnQge1RhcmdldHN9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcobWV0aG9kOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCB0eHQgPSBtZXRob2QgPT09ICdkZXN0cm95JyA/ICduIGFscmVhZHktJyA6ICcgJztcblxuICByZXR1cm4gW1xuICAgIGAke21ldGhvZH0oKSB3YXMgY2FsbGVkIG9uIGEke3R4dH1kZXN0cm95ZWQgaW5zdGFuY2UuIFRoaXMgaXMgYSBuby1vcCBidXRgLFxuICAgICdpbmRpY2F0ZXMgYSBwb3RlbnRpYWwgbWVtb3J5IGxlYWsuJyxcbiAgXS5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbih2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3Qgc3BhY2VzQW5kVGFicyA9IC9bIFxcdF17Mix9L2c7XG4gIGNvbnN0IGxpbmVTdGFydFdpdGhTcGFjZXMgPSAvXlsgXFx0XSovZ207XG5cbiAgcmV0dXJuIHZhbHVlXG4gICAgLnJlcGxhY2Uoc3BhY2VzQW5kVGFicywgJyAnKVxuICAgIC5yZXBsYWNlKGxpbmVTdGFydFdpdGhTcGFjZXMsICcnKVxuICAgIC50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGdldERldk1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNsZWFuKGBcbiAgJWN0aXBweS5qc1xuXG4gICVjJHtjbGVhbihtZXNzYWdlKX1cblxuICAlY/CfkbfigI0gVGhpcyBpcyBhIGRldmVsb3BtZW50LW9ubHkgbWVzc2FnZS4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24uXG4gIGApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIHJldHVybiBbXG4gICAgZ2V0RGV2TWVzc2FnZShtZXNzYWdlKSxcbiAgICAvLyB0aXRsZVxuICAgICdjb2xvcjogIzAwQzU4NDsgZm9udC1zaXplOiAxLjNlbTsgZm9udC13ZWlnaHQ6IGJvbGQ7JyxcbiAgICAvLyBtZXNzYWdlXG4gICAgJ2xpbmUtaGVpZ2h0OiAxLjUnLFxuICAgIC8vIGZvb3RlclxuICAgICdjb2xvcjogI2E2YTA5NTsnLFxuICBdO1xufVxuXG4vLyBBc3N1bWUgd2FybmluZ3MgYW5kIGVycm9ycyBuZXZlciBoYXZlIHRoZSBzYW1lIG1lc3NhZ2VcbmxldCB2aXNpdGVkTWVzc2FnZXM6IFNldDxzdHJpbmc+O1xuaWYgKF9fREVWX18pIHtcbiAgcmVzZXRWaXNpdGVkTWVzc2FnZXMoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0VmlzaXRlZE1lc3NhZ2VzKCk6IHZvaWQge1xuICB2aXNpdGVkTWVzc2FnZXMgPSBuZXcgU2V0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuV2hlbihjb25kaXRpb246IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoY29uZGl0aW9uICYmICF2aXNpdGVkTWVzc2FnZXMuaGFzKG1lc3NhZ2UpKSB7XG4gICAgdmlzaXRlZE1lc3NhZ2VzLmFkZChtZXNzYWdlKTtcbiAgICBjb25zb2xlLndhcm4oLi4uZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yV2hlbihjb25kaXRpb246IGJvb2xlYW4sIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICBpZiAoY29uZGl0aW9uICYmICF2aXNpdGVkTWVzc2FnZXMuaGFzKG1lc3NhZ2UpKSB7XG4gICAgdmlzaXRlZE1lc3NhZ2VzLmFkZChtZXNzYWdlKTtcbiAgICBjb25zb2xlLmVycm9yKC4uLmdldEZvcm1hdHRlZE1lc3NhZ2UobWVzc2FnZSkpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRhcmdldHModGFyZ2V0czogVGFyZ2V0cyk6IHZvaWQge1xuICBjb25zdCBkaWRQYXNzRmFsc3lWYWx1ZSA9ICF0YXJnZXRzO1xuICBjb25zdCBkaWRQYXNzUGxhaW5PYmplY3QgPVxuICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZXRzKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiZcbiAgICAhKHRhcmdldHMgYXMgYW55KS5hZGRFdmVudExpc3RlbmVyO1xuXG4gIGVycm9yV2hlbihcbiAgICBkaWRQYXNzRmFsc3lWYWx1ZSxcbiAgICBbXG4gICAgICAndGlwcHkoKSB3YXMgcGFzc2VkJyxcbiAgICAgICdgJyArIFN0cmluZyh0YXJnZXRzKSArICdgJyxcbiAgICAgICdhcyBpdHMgdGFyZ2V0cyAoZmlyc3QpIGFyZ3VtZW50LiBWYWxpZCB0eXBlcyBhcmU6IFN0cmluZywgRWxlbWVudCwnLFxuICAgICAgJ0VsZW1lbnRbXSwgb3IgTm9kZUxpc3QuJyxcbiAgICBdLmpvaW4oJyAnKVxuICApO1xuXG4gIGVycm9yV2hlbihcbiAgICBkaWRQYXNzUGxhaW5PYmplY3QsXG4gICAgW1xuICAgICAgJ3RpcHB5KCkgd2FzIHBhc3NlZCBhIHBsYWluIG9iamVjdCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGFzIGFuIGFyZ3VtZW50JyxcbiAgICAgICdmb3IgdmlydHVhbCBwb3NpdGlvbmluZy4gVXNlIHByb3BzLmdldFJlZmVyZW5jZUNsaWVudFJlY3QgaW5zdGVhZC4nLFxuICAgIF0uam9pbignICcpXG4gICk7XG59XG4iLCJpbXBvcnQge0RlZmF1bHRQcm9wcywgUGx1Z2luLCBQcm9wcywgUmVmZXJlbmNlRWxlbWVudCwgVGlwcHl9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgaGFzT3duUHJvcGVydHksXG4gIHJlbW92ZVByb3BlcnRpZXMsXG4gIGludm9rZVdpdGhBcmdzT3JSZXR1cm4sXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHt3YXJuV2hlbn0gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuY29uc3QgcGx1Z2luUHJvcHMgPSB7XG4gIGFuaW1hdGVGaWxsOiBmYWxzZSxcbiAgZm9sbG93Q3Vyc29yOiBmYWxzZSxcbiAgaW5saW5lUG9zaXRpb25pbmc6IGZhbHNlLFxuICBzdGlja3k6IGZhbHNlLFxufTtcblxuY29uc3QgcmVuZGVyUHJvcHMgPSB7XG4gIGFsbG93SFRNTDogZmFsc2UsXG4gIGFuaW1hdGlvbjogJ2ZhZGUnLFxuICBhcnJvdzogdHJ1ZSxcbiAgY29udGVudDogJycsXG4gIGluZXJ0aWE6IGZhbHNlLFxuICBtYXhXaWR0aDogMzUwLFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHRoZW1lOiAnJyxcbiAgekluZGV4OiA5OTk5LFxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQcm9wczogRGVmYXVsdFByb3BzID0ge1xuICBhcHBlbmRUbzogKCkgPT4gZG9jdW1lbnQuYm9keSxcbiAgYXJpYToge1xuICAgIGNvbnRlbnQ6ICdhdXRvJyxcbiAgICBleHBhbmRlZDogJ2F1dG8nLFxuICB9LFxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IFszMDAsIDI1MF0sXG4gIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6IG51bGwsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmU6IGZhbHNlLFxuICBpbnRlcmFjdGl2ZUJvcmRlcjogMixcbiAgaW50ZXJhY3RpdmVEZWJvdW5jZTogMCxcbiAgbW92ZVRyYW5zaXRpb246ICcnLFxuICBvZmZzZXQ6IFswLCAxMF0sXG4gIG9uQWZ0ZXJVcGRhdGUoKSB7fSxcbiAgb25CZWZvcmVVcGRhdGUoKSB7fSxcbiAgb25DcmVhdGUoKSB7fSxcbiAgb25EZXN0cm95KCkge30sXG4gIG9uSGlkZGVuKCkge30sXG4gIG9uSGlkZSgpIHt9LFxuICBvbk1vdW50KCkge30sXG4gIG9uU2hvdygpIHt9LFxuICBvblNob3duKCkge30sXG4gIG9uVHJpZ2dlcigpIHt9LFxuICBvblVudHJpZ2dlcigpIHt9LFxuICBvbkNsaWNrT3V0c2lkZSgpIHt9LFxuICBwbGFjZW1lbnQ6ICd0b3AnLFxuICBwbHVnaW5zOiBbXSxcbiAgcG9wcGVyT3B0aW9uczoge30sXG4gIHJlbmRlcjogbnVsbCxcbiAgc2hvd09uQ3JlYXRlOiBmYWxzZSxcbiAgdG91Y2g6IHRydWUsXG4gIHRyaWdnZXI6ICdtb3VzZWVudGVyIGZvY3VzJyxcbiAgdHJpZ2dlclRhcmdldDogbnVsbCxcbiAgLi4ucGx1Z2luUHJvcHMsXG4gIC4uLnJlbmRlclByb3BzLFxufTtcblxuY29uc3QgZGVmYXVsdEtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpO1xuXG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdFByb3BzOiBUaXBweVsnc2V0RGVmYXVsdFByb3BzJ10gPSAocGFydGlhbFByb3BzKSA9PiB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgdmFsaWRhdGVQcm9wcyhwYXJ0aWFsUHJvcHMsIFtdKTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwYXJ0aWFsUHJvcHMpIGFzIEFycmF5PGtleW9mIERlZmF1bHRQcm9wcz47XG4gIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgKGRlZmF1bHRQcm9wcyBhcyBhbnkpW2tleV0gPSBwYXJ0aWFsUHJvcHNba2V5XTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXh0ZW5kZWRQYXNzZWRQcm9wcyhcbiAgcGFzc2VkUHJvcHM6IFBhcnRpYWw8UHJvcHM+ICYgUmVjb3JkPHN0cmluZywgdW5rbm93bj5cbik6IFBhcnRpYWw8UHJvcHM+IHtcbiAgY29uc3QgcGx1Z2lucyA9IHBhc3NlZFByb3BzLnBsdWdpbnMgfHwgW107XG4gIGNvbnN0IHBsdWdpblByb3BzID0gcGx1Z2lucy5yZWR1Y2U8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+KChhY2MsIHBsdWdpbikgPT4ge1xuICAgIGNvbnN0IHtuYW1lLCBkZWZhdWx0VmFsdWV9ID0gcGx1Z2luO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGFjY1tuYW1lXSA9XG4gICAgICAgIHBhc3NlZFByb3BzW25hbWVdICE9PSB1bmRlZmluZWQgPyBwYXNzZWRQcm9wc1tuYW1lXSA6IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYXNzZWRQcm9wcyxcbiAgICAuLi5wbHVnaW5Qcm9wcyxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGFBdHRyaWJ1dGVQcm9wcyhcbiAgcmVmZXJlbmNlOiBSZWZlcmVuY2VFbGVtZW50LFxuICBwbHVnaW5zOiBQbHVnaW5bXVxuKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xuICBjb25zdCBwcm9wS2V5cyA9IHBsdWdpbnNcbiAgICA/IE9iamVjdC5rZXlzKGdldEV4dGVuZGVkUGFzc2VkUHJvcHMoey4uLmRlZmF1bHRQcm9wcywgcGx1Z2luc30pKVxuICAgIDogZGVmYXVsdEtleXM7XG5cbiAgY29uc3QgcHJvcHMgPSBwcm9wS2V5cy5yZWR1Y2UoXG4gICAgKGFjYzogUGFydGlhbDxQcm9wcz4gJiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwga2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZUFzU3RyaW5nID0gKFxuICAgICAgICByZWZlcmVuY2UuZ2V0QXR0cmlidXRlKGBkYXRhLXRpcHB5LSR7a2V5fWApIHx8ICcnXG4gICAgICApLnRyaW0oKTtcblxuICAgICAgaWYgKCF2YWx1ZUFzU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgICBhY2Nba2V5XSA9IHZhbHVlQXNTdHJpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGFjY1trZXldID0gSlNPTi5wYXJzZSh2YWx1ZUFzU3RyaW5nKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sXG4gICAge31cbiAgKTtcblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZVByb3BzKFxuICByZWZlcmVuY2U6IFJlZmVyZW5jZUVsZW1lbnQsXG4gIHByb3BzOiBQcm9wc1xuKTogUHJvcHMge1xuICBjb25zdCBvdXQgPSB7XG4gICAgLi4ucHJvcHMsXG4gICAgY29udGVudDogaW52b2tlV2l0aEFyZ3NPclJldHVybihwcm9wcy5jb250ZW50LCBbcmVmZXJlbmNlXSksXG4gICAgLi4uKHByb3BzLmlnbm9yZUF0dHJpYnV0ZXNcbiAgICAgID8ge31cbiAgICAgIDogZ2V0RGF0YUF0dHJpYnV0ZVByb3BzKHJlZmVyZW5jZSwgcHJvcHMucGx1Z2lucykpLFxuICB9O1xuXG4gIG91dC5hcmlhID0ge1xuICAgIC4uLmRlZmF1bHRQcm9wcy5hcmlhLFxuICAgIC4uLm91dC5hcmlhLFxuICB9O1xuXG4gIG91dC5hcmlhID0ge1xuICAgIGV4cGFuZGVkOlxuICAgICAgb3V0LmFyaWEuZXhwYW5kZWQgPT09ICdhdXRvJyA/IHByb3BzLmludGVyYWN0aXZlIDogb3V0LmFyaWEuZXhwYW5kZWQsXG4gICAgY29udGVudDpcbiAgICAgIG91dC5hcmlhLmNvbnRlbnQgPT09ICdhdXRvJ1xuICAgICAgICA/IHByb3BzLmludGVyYWN0aXZlXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiAnZGVzY3JpYmVkYnknXG4gICAgICAgIDogb3V0LmFyaWEuY29udGVudCxcbiAgfTtcblxuICByZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhcbiAgcGFydGlhbFByb3BzOiBQYXJ0aWFsPFByb3BzPiA9IHt9LFxuICBwbHVnaW5zOiBQbHVnaW5bXSA9IFtdXG4pOiB2b2lkIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHBhcnRpYWxQcm9wcykgYXMgQXJyYXk8a2V5b2YgUHJvcHM+O1xuICBrZXlzLmZvckVhY2goKHByb3ApID0+IHtcbiAgICBjb25zdCBub25QbHVnaW5Qcm9wcyA9IHJlbW92ZVByb3BlcnRpZXMoXG4gICAgICBkZWZhdWx0UHJvcHMsXG4gICAgICBPYmplY3Qua2V5cyhwbHVnaW5Qcm9wcylcbiAgICApO1xuXG4gICAgbGV0IGRpZFBhc3NVbmtub3duUHJvcCA9ICFoYXNPd25Qcm9wZXJ0eShub25QbHVnaW5Qcm9wcywgcHJvcCk7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcHJvcCBleGlzdHMgaW4gYHBsdWdpbnNgXG4gICAgaWYgKGRpZFBhc3NVbmtub3duUHJvcCkge1xuICAgICAgZGlkUGFzc1Vua25vd25Qcm9wID1cbiAgICAgICAgcGx1Z2lucy5maWx0ZXIoKHBsdWdpbikgPT4gcGx1Z2luLm5hbWUgPT09IHByb3ApLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICB3YXJuV2hlbihcbiAgICAgIGRpZFBhc3NVbmtub3duUHJvcCxcbiAgICAgIFtcbiAgICAgICAgYFxcYCR7cHJvcH1cXGBgLFxuICAgICAgICBcImlzIG5vdCBhIHZhbGlkIHByb3AuIFlvdSBtYXkgaGF2ZSBzcGVsbGVkIGl0IGluY29ycmVjdGx5LCBvciBpZiBpdCdzXCIsXG4gICAgICAgICdhIHBsdWdpbiwgZm9yZ290IHRvIHBhc3MgaXQgaW4gYW4gYXJyYXkgYXMgcHJvcHMucGx1Z2lucy4nLFxuICAgICAgICAnXFxuXFxuJyxcbiAgICAgICAgJ0FsbCBwcm9wczogaHR0cHM6Ly9hdG9taWtzLmdpdGh1Yi5pby90aXBweWpzL3Y2L2FsbC1wcm9wcy9cXG4nLFxuICAgICAgICAnUGx1Z2luczogaHR0cHM6Ly9hdG9taWtzLmdpdGh1Yi5pby90aXBweWpzL3Y2L3BsdWdpbnMvJyxcbiAgICAgIF0uam9pbignICcpXG4gICAgKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1xuICBBUlJPV19DTEFTUyxcbiAgQkFDS0RST1BfQ0xBU1MsXG4gIEJPWF9DTEFTUyxcbiAgQ09OVEVOVF9DTEFTUyxcbiAgU1ZHX0FSUk9XX0NMQVNTLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQge2RpdiwgaXNFbGVtZW50fSBmcm9tICcuL2RvbS11dGlscyc7XG5pbXBvcnQge0luc3RhbmNlLCBQb3BwZXJFbGVtZW50LCBQcm9wc30gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1BvcHBlckNoaWxkcmVufSBmcm9tICcuL3R5cGVzLWludGVybmFsJztcbmltcG9ydCB7YXJyYXlGcm9tfSBmcm9tICcuL3V0aWxzJztcblxuLy8gRmlyZWZveCBleHRlbnNpb25zIGRvbid0IGFsbG93IC5pbm5lckhUTUwgPSBcIi4uLlwiIHByb3BlcnR5LiBUaGlzIHRyaWNrcyBpdC5cbmNvbnN0IGlubmVySFRNTCA9ICgpOiAnaW5uZXJIVE1MJyA9PiAnaW5uZXJIVE1MJztcblxuZnVuY3Rpb24gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwoZWxlbWVudDogRWxlbWVudCwgaHRtbDogc3RyaW5nKTogdm9pZCB7XG4gIGVsZW1lbnRbaW5uZXJIVE1MKCldID0gaHRtbDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXJyb3dFbGVtZW50KHZhbHVlOiBQcm9wc1snYXJyb3cnXSk6IEhUTUxEaXZFbGVtZW50IHtcbiAgY29uc3QgYXJyb3cgPSBkaXYoKTtcblxuICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICBhcnJvdy5jbGFzc05hbWUgPSBBUlJPV19DTEFTUztcbiAgfSBlbHNlIHtcbiAgICBhcnJvdy5jbGFzc05hbWUgPSBTVkdfQVJST1dfQ0xBU1M7XG5cbiAgICBpZiAoaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAgYXJyb3cuYXBwZW5kQ2hpbGQodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTChhcnJvdywgdmFsdWUgYXMgc3RyaW5nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb250ZW50KGNvbnRlbnQ6IEhUTUxEaXZFbGVtZW50LCBwcm9wczogUHJvcHMpOiB2b2lkIHtcbiAgaWYgKGlzRWxlbWVudChwcm9wcy5jb250ZW50KSkge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKGNvbnRlbnQsICcnKTtcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHByb3BzLmNvbnRlbnQpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wcy5jb250ZW50ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb3BzLmFsbG93SFRNTCkge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwoY29udGVudCwgcHJvcHMuY29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQudGV4dENvbnRlbnQgPSBwcm9wcy5jb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRyZW4ocG9wcGVyOiBQb3BwZXJFbGVtZW50KTogUG9wcGVyQ2hpbGRyZW4ge1xuICBjb25zdCBib3ggPSBwb3BwZXIuZmlyc3RFbGVtZW50Q2hpbGQgYXMgSFRNTERpdkVsZW1lbnQ7XG4gIGNvbnN0IGJveENoaWxkcmVuID0gYXJyYXlGcm9tKGJveC5jaGlsZHJlbik7XG5cbiAgcmV0dXJuIHtcbiAgICBib3gsXG4gICAgY29udGVudDogYm94Q2hpbGRyZW4uZmluZCgobm9kZSkgPT4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoQ09OVEVOVF9DTEFTUykpLFxuICAgIGFycm93OiBib3hDaGlsZHJlbi5maW5kKFxuICAgICAgKG5vZGUpID0+XG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKEFSUk9XX0NMQVNTKSB8fFxuICAgICAgICBub2RlLmNsYXNzTGlzdC5jb250YWlucyhTVkdfQVJST1dfQ0xBU1MpXG4gICAgKSxcbiAgICBiYWNrZHJvcDogYm94Q2hpbGRyZW4uZmluZCgobm9kZSkgPT5cbiAgICAgIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKEJBQ0tEUk9QX0NMQVNTKVxuICAgICksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoXG4gIGluc3RhbmNlOiBJbnN0YW5jZVxuKToge1xuICBwb3BwZXI6IFBvcHBlckVsZW1lbnQ7XG4gIG9uVXBkYXRlPzogKHByZXZQcm9wczogUHJvcHMsIG5leHRQcm9wczogUHJvcHMpID0+IHZvaWQ7XG59IHtcbiAgY29uc3QgcG9wcGVyID0gZGl2KCk7XG5cbiAgY29uc3QgYm94ID0gZGl2KCk7XG4gIGJveC5jbGFzc05hbWUgPSBCT1hfQ0xBU1M7XG4gIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdGUnLCAnaGlkZGVuJyk7XG4gIGJveC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG5cbiAgY29uc3QgY29udGVudCA9IGRpdigpO1xuICBjb250ZW50LmNsYXNzTmFtZSA9IENPTlRFTlRfQ0xBU1M7XG4gIGNvbnRlbnQuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuXG4gIHNldENvbnRlbnQoY29udGVudCwgaW5zdGFuY2UucHJvcHMpO1xuXG4gIHBvcHBlci5hcHBlbmRDaGlsZChib3gpO1xuICBib3guYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgb25VcGRhdGUoaW5zdGFuY2UucHJvcHMsIGluc3RhbmNlLnByb3BzKTtcblxuICBmdW5jdGlvbiBvblVwZGF0ZShwcmV2UHJvcHM6IFByb3BzLCBuZXh0UHJvcHM6IFByb3BzKTogdm9pZCB7XG4gICAgY29uc3Qge2JveCwgY29udGVudCwgYXJyb3d9ID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcblxuICAgIGlmIChuZXh0UHJvcHMudGhlbWUpIHtcbiAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGhlbWUnLCBuZXh0UHJvcHMudGhlbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBib3gucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXRoZW1lJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXh0UHJvcHMuYW5pbWF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCBuZXh0UHJvcHMuYW5pbWF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAobmV4dFByb3BzLmluZXJ0aWEpIHtcbiAgICAgIGJveC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5lcnRpYScsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJyk7XG4gICAgfVxuXG4gICAgYm94LnN0eWxlLm1heFdpZHRoID1cbiAgICAgIHR5cGVvZiBuZXh0UHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInXG4gICAgICAgID8gYCR7bmV4dFByb3BzLm1heFdpZHRofXB4YFxuICAgICAgICA6IG5leHRQcm9wcy5tYXhXaWR0aDtcblxuICAgIGlmIChuZXh0UHJvcHMucm9sZSkge1xuICAgICAgYm94LnNldEF0dHJpYnV0ZSgncm9sZScsIG5leHRQcm9wcy5yb2xlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHByZXZQcm9wcy5jb250ZW50ICE9PSBuZXh0UHJvcHMuY29udGVudCB8fFxuICAgICAgcHJldlByb3BzLmFsbG93SFRNTCAhPT0gbmV4dFByb3BzLmFsbG93SFRNTFxuICAgICkge1xuICAgICAgc2V0Q29udGVudChjb250ZW50LCBpbnN0YW5jZS5wcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKG5leHRQcm9wcy5hcnJvdykge1xuICAgICAgaWYgKCFhcnJvdykge1xuICAgICAgICBib3guYXBwZW5kQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvdykpO1xuICAgICAgfSBlbHNlIGlmIChwcmV2UHJvcHMuYXJyb3cgIT09IG5leHRQcm9wcy5hcnJvdykge1xuICAgICAgICBib3gucmVtb3ZlQ2hpbGQoYXJyb3cpO1xuICAgICAgICBib3guYXBwZW5kQ2hpbGQoY3JlYXRlQXJyb3dFbGVtZW50KG5leHRQcm9wcy5hcnJvdykpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJyb3cpIHtcbiAgICAgIGJveC5yZW1vdmVDaGlsZChhcnJvdyEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcG9wcGVyLFxuICAgIG9uVXBkYXRlLFxuICB9O1xufVxuXG4vLyBSdW50aW1lIGNoZWNrIHRvIGlkZW50aWZ5IGlmIHRoZSByZW5kZXIgZnVuY3Rpb24gaXMgdGhlIGRlZmF1bHQgb25lOyB0aGlzXG4vLyB3YXkgd2UgY2FuIGFwcGx5IGRlZmF1bHQgQ1NTIHRyYW5zaXRpb25zIGxvZ2ljIGFuZCBpdCBjYW4gYmUgdHJlZS1zaGFrZW4gYXdheVxucmVuZGVyLiQkdGlwcHkgPSB0cnVlO1xuIiwiaW1wb3J0IHtjcmVhdGVQb3BwZXIsIFN0cmljdE1vZGlmaWVycywgTW9kaWZpZXJ9IGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcbmltcG9ydCB7Y3VycmVudElucHV0fSBmcm9tICcuL2JpbmRHbG9iYWxFdmVudExpc3RlbmVycyc7XG5pbXBvcnQge2lzSUV9IGZyb20gJy4vYnJvd3Nlcic7XG5pbXBvcnQge1RPVUNIX09QVElPTlN9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7XG4gIGRpdixcbiAgZ2V0T3duZXJEb2N1bWVudCxcbiAgaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIsXG4gIGlzTW91c2VFdmVudCxcbiAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uLFxuICBzZXRWaXNpYmlsaXR5U3RhdGUsXG4gIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcixcbn0gZnJvbSAnLi9kb20tdXRpbHMnO1xuaW1wb3J0IHtkZWZhdWx0UHJvcHMsIGV2YWx1YXRlUHJvcHMsIGdldEV4dGVuZGVkUGFzc2VkUHJvcHN9IGZyb20gJy4vcHJvcHMnO1xuaW1wb3J0IHtnZXRDaGlsZHJlbn0gZnJvbSAnLi90ZW1wbGF0ZSc7XG5pbXBvcnQge1xuICBDb250ZW50LFxuICBJbnN0YW5jZSxcbiAgTGlmZWN5Y2xlSG9va3MsXG4gIFBvcHBlckVsZW1lbnQsXG4gIFByb3BzLFxuICBSZWZlcmVuY2VFbGVtZW50LFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7TGlzdGVuZXJPYmplY3QsIFBvcHBlclRyZWVEYXRhLCBQb3BwZXJDaGlsZHJlbn0gZnJvbSAnLi90eXBlcy1pbnRlcm5hbCc7XG5pbXBvcnQge1xuICBhcnJheUZyb20sXG4gIGRlYm91bmNlLFxuICBnZXRWYWx1ZUF0SW5kZXhPclJldHVybixcbiAgaW52b2tlV2l0aEFyZ3NPclJldHVybixcbiAgbm9ybWFsaXplVG9BcnJheSxcbiAgcHVzaElmVW5pcXVlLFxuICBzcGxpdEJ5U3BhY2VzLFxuICB1bmlxdWUsXG4gIHJlbW92ZVVuZGVmaW5lZFByb3BzLFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7Y3JlYXRlTWVtb3J5TGVha1dhcm5pbmcsIGVycm9yV2hlbiwgd2FybldoZW59IGZyb20gJy4vdmFsaWRhdGlvbic7XG5cbmxldCBpZENvdW50ZXIgPSAxO1xubGV0IG1vdXNlTW92ZUxpc3RlbmVyczogKChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZClbXSA9IFtdO1xuXG4vLyBVc2VkIGJ5IGBoaWRlQWxsKClgXG5leHBvcnQgbGV0IG1vdW50ZWRJbnN0YW5jZXM6IEluc3RhbmNlW10gPSBbXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVGlwcHkoXG4gIHJlZmVyZW5jZTogUmVmZXJlbmNlRWxlbWVudCxcbiAgcGFzc2VkUHJvcHM6IFBhcnRpYWw8UHJvcHM+XG4pOiBJbnN0YW5jZSB7XG4gIGNvbnN0IHByb3BzID0gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIHtcbiAgICAuLi5kZWZhdWx0UHJvcHMsXG4gICAgLi4uZ2V0RXh0ZW5kZWRQYXNzZWRQcm9wcyhyZW1vdmVVbmRlZmluZWRQcm9wcyhwYXNzZWRQcm9wcykpLFxuICB9KTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8g8J+UkiBQcml2YXRlIG1lbWJlcnNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGxldCBzaG93VGltZW91dDogYW55O1xuICBsZXQgaGlkZVRpbWVvdXQ6IGFueTtcbiAgbGV0IHNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lOiBudW1iZXI7XG4gIGxldCBpc1Zpc2libGVGcm9tQ2xpY2sgPSBmYWxzZTtcbiAgbGV0IGRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duID0gZmFsc2U7XG4gIGxldCBkaWRUb3VjaE1vdmUgPSBmYWxzZTtcbiAgbGV0IGlnbm9yZU9uRmlyc3RVcGRhdGUgPSBmYWxzZTtcbiAgbGV0IGxhc3RUcmlnZ2VyRXZlbnQ6IEV2ZW50IHwgdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lcjogKGV2ZW50OiBUcmFuc2l0aW9uRXZlbnQpID0+IHZvaWQ7XG4gIGxldCBvbkZpcnN0VXBkYXRlOiAoKSA9PiB2b2lkO1xuICBsZXQgbGlzdGVuZXJzOiBMaXN0ZW5lck9iamVjdFtdID0gW107XG4gIGxldCBkZWJvdW5jZWRPbk1vdXNlTW92ZSA9IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKTtcbiAgbGV0IGN1cnJlbnRUYXJnZXQ6IEVsZW1lbnQ7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJEgUHVibGljIG1lbWJlcnNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGNvbnN0IGlkID0gaWRDb3VudGVyKys7XG4gIGNvbnN0IHBvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgY29uc3QgcGx1Z2lucyA9IHVuaXF1ZShwcm9wcy5wbHVnaW5zKTtcblxuICBjb25zdCBzdGF0ZSA9IHtcbiAgICAvLyBJcyB0aGUgaW5zdGFuY2UgY3VycmVudGx5IGVuYWJsZWQ/XG4gICAgaXNFbmFibGVkOiB0cnVlLFxuICAgIC8vIElzIHRoZSB0aXBweSBjdXJyZW50bHkgc2hvd2luZyBhbmQgbm90IHRyYW5zaXRpb25pbmcgb3V0P1xuICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgLy8gSGFzIHRoZSBpbnN0YW5jZSBiZWVuIGRlc3Ryb3llZD9cbiAgICBpc0Rlc3Ryb3llZDogZmFsc2UsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBtb3VudGVkIHRvIHRoZSBET00/XG4gICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIHRpcHB5IGZpbmlzaGVkIHRyYW5zaXRpb25pbmcgaW4/XG4gICAgaXNTaG93bjogZmFsc2UsXG4gIH07XG5cbiAgY29uc3QgaW5zdGFuY2U6IEluc3RhbmNlID0ge1xuICAgIC8vIHByb3BlcnRpZXNcbiAgICBpZCxcbiAgICByZWZlcmVuY2UsXG4gICAgcG9wcGVyOiBkaXYoKSxcbiAgICBwb3BwZXJJbnN0YW5jZSxcbiAgICBwcm9wcyxcbiAgICBzdGF0ZSxcbiAgICBwbHVnaW5zLFxuICAgIC8vIG1ldGhvZHNcbiAgICBjbGVhckRlbGF5VGltZW91dHMsXG4gICAgc2V0UHJvcHMsXG4gICAgc2V0Q29udGVudCxcbiAgICBzaG93LFxuICAgIGhpZGUsXG4gICAgaGlkZVdpdGhJbnRlcmFjdGl2aXR5LFxuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVubW91bnQsXG4gICAgZGVzdHJveSxcbiAgfTtcblxuICAvLyBUT0RPOiBJbnZlc3RpZ2F0ZSB3aHkgdGhpcyBlYXJseSByZXR1cm4gY2F1c2VzIGEgVERaIGVycm9yIGluIHRoZSB0ZXN0cyDigJRcbiAgLy8gaXQgZG9lc24ndCBzZWVtIHRvIGhhcHBlbiBpbiB0aGUgYnJvd3NlclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFwcm9wcy5yZW5kZXIpIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgZXJyb3JXaGVuKHRydWUsICdyZW5kZXIoKSBmdW5jdGlvbiBoYXMgbm90IGJlZW4gc3VwcGxpZWQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEluaXRpYWwgbXV0YXRpb25zXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBjb25zdCB7cG9wcGVyLCBvblVwZGF0ZX0gPSBwcm9wcy5yZW5kZXIoaW5zdGFuY2UpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ2RhdGEtX19OQU1FU1BBQ0VfUFJFRklYX18tcm9vdCcsICcnKTtcbiAgcG9wcGVyLmlkID0gYF9fTkFNRVNQQUNFX1BSRUZJWF9fLSR7aW5zdGFuY2UuaWR9YDtcblxuICBpbnN0YW5jZS5wb3BwZXIgPSBwb3BwZXI7XG4gIHJlZmVyZW5jZS5fdGlwcHkgPSBpbnN0YW5jZTtcbiAgcG9wcGVyLl90aXBweSA9IGluc3RhbmNlO1xuXG4gIGNvbnN0IHBsdWdpbnNIb29rcyA9IHBsdWdpbnMubWFwKChwbHVnaW4pID0+IHBsdWdpbi5mbihpbnN0YW5jZSkpO1xuICBjb25zdCBoYXNBcmlhRXhwYW5kZWQgPSByZWZlcmVuY2UuaGFzQXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJyk7XG5cbiAgYWRkTGlzdGVuZXJzKCk7XG4gIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuICBoYW5kbGVTdHlsZXMoKTtcblxuICBpbnZva2VIb29rKCdvbkNyZWF0ZScsIFtpbnN0YW5jZV0pO1xuXG4gIGlmIChwcm9wcy5zaG93T25DcmVhdGUpIHtcbiAgICBzY2hlZHVsZVNob3coKTtcbiAgfVxuXG4gIC8vIFByZXZlbnQgYSB0aXBweSB3aXRoIGEgZGVsYXkgZnJvbSBoaWRpbmcgaWYgdGhlIGN1cnNvciBsZWZ0IHRoZW4gcmV0dXJuZWRcbiAgLy8gYmVmb3JlIGl0IHN0YXJ0ZWQgaGlkaW5nXG4gIHBvcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICAgIH1cbiAgfSk7XG5cbiAgcG9wcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoZXZlbnQpID0+IHtcbiAgICBpZiAoXG4gICAgICBpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJlxuICAgICAgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdtb3VzZWVudGVyJykgPj0gMFxuICAgICkge1xuICAgICAgZ2V0RG9jdW1lbnQoKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkZWJvdW5jZWRPbk1vdXNlTW92ZSk7XG4gICAgICBkZWJvdW5jZWRPbk1vdXNlTW92ZShldmVudCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJIgUHJpdmF0ZSBtZXRob2RzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBnZXROb3JtYWxpemVkVG91Y2hTZXR0aW5ncygpOiBbc3RyaW5nIHwgYm9vbGVhbiwgbnVtYmVyXSB7XG4gICAgY29uc3Qge3RvdWNofSA9IGluc3RhbmNlLnByb3BzO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRvdWNoKSA/IHRvdWNoIDogW3RvdWNoLCAwXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElzQ3VzdG9tVG91Y2hCZWhhdmlvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZ2V0Tm9ybWFsaXplZFRvdWNoU2V0dGluZ3MoKVswXSA9PT0gJ2hvbGQnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKTogYm9vbGVhbiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiAhIWluc3RhbmNlLnByb3BzLnJlbmRlcj8uJCR0aXBweTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRUYXJnZXQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIGN1cnJlbnRUYXJnZXQgfHwgcmVmZXJlbmNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKTogRG9jdW1lbnQge1xuICAgIGNvbnN0IHBhcmVudCA9IGdldEN1cnJlbnRUYXJnZXQoKS5wYXJlbnROb2RlIGFzIEVsZW1lbnQ7XG4gICAgcmV0dXJuIHBhcmVudCA/IGdldE93bmVyRG9jdW1lbnQocGFyZW50KSA6IGRvY3VtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKTogUG9wcGVyQ2hpbGRyZW4ge1xuICAgIHJldHVybiBnZXRDaGlsZHJlbihwb3BwZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVsYXkoaXNTaG93OiBib29sZWFuKTogbnVtYmVyIHtcbiAgICAvLyBGb3IgdG91Y2ggb3Iga2V5Ym9hcmQgaW5wdXQsIGZvcmNlIGAwYCBkZWxheSBmb3IgVVggcmVhc29uc1xuICAgIC8vIEFsc28gaWYgdGhlIGluc3RhbmNlIGlzIG1vdW50ZWQgYnV0IG5vdCB2aXNpYmxlICh0cmFuc2l0aW9uaW5nIG91dCksXG4gICAgLy8gaWdub3JlIGRlbGF5XG4gICAgaWYgKFxuICAgICAgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCAmJiAhaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB8fFxuICAgICAgY3VycmVudElucHV0LmlzVG91Y2ggfHxcbiAgICAgIChsYXN0VHJpZ2dlckV2ZW50ICYmIGxhc3RUcmlnZ2VyRXZlbnQudHlwZSA9PT0gJ2ZvY3VzJylcbiAgICApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRWYWx1ZUF0SW5kZXhPclJldHVybihcbiAgICAgIGluc3RhbmNlLnByb3BzLmRlbGF5LFxuICAgICAgaXNTaG93ID8gMCA6IDEsXG4gICAgICBkZWZhdWx0UHJvcHMuZGVsYXlcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3R5bGVzKCk6IHZvaWQge1xuICAgIHBvcHBlci5zdHlsZS5wb2ludGVyRXZlbnRzID1cbiAgICAgIGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA/ICcnIDogJ25vbmUnO1xuICAgIHBvcHBlci5zdHlsZS56SW5kZXggPSBgJHtpbnN0YW5jZS5wcm9wcy56SW5kZXh9YDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUhvb2soXG4gICAgaG9vazoga2V5b2YgTGlmZWN5Y2xlSG9va3MsXG4gICAgYXJnczogW0luc3RhbmNlLCBhbnk/XSxcbiAgICBzaG91bGRJbnZva2VQcm9wc0hvb2sgPSB0cnVlXG4gICk6IHZvaWQge1xuICAgIHBsdWdpbnNIb29rcy5mb3JFYWNoKChwbHVnaW5Ib29rcykgPT4ge1xuICAgICAgaWYgKHBsdWdpbkhvb2tzW2hvb2tdKSB7XG4gICAgICAgIHBsdWdpbkhvb2tzW2hvb2tdISguLi5hcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRJbnZva2VQcm9wc0hvb2spIHtcbiAgICAgIGluc3RhbmNlLnByb3BzW2hvb2tdKC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUFyaWFDb250ZW50QXR0cmlidXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IHthcmlhfSA9IGluc3RhbmNlLnByb3BzO1xuXG4gICAgaWYgKCFhcmlhLmNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyID0gYGFyaWEtJHthcmlhLmNvbnRlbnR9YDtcbiAgICBjb25zdCBpZCA9IHBvcHBlci5pZDtcbiAgICBjb25zdCBub2RlcyA9IG5vcm1hbGl6ZVRvQXJyYXkoaW5zdGFuY2UucHJvcHMudHJpZ2dlclRhcmdldCB8fCByZWZlcmVuY2UpO1xuXG4gICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cik7XG5cbiAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgY3VycmVudFZhbHVlID8gYCR7Y3VycmVudFZhbHVlfSAke2lkfWAgOiBpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXh0VmFsdWUgPSBjdXJyZW50VmFsdWUgJiYgY3VycmVudFZhbHVlLnJlcGxhY2UoaWQsICcnKS50cmltKCk7XG5cbiAgICAgICAgaWYgKG5leHRWYWx1ZSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIG5leHRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpOiB2b2lkIHtcbiAgICBpZiAoaGFzQXJpYUV4cGFuZGVkIHx8ICFpbnN0YW5jZS5wcm9wcy5hcmlhLmV4cGFuZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm9kZXMgPSBub3JtYWxpemVUb0FycmF5KGluc3RhbmNlLnByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTtcblxuICAgIG5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAnYXJpYS1leHBhbmRlZCcsXG4gICAgICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIG5vZGUgPT09IGdldEN1cnJlbnRUYXJnZXQoKVxuICAgICAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgICAgIDogJ2ZhbHNlJ1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzKCk6IHZvaWQge1xuICAgIGdldERvY3VtZW50KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIG1vdXNlTW92ZUxpc3RlbmVycyA9IG1vdXNlTW92ZUxpc3RlbmVycy5maWx0ZXIoXG4gICAgICAobGlzdGVuZXIpID0+IGxpc3RlbmVyICE9PSBkZWJvdW5jZWRPbk1vdXNlTW92ZVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkRvY3VtZW50UHJlc3MoZXZlbnQ6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgLy8gTW92ZWQgZmluZ2VyIHRvIHNjcm9sbCBpbnN0ZWFkIG9mIGFuIGludGVudGlvbmFsIHRhcCBvdXRzaWRlXG4gICAgaWYgKGN1cnJlbnRJbnB1dC5pc1RvdWNoKSB7XG4gICAgICBpZiAoZGlkVG91Y2hNb3ZlIHx8IGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDbGlja2VkIG9uIGludGVyYWN0aXZlIHBvcHBlclxuICAgIGlmIChcbiAgICAgIGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmXG4gICAgICBwb3BwZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xpY2tlZCBvbiB0aGUgZXZlbnQgbGlzdGVuZXJzIHRhcmdldFxuICAgIGlmIChnZXRDdXJyZW50VGFyZ2V0KCkuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQpKSB7XG4gICAgICBpZiAoY3VycmVudElucHV0LmlzVG91Y2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJlxuICAgICAgICBpbnN0YW5jZS5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ2NsaWNrJykgPj0gMFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW52b2tlSG9vaygnb25DbGlja091dHNpZGUnLCBbaW5zdGFuY2UsIGV2ZW50XSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrID09PSB0cnVlKSB7XG4gICAgICBpbnN0YW5jZS5jbGVhckRlbGF5VGltZW91dHMoKTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcblxuICAgICAgLy8gYG1vdXNlZG93bmAgZXZlbnQgaXMgZmlyZWQgcmlnaHQgYmVmb3JlIGBmb2N1c2AgaWYgcHJlc3NpbmcgdGhlXG4gICAgICAvLyBjdXJyZW50VGFyZ2V0LiBUaGlzIGxldHMgYSB0aXBweSB3aXRoIGBmb2N1c2AgdHJpZ2dlciBrbm93IHRoYXQgaXRcbiAgICAgIC8vIHNob3VsZCBub3Qgc2hvd1xuICAgICAgZGlkSGlkZUR1ZVRvRG9jdW1lbnRNb3VzZURvd24gPSB0cnVlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGRpZEhpZGVEdWVUb0RvY3VtZW50TW91c2VEb3duID0gZmFsc2U7XG4gICAgICB9KTtcblxuICAgICAgLy8gVGhlIGxpc3RlbmVyIGdldHMgYWRkZWQgaW4gYHNjaGVkdWxlU2hvdygpYCwgYnV0IHRoaXMgbWF5IGJlIGhpZGluZyBpdFxuICAgICAgLy8gYmVmb3JlIGl0IHNob3dzLCBhbmQgaGlkZSgpJ3MgZWFybHkgYmFpbC1vdXQgYmVoYXZpb3IgY2FuIHByZXZlbnQgaXRcbiAgICAgIC8vIGZyb20gYmVpbmcgY2xlYW5lZCB1cFxuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgcmVtb3ZlRG9jdW1lbnRQcmVzcygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKCk6IHZvaWQge1xuICAgIGRpZFRvdWNoTW92ZSA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoKTogdm9pZCB7XG4gICAgZGlkVG91Y2hNb3ZlID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBhZGREb2N1bWVudFByZXNzKCk6IHZvaWQge1xuICAgIGNvbnN0IGRvYyA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uRG9jdW1lbnRQcmVzcywgdHJ1ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Eb2N1bWVudFByZXNzLCBUT1VDSF9PUFRJT05TKTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgVE9VQ0hfT1BUSU9OUyk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBUT1VDSF9PUFRJT05TKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZURvY3VtZW50UHJlc3MoKTogdm9pZCB7XG4gICAgY29uc3QgZG9jID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Eb2N1bWVudFByZXNzLCB0cnVlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvbkRvY3VtZW50UHJlc3MsIFRPVUNIX09QVElPTlMpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBUT1VDSF9PUFRJT05TKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUsIFRPVUNIX09QVElPTlMpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRPdXQoZHVyYXRpb246IG51bWJlciwgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSAmJlxuICAgICAgICBwb3BwZXIucGFyZW50Tm9kZSAmJlxuICAgICAgICBwb3BwZXIucGFyZW50Tm9kZS5jb250YWlucyhwb3BwZXIpXG4gICAgICApIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb246IG51bWJlciwgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbjogbnVtYmVyLCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIGNvbnN0IGJveCA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCkuYm94O1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQ6IFRyYW5zaXRpb25FdmVudCk6IHZvaWQge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gYm94KSB7XG4gICAgICAgIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcihib3gsICdyZW1vdmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWFrZSBjYWxsYmFjayBzeW5jaHJvbm91cyBpZiBkdXJhdGlvbiBpcyAwXG4gICAgLy8gYHRyYW5zaXRpb25lbmRgIHdvbid0IGZpcmUgb3RoZXJ3aXNlXG4gICAgaWYgKGR1cmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIoYm94LCAncmVtb3ZlJywgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lcik7XG4gICAgdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKGJveCwgJ2FkZCcsIGxpc3RlbmVyKTtcblxuICAgIGN1cnJlbnRUcmFuc2l0aW9uRW5kTGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIsXG4gICAgb3B0aW9uczogYm9vbGVhbiB8IG9iamVjdCA9IGZhbHNlXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG5vZGVzID0gbm9ybWFsaXplVG9BcnJheShpbnN0YW5jZS5wcm9wcy50cmlnZ2VyVGFyZ2V0IHx8IHJlZmVyZW5jZSk7XG4gICAgbm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICBsaXN0ZW5lcnMucHVzaCh7bm9kZSwgZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgaWYgKGdldElzQ3VzdG9tVG91Y2hCZWhhdmlvcigpKSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwge3Bhc3NpdmU6IHRydWV9KTtcbiAgICAgIG9uKCd0b3VjaGVuZCcsIG9uTW91c2VMZWF2ZSBhcyBFdmVudExpc3RlbmVyLCB7cGFzc2l2ZTogdHJ1ZX0pO1xuICAgIH1cblxuICAgIHNwbGl0QnlTcGFjZXMoaW5zdGFuY2UucHJvcHMudHJpZ2dlcikuZm9yRWFjaCgoZXZlbnRUeXBlKSA9PiB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG9uKGV2ZW50VHlwZSwgb25UcmlnZ2VyKTtcblxuICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgb24oJ21vdXNlbGVhdmUnLCBvbk1vdXNlTGVhdmUgYXMgRXZlbnRMaXN0ZW5lcik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgICAgICBvbihpc0lFID8gJ2ZvY3Vzb3V0JyA6ICdibHVyJywgb25CbHVyT3JGb2N1c091dCBhcyBFdmVudExpc3RlbmVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZm9jdXNpbic6XG4gICAgICAgICAgb24oJ2ZvY3Vzb3V0Jywgb25CbHVyT3JGb2N1c091dCBhcyBFdmVudExpc3RlbmVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycygpOiB2b2lkIHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaCgoe25vZGUsIGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9uc306IExpc3RlbmVyT2JqZWN0KSA9PiB7XG4gICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgICBsaXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJpZ2dlcihldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBsZXQgc2hvdWxkU2NoZWR1bGVDbGlja0hpZGUgPSBmYWxzZTtcblxuICAgIGlmIChcbiAgICAgICFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgfHxcbiAgICAgIGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHx8XG4gICAgICBkaWRIaWRlRHVlVG9Eb2N1bWVudE1vdXNlRG93blxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHdhc0ZvY3VzZWQgPSBsYXN0VHJpZ2dlckV2ZW50Py50eXBlID09PSAnZm9jdXMnO1xuXG4gICAgbGFzdFRyaWdnZXJFdmVudCA9IGV2ZW50O1xuICAgIGN1cnJlbnRUYXJnZXQgPSBldmVudC5jdXJyZW50VGFyZ2V0IGFzIEVsZW1lbnQ7XG5cbiAgICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlICYmIGlzTW91c2VFdmVudChldmVudCkpIHtcbiAgICAgIC8vIElmIHNjcm9sbGluZywgYG1vdXNlZW50ZXJgIGV2ZW50cyBjYW4gYmUgZmlyZWQgaWYgdGhlIGN1cnNvciBsYW5kc1xuICAgICAgLy8gb3ZlciBhIG5ldyB0YXJnZXQsIGJ1dCBgbW91c2Vtb3ZlYCBldmVudHMgZG9uJ3QgZ2V0IGZpcmVkLiBUaGlzXG4gICAgICAvLyBjYXVzZXMgaW50ZXJhY3RpdmUgdG9vbHRpcHMgdG8gZ2V0IHN0dWNrIG9wZW4gdW50aWwgdGhlIGN1cnNvciBpc1xuICAgICAgLy8gbW92ZWRcbiAgICAgIG1vdXNlTW92ZUxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIoZXZlbnQpKTtcbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgc2hvdy9oaWRlIHdoZW4gY2xpY2tpbmcgY2xpY2stdHJpZ2dlcmVkIHRvb2x0aXBzXG4gICAgaWYgKFxuICAgICAgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJlxuICAgICAgKGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignbW91c2VlbnRlcicpIDwgMCB8fFxuICAgICAgICBpc1Zpc2libGVGcm9tQ2xpY2spICYmXG4gICAgICBpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gZmFsc2UgJiZcbiAgICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZVxuICAgICkge1xuICAgICAgc2hvdWxkU2NoZWR1bGVDbGlja0hpZGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICBpc1Zpc2libGVGcm9tQ2xpY2sgPSAhc2hvdWxkU2NoZWR1bGVDbGlja0hpZGU7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFNjaGVkdWxlQ2xpY2tIaWRlICYmICF3YXNGb2N1c2VkKSB7XG4gICAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIE5vZGU7XG4gICAgY29uc3QgaXNDdXJzb3JPdmVyUmVmZXJlbmNlT3JQb3BwZXIgPVxuICAgICAgZ2V0Q3VycmVudFRhcmdldCgpLmNvbnRhaW5zKHRhcmdldCkgfHwgcG9wcGVyLmNvbnRhaW5zKHRhcmdldCk7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlbW92ZScgJiYgaXNDdXJzb3JPdmVyUmVmZXJlbmNlT3JQb3BwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwb3BwZXJUcmVlRGF0YSA9IGdldE5lc3RlZFBvcHBlclRyZWUoKVxuICAgICAgLmNvbmNhdChwb3BwZXIpXG4gICAgICAubWFwKChwb3BwZXIpID0+IHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBwb3BwZXIuX3RpcHB5ITtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZT8uc3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvcHBlclJlY3Q6IHBvcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIHBvcHBlclN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pIGFzIFBvcHBlclRyZWVEYXRhW107XG5cbiAgICBpZiAoaXNDdXJzb3JPdXRzaWRlSW50ZXJhY3RpdmVCb3JkZXIocG9wcGVyVHJlZURhdGEsIGV2ZW50KSkge1xuICAgICAgY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIHNjaGVkdWxlSGlkZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3Qgc2hvdWxkQmFpbCA9XG4gICAgICBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSB8fFxuICAgICAgKGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignY2xpY2snKSA+PSAwICYmIGlzVmlzaWJsZUZyb21DbGljayk7XG5cbiAgICBpZiAoc2hvdWxkQmFpbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgaW5zdGFuY2UuaGlkZVdpdGhJbnRlcmFjdGl2aXR5KGV2ZW50KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25CbHVyT3JGb2N1c091dChldmVudDogRm9jdXNFdmVudCk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIGluc3RhbmNlLnByb3BzLnRyaWdnZXIuaW5kZXhPZignZm9jdXNpbicpIDwgMCAmJlxuICAgICAgZXZlbnQudGFyZ2V0ICE9PSBnZXRDdXJyZW50VGFyZ2V0KClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBmb2N1cyB3YXMgbW92ZWQgdG8gd2l0aGluIHRoZSBwb3BwZXJcbiAgICBpZiAoXG4gICAgICBpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJlxuICAgICAgZXZlbnQucmVsYXRlZFRhcmdldCAmJlxuICAgICAgcG9wcGVyLmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQgYXMgRWxlbWVudClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNFdmVudExpc3RlbmVyU3RvcHBlZChldmVudDogRXZlbnQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gY3VycmVudElucHV0LmlzVG91Y2hcbiAgICAgID8gZ2V0SXNDdXN0b21Ub3VjaEJlaGF2aW9yKCkgIT09IGV2ZW50LnR5cGUuaW5kZXhPZigndG91Y2gnKSA+PSAwXG4gICAgICA6IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUG9wcGVySW5zdGFuY2UoKTogdm9pZCB7XG4gICAgZGVzdHJveVBvcHBlckluc3RhbmNlKCk7XG5cbiAgICBjb25zdCB7XG4gICAgICBwb3BwZXJPcHRpb25zLFxuICAgICAgcGxhY2VtZW50LFxuICAgICAgb2Zmc2V0LFxuICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICAgIG1vdmVUcmFuc2l0aW9uLFxuICAgIH0gPSBpbnN0YW5jZS5wcm9wcztcblxuICAgIGNvbnN0IGFycm93ID0gZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSA/IGdldENoaWxkcmVuKHBvcHBlcikuYXJyb3cgOiBudWxsO1xuXG4gICAgY29uc3QgY29tcHV0ZWRSZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VDbGllbnRSZWN0XG4gICAgICA/IHtcbiAgICAgICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGdldFJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgICAgICAgY29udGV4dEVsZW1lbnQ6XG4gICAgICAgICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0LmNvbnRleHRFbGVtZW50IHx8IGdldEN1cnJlbnRUYXJnZXQoKSxcbiAgICAgICAgfVxuICAgICAgOiByZWZlcmVuY2U7XG5cbiAgICBjb25zdCB0aXBweU1vZGlmaWVyOiBNb2RpZmllcjwnJCR0aXBweScsIHt9PiA9IHtcbiAgICAgIG5hbWU6ICckJHRpcHB5JyxcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgICAgIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXSxcbiAgICAgIGZuKHtzdGF0ZX0pIHtcbiAgICAgICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgICAgICBjb25zdCB7Ym94fSA9IGdldERlZmF1bHRUZW1wbGF0ZUNoaWxkcmVuKCk7XG5cbiAgICAgICAgICBbJ3BsYWNlbWVudCcsICdyZWZlcmVuY2UtaGlkZGVuJywgJ2VzY2FwZWQnXS5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXR0ciA9PT0gJ3BsYWNlbWVudCcpIHtcbiAgICAgICAgICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1wbGFjZW1lbnQnLCBzdGF0ZS5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyW2BkYXRhLXBvcHBlci0ke2F0dHJ9YF0pIHtcbiAgICAgICAgICAgICAgICBib3guc2V0QXR0cmlidXRlKGBkYXRhLSR7YXR0cn1gLCAnJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm94LnJlbW92ZUF0dHJpYnV0ZShgZGF0YS0ke2F0dHJ9YCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0ge307XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcblxuICAgIHR5cGUgVGlwcHlNb2RpZmllciA9IE1vZGlmaWVyPCckJHRpcHB5Jywge30+O1xuICAgIHR5cGUgRXh0ZW5kZWRNb2RpZmllcnMgPSBTdHJpY3RNb2RpZmllcnMgfCBQYXJ0aWFsPFRpcHB5TW9kaWZpZXI+O1xuXG4gICAgY29uc3QgbW9kaWZpZXJzOiBBcnJheTxFeHRlbmRlZE1vZGlmaWVycz4gPSBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgb2Zmc2V0LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICB0b3A6IDIsXG4gICAgICAgICAgICBib3R0b206IDIsXG4gICAgICAgICAgICBsZWZ0OiA1LFxuICAgICAgICAgICAgcmlnaHQ6IDUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdmbGlwJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIHBhZGRpbmc6IDUsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBhZGFwdGl2ZTogIW1vdmVUcmFuc2l0aW9uLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRpcHB5TW9kaWZpZXIsXG4gICAgXTtcblxuICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpICYmIGFycm93KSB7XG4gICAgICBtb2RpZmllcnMucHVzaCh7XG4gICAgICAgIG5hbWU6ICdhcnJvdycsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBlbGVtZW50OiBhcnJvdyxcbiAgICAgICAgICBwYWRkaW5nOiAzLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbW9kaWZpZXJzLnB1c2goLi4uKHBvcHBlck9wdGlvbnM/Lm1vZGlmaWVycyB8fCBbXSkpO1xuXG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UgPSBjcmVhdGVQb3BwZXI8RXh0ZW5kZWRNb2RpZmllcnM+KFxuICAgICAgY29tcHV0ZWRSZWZlcmVuY2UsXG4gICAgICBwb3BwZXIsXG4gICAgICB7XG4gICAgICAgIC4uLnBvcHBlck9wdGlvbnMsXG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgb25GaXJzdFVwZGF0ZSxcbiAgICAgICAgbW9kaWZpZXJzLFxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95UG9wcGVySW5zdGFuY2UoKTogdm9pZCB7XG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91bnQoKTogdm9pZCB7XG4gICAgY29uc3Qge2FwcGVuZFRvfSA9IGluc3RhbmNlLnByb3BzO1xuXG4gICAgbGV0IHBhcmVudE5vZGU6IGFueTtcblxuICAgIC8vIEJ5IGRlZmF1bHQsIHdlJ2xsIGFwcGVuZCB0aGUgcG9wcGVyIHRvIHRoZSB0cmlnZ2VyVGFyZ2V0cydzIHBhcmVudE5vZGUgc29cbiAgICAvLyBpdCdzIGRpcmVjdGx5IGFmdGVyIHRoZSByZWZlcmVuY2UgZWxlbWVudCBzbyB0aGUgZWxlbWVudHMgaW5zaWRlIHRoZVxuICAgIC8vIHRpcHB5IGNhbiBiZSB0YWJiZWQgdG9cbiAgICAvLyBJZiB0aGVyZSBhcmUgY2xpcHBpbmcgaXNzdWVzLCB0aGUgdXNlciBjYW4gc3BlY2lmeSBhIGRpZmZlcmVudCBhcHBlbmRUb1xuICAgIC8vIGFuZCBlbnN1cmUgZm9jdXMgbWFuYWdlbWVudCBpcyBoYW5kbGVkIGNvcnJlY3RseSBtYW51YWxseVxuICAgIGNvbnN0IG5vZGUgPSBnZXRDdXJyZW50VGFyZ2V0KCk7XG5cbiAgICBpZiAoXG4gICAgICAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgYXBwZW5kVG8gPT09IGRlZmF1bHRQcm9wcy5hcHBlbmRUbykgfHxcbiAgICAgIGFwcGVuZFRvID09PSAncGFyZW50J1xuICAgICkge1xuICAgICAgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZSA9IGludm9rZVdpdGhBcmdzT3JSZXR1cm4oYXBwZW5kVG8sIFtub2RlXSk7XG4gICAgfVxuXG4gICAgLy8gVGhlIHBvcHBlciBlbGVtZW50IG5lZWRzIHRvIGV4aXN0IG9uIHRoZSBET00gYmVmb3JlIGl0cyBwb3NpdGlvbiBjYW4gYmVcbiAgICAvLyB1cGRhdGVkIGFzIFBvcHBlciBuZWVkcyB0byByZWFkIGl0cyBkaW1lbnNpb25zXG4gICAgaWYgKCFwYXJlbnROb2RlLmNvbnRhaW5zKHBvcHBlcikpIHtcbiAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQocG9wcGVyKTtcbiAgICB9XG5cbiAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgLy8gQWNjZXNzaWJpbGl0eSBjaGVja1xuICAgICAgd2FybldoZW4oXG4gICAgICAgIGluc3RhbmNlLnByb3BzLmludGVyYWN0aXZlICYmXG4gICAgICAgICAgYXBwZW5kVG8gPT09IGRlZmF1bHRQcm9wcy5hcHBlbmRUbyAmJlxuICAgICAgICAgIG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nICE9PSBwb3BwZXIsXG4gICAgICAgIFtcbiAgICAgICAgICAnSW50ZXJhY3RpdmUgdGlwcHkgZWxlbWVudCBtYXkgbm90IGJlIGFjY2Vzc2libGUgdmlhIGtleWJvYXJkJyxcbiAgICAgICAgICAnbmF2aWdhdGlvbiBiZWNhdXNlIGl0IGlzIG5vdCBkaXJlY3RseSBhZnRlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnQnLFxuICAgICAgICAgICdpbiB0aGUgRE9NIHNvdXJjZSBvcmRlci4nLFxuICAgICAgICAgICdcXG5cXG4nLFxuICAgICAgICAgICdVc2luZyBhIHdyYXBwZXIgPGRpdj4gb3IgPHNwYW4+IHRhZyBhcm91bmQgdGhlIHJlZmVyZW5jZSBlbGVtZW50JyxcbiAgICAgICAgICAnc29sdmVzIHRoaXMgYnkgY3JlYXRpbmcgYSBuZXcgcGFyZW50Tm9kZSBjb250ZXh0LicsXG4gICAgICAgICAgJ1xcblxcbicsXG4gICAgICAgICAgJ1NwZWNpZnlpbmcgYGFwcGVuZFRvOiBkb2N1bWVudC5ib2R5YCBzaWxlbmNlcyB0aGlzIHdhcm5pbmcsIGJ1dCBpdCcsXG4gICAgICAgICAgJ2Fzc3VtZXMgeW91IGFyZSB1c2luZyBhIGZvY3VzIG1hbmFnZW1lbnQgc29sdXRpb24gdG8gaGFuZGxlJyxcbiAgICAgICAgICAna2V5Ym9hcmQgbmF2aWdhdGlvbi4nLFxuICAgICAgICAgICdcXG5cXG4nLFxuICAgICAgICAgICdTZWU6IGh0dHBzOi8vYXRvbWlrcy5naXRodWIuaW8vdGlwcHlqcy92Ni9hY2Nlc3NpYmlsaXR5LyNpbnRlcmFjdGl2aXR5JyxcbiAgICAgICAgXS5qb2luKCcgJylcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmVzdGVkUG9wcGVyVHJlZSgpOiBQb3BwZXJFbGVtZW50W10ge1xuICAgIHJldHVybiBhcnJheUZyb20oXG4gICAgICBwb3BwZXIucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtX19OQU1FU1BBQ0VfUFJFRklYX18tcm9vdF0nKVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVNob3coZXZlbnQ/OiBFdmVudCk6IHZvaWQge1xuICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBpbnZva2VIb29rKCdvblRyaWdnZXInLCBbaW5zdGFuY2UsIGV2ZW50XSk7XG4gICAgfVxuXG4gICAgYWRkRG9jdW1lbnRQcmVzcygpO1xuXG4gICAgbGV0IGRlbGF5ID0gZ2V0RGVsYXkodHJ1ZSk7XG4gICAgY29uc3QgW3RvdWNoVmFsdWUsIHRvdWNoRGVsYXldID0gZ2V0Tm9ybWFsaXplZFRvdWNoU2V0dGluZ3MoKTtcblxuICAgIGlmIChjdXJyZW50SW5wdXQuaXNUb3VjaCAmJiB0b3VjaFZhbHVlID09PSAnaG9sZCcgJiYgdG91Y2hEZWxheSkge1xuICAgICAgZGVsYXkgPSB0b3VjaERlbGF5O1xuICAgIH1cblxuICAgIGlmIChkZWxheSkge1xuICAgICAgc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaW5zdGFuY2Uuc2hvdygpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVIaWRlKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuXG4gICAgaW52b2tlSG9vaygnb25VbnRyaWdnZXInLCBbaW5zdGFuY2UsIGV2ZW50XSk7XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgcmVtb3ZlRG9jdW1lbnRQcmVzcygpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRm9yIGludGVyYWN0aXZlIHRpcHBpZXMsIHNjaGVkdWxlSGlkZSBpcyBhZGRlZCB0byBhIGRvY3VtZW50LmJvZHkgaGFuZGxlclxuICAgIC8vIGZyb20gb25Nb3VzZUxlYXZlIHNvIG11c3QgaW50ZXJjZXB0IHNjaGVkdWxlZCBoaWRlcyBmcm9tIG1vdXNlbW92ZS9sZWF2ZVxuICAgIC8vIGV2ZW50cyB3aGVuIHRyaWdnZXIgY29udGFpbnMgbW91c2VlbnRlciBhbmQgY2xpY2ssIGFuZCB0aGUgdGlwIGlzXG4gICAgLy8gY3VycmVudGx5IHNob3duIGFzIGEgcmVzdWx0IG9mIGEgY2xpY2suXG4gICAgaWYgKFxuICAgICAgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdtb3VzZWVudGVyJykgPj0gMCAmJlxuICAgICAgaW5zdGFuY2UucHJvcHMudHJpZ2dlci5pbmRleE9mKCdjbGljaycpID49IDAgJiZcbiAgICAgIFsnbW91c2VsZWF2ZScsICdtb3VzZW1vdmUnXS5pbmRleE9mKGV2ZW50LnR5cGUpID49IDAgJiZcbiAgICAgIGlzVmlzaWJsZUZyb21DbGlja1xuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlbGF5ID0gZ2V0RGVsYXkoZmFsc2UpO1xuXG4gICAgaWYgKGRlbGF5KSB7XG4gICAgICBoaWRlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpeGVzIGEgYHRyYW5zaXRpb25lbmRgIHByb2JsZW0gd2hlbiBpdCBmaXJlcyAxIGZyYW1lIHRvb1xuICAgICAgLy8gbGF0ZSBzb21ldGltZXMsIHdlIGRvbid0IHdhbnQgaGlkZSgpIHRvIGJlIGNhbGxlZC5cbiAgICAgIHNjaGVkdWxlSGlkZUFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIPCflJEgUHVibGljIG1ldGhvZHNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGZ1bmN0aW9uIGVuYWJsZSgpOiB2b2lkIHtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpOiB2b2lkIHtcbiAgICAvLyBEaXNhYmxpbmcgdGhlIGluc3RhbmNlIHNob3VsZCBhbHNvIGhpZGUgaXRcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXRvbWlrcy90aXBweS5qcy1yZWFjdC9pc3N1ZXMvMTA2XG4gICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJEZWxheVRpbWVvdXRzKCk6IHZvaWQge1xuICAgIGNsZWFyVGltZW91dChzaG93VGltZW91dCk7XG4gICAgY2xlYXJUaW1lb3V0KGhpZGVUaW1lb3V0KTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShzY2hlZHVsZUhpZGVBbmltYXRpb25GcmFtZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcm9wcyhwYXJ0aWFsUHJvcHM6IFBhcnRpYWw8UHJvcHM+KTogdm9pZCB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgd2FybldoZW4oaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQsIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKCdzZXRQcm9wcycpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZva2VIb29rKCdvbkJlZm9yZVVwZGF0ZScsIFtpbnN0YW5jZSwgcGFydGlhbFByb3BzXSk7XG5cbiAgICByZW1vdmVMaXN0ZW5lcnMoKTtcblxuICAgIGNvbnN0IHByZXZQcm9wcyA9IGluc3RhbmNlLnByb3BzO1xuICAgIGNvbnN0IG5leHRQcm9wcyA9IGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCB7XG4gICAgICAuLi5pbnN0YW5jZS5wcm9wcyxcbiAgICAgIC4uLnBhcnRpYWxQcm9wcyxcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgfSk7XG5cbiAgICBpbnN0YW5jZS5wcm9wcyA9IG5leHRQcm9wcztcblxuICAgIGFkZExpc3RlbmVycygpO1xuXG4gICAgaWYgKHByZXZQcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlICE9PSBuZXh0UHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZSkge1xuICAgICAgY2xlYW51cEludGVyYWN0aXZlTW91c2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlYm91bmNlZE9uTW91c2VNb3ZlID0gZGVib3VuY2UoXG4gICAgICAgIG9uTW91c2VNb3ZlLFxuICAgICAgICBuZXh0UHJvcHMuaW50ZXJhY3RpdmVEZWJvdW5jZVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgc3RhbGUgYXJpYS1leHBhbmRlZCBhdHRyaWJ1dGVzIGFyZSByZW1vdmVkXG4gICAgaWYgKHByZXZQcm9wcy50cmlnZ2VyVGFyZ2V0ICYmICFuZXh0UHJvcHMudHJpZ2dlclRhcmdldCkge1xuICAgICAgbm9ybWFsaXplVG9BcnJheShwcmV2UHJvcHMudHJpZ2dlclRhcmdldCkuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChuZXh0UHJvcHMudHJpZ2dlclRhcmdldCkge1xuICAgICAgcmVmZXJlbmNlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpO1xuICAgIH1cblxuICAgIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuICAgIGhhbmRsZVN0eWxlcygpO1xuXG4gICAgaWYgKG9uVXBkYXRlKSB7XG4gICAgICBvblVwZGF0ZShwcmV2UHJvcHMsIG5leHRQcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICAvLyBGaXhlcyBhbiBpc3N1ZSB3aXRoIG5lc3RlZCB0aXBwaWVzIGlmIHRoZXkgYXJlIGFsbCBnZXR0aW5nIHJlLXJlbmRlcmVkLFxuICAgICAgLy8gYW5kIHRoZSBuZXN0ZWQgb25lcyBnZXQgcmUtcmVuZGVyZWQgZmlyc3QuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXRvbWlrcy90aXBweWpzLXJlYWN0L2lzc3Vlcy8xNzdcbiAgICAgIC8vIFRPRE86IGZpbmQgYSBjbGVhbmVyIC8gbW9yZSBlZmZpY2llbnQgc29sdXRpb24oISlcbiAgICAgIGdldE5lc3RlZFBvcHBlclRyZWUoKS5mb3JFYWNoKChuZXN0ZWRQb3BwZXIpID0+IHtcbiAgICAgICAgLy8gUmVhY3QgKGFuZCBvdGhlciBVSSBsaWJzIGxpa2VseSkgcmVxdWlyZXMgYSByQUYgd3JhcHBlciBhcyBpdCBmbHVzaGVzXG4gICAgICAgIC8vIGl0cyB3b3JrIGluIG9uZVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmVzdGVkUG9wcGVyLl90aXBweSEucG9wcGVySW5zdGFuY2UhLmZvcmNlVXBkYXRlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGludm9rZUhvb2soJ29uQWZ0ZXJVcGRhdGUnLCBbaW5zdGFuY2UsIHBhcnRpYWxQcm9wc10pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudChjb250ZW50OiBDb250ZW50KTogdm9pZCB7XG4gICAgaW5zdGFuY2Uuc2V0UHJvcHMoe2NvbnRlbnR9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3coKTogdm9pZCB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgd2FybldoZW4oaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQsIGNyZWF0ZU1lbW9yeUxlYWtXYXJuaW5nKCdzaG93JykpO1xuICAgIH1cblxuICAgIC8vIEVhcmx5IGJhaWwtb3V0XG4gICAgY29uc3QgaXNBbHJlYWR5VmlzaWJsZSA9IGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZTtcbiAgICBjb25zdCBpc0Rlc3Ryb3llZCA9IGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkO1xuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSAhaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkO1xuICAgIGNvbnN0IGlzVG91Y2hBbmRUb3VjaERpc2FibGVkID1cbiAgICAgIGN1cnJlbnRJbnB1dC5pc1RvdWNoICYmICFpbnN0YW5jZS5wcm9wcy50b3VjaDtcbiAgICBjb25zdCBkdXJhdGlvbiA9IGdldFZhbHVlQXRJbmRleE9yUmV0dXJuKFxuICAgICAgaW5zdGFuY2UucHJvcHMuZHVyYXRpb24sXG4gICAgICAwLFxuICAgICAgZGVmYXVsdFByb3BzLmR1cmF0aW9uXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgIGlzQWxyZWFkeVZpc2libGUgfHxcbiAgICAgIGlzRGVzdHJveWVkIHx8XG4gICAgICBpc0Rpc2FibGVkIHx8XG4gICAgICBpc1RvdWNoQW5kVG91Y2hEaXNhYmxlZFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE5vcm1hbGl6ZSBgZGlzYWJsZWRgIGJlaGF2aW9yIGFjcm9zcyBicm93c2Vycy5cbiAgICAvLyBGaXJlZm94IGFsbG93cyBldmVudHMgb24gZGlzYWJsZWQgZWxlbWVudHMsIGJ1dCBDaHJvbWUgZG9lc24ndC5cbiAgICAvLyBVc2luZyBhIHdyYXBwZXIgZWxlbWVudCAoaS5lLiA8c3Bhbj4pIGlzIHJlY29tbWVuZGVkLlxuICAgIGlmIChnZXRDdXJyZW50VGFyZ2V0KCkuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52b2tlSG9vaygnb25TaG93JywgW2luc3RhbmNlXSwgZmFsc2UpO1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vblNob3coaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgcG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuXG4gICAgaGFuZGxlU3R5bGVzKCk7XG4gICAgYWRkRG9jdW1lbnRQcmVzcygpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHBvcHBlci5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgIH1cblxuICAgIC8vIElmIGZsaXBwaW5nIHRvIHRoZSBvcHBvc2l0ZSBzaWRlIGFmdGVyIGhpZGluZyBhdCBsZWFzdCBvbmNlLCB0aGVcbiAgICAvLyBhbmltYXRpb24gd2lsbCB1c2UgdGhlIHdyb25nIHBsYWNlbWVudCB3aXRob3V0IHJlc2V0dGluZyB0aGUgZHVyYXRpb25cbiAgICBpZiAoZ2V0SXNEZWZhdWx0UmVuZGVyRm4oKSkge1xuICAgICAgY29uc3Qge2JveCwgY29udGVudH0gPSBnZXREZWZhdWx0VGVtcGxhdGVDaGlsZHJlbigpO1xuICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtib3gsIGNvbnRlbnRdLCAwKTtcbiAgICB9XG5cbiAgICBvbkZpcnN0VXBkYXRlID0gKCk6IHZvaWQgPT4ge1xuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgfHwgaWdub3JlT25GaXJzdFVwZGF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlnbm9yZU9uRmlyc3RVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAvLyByZWZsb3dcbiAgICAgIHZvaWQgcG9wcGVyLm9mZnNldEhlaWdodDtcblxuICAgICAgcG9wcGVyLnN0eWxlLnRyYW5zaXRpb24gPSBpbnN0YW5jZS5wcm9wcy5tb3ZlVHJhbnNpdGlvbjtcblxuICAgICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkgJiYgaW5zdGFuY2UucHJvcHMuYW5pbWF0aW9uKSB7XG4gICAgICAgIGNvbnN0IHtib3gsIGNvbnRlbnR9ID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtib3gsIGNvbnRlbnRdLCBkdXJhdGlvbik7XG4gICAgICAgIHNldFZpc2liaWxpdHlTdGF0ZShbYm94LCBjb250ZW50XSwgJ3Zpc2libGUnKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUoKTtcbiAgICAgIGhhbmRsZUFyaWFFeHBhbmRlZEF0dHJpYnV0ZSgpO1xuXG4gICAgICBwdXNoSWZVbmlxdWUobW91bnRlZEluc3RhbmNlcywgaW5zdGFuY2UpO1xuXG4gICAgICAvLyBjZXJ0YWluIG1vZGlmaWVycyAoZS5nLiBgbWF4U2l6ZWApIHJlcXVpcmUgYSBzZWNvbmQgdXBkYXRlIGFmdGVyIHRoZVxuICAgICAgLy8gcG9wcGVyIGhhcyBiZWVuIHBvc2l0aW9uZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZT8uZm9yY2VVcGRhdGUoKTtcblxuICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGludm9rZUhvb2soJ29uTW91bnQnLCBbaW5zdGFuY2VdKTtcblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFuaW1hdGlvbiAmJiBnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbmVkSW4oZHVyYXRpb24sICgpID0+IHtcbiAgICAgICAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gdHJ1ZTtcbiAgICAgICAgICBpbnZva2VIb29rKCdvblNob3duJywgW2luc3RhbmNlXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBtb3VudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGlkZSgpOiB2b2lkIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCwgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ2hpZGUnKSk7XG4gICAgfVxuXG4gICAgLy8gRWFybHkgYmFpbC1vdXRcbiAgICBjb25zdCBpc0FscmVhZHlIaWRkZW4gPSAhaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlO1xuICAgIGNvbnN0IGlzRGVzdHJveWVkID0gaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQ7XG4gICAgY29uc3QgaXNEaXNhYmxlZCA9ICFpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQ7XG4gICAgY29uc3QgZHVyYXRpb24gPSBnZXRWYWx1ZUF0SW5kZXhPclJldHVybihcbiAgICAgIGluc3RhbmNlLnByb3BzLmR1cmF0aW9uLFxuICAgICAgMSxcbiAgICAgIGRlZmF1bHRQcm9wcy5kdXJhdGlvblxuICAgICk7XG5cbiAgICBpZiAoaXNBbHJlYWR5SGlkZGVuIHx8IGlzRGVzdHJveWVkIHx8IGlzRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZva2VIb29rKCdvbkhpZGUnLCBbaW5zdGFuY2VdLCBmYWxzZSk7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLm9uSGlkZShpbnN0YW5jZSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlID0gZmFsc2U7XG4gICAgaW5zdGFuY2Uuc3RhdGUuaXNTaG93biA9IGZhbHNlO1xuICAgIGlnbm9yZU9uRmlyc3RVcGRhdGUgPSBmYWxzZTtcbiAgICBpc1Zpc2libGVGcm9tQ2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICBwb3BwZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIH1cblxuICAgIGNsZWFudXBJbnRlcmFjdGl2ZU1vdXNlTGlzdGVuZXJzKCk7XG4gICAgcmVtb3ZlRG9jdW1lbnRQcmVzcygpO1xuICAgIGhhbmRsZVN0eWxlcygpO1xuXG4gICAgaWYgKGdldElzRGVmYXVsdFJlbmRlckZuKCkpIHtcbiAgICAgIGNvbnN0IHtib3gsIGNvbnRlbnR9ID0gZ2V0RGVmYXVsdFRlbXBsYXRlQ2hpbGRyZW4oKTtcblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmFuaW1hdGlvbikge1xuICAgICAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW2JveCwgY29udGVudF0sIGR1cmF0aW9uKTtcbiAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFtib3gsIGNvbnRlbnRdLCAnaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQXJpYUNvbnRlbnRBdHRyaWJ1dGUoKTtcbiAgICBoYW5kbGVBcmlhRXhwYW5kZWRBdHRyaWJ1dGUoKTtcblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hbmltYXRpb24pIHtcbiAgICAgIGlmIChnZXRJc0RlZmF1bHRSZW5kZXJGbigpKSB7XG4gICAgICAgIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBpbnN0YW5jZS51bm1vdW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UudW5tb3VudCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhpZGVXaXRoSW50ZXJhY3Rpdml0eShldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIHdhcm5XaGVuKFxuICAgICAgICBpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCxcbiAgICAgICAgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ2hpZGVXaXRoSW50ZXJhY3Rpdml0eScpXG4gICAgICApO1xuICAgIH1cblxuICAgIGdldERvY3VtZW50KCkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIHB1c2hJZlVuaXF1ZShtb3VzZU1vdmVMaXN0ZW5lcnMsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICBkZWJvdW5jZWRPbk1vdXNlTW92ZShldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiB1bm1vdW50KCk6IHZvaWQge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIHdhcm5XaGVuKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkLCBjcmVhdGVNZW1vcnlMZWFrV2FybmluZygndW5tb3VudCcpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBpbnN0YW5jZS5oaWRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZXN0cm95UG9wcGVySW5zdGFuY2UoKTtcblxuICAgIC8vIElmIGEgcG9wcGVyIGlzIG5vdCBpbnRlcmFjdGl2ZSwgaXQgd2lsbCBiZSBhcHBlbmRlZCBvdXRzaWRlIHRoZSBwb3BwZXJcbiAgICAvLyB0cmVlIGJ5IGRlZmF1bHQuIFRoaXMgc2VlbXMgbWFpbmx5IGZvciBpbnRlcmFjdGl2ZSB0aXBwaWVzLCBidXQgd2Ugc2hvdWxkXG4gICAgLy8gZmluZCBhIHdvcmthcm91bmQgaWYgcG9zc2libGVcbiAgICBnZXROZXN0ZWRQb3BwZXJUcmVlKCkuZm9yRWFjaCgobmVzdGVkUG9wcGVyKSA9PiB7XG4gICAgICBuZXN0ZWRQb3BwZXIuX3RpcHB5IS51bm1vdW50KCk7XG4gICAgfSk7XG5cbiAgICBpZiAocG9wcGVyLnBhcmVudE5vZGUpIHtcbiAgICAgIHBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHBvcHBlcik7XG4gICAgfVxuXG4gICAgbW91bnRlZEluc3RhbmNlcyA9IG1vdW50ZWRJbnN0YW5jZXMuZmlsdGVyKChpKSA9PiBpICE9PSBpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBpbnZva2VIb29rKCdvbkhpZGRlbicsIFtpbnN0YW5jZV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSgpOiB2b2lkIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICB3YXJuV2hlbihpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCwgY3JlYXRlTWVtb3J5TGVha1dhcm5pbmcoJ2Rlc3Ryb3knKSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2UuY2xlYXJEZWxheVRpbWVvdXRzKCk7XG4gICAgaW5zdGFuY2UudW5tb3VudCgpO1xuXG4gICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICBkZWxldGUgcmVmZXJlbmNlLl90aXBweTtcblxuICAgIGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAgIGludm9rZUhvb2soJ29uRGVzdHJveScsIFtpbnN0YW5jZV0pO1xuICB9XG59XG4iLCJpbXBvcnQgYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzLCB7XG4gIGN1cnJlbnRJbnB1dCxcbn0gZnJvbSAnLi9iaW5kR2xvYmFsRXZlbnRMaXN0ZW5lcnMnO1xuaW1wb3J0IGNyZWF0ZVRpcHB5LCB7bW91bnRlZEluc3RhbmNlc30gZnJvbSAnLi9jcmVhdGVUaXBweSc7XG5pbXBvcnQge2dldEFycmF5T2ZFbGVtZW50cywgaXNFbGVtZW50LCBpc1JlZmVyZW5jZUVsZW1lbnR9IGZyb20gJy4vZG9tLXV0aWxzJztcbmltcG9ydCB7ZGVmYXVsdFByb3BzLCBzZXREZWZhdWx0UHJvcHMsIHZhbGlkYXRlUHJvcHN9IGZyb20gJy4vcHJvcHMnO1xuaW1wb3J0IHtIaWRlQWxsLCBIaWRlQWxsT3B0aW9ucywgSW5zdGFuY2UsIFByb3BzLCBUYXJnZXRzfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7dmFsaWRhdGVUYXJnZXRzLCB3YXJuV2hlbn0gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuZnVuY3Rpb24gdGlwcHkoXG4gIHRhcmdldHM6IFRhcmdldHMsXG4gIG9wdGlvbmFsUHJvcHM6IFBhcnRpYWw8UHJvcHM+ID0ge31cbik6IEluc3RhbmNlIHwgSW5zdGFuY2VbXSB7XG4gIGNvbnN0IHBsdWdpbnMgPSBkZWZhdWx0UHJvcHMucGx1Z2lucy5jb25jYXQob3B0aW9uYWxQcm9wcy5wbHVnaW5zIHx8IFtdKTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoX19ERVZfXykge1xuICAgIHZhbGlkYXRlVGFyZ2V0cyh0YXJnZXRzKTtcbiAgICB2YWxpZGF0ZVByb3BzKG9wdGlvbmFsUHJvcHMsIHBsdWdpbnMpO1xuICB9XG5cbiAgYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgY29uc3QgcGFzc2VkUHJvcHM6IFBhcnRpYWw8UHJvcHM+ID0gey4uLm9wdGlvbmFsUHJvcHMsIHBsdWdpbnN9O1xuXG4gIGNvbnN0IGVsZW1lbnRzID0gZ2V0QXJyYXlPZkVsZW1lbnRzKHRhcmdldHMpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgaXNTaW5nbGVDb250ZW50RWxlbWVudCA9IGlzRWxlbWVudChwYXNzZWRQcm9wcy5jb250ZW50KTtcbiAgICBjb25zdCBpc01vcmVUaGFuT25lUmVmZXJlbmNlRWxlbWVudCA9IGVsZW1lbnRzLmxlbmd0aCA+IDE7XG4gICAgd2FybldoZW4oXG4gICAgICBpc1NpbmdsZUNvbnRlbnRFbGVtZW50ICYmIGlzTW9yZVRoYW5PbmVSZWZlcmVuY2VFbGVtZW50LFxuICAgICAgW1xuICAgICAgICAndGlwcHkoKSB3YXMgcGFzc2VkIGFuIEVsZW1lbnQgYXMgdGhlIGBjb250ZW50YCBwcm9wLCBidXQgbW9yZSB0aGFuJyxcbiAgICAgICAgJ29uZSB0aXBweSBpbnN0YW5jZSB3YXMgY3JlYXRlZCBieSB0aGlzIGludm9jYXRpb24uIFRoaXMgbWVhbnMgdGhlJyxcbiAgICAgICAgJ2NvbnRlbnQgZWxlbWVudCB3aWxsIG9ubHkgYmUgYXBwZW5kZWQgdG8gdGhlIGxhc3QgdGlwcHkgaW5zdGFuY2UuJyxcbiAgICAgICAgJ1xcblxcbicsXG4gICAgICAgICdJbnN0ZWFkLCBwYXNzIHRoZSAuaW5uZXJIVE1MIG9mIHRoZSBlbGVtZW50LCBvciB1c2UgYSBmdW5jdGlvbiB0aGF0JyxcbiAgICAgICAgJ3JldHVybnMgYSBjbG9uZWQgdmVyc2lvbiBvZiB0aGUgZWxlbWVudCBpbnN0ZWFkLicsXG4gICAgICAgICdcXG5cXG4nLFxuICAgICAgICAnMSkgY29udGVudDogZWxlbWVudC5pbm5lckhUTUxcXG4nLFxuICAgICAgICAnMikgY29udGVudDogKCkgPT4gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSknLFxuICAgICAgXS5qb2luKCcgJylcbiAgICApO1xuICB9XG5cbiAgY29uc3QgaW5zdGFuY2VzID0gZWxlbWVudHMucmVkdWNlPEluc3RhbmNlW10+KFxuICAgIChhY2MsIHJlZmVyZW5jZSk6IEluc3RhbmNlW10gPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSByZWZlcmVuY2UgJiYgY3JlYXRlVGlwcHkocmVmZXJlbmNlLCBwYXNzZWRQcm9wcyk7XG5cbiAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBhY2MucHVzaChpbnN0YW5jZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSxcbiAgICBbXVxuICApO1xuXG4gIHJldHVybiBpc0VsZW1lbnQodGFyZ2V0cykgPyBpbnN0YW5jZXNbMF0gOiBpbnN0YW5jZXM7XG59XG5cbnRpcHB5LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnRpcHB5LnNldERlZmF1bHRQcm9wcyA9IHNldERlZmF1bHRQcm9wcztcbnRpcHB5LmN1cnJlbnRJbnB1dCA9IGN1cnJlbnRJbnB1dDtcblxuZXhwb3J0IGRlZmF1bHQgdGlwcHk7XG5cbmV4cG9ydCBjb25zdCBoaWRlQWxsOiBIaWRlQWxsID0gKHtcbiAgZXhjbHVkZTogZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlLFxuICBkdXJhdGlvbixcbn06IEhpZGVBbGxPcHRpb25zID0ge30pID0+IHtcbiAgbW91bnRlZEluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgIGxldCBpc0V4Y2x1ZGVkID0gZmFsc2U7XG5cbiAgICBpZiAoZXhjbHVkZWRSZWZlcmVuY2VPckluc3RhbmNlKSB7XG4gICAgICBpc0V4Y2x1ZGVkID0gaXNSZWZlcmVuY2VFbGVtZW50KGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSlcbiAgICAgICAgPyBpbnN0YW5jZS5yZWZlcmVuY2UgPT09IGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZVxuICAgICAgICA6IGluc3RhbmNlLnBvcHBlciA9PT0gKGV4Y2x1ZGVkUmVmZXJlbmNlT3JJbnN0YW5jZSBhcyBJbnN0YW5jZSkucG9wcGVyO1xuICAgIH1cblxuICAgIGlmICghaXNFeGNsdWRlZCkge1xuICAgICAgY29uc3Qgb3JpZ2luYWxEdXJhdGlvbiA9IGluc3RhbmNlLnByb3BzLmR1cmF0aW9uO1xuXG4gICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7ZHVyYXRpb259KTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcblxuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7ZHVyYXRpb246IG9yaWdpbmFsRHVyYXRpb259KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbiIsImltcG9ydCB0aXBweSBmcm9tICcuLic7XG5pbXBvcnQge2Rpdn0gZnJvbSAnLi4vZG9tLXV0aWxzJztcbmltcG9ydCB7XG4gIENyZWF0ZVNpbmdsZXRvbixcbiAgUGx1Z2luLFxuICBDcmVhdGVTaW5nbGV0b25Qcm9wcyxcbiAgUmVmZXJlbmNlRWxlbWVudCxcbiAgQ3JlYXRlU2luZ2xldG9uSW5zdGFuY2UsXG4gIEluc3RhbmNlLFxuICBQcm9wcyxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtyZW1vdmVQcm9wZXJ0aWVzfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQge2Vycm9yV2hlbn0gZnJvbSAnLi4vdmFsaWRhdGlvbic7XG5pbXBvcnQge2FwcGx5U3R5bGVzLCBNb2RpZmllcn0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuXG4vLyBUaGUgZGVmYXVsdCBgYXBwbHlTdHlsZXNgIG1vZGlmaWVyIGhhcyBhIGNsZWFudXAgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZFxuLy8gZXZlcnkgdGltZSB0aGUgcG9wcGVyIGlzIGRlc3Ryb3llZCAoaS5lLiBhIG5ldyB0YXJnZXQpLCByZW1vdmluZyB0aGUgc3R5bGVzXG4vLyBhbmQgY2F1c2luZyB0cmFuc2l0aW9ucyB0byBicmVhayBmb3Igc2luZ2xldG9ucyB3aGVuIHRoZSBjb25zb2xlIGlzIG9wZW4sIGJ1dFxuLy8gbW9zdCBub3RhYmx5IGZvciBub24tdHJhbnNmb3JtIHN0eWxlcyBiZWluZyB1c2VkLCBgZ3B1QWNjZWxlcmF0aW9uOiBmYWxzZWAuXG5jb25zdCBhcHBseVN0eWxlc01vZGlmaWVyOiBNb2RpZmllcjwnYXBwbHlTdHlsZXMnLCB7fT4gPSB7XG4gIC4uLmFwcGx5U3R5bGVzLFxuICBlZmZlY3Qoe3N0YXRlfSkge1xuICAgIGNvbnN0IGluaXRpYWxTdHlsZXMgPSB7XG4gICAgICBwb3BwZXI6IHtcbiAgICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICAgIGxlZnQ6ICcwJyxcbiAgICAgICAgdG9wOiAnMCcsXG4gICAgICAgIG1hcmdpbjogJzAnLFxuICAgICAgfSxcbiAgICAgIGFycm93OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgfSxcbiAgICAgIHJlZmVyZW5jZToge30sXG4gICAgfTtcblxuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gICAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICAgIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gICAgfVxuXG4gICAgLy8gaW50ZW50aW9uYWxseSByZXR1cm4gbm8gY2xlYW51cCBmdW5jdGlvblxuICAgIC8vIHJldHVybiAoKSA9PiB7IC4uLiB9XG4gIH0sXG59O1xuXG5jb25zdCBjcmVhdGVTaW5nbGV0b246IENyZWF0ZVNpbmdsZXRvbiA9IChcbiAgdGlwcHlJbnN0YW5jZXMsXG4gIG9wdGlvbmFsUHJvcHMgPSB7fVxuKSA9PiB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgZXJyb3JXaGVuKFxuICAgICAgIUFycmF5LmlzQXJyYXkodGlwcHlJbnN0YW5jZXMpLFxuICAgICAgW1xuICAgICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTaW5nbGV0b24oKSBtdXN0IGJlIGFuIGFycmF5IG9mJyxcbiAgICAgICAgJ3RpcHB5IGluc3RhbmNlcy4gVGhlIHBhc3NlZCB2YWx1ZSB3YXMnLFxuICAgICAgICBTdHJpbmcodGlwcHlJbnN0YW5jZXMpLFxuICAgICAgXS5qb2luKCcgJylcbiAgICApO1xuICB9XG5cbiAgbGV0IGluZGl2aWR1YWxJbnN0YW5jZXMgPSB0aXBweUluc3RhbmNlcztcbiAgbGV0IHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZUVsZW1lbnQ+ID0gW107XG4gIGxldCBjdXJyZW50VGFyZ2V0OiBFbGVtZW50IHwgbnVsbDtcbiAgbGV0IG92ZXJyaWRlcyA9IG9wdGlvbmFsUHJvcHMub3ZlcnJpZGVzO1xuICBsZXQgaW50ZXJjZXB0U2V0UHJvcHNDbGVhbnVwczogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbiAgbGV0IHNob3duT25DcmVhdGUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBzZXRSZWZlcmVuY2VzKCk6IHZvaWQge1xuICAgIHJlZmVyZW5jZXMgPSBpbmRpdmlkdWFsSW5zdGFuY2VzLm1hcCgoaW5zdGFuY2UpID0+IGluc3RhbmNlLnJlZmVyZW5jZSk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmFibGVJbnN0YW5jZXMoaXNFbmFibGVkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaW5kaXZpZHVhbEluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgICAgaWYgKGlzRW5hYmxlZCkge1xuICAgICAgICBpbnN0YW5jZS5lbmFibGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLmRpc2FibGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyY2VwdFNldFByb3BzKHNpbmdsZXRvbjogSW5zdGFuY2UpOiBBcnJheTwoKSA9PiB2b2lkPiB7XG4gICAgcmV0dXJuIGluZGl2aWR1YWxJbnN0YW5jZXMubWFwKChpbnN0YW5jZSkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxTZXRQcm9wcyA9IGluc3RhbmNlLnNldFByb3BzO1xuXG4gICAgICBpbnN0YW5jZS5zZXRQcm9wcyA9IChwcm9wcyk6IHZvaWQgPT4ge1xuICAgICAgICBvcmlnaW5hbFNldFByb3BzKHByb3BzKTtcblxuICAgICAgICBpZiAoaW5zdGFuY2UucmVmZXJlbmNlID09PSBjdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgc2luZ2xldG9uLnNldFByb3BzKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuICgpOiB2b2lkID0+IHtcbiAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMgPSBvcmlnaW5hbFNldFByb3BzO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGhhdmUgdG8gcGFzcyBzaW5nbGV0b24sIGFzIGl0IG1heWJlIHVuZGVmaW5lZCBvbiBmaXJzdCBjYWxsXG4gIGZ1bmN0aW9uIHByZXBhcmVJbnN0YW5jZShcbiAgICBzaW5nbGV0b246IEluc3RhbmNlLFxuICAgIHRhcmdldDogUmVmZXJlbmNlRWxlbWVudFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHJlZmVyZW5jZXMuaW5kZXhPZih0YXJnZXQpO1xuXG4gICAgLy8gYmFpbC1vdXRcbiAgICBpZiAodGFyZ2V0ID09PSBjdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY3VycmVudFRhcmdldCA9IHRhcmdldDtcblxuICAgIGNvbnN0IG92ZXJyaWRlUHJvcHM6IFBhcnRpYWw8UHJvcHM+ID0gKG92ZXJyaWRlcyB8fCBbXSlcbiAgICAgIC5jb25jYXQoJ2NvbnRlbnQnKVxuICAgICAgLnJlZHVjZSgoYWNjLCBwcm9wKSA9PiB7XG4gICAgICAgIChhY2MgYXMgYW55KVtwcm9wXSA9IGluZGl2aWR1YWxJbnN0YW5jZXNbaW5kZXhdLnByb3BzW3Byb3BdO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgc2luZ2xldG9uLnNldFByb3BzKHtcbiAgICAgIC4uLm92ZXJyaWRlUHJvcHMsXG4gICAgICBnZXRSZWZlcmVuY2VDbGllbnRSZWN0OlxuICAgICAgICB0eXBlb2Ygb3ZlcnJpZGVQcm9wcy5nZXRSZWZlcmVuY2VDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBvdmVycmlkZVByb3BzLmdldFJlZmVyZW5jZUNsaWVudFJlY3RcbiAgICAgICAgICA6ICgpOiBDbGllbnRSZWN0ID0+IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZUluc3RhbmNlcyhmYWxzZSk7XG4gIHNldFJlZmVyZW5jZXMoKTtcblxuICBjb25zdCBwbHVnaW46IFBsdWdpbiA9IHtcbiAgICBmbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgICBlbmFibGVJbnN0YW5jZXModHJ1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uSGlkZGVuKCk6IHZvaWQge1xuICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBvbkNsaWNrT3V0c2lkZShpbnN0YW5jZSk6IHZvaWQge1xuICAgICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5zaG93T25DcmVhdGUgJiYgIXNob3duT25DcmVhdGUpIHtcbiAgICAgICAgICAgIHNob3duT25DcmVhdGUgPSB0cnVlO1xuICAgICAgICAgICAgY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblNob3coaW5zdGFuY2UpOiB2b2lkIHtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuc2hvd09uQ3JlYXRlICYmICFzaG93bk9uQ3JlYXRlKSB7XG4gICAgICAgICAgICBzaG93bk9uQ3JlYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIHByZXBhcmVJbnN0YW5jZShpbnN0YW5jZSwgcmVmZXJlbmNlc1swXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblRyaWdnZXIoaW5zdGFuY2UsIGV2ZW50KTogdm9pZCB7XG4gICAgICAgICAgcHJlcGFyZUluc3RhbmNlKGluc3RhbmNlLCBldmVudC5jdXJyZW50VGFyZ2V0IGFzIEVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IHNpbmdsZXRvbiA9IHRpcHB5KGRpdigpLCB7XG4gICAgLi4ucmVtb3ZlUHJvcGVydGllcyhvcHRpb25hbFByb3BzLCBbJ292ZXJyaWRlcyddKSxcbiAgICBwbHVnaW5zOiBbcGx1Z2luLCAuLi4ob3B0aW9uYWxQcm9wcy5wbHVnaW5zIHx8IFtdKV0sXG4gICAgdHJpZ2dlclRhcmdldDogcmVmZXJlbmNlcyxcbiAgICBwb3BwZXJPcHRpb25zOiB7XG4gICAgICAuLi5vcHRpb25hbFByb3BzLnBvcHBlck9wdGlvbnMsXG4gICAgICBtb2RpZmllcnM6IFtcbiAgICAgICAgLi4uKG9wdGlvbmFsUHJvcHMucG9wcGVyT3B0aW9ucz8ubW9kaWZpZXJzIHx8IFtdKSxcbiAgICAgICAgYXBwbHlTdHlsZXNNb2RpZmllcixcbiAgICAgIF0sXG4gICAgfSxcbiAgfSkgYXMgQ3JlYXRlU2luZ2xldG9uSW5zdGFuY2U8Q3JlYXRlU2luZ2xldG9uUHJvcHM+O1xuXG4gIGNvbnN0IG9yaWdpbmFsU2hvdyA9IHNpbmdsZXRvbi5zaG93O1xuXG4gIHNpbmdsZXRvbi5zaG93ID0gKHRhcmdldD86IFJlZmVyZW5jZUVsZW1lbnQgfCBJbnN0YW5jZSB8IG51bWJlcik6IHZvaWQgPT4ge1xuICAgIG9yaWdpbmFsU2hvdygpO1xuXG4gICAgLy8gZmlyc3QgdGltZSwgc2hvd09uQ3JlYXRlIG9yIHByb2dyYW1tYXRpYyBjYWxsIHdpdGggbm8gcGFyYW1zXG4gICAgLy8gZGVmYXVsdCB0byBzaG93aW5nIGZpcnN0IGluc3RhbmNlXG4gICAgaWYgKCFjdXJyZW50VGFyZ2V0ICYmIHRhcmdldCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gcHJlcGFyZUluc3RhbmNlKHNpbmdsZXRvbiwgcmVmZXJlbmNlc1swXSk7XG4gICAgfVxuXG4gICAgLy8gdHJpZ2dlcmVkIGZyb20gZXZlbnQgKGRvIG5vdGhpbmcgYXMgcHJlcGFyZUluc3RhbmNlIGFscmVhZHkgY2FsbGVkIGJ5IG9uVHJpZ2dlcilcbiAgICAvLyBwcm9ncmFtbWF0aWMgY2FsbCB3aXRoIG5vIHBhcmFtcyB3aGVuIGFscmVhZHkgdmlzaWJsZSAoZG8gbm90aGluZyBhZ2FpbilcbiAgICBpZiAoY3VycmVudFRhcmdldCAmJiB0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHRhcmdldCBpcyBpbmRleCBvZiBpbnN0YW5jZVxuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmVmZXJlbmNlc1t0YXJnZXRdICYmIHByZXBhcmVJbnN0YW5jZShzaW5nbGV0b24sIHJlZmVyZW5jZXNbdGFyZ2V0XSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gdGFyZ2V0IGlzIGEgY2hpbGQgdGlwcHkgaW5zdGFuY2VcbiAgICBpZiAoaW5kaXZpZHVhbEluc3RhbmNlcy5pbmNsdWRlcyh0YXJnZXQgYXMgSW5zdGFuY2UpKSB7XG4gICAgICBjb25zdCByZWYgPSAodGFyZ2V0IGFzIEluc3RhbmNlKS5yZWZlcmVuY2U7XG4gICAgICByZXR1cm4gcHJlcGFyZUluc3RhbmNlKHNpbmdsZXRvbiwgcmVmKTtcbiAgICB9XG5cbiAgICAvLyB0YXJnZXQgaXMgYSBSZWZlcmVuY2VFbGVtZW50XG4gICAgaWYgKHJlZmVyZW5jZXMuaW5jbHVkZXModGFyZ2V0IGFzIFJlZmVyZW5jZUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gcHJlcGFyZUluc3RhbmNlKHNpbmdsZXRvbiwgdGFyZ2V0IGFzIFJlZmVyZW5jZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICBzaW5nbGV0b24uc2hvd05leHQgPSAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgZmlyc3QgPSByZWZlcmVuY2VzWzBdO1xuICAgIGlmICghY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuIHNpbmdsZXRvbi5zaG93KDApO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHJlZmVyZW5jZXMuaW5kZXhPZihjdXJyZW50VGFyZ2V0KTtcbiAgICBzaW5nbGV0b24uc2hvdyhyZWZlcmVuY2VzW2luZGV4ICsgMV0gfHwgZmlyc3QpO1xuICB9O1xuXG4gIHNpbmdsZXRvbi5zaG93UHJldmlvdXMgPSAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgbGFzdCA9IHJlZmVyZW5jZXNbcmVmZXJlbmNlcy5sZW5ndGggLSAxXTtcbiAgICBpZiAoIWN1cnJlbnRUYXJnZXQpIHtcbiAgICAgIHJldHVybiBzaW5nbGV0b24uc2hvdyhsYXN0KTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSByZWZlcmVuY2VzLmluZGV4T2YoY3VycmVudFRhcmdldCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gcmVmZXJlbmNlc1tpbmRleCAtIDFdIHx8IGxhc3Q7XG4gICAgc2luZ2xldG9uLnNob3codGFyZ2V0KTtcbiAgfTtcblxuICBjb25zdCBvcmlnaW5hbFNldFByb3BzID0gc2luZ2xldG9uLnNldFByb3BzO1xuXG4gIHNpbmdsZXRvbi5zZXRQcm9wcyA9IChwcm9wcyk6IHZvaWQgPT4ge1xuICAgIG92ZXJyaWRlcyA9IHByb3BzLm92ZXJyaWRlcyB8fCBvdmVycmlkZXM7XG4gICAgb3JpZ2luYWxTZXRQcm9wcyhwcm9wcyk7XG4gIH07XG5cbiAgc2luZ2xldG9uLnNldEluc3RhbmNlcyA9IChuZXh0SW5zdGFuY2VzKTogdm9pZCA9PiB7XG4gICAgZW5hYmxlSW5zdGFuY2VzKHRydWUpO1xuICAgIGludGVyY2VwdFNldFByb3BzQ2xlYW51cHMuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xuXG4gICAgaW5kaXZpZHVhbEluc3RhbmNlcyA9IG5leHRJbnN0YW5jZXM7XG5cbiAgICBlbmFibGVJbnN0YW5jZXMoZmFsc2UpO1xuICAgIHNldFJlZmVyZW5jZXMoKTtcbiAgICBpbnRlcmNlcHRTZXRQcm9wcyhzaW5nbGV0b24pO1xuXG4gICAgc2luZ2xldG9uLnNldFByb3BzKHt0cmlnZ2VyVGFyZ2V0OiByZWZlcmVuY2VzfSk7XG4gIH07XG5cbiAgaW50ZXJjZXB0U2V0UHJvcHNDbGVhbnVwcyA9IGludGVyY2VwdFNldFByb3BzKHNpbmdsZXRvbik7XG5cbiAgcmV0dXJuIHNpbmdsZXRvbjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVNpbmdsZXRvbjtcbiIsImltcG9ydCB0aXBweSBmcm9tICcuLic7XG5pbXBvcnQge1RPVUNIX09QVElPTlN9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQge2RlZmF1bHRQcm9wc30gZnJvbSAnLi4vcHJvcHMnO1xuaW1wb3J0IHtJbnN0YW5jZSwgUHJvcHMsIFRhcmdldHN9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7TGlzdGVuZXJPYmplY3R9IGZyb20gJy4uL3R5cGVzLWludGVybmFsJztcbmltcG9ydCB7bm9ybWFsaXplVG9BcnJheSwgcmVtb3ZlUHJvcGVydGllc30gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHtlcnJvcldoZW59IGZyb20gJy4uL3ZhbGlkYXRpb24nO1xuXG5jb25zdCBCVUJCTElOR19FVkVOVFNfTUFQID0ge1xuICBtb3VzZW92ZXI6ICdtb3VzZWVudGVyJyxcbiAgZm9jdXNpbjogJ2ZvY3VzJyxcbiAgY2xpY2s6ICdjbGljaycsXG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWxlZ2F0ZSBpbnN0YW5jZSB0aGF0IGNvbnRyb2xzIHRoZSBjcmVhdGlvbiBvZiB0aXBweSBpbnN0YW5jZXNcbiAqIGZvciBjaGlsZCBlbGVtZW50cyAoYHRhcmdldGAgQ1NTIHNlbGVjdG9yKS5cbiAqL1xuZnVuY3Rpb24gZGVsZWdhdGUoXG4gIHRhcmdldHM6IFRhcmdldHMsXG4gIHByb3BzOiBQYXJ0aWFsPFByb3BzPiAmIHt0YXJnZXQ6IHN0cmluZ31cbik6IEluc3RhbmNlIHwgSW5zdGFuY2VbXSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgZXJyb3JXaGVuKFxuICAgICAgIShwcm9wcyAmJiBwcm9wcy50YXJnZXQpLFxuICAgICAgW1xuICAgICAgICAnWW91IG11c3Qgc3BlY2l0eSBhIGB0YXJnZXRgIHByb3AgaW5kaWNhdGluZyBhIENTUyBzZWxlY3RvciBzdHJpbmcgbWF0Y2hpbmcnLFxuICAgICAgICAndGhlIHRhcmdldCBlbGVtZW50cyB0aGF0IHNob3VsZCByZWNlaXZlIGEgdGlwcHkuJyxcbiAgICAgIF0uam9pbignICcpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBsaXN0ZW5lcnM6IExpc3RlbmVyT2JqZWN0W10gPSBbXTtcbiAgbGV0IGNoaWxkVGlwcHlJbnN0YW5jZXM6IEluc3RhbmNlW10gPSBbXTtcbiAgbGV0IGRpc2FibGVkID0gZmFsc2U7XG5cbiAgY29uc3Qge3RhcmdldH0gPSBwcm9wcztcblxuICBjb25zdCBuYXRpdmVQcm9wcyA9IHJlbW92ZVByb3BlcnRpZXMocHJvcHMsIFsndGFyZ2V0J10pO1xuICBjb25zdCBwYXJlbnRQcm9wcyA9IHsuLi5uYXRpdmVQcm9wcywgdHJpZ2dlcjogJ21hbnVhbCcsIHRvdWNoOiBmYWxzZX07XG4gIGNvbnN0IGNoaWxkUHJvcHMgPSB7Li4ubmF0aXZlUHJvcHMsIHNob3dPbkNyZWF0ZTogdHJ1ZX07XG5cbiAgY29uc3QgcmV0dXJuVmFsdWUgPSB0aXBweSh0YXJnZXRzLCBwYXJlbnRQcm9wcyk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRSZXR1cm5WYWx1ZSA9IG5vcm1hbGl6ZVRvQXJyYXkocmV0dXJuVmFsdWUpO1xuXG4gIGZ1bmN0aW9uIG9uVHJpZ2dlcihldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIWV2ZW50LnRhcmdldCB8fCBkaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldE5vZGUgPSAoZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQpLmNsb3Nlc3QodGFyZ2V0KTtcblxuICAgIGlmICghdGFyZ2V0Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEdldCByZWxldmFudCB0cmlnZ2VyIHdpdGggZmFsbGJhY2tzOlxuICAgIC8vIDEuIENoZWNrIGBkYXRhLXRpcHB5LXRyaWdnZXJgIGF0dHJpYnV0ZSBvbiB0YXJnZXQgbm9kZVxuICAgIC8vIDIuIEZhbGxiYWNrIHRvIGB0cmlnZ2VyYCBwYXNzZWQgdG8gYGRlbGVnYXRlKClgXG4gICAgLy8gMy4gRmFsbGJhY2sgdG8gYGRlZmF1bHRQcm9wcy50cmlnZ2VyYFxuICAgIGNvbnN0IHRyaWdnZXIgPVxuICAgICAgdGFyZ2V0Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHktdHJpZ2dlcicpIHx8XG4gICAgICBwcm9wcy50cmlnZ2VyIHx8XG4gICAgICBkZWZhdWx0UHJvcHMudHJpZ2dlcjtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAodGFyZ2V0Tm9kZS5fdGlwcHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIHR5cGVvZiBjaGlsZFByb3BzLnRvdWNoID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcgJiZcbiAgICAgIHRyaWdnZXIuaW5kZXhPZigoQlVCQkxJTkdfRVZFTlRTX01BUCBhcyBhbnkpW2V2ZW50LnR5cGVdKSA8IDBcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbnN0YW5jZSA9IHRpcHB5KHRhcmdldE5vZGUsIGNoaWxkUHJvcHMpO1xuXG4gICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICBjaGlsZFRpcHB5SW5zdGFuY2VzID0gY2hpbGRUaXBweUluc3RhbmNlcy5jb25jYXQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uKFxuICAgIG5vZGU6IEVsZW1lbnQsXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgaGFuZGxlcjogRXZlbnRMaXN0ZW5lcixcbiAgICBvcHRpb25zOiBvYmplY3QgfCBib29sZWFuID0gZmFsc2VcbiAgKTogdm9pZCB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe25vZGUsIGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9uc30pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoaW5zdGFuY2U6IEluc3RhbmNlKTogdm9pZCB7XG4gICAgY29uc3Qge3JlZmVyZW5jZX0gPSBpbnN0YW5jZTtcblxuICAgIG9uKHJlZmVyZW5jZSwgJ3RvdWNoc3RhcnQnLCBvblRyaWdnZXIsIFRPVUNIX09QVElPTlMpO1xuICAgIG9uKHJlZmVyZW5jZSwgJ21vdXNlb3ZlcicsIG9uVHJpZ2dlcik7XG4gICAgb24ocmVmZXJlbmNlLCAnZm9jdXNpbicsIG9uVHJpZ2dlcik7XG4gICAgb24ocmVmZXJlbmNlLCAnY2xpY2snLCBvblRyaWdnZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goKHtub2RlLCBldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnN9OiBMaXN0ZW5lck9iamVjdCkgPT4ge1xuICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgbGlzdGVuZXJzID0gW107XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseU11dGF0aW9ucyhpbnN0YW5jZTogSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBjb25zdCBvcmlnaW5hbERlc3Ryb3kgPSBpbnN0YW5jZS5kZXN0cm95O1xuICAgIGNvbnN0IG9yaWdpbmFsRW5hYmxlID0gaW5zdGFuY2UuZW5hYmxlO1xuICAgIGNvbnN0IG9yaWdpbmFsRGlzYWJsZSA9IGluc3RhbmNlLmRpc2FibGU7XG5cbiAgICBpbnN0YW5jZS5kZXN0cm95ID0gKHNob3VsZERlc3Ryb3lDaGlsZEluc3RhbmNlcyA9IHRydWUpOiB2b2lkID0+IHtcbiAgICAgIGlmIChzaG91bGREZXN0cm95Q2hpbGRJbnN0YW5jZXMpIHtcbiAgICAgICAgY2hpbGRUaXBweUluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAgIGluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkVGlwcHlJbnN0YW5jZXMgPSBbXTtcblxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIG9yaWdpbmFsRGVzdHJveSgpO1xuICAgIH07XG5cbiAgICBpbnN0YW5jZS5lbmFibGUgPSAoKTogdm9pZCA9PiB7XG4gICAgICBvcmlnaW5hbEVuYWJsZSgpO1xuICAgICAgY2hpbGRUaXBweUluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4gaW5zdGFuY2UuZW5hYmxlKCkpO1xuICAgICAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgaW5zdGFuY2UuZGlzYWJsZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIG9yaWdpbmFsRGlzYWJsZSgpO1xuICAgICAgY2hpbGRUaXBweUluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4gaW5zdGFuY2UuZGlzYWJsZSgpKTtcbiAgICAgIGRpc2FibGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoaW5zdGFuY2UpO1xuICB9XG5cbiAgbm9ybWFsaXplZFJldHVyblZhbHVlLmZvckVhY2goYXBwbHlNdXRhdGlvbnMpO1xuXG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVsZWdhdGU7XG4iLCJpbXBvcnQge0JBQ0tEUk9QX0NMQVNTfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHtkaXYsIHNldFZpc2liaWxpdHlTdGF0ZX0gZnJvbSAnLi4vZG9tLXV0aWxzJztcbmltcG9ydCB7Z2V0Q2hpbGRyZW59IGZyb20gJy4uL3RlbXBsYXRlJztcbmltcG9ydCB7QW5pbWF0ZUZpbGx9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7ZXJyb3JXaGVufSBmcm9tICcuLi92YWxpZGF0aW9uJztcblxuY29uc3QgYW5pbWF0ZUZpbGw6IEFuaW1hdGVGaWxsID0ge1xuICBuYW1lOiAnYW5pbWF0ZUZpbGwnLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbihpbnN0YW5jZSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAoIWluc3RhbmNlLnByb3BzLnJlbmRlcj8uJCR0aXBweSkge1xuICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgZXJyb3JXaGVuKFxuICAgICAgICAgIGluc3RhbmNlLnByb3BzLmFuaW1hdGVGaWxsLFxuICAgICAgICAgICdUaGUgYGFuaW1hdGVGaWxsYCBwbHVnaW4gcmVxdWlyZXMgdGhlIGRlZmF1bHQgcmVuZGVyIGZ1bmN0aW9uLidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGNvbnN0IHtib3gsIGNvbnRlbnR9ID0gZ2V0Q2hpbGRyZW4oaW5zdGFuY2UucG9wcGVyKTtcblxuICAgIGNvbnN0IGJhY2tkcm9wID0gaW5zdGFuY2UucHJvcHMuYW5pbWF0ZUZpbGxcbiAgICAgID8gY3JlYXRlQmFja2Ryb3BFbGVtZW50KClcbiAgICAgIDogbnVsbDtcblxuICAgIHJldHVybiB7XG4gICAgICBvbkNyZWF0ZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgYm94Lmluc2VydEJlZm9yZShiYWNrZHJvcCwgYm94LmZpcnN0RWxlbWVudENoaWxkISk7XG4gICAgICAgICAgYm94LnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcsICcnKTtcbiAgICAgICAgICBib3guc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblxuICAgICAgICAgIGluc3RhbmNlLnNldFByb3BzKHthcnJvdzogZmFsc2UsIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbk1vdW50KCk6IHZvaWQge1xuICAgICAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgICAgICBjb25zdCB7dHJhbnNpdGlvbkR1cmF0aW9ufSA9IGJveC5zdHlsZTtcbiAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IE51bWJlcih0cmFuc2l0aW9uRHVyYXRpb24ucmVwbGFjZSgnbXMnLCAnJykpO1xuXG4gICAgICAgICAgLy8gVGhlIGNvbnRlbnQgc2hvdWxkIGZhZGUgaW4gYWZ0ZXIgdGhlIGJhY2tkcm9wIGhhcyBtb3N0bHkgZmlsbGVkIHRoZVxuICAgICAgICAgIC8vIHRvb2x0aXAgZWxlbWVudC4gYGNsaXAtcGF0aGAgaXMgdGhlIG90aGVyIGFsdGVybmF0aXZlIGJ1dCBpcyBub3RcbiAgICAgICAgICAvLyB3ZWxsLXN1cHBvcnRlZCBhbmQgaXMgYnVnZ3kgb24gc29tZSBkZXZpY2VzLlxuICAgICAgICAgIGNvbnRlbnQuc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gYCR7TWF0aC5yb3VuZChkdXJhdGlvbiAvIDEwKX1tc2A7XG5cbiAgICAgICAgICBiYWNrZHJvcC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgICAgICAgc2V0VmlzaWJpbGl0eVN0YXRlKFtiYWNrZHJvcF0sICd2aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblNob3coKTogdm9pZCB7XG4gICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgIGJhY2tkcm9wLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25IaWRlKCk6IHZvaWQge1xuICAgICAgICBpZiAoYmFja2Ryb3ApIHtcbiAgICAgICAgICBzZXRWaXNpYmlsaXR5U3RhdGUoW2JhY2tkcm9wXSwgJ2hpZGRlbicpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBhbmltYXRlRmlsbDtcblxuZnVuY3Rpb24gY3JlYXRlQmFja2Ryb3BFbGVtZW50KCk6IEhUTUxEaXZFbGVtZW50IHtcbiAgY29uc3QgYmFja2Ryb3AgPSBkaXYoKTtcbiAgYmFja2Ryb3AuY2xhc3NOYW1lID0gQkFDS0RST1BfQ0xBU1M7XG4gIHNldFZpc2liaWxpdHlTdGF0ZShbYmFja2Ryb3BdLCAnaGlkZGVuJyk7XG4gIHJldHVybiBiYWNrZHJvcDtcbn1cbiIsImltcG9ydCB7Z2V0T3duZXJEb2N1bWVudCwgaXNNb3VzZUV2ZW50fSBmcm9tICcuLi9kb20tdXRpbHMnO1xuaW1wb3J0IHtGb2xsb3dDdXJzb3IsIEluc3RhbmNlfSBmcm9tICcuLi90eXBlcyc7XG5cbmxldCBtb3VzZUNvb3JkcyA9IHtjbGllbnRYOiAwLCBjbGllbnRZOiAwfTtcbmxldCBhY3RpdmVJbnN0YW5jZXM6IEFycmF5PHtpbnN0YW5jZTogSW5zdGFuY2U7IGRvYzogRG9jdW1lbnR9PiA9IFtdO1xuXG5mdW5jdGlvbiBzdG9yZU1vdXNlQ29vcmRzKHtjbGllbnRYLCBjbGllbnRZfTogTW91c2VFdmVudCk6IHZvaWQge1xuICBtb3VzZUNvb3JkcyA9IHtjbGllbnRYLCBjbGllbnRZfTtcbn1cblxuZnVuY3Rpb24gYWRkTW91c2VDb29yZHNMaXN0ZW5lcihkb2M6IERvY3VtZW50KTogdm9pZCB7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzdG9yZU1vdXNlQ29vcmRzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTW91c2VDb29yZHNMaXN0ZW5lcihkb2M6IERvY3VtZW50KTogdm9pZCB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzdG9yZU1vdXNlQ29vcmRzKTtcbn1cblxuY29uc3QgZm9sbG93Q3Vyc29yOiBGb2xsb3dDdXJzb3IgPSB7XG4gIG5hbWU6ICdmb2xsb3dDdXJzb3InLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbihpbnN0YW5jZSkge1xuICAgIGNvbnN0IHJlZmVyZW5jZSA9IGluc3RhbmNlLnJlZmVyZW5jZTtcbiAgICBjb25zdCBkb2MgPSBnZXRPd25lckRvY3VtZW50KGluc3RhbmNlLnByb3BzLnRyaWdnZXJUYXJnZXQgfHwgcmVmZXJlbmNlKTtcblxuICAgIGxldCBpc0ludGVybmFsVXBkYXRlID0gZmFsc2U7XG4gICAgbGV0IHdhc0ZvY3VzRXZlbnQgPSBmYWxzZTtcbiAgICBsZXQgaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgIGxldCBwcmV2UHJvcHMgPSBpbnN0YW5jZS5wcm9wcztcblxuICAgIGZ1bmN0aW9uIGdldElzSW5pdGlhbEJlaGF2aW9yKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yID09PSAnaW5pdGlhbCcgJiYgaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlXG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKCk6IHZvaWQge1xuICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5zZXRHZXRSZWZlcmVuY2VDbGllbnRSZWN0KCk6IHZvaWQge1xuICAgICAgaXNJbnRlcm5hbFVwZGF0ZSA9IHRydWU7XG4gICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7Z2V0UmVmZXJlbmNlQ2xpZW50UmVjdDogbnVsbH0pO1xuICAgICAgaXNJbnRlcm5hbFVwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgICAvLyBJZiB0aGUgaW5zdGFuY2UgaXMgaW50ZXJhY3RpdmUsIGF2b2lkIHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB1bmxlc3MgaXQnc1xuICAgICAgLy8gb3ZlciB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICAgIGNvbnN0IGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSA9IGV2ZW50LnRhcmdldFxuICAgICAgICA/IHJlZmVyZW5jZS5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSlcbiAgICAgICAgOiB0cnVlO1xuICAgICAgY29uc3Qge2ZvbGxvd0N1cnNvcn0gPSBpbnN0YW5jZS5wcm9wcztcbiAgICAgIGNvbnN0IHtjbGllbnRYLCBjbGllbnRZfSA9IGV2ZW50O1xuXG4gICAgICBjb25zdCByZWN0ID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgcmVsYXRpdmVYID0gY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICAgIGNvbnN0IHJlbGF0aXZlWSA9IGNsaWVudFkgLSByZWN0LnRvcDtcblxuICAgICAgaWYgKGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSB8fCAhaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgaW5zdGFuY2Uuc2V0UHJvcHMoe1xuICAgICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3QoKSB7XG4gICAgICAgICAgICBjb25zdCByZWN0ID0gcmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICBsZXQgeCA9IGNsaWVudFg7XG4gICAgICAgICAgICBsZXQgeSA9IGNsaWVudFk7XG5cbiAgICAgICAgICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJykge1xuICAgICAgICAgICAgICB4ID0gcmVjdC5sZWZ0ICsgcmVsYXRpdmVYO1xuICAgICAgICAgICAgICB5ID0gcmVjdC50b3AgKyByZWxhdGl2ZVk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IGZvbGxvd0N1cnNvciA9PT0gJ2hvcml6b250YWwnID8gcmVjdC50b3AgOiB5O1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBmb2xsb3dDdXJzb3IgPT09ICd2ZXJ0aWNhbCcgPyByZWN0LnJpZ2h0IDogeDtcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbSA9IGZvbGxvd0N1cnNvciA9PT0gJ2hvcml6b250YWwnID8gcmVjdC5ib3R0b20gOiB5O1xuICAgICAgICAgICAgY29uc3QgbGVmdCA9IGZvbGxvd0N1cnNvciA9PT0gJ3ZlcnRpY2FsJyA/IHJlY3QubGVmdCA6IHg7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHdpZHRoOiByaWdodCAtIGxlZnQsXG4gICAgICAgICAgICAgIGhlaWdodDogYm90dG9tIC0gdG9wLFxuICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgICAgICBib3R0b20sXG4gICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpOiB2b2lkIHtcbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VzLnB1c2goe2luc3RhbmNlLCBkb2N9KTtcbiAgICAgICAgYWRkTW91c2VDb29yZHNMaXN0ZW5lcihkb2MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgICBhY3RpdmVJbnN0YW5jZXMgPSBhY3RpdmVJbnN0YW5jZXMuZmlsdGVyKFxuICAgICAgICAoZGF0YSkgPT4gZGF0YS5pbnN0YW5jZSAhPT0gaW5zdGFuY2VcbiAgICAgICk7XG5cbiAgICAgIGlmIChhY3RpdmVJbnN0YW5jZXMuZmlsdGVyKChkYXRhKSA9PiBkYXRhLmRvYyA9PT0gZG9jKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTW91c2VDb29yZHNMaXN0ZW5lcihkb2MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbkNyZWF0ZTogY3JlYXRlLFxuICAgICAgb25EZXN0cm95OiBkZXN0cm95LFxuICAgICAgb25CZWZvcmVVcGRhdGUoKTogdm9pZCB7XG4gICAgICAgIHByZXZQcm9wcyA9IGluc3RhbmNlLnByb3BzO1xuICAgICAgfSxcbiAgICAgIG9uQWZ0ZXJVcGRhdGUoXywge2ZvbGxvd0N1cnNvcn0pOiB2b2lkIHtcbiAgICAgICAgaWYgKGlzSW50ZXJuYWxVcGRhdGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZm9sbG93Q3Vyc29yICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICBwcmV2UHJvcHMuZm9sbG93Q3Vyc29yICE9PSBmb2xsb3dDdXJzb3JcbiAgICAgICAgKSB7XG4gICAgICAgICAgZGVzdHJveSgpO1xuXG4gICAgICAgICAgaWYgKGZvbGxvd0N1cnNvcikge1xuICAgICAgICAgICAgY3JlYXRlKCk7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkICYmXG4gICAgICAgICAgICAgICF3YXNGb2N1c0V2ZW50ICYmXG4gICAgICAgICAgICAgICFnZXRJc0luaXRpYWxCZWhhdmlvcigpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHVuc2V0R2V0UmVmZXJlbmNlQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uTW91bnQoKTogdm9pZCB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgJiYgIXdhc0ZvY3VzRXZlbnQpIHtcbiAgICAgICAgICBpZiAoaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICAgIG9uTW91c2VNb3ZlKG1vdXNlQ29vcmRzIGFzIE1vdXNlRXZlbnQpO1xuICAgICAgICAgICAgaXNVbm1vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWdldElzSW5pdGlhbEJlaGF2aW9yKCkpIHtcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25UcmlnZ2VyKF8sIGV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChpc01vdXNlRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgbW91c2VDb29yZHMgPSB7Y2xpZW50WDogZXZlbnQuY2xpZW50WCwgY2xpZW50WTogZXZlbnQuY2xpZW50WX07XG4gICAgICAgIH1cbiAgICAgICAgd2FzRm9jdXNFdmVudCA9IGV2ZW50LnR5cGUgPT09ICdmb2N1cyc7XG4gICAgICB9LFxuICAgICAgb25IaWRkZW4oKTogdm9pZCB7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IpIHtcbiAgICAgICAgICB1bnNldEdldFJlZmVyZW5jZUNsaWVudFJlY3QoKTtcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcigpO1xuICAgICAgICAgIGlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9sbG93Q3Vyc29yO1xuIiwiaW1wb3J0IHtNb2RpZmllciwgUGxhY2VtZW50fSBmcm9tICdAcG9wcGVyanMvY29yZSc7XG5pbXBvcnQge2lzTW91c2VFdmVudH0gZnJvbSAnLi4vZG9tLXV0aWxzJztcbmltcG9ydCB7QmFzZVBsYWNlbWVudCwgSW5saW5lUG9zaXRpb25pbmcsIFByb3BzfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2FycmF5RnJvbSwgZ2V0QmFzZVBsYWNlbWVudH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5mdW5jdGlvbiBnZXRQcm9wcyhwcm9wczogUHJvcHMsIG1vZGlmaWVyOiBNb2RpZmllcjxhbnksIGFueT4pOiBQYXJ0aWFsPFByb3BzPiB7XG4gIHJldHVybiB7XG4gICAgcG9wcGVyT3B0aW9uczoge1xuICAgICAgLi4ucHJvcHMucG9wcGVyT3B0aW9ucyxcbiAgICAgIG1vZGlmaWVyczogW1xuICAgICAgICAuLi4ocHJvcHMucG9wcGVyT3B0aW9ucz8ubW9kaWZpZXJzIHx8IFtdKS5maWx0ZXIoXG4gICAgICAgICAgKHtuYW1lfSkgPT4gbmFtZSAhPT0gbW9kaWZpZXIubmFtZVxuICAgICAgICApLFxuICAgICAgICBtb2RpZmllcixcbiAgICAgIF0sXG4gICAgfSxcbiAgfTtcbn1cblxuY29uc3QgaW5saW5lUG9zaXRpb25pbmc6IElubGluZVBvc2l0aW9uaW5nID0ge1xuICBuYW1lOiAnaW5saW5lUG9zaXRpb25pbmcnLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbihpbnN0YW5jZSkge1xuICAgIGNvbnN0IHtyZWZlcmVuY2V9ID0gaW5zdGFuY2U7XG5cbiAgICBmdW5jdGlvbiBpc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gISFpbnN0YW5jZS5wcm9wcy5pbmxpbmVQb3NpdGlvbmluZztcbiAgICB9XG5cbiAgICBsZXQgcGxhY2VtZW50OiBQbGFjZW1lbnQ7XG4gICAgbGV0IGN1cnNvclJlY3RJbmRleCA9IC0xO1xuICAgIGxldCBpc0ludGVybmFsVXBkYXRlID0gZmFsc2U7XG5cbiAgICBjb25zdCBtb2RpZmllcjogTW9kaWZpZXI8J3RpcHB5SW5saW5lUG9zaXRpb25pbmcnLCB7fT4gPSB7XG4gICAgICBuYW1lOiAndGlwcHlJbmxpbmVQb3NpdGlvbmluZycsXG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgcGhhc2U6ICdhZnRlcldyaXRlJyxcbiAgICAgIGZuKHtzdGF0ZX0pIHtcbiAgICAgICAgaWYgKGlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgaWYgKHBsYWNlbWVudCAhPT0gc3RhdGUucGxhY2VtZW50KSB7XG4gICAgICAgICAgICBpbnN0YW5jZS5zZXRQcm9wcyh7XG4gICAgICAgICAgICAgIGdldFJlZmVyZW5jZUNsaWVudFJlY3Q6ICgpID0+XG4gICAgICAgICAgICAgICAgZ2V0UmVmZXJlbmNlQ2xpZW50UmVjdChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGxhY2VtZW50ID0gc3RhdGUucGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRSZWZlcmVuY2VDbGllbnRSZWN0KHBsYWNlbWVudDogUGxhY2VtZW50KTogQ2xpZW50UmVjdCB7XG4gICAgICByZXR1cm4gZ2V0SW5saW5lQm91bmRpbmdDbGllbnRSZWN0KFxuICAgICAgICBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCksXG4gICAgICAgIHJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgYXJyYXlGcm9tKHJlZmVyZW5jZS5nZXRDbGllbnRSZWN0cygpKSxcbiAgICAgICAgY3Vyc29yUmVjdEluZGV4XG4gICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEludGVybmFsUHJvcHMocGFydGlhbFByb3BzOiBQYXJ0aWFsPFByb3BzPik6IHZvaWQge1xuICAgICAgaXNJbnRlcm5hbFVwZGF0ZSA9IHRydWU7XG4gICAgICBpbnN0YW5jZS5zZXRQcm9wcyhwYXJ0aWFsUHJvcHMpO1xuICAgICAgaXNJbnRlcm5hbFVwZGF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZE1vZGlmaWVyKCk6IHZvaWQge1xuICAgICAgaWYgKCFpc0ludGVybmFsVXBkYXRlKSB7XG4gICAgICAgIHNldEludGVybmFsUHJvcHMoZ2V0UHJvcHMoaW5zdGFuY2UucHJvcHMsIG1vZGlmaWVyKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG9uQ3JlYXRlOiBhZGRNb2RpZmllcixcbiAgICAgIG9uQWZ0ZXJVcGRhdGU6IGFkZE1vZGlmaWVyLFxuICAgICAgb25UcmlnZ2VyKF8sIGV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmIChpc01vdXNlRXZlbnQoZXZlbnQpKSB7XG4gICAgICAgICAgY29uc3QgcmVjdHMgPSBhcnJheUZyb20oaW5zdGFuY2UucmVmZXJlbmNlLmdldENsaWVudFJlY3RzKCkpO1xuICAgICAgICAgIGNvbnN0IGN1cnNvclJlY3QgPSByZWN0cy5maW5kKFxuICAgICAgICAgICAgKHJlY3QpID0+XG4gICAgICAgICAgICAgIHJlY3QubGVmdCAtIDIgPD0gZXZlbnQuY2xpZW50WCAmJlxuICAgICAgICAgICAgICByZWN0LnJpZ2h0ICsgMiA+PSBldmVudC5jbGllbnRYICYmXG4gICAgICAgICAgICAgIHJlY3QudG9wIC0gMiA8PSBldmVudC5jbGllbnRZICYmXG4gICAgICAgICAgICAgIHJlY3QuYm90dG9tICsgMiA+PSBldmVudC5jbGllbnRZXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGN1cnNvclJlY3RJbmRleCA9IHJlY3RzLmluZGV4T2YoY3Vyc29yUmVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvblVudHJpZ2dlcigpOiB2b2lkIHtcbiAgICAgICAgY3Vyc29yUmVjdEluZGV4ID0gLTE7XG4gICAgICB9LFxuICAgIH07XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVQb3NpdGlvbmluZztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldElubGluZUJvdW5kaW5nQ2xpZW50UmVjdChcbiAgY3VycmVudEJhc2VQbGFjZW1lbnQ6IEJhc2VQbGFjZW1lbnQgfCBudWxsLFxuICBib3VuZGluZ1JlY3Q6IENsaWVudFJlY3QsXG4gIGNsaWVudFJlY3RzOiBDbGllbnRSZWN0W10sXG4gIGN1cnNvclJlY3RJbmRleDogbnVtYmVyXG4pOiBDbGllbnRSZWN0IHtcbiAgLy8gTm90IGFuIGlubGluZSBlbGVtZW50LCBvciBwbGFjZW1lbnQgaXMgbm90IHlldCBrbm93blxuICBpZiAoY2xpZW50UmVjdHMubGVuZ3RoIDwgMiB8fCBjdXJyZW50QmFzZVBsYWNlbWVudCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBib3VuZGluZ1JlY3Q7XG4gIH1cblxuICAvLyBUaGVyZSBhcmUgdHdvIHJlY3RzIGFuZCB0aGV5IGFyZSBkaXNqb2luZWRcbiAgaWYgKFxuICAgIGNsaWVudFJlY3RzLmxlbmd0aCA9PT0gMiAmJlxuICAgIGN1cnNvclJlY3RJbmRleCA+PSAwICYmXG4gICAgY2xpZW50UmVjdHNbMF0ubGVmdCA+IGNsaWVudFJlY3RzWzFdLnJpZ2h0XG4gICkge1xuICAgIHJldHVybiBjbGllbnRSZWN0c1tjdXJzb3JSZWN0SW5kZXhdIHx8IGJvdW5kaW5nUmVjdDtcbiAgfVxuXG4gIHN3aXRjaCAoY3VycmVudEJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6IHtcbiAgICAgIGNvbnN0IGZpcnN0UmVjdCA9IGNsaWVudFJlY3RzWzBdO1xuICAgICAgY29uc3QgbGFzdFJlY3QgPSBjbGllbnRSZWN0c1tjbGllbnRSZWN0cy5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnN0IGlzVG9wID0gY3VycmVudEJhc2VQbGFjZW1lbnQgPT09ICd0b3AnO1xuXG4gICAgICBjb25zdCB0b3AgPSBmaXJzdFJlY3QudG9wO1xuICAgICAgY29uc3QgYm90dG9tID0gbGFzdFJlY3QuYm90dG9tO1xuICAgICAgY29uc3QgbGVmdCA9IGlzVG9wID8gZmlyc3RSZWN0LmxlZnQgOiBsYXN0UmVjdC5sZWZ0O1xuICAgICAgY29uc3QgcmlnaHQgPSBpc1RvcCA/IGZpcnN0UmVjdC5yaWdodCA6IGxhc3RSZWN0LnJpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG5cbiAgICAgIHJldHVybiB7dG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0LCB3aWR0aCwgaGVpZ2h0fTtcbiAgICB9XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgY2FzZSAncmlnaHQnOiB7XG4gICAgICBjb25zdCBtaW5MZWZ0ID0gTWF0aC5taW4oLi4uY2xpZW50UmVjdHMubWFwKChyZWN0cykgPT4gcmVjdHMubGVmdCkpO1xuICAgICAgY29uc3QgbWF4UmlnaHQgPSBNYXRoLm1heCguLi5jbGllbnRSZWN0cy5tYXAoKHJlY3RzKSA9PiByZWN0cy5yaWdodCkpO1xuICAgICAgY29uc3QgbWVhc3VyZVJlY3RzID0gY2xpZW50UmVjdHMuZmlsdGVyKChyZWN0KSA9PlxuICAgICAgICBjdXJyZW50QmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnXG4gICAgICAgICAgPyByZWN0LmxlZnQgPT09IG1pbkxlZnRcbiAgICAgICAgICA6IHJlY3QucmlnaHQgPT09IG1heFJpZ2h0XG4gICAgICApO1xuXG4gICAgICBjb25zdCB0b3AgPSBtZWFzdXJlUmVjdHNbMF0udG9wO1xuICAgICAgY29uc3QgYm90dG9tID0gbWVhc3VyZVJlY3RzW21lYXN1cmVSZWN0cy5sZW5ndGggLSAxXS5ib3R0b207XG4gICAgICBjb25zdCBsZWZ0ID0gbWluTGVmdDtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gbWF4UmlnaHQ7XG4gICAgICBjb25zdCB3aWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcblxuICAgICAgcmV0dXJuIHt0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQsIHdpZHRoLCBoZWlnaHR9O1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gYm91bmRpbmdSZWN0O1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtWaXJ0dWFsRWxlbWVudH0gZnJvbSAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0IHtSZWZlcmVuY2VFbGVtZW50LCBTdGlja3l9IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3Qgc3RpY2t5OiBTdGlja3kgPSB7XG4gIG5hbWU6ICdzdGlja3knLFxuICBkZWZhdWx0VmFsdWU6IGZhbHNlLFxuICBmbihpbnN0YW5jZSkge1xuICAgIGNvbnN0IHtyZWZlcmVuY2UsIHBvcHBlcn0gPSBpbnN0YW5jZTtcblxuICAgIGZ1bmN0aW9uIGdldFJlZmVyZW5jZSgpOiBSZWZlcmVuY2VFbGVtZW50IHwgVmlydHVhbEVsZW1lbnQge1xuICAgICAgcmV0dXJuIGluc3RhbmNlLnBvcHBlckluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlXG4gICAgICAgIDogcmVmZXJlbmNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3VsZENoZWNrKHZhbHVlOiAncmVmZXJlbmNlJyB8ICdwb3BwZXInKTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UucHJvcHMuc3RpY2t5ID09PSB0cnVlIHx8IGluc3RhbmNlLnByb3BzLnN0aWNreSA9PT0gdmFsdWU7XG4gICAgfVxuXG4gICAgbGV0IHByZXZSZWZSZWN0OiBDbGllbnRSZWN0IHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IHByZXZQb3BSZWN0OiBDbGllbnRSZWN0IHwgbnVsbCA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpOiB2b2lkIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRSZWZSZWN0ID0gc2hvdWxkQ2hlY2soJ3JlZmVyZW5jZScpXG4gICAgICAgID8gZ2V0UmVmZXJlbmNlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgOiBudWxsO1xuICAgICAgY29uc3QgY3VycmVudFBvcFJlY3QgPSBzaG91bGRDaGVjaygncG9wcGVyJylcbiAgICAgICAgPyBwb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgOiBudWxsO1xuXG4gICAgICBpZiAoXG4gICAgICAgIChjdXJyZW50UmVmUmVjdCAmJiBhcmVSZWN0c0RpZmZlcmVudChwcmV2UmVmUmVjdCwgY3VycmVudFJlZlJlY3QpKSB8fFxuICAgICAgICAoY3VycmVudFBvcFJlY3QgJiYgYXJlUmVjdHNEaWZmZXJlbnQocHJldlBvcFJlY3QsIGN1cnJlbnRQb3BSZWN0KSlcbiAgICAgICkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwcmV2UmVmUmVjdCA9IGN1cnJlbnRSZWZSZWN0O1xuICAgICAgcHJldlBvcFJlY3QgPSBjdXJyZW50UG9wUmVjdDtcblxuICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlUG9zaXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbk1vdW50KCk6IHZvaWQge1xuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuc3RpY2t5KSB7XG4gICAgICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc3RpY2t5O1xuXG5mdW5jdGlvbiBhcmVSZWN0c0RpZmZlcmVudChcbiAgcmVjdEE6IENsaWVudFJlY3QgfCBudWxsLFxuICByZWN0QjogQ2xpZW50UmVjdCB8IG51bGxcbik6IGJvb2xlYW4ge1xuICBpZiAocmVjdEEgJiYgcmVjdEIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgcmVjdEEudG9wICE9PSByZWN0Qi50b3AgfHxcbiAgICAgIHJlY3RBLnJpZ2h0ICE9PSByZWN0Qi5yaWdodCB8fFxuICAgICAgcmVjdEEuYm90dG9tICE9PSByZWN0Qi5ib3R0b20gfHxcbiAgICAgIHJlY3RBLmxlZnQgIT09IHJlY3RCLmxlZnRcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgY3NzIGZyb20gJy4uL2Rpc3QvdGlwcHkuY3NzJztcbmltcG9ydCB7aW5qZWN0Q1NTfSBmcm9tICcuLi9zcmMvY3NzJztcbmltcG9ydCB7aXNCcm93c2VyfSBmcm9tICcuLi9zcmMvYnJvd3Nlcic7XG5pbXBvcnQgdGlwcHksIHtoaWRlQWxsfSBmcm9tICcuLi9zcmMnO1xuaW1wb3J0IGNyZWF0ZVNpbmdsZXRvbiBmcm9tICcuLi9zcmMvYWRkb25zL2NyZWF0ZVNpbmdsZXRvbic7XG5pbXBvcnQgZGVsZWdhdGUgZnJvbSAnLi4vc3JjL2FkZG9ucy9kZWxlZ2F0ZSc7XG5pbXBvcnQgYW5pbWF0ZUZpbGwgZnJvbSAnLi4vc3JjL3BsdWdpbnMvYW5pbWF0ZUZpbGwnO1xuaW1wb3J0IGZvbGxvd0N1cnNvciBmcm9tICcuLi9zcmMvcGx1Z2lucy9mb2xsb3dDdXJzb3InO1xuaW1wb3J0IGlubGluZVBvc2l0aW9uaW5nIGZyb20gJy4uL3NyYy9wbHVnaW5zL2lubGluZVBvc2l0aW9uaW5nJztcbmltcG9ydCBzdGlja3kgZnJvbSAnLi4vc3JjL3BsdWdpbnMvc3RpY2t5JztcbmltcG9ydCB7Uk9VTkRfQVJST1d9IGZyb20gJy4uL3NyYy9jb25zdGFudHMnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJy4uL3NyYy90ZW1wbGF0ZSc7XG5cbmlmIChpc0Jyb3dzZXIpIHtcbiAgaW5qZWN0Q1NTKGNzcyk7XG59XG5cbnRpcHB5LnNldERlZmF1bHRQcm9wcyh7XG4gIHBsdWdpbnM6IFthbmltYXRlRmlsbCwgZm9sbG93Q3Vyc29yLCBpbmxpbmVQb3NpdGlvbmluZywgc3RpY2t5XSxcbiAgcmVuZGVyLFxufSk7XG5cbnRpcHB5LmNyZWF0ZVNpbmdsZXRvbiA9IGNyZWF0ZVNpbmdsZXRvbjtcbnRpcHB5LmRlbGVnYXRlID0gZGVsZWdhdGU7XG50aXBweS5oaWRlQWxsID0gaGlkZUFsbDtcbnRpcHB5LnJvdW5kQXJyb3cgPSBST1VORF9BUlJPVztcblxuZXhwb3J0IGRlZmF1bHQgdGlwcHk7XG4iLCIvKipcbiAqIEBvdmVydmlldyBiZXR0ZXItZG9tOiBMaXZlIGV4dGVuc2lvbiBwbGF5Z3JvdW5kXG4gKiBAdmVyc2lvbiAyLjEuMSBUdWUsIDE2IERlYyAyMDE0IDE0OjI3OjI2IEdNVFxuICogQGNvcHlyaWdodCAyMDEzLTIwMTQgTWFrc2ltIENoZW1lcmlzdWtcbiAqIEBsaWNlbnNlIE1JVFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hlbWVyaXN1ay9iZXR0ZXItZG9tXG4gKi9cbihmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjt2YXIgU0xJQ0UkMCA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiAgICB2YXIgV0lORE9XID0gd2luZG93O1xuICAgIHZhciBET0NVTUVOVCA9IGRvY3VtZW50O1xuICAgIHZhciBIVE1MID0gRE9DVU1FTlQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgdmFyIHVzZXJBZ2VudCA9IFdJTkRPVy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgIHZhciBqc2NyaXB0VmVyc2lvbiA9IFdJTkRPVy5TY3JpcHRFbmdpbmVNYWpvclZlcnNpb247XG5cbiAgICB2YXIgSlNDUklQVF9WRVJTSU9OID0ganNjcmlwdFZlcnNpb24gJiYganNjcmlwdFZlcnNpb24oKTtcbiAgICB2YXIgTEVHQUNZX0FORFJPSUQgPSB+dXNlckFnZW50LmluZGV4T2YoXCJBbmRyb2lkXCIpICYmIHVzZXJBZ2VudC5pbmRleE9mKFwiQ2hyb21lXCIpIDwgMDtcbiAgICB2YXIgV0VCS0lUX1BSRUZJWCA9IFdJTkRPVy5XZWJLaXRBbmltYXRpb25FdmVudCA/IFwiLXdlYmtpdC1cIiA6IFwiXCI7XG4gICAgdmFyIENVU1RPTV9FVkVOVF9UWVBFID0gXCJkYXRhYXZhaWxhYmxlXCI7XG5cbiAgICBmdW5jdGlvbiAkTnVsbEVsZW1lbnQoKSB7fVxuXG4gICAgZnVuY3Rpb24gJEVsZW1lbnQobm9kZSkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIHVzZSBhIGdlbmVyYXRlZCBwcm9wZXJ0eSB0byBzdG9yZSBhIHJlZmVyZW5jZVxuICAgICAgICAgICAgICAgIC8vIHRvIHRoZSB3cmFwcGVyIGZvciBjaXJjdWxhciBvYmplY3QgYmluZGluZ1xuICAgICAgICAgICAgICAgIG5vZGVbXCJfXzIwMDEwMDFfX1wiXSA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICB0aGlzWzBdID0gbm9kZTtcbiAgICAgICAgICAgICAgICB0aGlzLl8gPSB7XG4gICAgICAgICAgICAgICAgICAgIFwiaGFuZGxlcjIwMDEwMDFcIjogW10sXG4gICAgICAgICAgICAgICAgICAgIFwid2F0Y2hlcjIwMDEwMDFcIjoge30sXG4gICAgICAgICAgICAgICAgICAgIFwiZXh0ZW5zaW9uMjAwMTAwMVwiOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb250ZXh0MjAwMTAwMVwiOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZSkge1xuICAgICAgICAgICAgdmFyIGNhY2hlZCA9IG5vZGVbXCJfXzIwMDEwMDFfX1wiXTtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIHdyYXBwZXIgb25seSBvbmNlIGZvciBlYWNoIG5hdGl2ZSBlbGVtZW50XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkID8gY2FjaGVkIDogbmV3ICRFbGVtZW50KG5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkTnVsbEVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICRFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBub24gZWxlbWVudHMgbGlrZSB0ZXh0IG5vZGVzLCBjb21tZW50cyBldGMuXG4gICAgICAgICAgICByZXR1cm4gJEVsZW1lbnQobm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxID8gbm9kZSA6IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNbMF07XG5cbiAgICAgICAgICAgIHJldHVybiBub2RlID8gXCI8XCIgKyBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSArIFwiPlwiIDogXCJcIjtcbiAgICAgICAgfSxcbiAgICAgICAgdmVyc2lvbjogXCIyLjEuMVwiXG4gICAgfTtcblxuICAgICROdWxsRWxlbWVudC5wcm90b3R5cGUgPSBuZXcgJEVsZW1lbnQoKTtcblxuICAgIGZ1bmN0aW9uICREb2N1bWVudChub2RlKSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgPT09IDkpIHtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgICRFbGVtZW50LmNhbGwodGhpcywgbm9kZSk7XG4gICAgfVxuXG4gICAgJERvY3VtZW50LnByb3RvdHlwZSA9IG5ldyAkRWxlbWVudCgpO1xuXG4gICAgdmFyIERPTSA9IG5ldyAkRG9jdW1lbnQoRE9DVU1FTlQpO1xuXG4gICAgdmFyIHV0aWwkaW5kZXgkJGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbiAgICB2YXIgdXRpbCRpbmRleCQkZGVmYXVsdCA9IHtcbiAgICAgICAgY29tcHV0ZVN0eWxlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmN1cnJlbnRTdHlsZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbmplY3RFbGVtZW50OiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHV0aWxpdGVzXG4gICAgICAgIGV2ZXJ5OiB1dGlsJGluZGV4JCRhcnJheVByb3RvLmV2ZXJ5LFxuICAgICAgICBlYWNoOiB1dGlsJGluZGV4JCRhcnJheVByb3RvLmZvckVhY2gsXG4gICAgICAgIGZpbHRlcjogdXRpbCRpbmRleCQkYXJyYXlQcm90by5maWx0ZXIsXG4gICAgICAgIG1hcDogdXRpbCRpbmRleCQkYXJyYXlQcm90by5tYXAsXG4gICAgICAgIHNsaWNlOiB1dGlsJGluZGV4JCRhcnJheVByb3RvLnNsaWNlLFxuICAgICAgICBpc0FycmF5OiBBcnJheS5pc0FycmF5LFxuICAgICAgICBrZXlzOiBPYmplY3Qua2V5cyxcbiAgICAgICAgc2FmZUNhbGw6IGZ1bmN0aW9uKGNvbnRleHQsIGZuLCBhcmcxLCBhcmcyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSBcInN0cmluZ1wiKSBmbiA9IGNvbnRleHRbZm5dO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKGNvbnRleHQsIGFyZzEsIGFyZzIpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgV0lORE9XLnNldFRpbWVvdXQoZnVuY3Rpb24oKSAgeyB0aHJvdyBlcnIgfSwgMSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyOiBmdW5jdGlvbihtaXhpbnMsIGRlZmF1bHRCZWhhdmlvcikge1xuICAgICAgICAgICAgZGVmYXVsdEJlaGF2aW9yID0gZGVmYXVsdEJlaGF2aW9yIHx8IGZ1bmN0aW9uKCkge307XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG1peGlucykuZm9yRWFjaChmdW5jdGlvbihrZXkpICB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRzID0gZGVmYXVsdEJlaGF2aW9yKGtleSkgfHwgZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH07XG5cbiAgICAgICAgICAgICAgICAkRWxlbWVudC5wcm90b3R5cGVba2V5XSA9IG1peGluc1trZXldO1xuICAgICAgICAgICAgICAgICROdWxsRWxlbWVudC5wcm90b3R5cGVba2V5XSA9IGRlZmF1bHRzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldExlZ2FjeUZpbGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIGlmIChKU0NSSVBUX1ZFUlNJT04gPCAxMCkge1xuICAgICAgICAgICAgICAgIHZhciBsZWdhY3lTY3JpcHRzID0gdXRpbCRpbmRleCQkYXJyYXlQcm90by5maWx0ZXIuY2FsbChET0NVTUVOVC5zY3JpcHRzLCBmdW5jdGlvbihlbCkgIHtyZXR1cm4gZWwuc3JjLmluZGV4T2YoXCJiZXR0ZXItZG9tLWxlZ2FjeS5qc1wiKSA+PSAwfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobGVnYWN5U2NyaXB0cy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkluIG9yZGVyIHRvIHVzZSBsaXZlIGV4dGVuc2lvbnMgaW4gSUUgPCAxMCB5b3UgaGF2ZSB0byBpbmNsdWRlIGV4dHJhIGZpbGVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvYmV0dGVyLWRvbSNub3Rlcy1hYm91dC1vbGQtaWVzIGZvciBkZXRhaWxzLlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbGVnYWN5U2NyaXB0c1swXS5zcmMucmVwbGFjZShcIi5qc1wiLCBcIi5cIiArIHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIGN1c3RvbWl6ZWQgZXJyb3JzXG5cbiAgICBmdW5jdGlvbiBlcnJvcnMkJE1ldGhvZEVycm9yKG1ldGhvZE5hbWUsIGFyZ3MpIHt2YXIgdHlwZSA9IGFyZ3VtZW50c1syXTtpZih0eXBlID09PSB2b2lkIDApdHlwZSA9IFwiJEVsZW1lbnRcIjtcbiAgICAgICAgdmFyIHVybCA9IFwiaHR0cDovL2NoZW1lcmlzdWsuZ2l0aHViLmlvL2JldHRlci1kb20vXCIgKyB0eXBlICsgXCIuaHRtbCNcIiArIG1ldGhvZE5hbWUsXG4gICAgICAgICAgICBsaW5lID0gXCJpbnZhbGlkIGNhbGwgYFwiICsgdHlwZSArICh0eXBlID09PSBcIkRPTVwiID8gXCIuXCIgOiBcIiNcIikgKyBtZXRob2ROYW1lICsgXCIoXCI7XG5cbiAgICAgICAgbGluZSArPSB1dGlsJGluZGV4JCRkZWZhdWx0Lm1hcC5jYWxsKGFyZ3MsIGZ1bmN0aW9uKGFyZykgIHtyZXR1cm4gU3RyaW5nKGFyZyl9KS5qb2luKFwiLCBcIikgKyBcIilgO1wiO1xuXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGxpbmUgKyBcIiBjaGVjayBcIiArIHVybCArIFwiIHRvIHZlcmlmeSB0aGUgZnVuY3Rpb24gYXJndW1lbnRzXCI7XG4gICAgfVxuXG4gICAgZXJyb3JzJCRNZXRob2RFcnJvci5wcm90b3R5cGUgPSBuZXcgVHlwZUVycm9yKCk7XG5cbiAgICBmdW5jdGlvbiBlcnJvcnMkJFN0YXRpY01ldGhvZEVycm9yKG1ldGhvZE5hbWUsIGFyZ3MpIHtcbiAgICAgICAgZXJyb3JzJCRNZXRob2RFcnJvci5jYWxsKHRoaXMsIG1ldGhvZE5hbWUsIGFyZ3MsIFwiRE9NXCIpO1xuICAgIH1cblxuICAgIGVycm9ycyQkU3RhdGljTWV0aG9kRXJyb3IucHJvdG90eXBlID0gbmV3IFR5cGVFcnJvcigpO1xuXG4gICAgdmFyIC8vIG9wZXJhdG9yIHR5cGUgLyBwcmlvcml0eSBvYmplY3RcbiAgICAgICAgZ2xvYmFsJGVtbWV0JCRvcGVyYXRvcnMgPSB7XCIoXCI6IDEsXCIpXCI6IDIsXCJeXCI6IDMsXCI+XCI6IDQsXCIrXCI6IDUsXCIqXCI6IDYsXCJgXCI6IDcsXCJbXCI6IDgsXCIuXCI6IDgsXCIjXCI6IDh9LFxuICAgICAgICBnbG9iYWwkZW1tZXQkJHJlUGFyc2UgPSAvYFteYF0qYHxcXFtbXlxcXV0qXFxdfFxcLlteKCk+XisqYFsjXSt8W14oKT5eKypgWyMuXSt8XFxeK3wuL2csXG4gICAgICAgIGdsb2JhbCRlbW1ldCQkcmVBdHRyID0gL1xccyooW1xcd1xcLV0rKSg/Oj0oKD86YChbXmBdKilgKXxbXlxcc10qKSk/L2csXG4gICAgICAgIGdsb2JhbCRlbW1ldCQkcmVJbmRleCA9IC8oXFwkKykoPzpAKC0pPyhcXGQrKT8pPy9nLFxuICAgICAgICBnbG9iYWwkZW1tZXQkJHJlRG90ID0gL1xcLi9nLFxuICAgICAgICBnbG9iYWwkZW1tZXQkJHJlRG9sbGFyID0gL1xcJC9nLFxuICAgICAgICBnbG9iYWwkZW1tZXQkJHRhZ0NhY2hlID0ge1wiXCI6IFwiXCJ9LFxuICAgICAgICBnbG9iYWwkZW1tZXQkJG5vcm1hbGl6ZUF0dHJzID0gZnVuY3Rpb24oXywgbmFtZSwgdmFsdWUsIHJhd1ZhbHVlKSAge1xuICAgICAgICAgICAgLy8gdHJ5IHRvIGRldGVtbmllIHdoaWNoIGtpbmQgb2YgcXVvdGVzIHRvIHVzZVxuICAgICAgICAgICAgdmFyIHF1b3RlID0gdmFsdWUgJiYgdmFsdWUuaW5kZXhPZihcIlxcXCJcIikgPj0gMCA/IFwiJ1wiIDogXCJcXFwiXCI7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmF3VmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBncmFiIHVucXVvdGVkIHZhbHVlIGZvciBzbWFydCBxdW90ZXNcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHJhd1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgYm9vbGVhbiBhdHRyaWJ1dGVzIGJ5IHVzaW5nIG5hbWUgYXMgdmFsdWVcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhbHdheXMgd3JhcCBhdHRyaWJ1dGUgdmFsdWVzIHdpdGggcXVvdGVzIGV2ZW4gdGhleSBkb24ndCBleGlzdFxuICAgICAgICAgICAgcmV0dXJuIFwiIFwiICsgbmFtZSArIFwiPVwiICsgcXVvdGUgKyB2YWx1ZSArIHF1b3RlO1xuICAgICAgICB9LFxuICAgICAgICBnbG9iYWwkZW1tZXQkJGluamVjdFRlcm0gPSBmdW5jdGlvbih0ZXJtLCBlbmQpICB7cmV0dXJuIGZ1bmN0aW9uKGh0bWwpICB7XG4gICAgICAgICAgICAvLyBmaW5kIGluZGV4IG9mIHdoZXJlIHRvIGluamVjdCB0aGUgdGVybVxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZW5kID8gaHRtbC5sYXN0SW5kZXhPZihcIjxcIikgOiBodG1sLmluZGV4T2YoXCI+XCIpO1xuICAgICAgICAgICAgLy8gaW5qZWN0IHRoZSB0ZXJtIGludG8gdGhlIEhUTUwgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gaHRtbC5zbGljZSgwLCBpbmRleCkgKyB0ZXJtICsgaHRtbC5zbGljZShpbmRleCk7XG4gICAgICAgIH19LFxuICAgICAgICBnbG9iYWwkZW1tZXQkJG1ha2VUZXJtID0gZnVuY3Rpb24odGFnKSAge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbCRlbW1ldCQkdGFnQ2FjaGVbdGFnXSB8fCAoZ2xvYmFsJGVtbWV0JCR0YWdDYWNoZVt0YWddID0gXCI8XCIgKyB0YWcgKyBcIj48L1wiICsgdGFnICsgXCI+XCIpO1xuICAgICAgICB9LFxuICAgICAgICBnbG9iYWwkZW1tZXQkJG1ha2VJbmRleGVkVGVybSA9IGZ1bmN0aW9uKG4sIHRlcm0pICB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gQXJyYXkobiksIGk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB0ZXJtLnJlcGxhY2UoZ2xvYmFsJGVtbWV0JCRyZUluZGV4LCBmdW5jdGlvbihleHByLCBmbXQsIHNpZ24sIGJhc2UpICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IChzaWduID8gbiAtIGkgLSAxIDogaSkgKyAoYmFzZSA/ICtiYXNlIDogMSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSB6ZXJvLXBhZGRlZCBpbmRleCB2YWx1ZXMsIGxpa2UgJCQkIGV0Yy5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmbXQgKyBpbmRleCkuc2xpY2UoLWZtdC5sZW5ndGgpLnJlcGxhY2UoZ2xvYmFsJGVtbWV0JCRyZURvbGxhciwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBnbG9iYWwkZW1tZXQkJHJlVW5zYWZlID0gL1smPD5cIiddL2csXG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjIzNDc3My9jYW4taS1lc2NhcGUtaHRtbC1zcGVjaWFsLWNoYXJzLWluLWphdmFzY3JpcHRcbiAgICAgICAgZ2xvYmFsJGVtbWV0JCRzYWZlU3ltYm9sID0ge1wiJlwiOiBcIiZhbXA7XCIsIFwiPFwiOiBcIiZsdDtcIiwgXCI+XCI6IFwiJmd0O1wiLCBcIlxcXCJcIjogXCImcXVvdDtcIiwgXCInXCI6IFwiJiMwMzk7XCJ9O1xuXG4gICAgLy8gcG9wdWxhdGUgZW1wdHkgdGFnIG5hbWVzIHdpdGggcmVzdWx0XG4gICAgXCJhcmVhIGJhc2UgYnIgY29sIGhyIGltZyBpbnB1dCBsaW5rIG1ldGEgcGFyYW0gY29tbWFuZCBrZXlnZW4gc291cmNlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24odGFnKSAge1xuICAgICAgICBnbG9iYWwkZW1tZXQkJHRhZ0NhY2hlW3RhZ10gPSBcIjxcIiArIHRhZyArIFwiPlwiO1xuICAgIH0pO1xuXG4gICAgRE9NLmVtbWV0ID0gZnVuY3Rpb24odGVtcGxhdGUsIHZhck1hcCkge3ZhciAkRCQwO3ZhciAkRCQxO3ZhciAkRCQyO1xuICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgZXJyb3JzJCRTdGF0aWNNZXRob2RFcnJvcihcImVtbWV0XCIsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgaWYgKHZhck1hcCkgdGVtcGxhdGUgPSBET00uZm9ybWF0KHRlbXBsYXRlLCB2YXJNYXApO1xuXG4gICAgICAgIGlmICh0ZW1wbGF0ZSBpbiBnbG9iYWwkZW1tZXQkJHRhZ0NhY2hlKSB7cmV0dXJuIGdsb2JhbCRlbW1ldCQkdGFnQ2FjaGVbdGVtcGxhdGVdO31cblxuICAgICAgICAvLyB0cmFuc2Zvcm0gdGVtcGxhdGUgc3RyaW5nIGludG8gUlBOXG5cbiAgICAgICAgdmFyIHN0YWNrID0gW10sIG91dHB1dCA9IFtdO1xuXG4gICAgICAgICREJDIgPSAodGVtcGxhdGUubWF0Y2goZ2xvYmFsJGVtbWV0JCRyZVBhcnNlKSk7JEQkMCA9IDA7JEQkMSA9ICREJDIubGVuZ3RoO2ZvciAodmFyIHN0ciA7JEQkMCA8ICREJDE7KXtzdHIgPSAoJEQkMlskRCQwKytdKTtcbiAgICAgICAgICAgIHZhciBvcCA9IHN0clswXTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0eSA9IGdsb2JhbCRlbW1ldCQkb3BlcmF0b3JzW29wXTtcblxuICAgICAgICAgICAgaWYgKHByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0ciAhPT0gXCIoXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIF4gb3BlcmF0b3IgbmVlZCB0byBza2lwID4gc3RyLmxlbmd0aCB0aW1lc1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IChvcCA9PT0gXCJeXCIgPyBzdHIubGVuZ3RoIDogMSk7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFja1swXSAhPT0gb3AgJiYgZ2xvYmFsJGVtbWV0JCRvcGVyYXRvcnNbc3RhY2tbMF1dID49IHByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhlYWQgPSBzdGFjay5zaGlmdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goaGVhZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIF4gb3BlcmF0b3Igc3RvcCBzaGlmdGluZyB3aGVuIHRoZSBmaXJzdCA+IGlzIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wID09PSBcIl5cIiAmJiBoZWFkID09PSBcIj5cIikgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RyID09PSBcIilcIikge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOyAvLyByZW1vdmUgXCIoXCIgc3ltYm9sIGZyb20gc3RhY2tcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgdmFsdWVzIGluc2lkZSBvZiBgLi4uYCBhbmQgWy4uLl0gc2VjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wID09PSBcIltcIiB8fCBvcCA9PT0gXCJgXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHN0ci5zbGljZSgxLCAtMSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBtdWx0aXBsZSBjbGFzc2VzLCBlLmcuIGEub25lLnR3b1xuICAgICAgICAgICAgICAgICAgICBpZiAob3AgPT09IFwiLlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChzdHIuc2xpY2UoMSkucmVwbGFjZShnbG9iYWwkZW1tZXQkJHJlRG90LCBcIiBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhY2sudW5zaGlmdChvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChzdHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9OyREJDAgPSAkRCQxID0gJEQkMiA9IHZvaWQgMDtcblxuICAgICAgICBvdXRwdXQgPSBvdXRwdXQuY29uY2F0KHN0YWNrKTtcblxuICAgICAgICAvLyB0cmFuc2Zvcm0gUlBOIGludG8gaHRtbCBub2Rlc1xuXG4gICAgICAgIHN0YWNrID0gW107XG5cbiAgICAgICAgJEQkMCA9IDA7JEQkMSA9IG91dHB1dC5sZW5ndGg7Zm9yICh2YXIgc3RyJDAgOyREJDAgPCAkRCQxOyl7c3RyJDAgPSAob3V0cHV0WyREJDArK10pO1xuICAgICAgICAgICAgaWYgKHN0ciQwIGluIGdsb2JhbCRlbW1ldCQkb3BlcmF0b3JzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHN0YWNrLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5vZGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IFsgZ2xvYmFsJGVtbWV0JCRtYWtlVGVybShub2RlKSBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaChzdHIkMCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCIuXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2xvYmFsJGVtbWV0JCRpbmplY3RUZXJtKFwiIGNsYXNzPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCIjXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2xvYmFsJGVtbWV0JCRpbmplY3RUZXJtKFwiIGlkPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJbXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2xvYmFsJGVtbWV0JCRpbmplY3RUZXJtKHZhbHVlLnJlcGxhY2UoZ2xvYmFsJGVtbWV0JCRyZUF0dHIsIGdsb2JhbCRlbW1ldCQkbm9ybWFsaXplQXR0cnMpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgICAgICAgICBub2RlID0gZ2xvYmFsJGVtbWV0JCRtYWtlSW5kZXhlZFRlcm0oK3ZhbHVlLCBub2RlLmpvaW4oXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJgXCI6XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnVuc2hpZnQobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzY2FwZSB1bnNhZmUgSFRNTCBzeW1ib2xzXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBbIHZhbHVlLnJlcGxhY2UoZ2xvYmFsJGVtbWV0JCRyZVVuc2FmZSwgZnVuY3Rpb24oY2gpICB7cmV0dXJuIGdsb2JhbCRlbW1ldCQkc2FmZVN5bWJvbFtjaF19KSBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gZ2xvYmFsJGVtbWV0JCRtYWtlVGVybSh2YWx1ZSkgOiB2YWx1ZS5qb2luKFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHIkMCA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZ2xvYmFsJGVtbWV0JCRpbmplY3RUZXJtKHZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdHIkMCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gbm9kZS5tYXAodmFsdWUpIDogbm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3RhY2sudW5zaGlmdChzdHIkMCk7XG4gICAgICAgIH07JEQkMCA9ICREJDEgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBzaW5nbGUgdGFnIGNhc2VcbiAgICAgICAgICAgIG91dHB1dCA9IGdsb2JhbCRlbW1ldCQkbWFrZVRlcm0oc3RhY2tbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0cHV0ID0gc3RhY2tbMF0uam9pbihcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuICAgIHZhciBnbG9iYWwkZW1tZXQkJGRlZmF1bHQgPSBnbG9iYWwkZW1tZXQkJHRhZ0NhY2hlO1xuXG4gICAgdmFyIGRvY3VtZW50JGNyZWF0ZSQkbWFrZU1ldGhvZCA9IGZ1bmN0aW9uKGFsbCkgIHtyZXR1cm4gZnVuY3Rpb24odmFsdWUsIHZhck1hcCkge1xuICAgICAgICAgICAgdmFyIGRvYyA9IHRoaXNbMF0ub3duZXJEb2N1bWVudCxcbiAgICAgICAgICAgICAgICBzYW5kYm94ID0gdGhpcy5fW1wic2FuZGJveDIwMDEwMDFcIl07XG5cbiAgICAgICAgICAgIGlmICghc2FuZGJveCkge1xuICAgICAgICAgICAgICAgIHNhbmRib3ggPSBkb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9bXCJzYW5kYm94MjAwMTAwMVwiXSA9IHNhbmRib3g7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBub2RlcywgZWw7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSBpbiBnbG9iYWwkZW1tZXQkJGRlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICBub2RlcyA9IGRvYy5jcmVhdGVFbGVtZW50KHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbGwpIG5vZGVzID0gWyBuZXcgJEVsZW1lbnQobm9kZXMpIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09PSBcIjxcIiAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YXJNYXAgPyBET00uZm9ybWF0KHZhbHVlLCB2YXJNYXApIDogdmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBET00uZW1tZXQodmFsdWUsIHZhck1hcCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2FuZGJveC5pbm5lckhUTUwgPSB2YWx1ZTsgLy8gcGFyc2UgaW5wdXQgSFRNTCBzdHJpbmdcblxuICAgICAgICAgICAgICAgIGZvciAobm9kZXMgPSBhbGwgPyBbXSA6IG51bGw7IGVsID0gc2FuZGJveC5maXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgICAgICAgc2FuZGJveC5yZW1vdmVDaGlsZChlbCk7IC8vIGRldGFjaCBlbGVtZW50IGZyb20gdGhlIHNhbmRib3hcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5ldyAkRWxlbWVudChlbCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IGVsO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIHN0b3AgZWFybHksIGJlY2F1c2UgbmVlZCBvbmx5IHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhbGwgPyBub2RlcyA6ICRFbGVtZW50KG5vZGVzKTtcbiAgICAgICAgfX07XG5cbiAgICAkRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZSA9IGRvY3VtZW50JGNyZWF0ZSQkbWFrZU1ldGhvZChcIlwiKTtcblxuICAgICREb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlQWxsID0gZG9jdW1lbnQkY3JlYXRlJCRtYWtlTWV0aG9kKFwiQWxsXCIpO1xuXG4gICAgJERvY3VtZW50LnByb3RvdHlwZS5pbXBvcnRTY3JpcHRzID0gZnVuY3Rpb24oKSB7dmFyIHVybHMgPSBTTElDRSQwLmNhbGwoYXJndW1lbnRzLCAwKTtcbiAgICAgICAgdmFyIGRvYyA9IHRoaXNbMF0ub3duZXJEb2N1bWVudDtcblxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbigpICB7XG4gICAgICAgICAgICB2YXIgYXJnID0gdXJscy5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGFyZ1R5cGUgPSB0eXBlb2YgYXJnLFxuICAgICAgICAgICAgICAgIHNjcmlwdDtcblxuICAgICAgICAgICAgaWYgKGFyZ1R5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQuc3JjID0gYXJnO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbmxvYWQgPSBjYWxsYmFjaztcbiAgICAgICAgICAgICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdXRpbCRpbmRleCQkZGVmYXVsdC5pbmplY3RFbGVtZW50KHNjcmlwdCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ1R5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGFyZygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzJCRTdGF0aWNNZXRob2RFcnJvcihcImltcG9ydFNjcmlwdHNcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICAkRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydFN0eWxlcyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjc3NUZXh0KSB7XG4gICAgICAgIHZhciBzdHlsZVNoZWV0ID0gdGhpcy5fW1wic3R5bGVzMjAwMTAwMVwiXTtcblxuICAgICAgICBpZiAoIXN0eWxlU2hlZXQpIHtcbiAgICAgICAgICAgIHZhciBkb2MgPSB0aGlzWzBdLm93bmVyRG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgc3R5bGVOb2RlID0gdXRpbCRpbmRleCQkZGVmYXVsdC5pbmplY3RFbGVtZW50KGRvYy5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikpO1xuXG4gICAgICAgICAgICBzdHlsZVNoZWV0ID0gc3R5bGVOb2RlLnNoZWV0IHx8IHN0eWxlTm9kZS5zdHlsZVNoZWV0O1xuICAgICAgICAgICAgLy8gc3RvcmUgb2JqZWN0IGludGVybmFsbHlcbiAgICAgICAgICAgIHRoaXMuX1tcInN0eWxlczIwMDEwMDFcIl0gPSBzdHlsZVNoZWV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgY3NzVGV4dCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycyQkU3RhdGljTWV0aG9kRXJyb3IoXCJpbXBvcnRTdHlsZXNcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluc2VydCBydWxlcyBvbmUgYnkgb25lIGJlY2F1c2Ugb2Ygc2V2ZXJhbCByZWFzb25zOlxuICAgICAgICAvLyAxLiBJRTggZG9lcyBub3Qgc3VwcG9ydCBjb21tYSBpbiBhIHNlbGVjdG9yIHN0cmluZ1xuICAgICAgICAvLyAyLiBpZiBvbmUgc2VsZWN0b3IgZmFpbHMgaXQgZG9lc24ndCBicmVhayBvdGhlcnNcbiAgICAgICAgc2VsZWN0b3Iuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24oc2VsZWN0b3IpICB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZVNoZWV0LmNzc1J1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlU2hlZXQuaW5zZXJ0UnVsZShzZWxlY3RvciArIFwie1wiICsgY3NzVGV4dCArIFwifVwiLCBzdHlsZVNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZWxlY3RvclswXSAhPT0gXCJAXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVTaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBjc3NUZXh0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGRSdWxlIGRvZXNuJ3Qgc3VwcG9ydCBhdC1ydWxlcywgdXNlIGNzc1RleHQgaW5zdGVhZFxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNoZWV0LmNzc1RleHQgKz0gc2VsZWN0b3IgKyBcIntcIiArIGNzc1RleHQgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAgICAgICAgIC8vIHNpbGVudGx5IGlnbm9yZSBpbnZhbGlkIHJ1bGVzXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBIZWxwZXIgZm9yIGNzcyBzZWxlY3RvcnNcblxuICAgIHZhciB1dGlsJHNlbGVjdG9ybWF0Y2hlciQkcnF1aWNrSXMgPSAvXihcXHcqKSg/OiMoW1xcd1xcLV0rKSk/KD86XFxbKFtcXHdcXC1cXD1dKylcXF0pPyg/OlxcLihbXFx3XFwtXSspKT8kLyxcbiAgICAgICAgdXRpbCRzZWxlY3Rvcm1hdGNoZXIkJHByb3BOYW1lID0gXCJtIG9NIG1zTSBtb3pNIHdlYmtpdE1cIi5zcGxpdChcIiBcIikucmVkdWNlKGZ1bmN0aW9uKHJlc3VsdCwgcHJlZml4KSAge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBwcmVmaXggKyBcImF0Y2hlc1NlbGVjdG9yXCI7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0IHx8IEhUTUxbcHJvcGVydHlOYW1lXSAmJiBwcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgICB9LCBudWxsKTtcblxuICAgIHZhciB1dGlsJHNlbGVjdG9ybWF0Y2hlciQkZGVmYXVsdCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHZhciBxdWljayA9IHV0aWwkc2VsZWN0b3JtYXRjaGVyJCRycXVpY2tJcy5leGVjKHNlbGVjdG9yKTtcblxuICAgICAgICBpZiAocXVpY2spIHtcbiAgICAgICAgICAgIC8vIFF1aWNrIG1hdGNoaW5nIGlzIGluc3BpcmVkIGJ5IGpRdWVyeTpcbiAgICAgICAgICAgIC8vICAgMCAgMSAgICAyICAgMyAgICAgICAgICA0XG4gICAgICAgICAgICAvLyBbIF8sIHRhZywgaWQsIGF0dHJpYnV0ZSwgY2xhc3MgXVxuICAgICAgICAgICAgaWYgKHF1aWNrWzFdKSBxdWlja1sxXSA9IHF1aWNrWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocXVpY2tbM10pIHF1aWNrWzNdID0gcXVpY2tbM10uc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAgaWYgKHF1aWNrWzRdKSBxdWlja1s0XSA9IFwiIFwiICsgcXVpY2tbNF0gKyBcIiBcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7dmFyICREJDM7dmFyICREJDQ7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBmb3VuZDtcbiAgICAgICAgICAgIGlmICghcXVpY2sgJiYgIXV0aWwkc2VsZWN0b3JtYXRjaGVyJCRwcm9wTmFtZSkge1xuICAgICAgICAgICAgICAgIGZvdW5kID0gKGNvbnRleHQgfHwgbm9kZS5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICg7IG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMTsgbm9kZSA9IG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChxdWljaykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXF1aWNrWzFdIHx8IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gcXVpY2tbMV0pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXF1aWNrWzJdIHx8IG5vZGUuaWQgPT09IHF1aWNrWzJdKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFxdWlja1szXSB8fCAocXVpY2tbM11bMV0gPyBub2RlLmdldEF0dHJpYnV0ZShxdWlja1szXVswXSkgPT09IHF1aWNrWzNdWzFdIDogbm9kZS5oYXNBdHRyaWJ1dGUocXVpY2tbM11bMF0pKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghcXVpY2tbNF0gfHwgKFwiIFwiICsgbm9kZS5jbGFzc05hbWUgKyBcIiBcIikuaW5kZXhPZihxdWlja1s0XSkgPj0gMClcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodXRpbCRzZWxlY3Rvcm1hdGNoZXIkJHByb3BOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBub2RlW3V0aWwkc2VsZWN0b3JtYXRjaGVyJCRwcm9wTmFtZV0oc2VsZWN0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJEQkMyA9IDA7JEQkNCA9IGZvdW5kLmxlbmd0aDtmb3IgKHZhciBuIDskRCQzIDwgJEQkNDspe24gPSAoZm91bmRbJEQkMysrXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IG5vZGUpIHJldHVybiBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTskRCQzID0gJEQkNCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgfHwgIWNvbnRleHQgfHwgbm9kZSA9PT0gY29udGV4dCkgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgJiYgbm9kZTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIGVsZW1lbnQkY2hpbGRyZW4kJG1ha2VNZXRob2QgPSBmdW5jdGlvbihhbGwpICB7cmV0dXJuIGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChhbGwpIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiY2hpbGRyZW5cIiwgYXJndW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgIT09IFwibnVtYmVyXCIpIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiY2hpbGRcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBub2RlID0gdGhpc1swXSxcbiAgICAgICAgICAgIG1hdGNoZXIgPSB1dGlsJHNlbGVjdG9ybWF0Y2hlciQkZGVmYXVsdChzZWxlY3RvciksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIGlmIChKU0NSSVBUX1ZFUlNJT04gPCA5KSB7XG4gICAgICAgICAgICAvLyBmaXggSUU4IGJ1ZyB3aXRoIGNoaWxkcmVuIGNvbGxlY3Rpb25cbiAgICAgICAgICAgIGNoaWxkcmVuID0gdXRpbCRpbmRleCQkZGVmYXVsdC5maWx0ZXIuY2FsbChjaGlsZHJlbiwgZnVuY3Rpb24obm9kZSkgIHtyZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gMX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFsbCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXIpIGNoaWxkcmVuID0gdXRpbCRpbmRleCQkZGVmYXVsdC5maWx0ZXIuY2FsbChjaGlsZHJlbiwgbWF0Y2hlcik7XG5cbiAgICAgICAgICAgIHJldHVybiB1dGlsJGluZGV4JCRkZWZhdWx0Lm1hcC5jYWxsKGNoaWxkcmVuLCAkRWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IgPCAwKSBzZWxlY3RvciA9IGNoaWxkcmVuLmxlbmd0aCArIHNlbGVjdG9yO1xuXG4gICAgICAgICAgICByZXR1cm4gJEVsZW1lbnQoY2hpbGRyZW5bc2VsZWN0b3JdKTtcbiAgICAgICAgfVxuICAgIH19O1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIGNoaWxkOiBlbGVtZW50JGNoaWxkcmVuJCRtYWtlTWV0aG9kKGZhbHNlKSxcblxuICAgICAgICBjaGlsZHJlbjogZWxlbWVudCRjaGlsZHJlbiQkbWFrZU1ldGhvZCh0cnVlKVxuICAgIH0sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpICB7XG4gICAgICAgIHJldHVybiBtZXRob2ROYW1lID09PSBcImNoaWxkXCIgPyBmdW5jdGlvbigpICB7cmV0dXJuIG5ldyAkTnVsbEVsZW1lbnQoKX0gOiBmdW5jdGlvbigpICB7cmV0dXJuIFtdfTtcbiAgICB9KTtcblxuICAgIHZhciBlbGVtZW50JGNsYXNzZXMkJHJlU3BhY2UgPSAvW1xcblxcdFxccl0vZyxcbiAgICAgICAgZWxlbWVudCRjbGFzc2VzJCRtYWtlTWV0aG9kID0gZnVuY3Rpb24obmF0aXZlTWV0aG9kTmFtZSwgc3RyYXRlZ3kpICB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IG5hdGl2ZU1ldGhvZE5hbWUgPT09IFwiY29udGFpbnNcIiA/IFwiaGFzQ2xhc3NcIiA6IG5hdGl2ZU1ldGhvZE5hbWUgKyBcIkNsYXNzXCI7XG4gICAgICAgICAgICBpZiAoSFRNTC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgICAgICAvLyB1c2UgbmF0aXZlIGNsYXNzTGlzdCBwcm9wZXJ0eSBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgICAgIHN0cmF0ZWd5ID0gZnVuY3Rpb24oZWwsIHRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbFswXS5jbGFzc0xpc3RbbmF0aXZlTWV0aG9kTmFtZV0odG9rZW4pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXRob2ROYW1lID09PSBcImhhc0NsYXNzXCIgfHwgbWV0aG9kTmFtZSA9PT0gXCJ0b2dnbGVDbGFzc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRva2VuLCBmb3JjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZvcmNlID09PSBcImJvb2xlYW5cIiAmJiBtZXRob2ROYW1lID09PSBcInRvZ2dsZUNsYXNzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZm9yY2UgPyBcImFkZENsYXNzXCIgOiBcInJlbW92ZUNsYXNzXCJdKHRva2VuKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IGVycm9ycyQkTWV0aG9kRXJyb3IobWV0aG9kTmFtZSwgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyYXRlZ3kodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHt2YXIgJEQkNTt2YXIgJEQkNjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VucyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgICAgICAgICAgICAkRCQ1ID0gMDskRCQ2ID0gdG9rZW5zLmxlbmd0aDtmb3IgKHZhciB0b2tlbiA7JEQkNSA8ICREJDY7KXt0b2tlbiA9ICh0b2tlbnNbJEQkNSsrXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcInN0cmluZ1wiKSB0aHJvdyBuZXcgZXJyb3JzJCRNZXRob2RFcnJvcihtZXRob2ROYW1lLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJhdGVneSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH07JEQkNSA9ICREJDYgPSB2b2lkIDA7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICBoYXNDbGFzczogZWxlbWVudCRjbGFzc2VzJCRtYWtlTWV0aG9kKFwiY29udGFpbnNcIiwgZnVuY3Rpb24oZWwsIHRva2VuKSAge1xuICAgICAgICAgICAgcmV0dXJuIChcIiBcIiArIGVsWzBdLmNsYXNzTmFtZSArIFwiIFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGVsZW1lbnQkY2xhc3NlcyQkcmVTcGFjZSwgXCIgXCIpLmluZGV4T2YoXCIgXCIgKyB0b2tlbiArIFwiIFwiKSA+PSAwO1xuICAgICAgICB9KSxcblxuICAgICAgICBhZGRDbGFzczogZWxlbWVudCRjbGFzc2VzJCRtYWtlTWV0aG9kKFwiYWRkXCIsIGZ1bmN0aW9uKGVsLCB0b2tlbikgIHtcbiAgICAgICAgICAgIGlmICghZWwuaGFzQ2xhc3ModG9rZW4pKSBlbFswXS5jbGFzc05hbWUgKz0gXCIgXCIgKyB0b2tlbjtcbiAgICAgICAgfSksXG5cbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGVsZW1lbnQkY2xhc3NlcyQkbWFrZU1ldGhvZChcInJlbW92ZVwiLCBmdW5jdGlvbihlbCwgdG9rZW4pICB7XG4gICAgICAgICAgICBlbFswXS5jbGFzc05hbWUgPSAoXCIgXCIgKyBlbFswXS5jbGFzc05hbWUgKyBcIiBcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZShlbGVtZW50JGNsYXNzZXMkJHJlU3BhY2UsIFwiIFwiKS5yZXBsYWNlKFwiIFwiICsgdG9rZW4gKyBcIiBcIiwgXCIgXCIpLnRyaW0oKTtcbiAgICAgICAgfSksXG5cbiAgICAgICAgdG9nZ2xlQ2xhc3M6IGVsZW1lbnQkY2xhc3NlcyQkbWFrZU1ldGhvZChcInRvZ2dsZVwiLCBmdW5jdGlvbihlbCwgdG9rZW4pICB7XG4gICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBlbC5oYXNDbGFzcyh0b2tlbik7XG5cbiAgICAgICAgICAgIGlmIChoYXNDbGFzcykge1xuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUNsYXNzKHRva2VuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZWxbMF0uY2xhc3NOYW1lICs9IFwiIFwiICsgdG9rZW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAhaGFzQ2xhc3M7XG4gICAgICAgIH0pXG4gICAgfSwgZnVuY3Rpb24obWV0aG9kTmFtZSkgIHtcbiAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09IFwiaGFzQ2xhc3NcIiB8fCBtZXRob2ROYW1lID09PSBcInRvZ2dsZUNsYXNzXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpICB7cmV0dXJuIGZhbHNlfTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIGNsb25lOiBmdW5jdGlvbihkZWVwKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZXAgIT09IFwiYm9vbGVhblwiKSB0aHJvdyBuZXcgZXJyb3JzJCRNZXRob2RFcnJvcihcImNsb25lXCIsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpc1swXSwgcmVzdWx0O1xuICAgICAgICAgICAgaWYgKEpTQ1JJUFRfVkVSU0lPTiA8IDkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBET00uY3JlYXRlKG5vZGUub3V0ZXJIVE1MKTtcblxuICAgICAgICAgICAgICAgIGlmICghZGVlcCkgcmVzdWx0LnNldChcIlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3ICRFbGVtZW50KG5vZGUuY2xvbmVOb2RlKGRlZXApKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gbmV3ICROdWxsRWxlbWVudCgpfTtcbiAgICB9KTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICBjb250YWluczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzWzBdO1xuXG4gICAgICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mICRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVyTm9kZSA9IGVsZW1lbnRbMF07XG5cbiAgICAgICAgICAgICAgICBpZiAob3RoZXJOb2RlID09PSBub2RlKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5jb250YWlucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5jb250YWlucyhvdGhlck5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG90aGVyTm9kZSkgJiAxNjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiY29udGFpbnNcIiwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gZmFsc2V9O1xuICAgIH0pO1xuXG4gICAgLy8gSW5zcGlyZWQgYnkgdGhlIGFydGljbGUgd3JpdHRlbiBieSBEYW5pZWwgQnVjaG5lcjpcbiAgICAvLyBodHRwOi8vd3d3LmJhY2thbGxleWNvZGVyLmNvbS8yMDE0LzA0LzE4L2VsZW1lbnQtcXVlcmllcy1mcm9tLXRoZS1mZWV0LXVwL1xuXG4gICAgdmFyIGVsZW1lbnQkY29udGV4dCQkQ09OVEVYVF9URU1QTEFURSA9IFwiZGl2W3N0eWxlPW92ZXJmbG93OmhpZGRlbl0+b2JqZWN0W2RhdGE9YGFib3V0OmJsYW5rYCB0eXBlPXRleHQvaHRtbCBzdHlsZT1gcG9zaXRpb246YWJzb2x1dGVgIHdpZHRoPTEwMCUgaGVpZ2h0PTEwMCVdXCI7XG4gICAgaWYgKEpTQ1JJUFRfVkVSU0lPTikge1xuICAgICAgICAvLyB1c2UgY2FsYyB0byBjdXQgdWdseSBmcmFtZSBib3JkZXIgaW4gSUU+OFxuICAgICAgICBlbGVtZW50JGNvbnRleHQkJENPTlRFWFRfVEVNUExBVEUgPSBlbGVtZW50JGNvbnRleHQkJENPTlRFWFRfVEVNUExBVEUucmVwbGFjZShcInBvc2l0aW9uOmFic29sdXRlXCIsIFwid2lkdGg6Y2FsYygxMDAlICsgNHB4KTtoZWlnaHQ6Y2FsYygxMDAlICsgNHB4KTtsZWZ0Oi0ycHg7dG9wOi0ycHg7cG9zaXRpb246YWJzb2x1dGVcIik7XG5cbiAgICAgICAgaWYgKEpTQ1JJUFRfVkVSU0lPTiA+IDgpIHtcbiAgICAgICAgICAgIC8vIGZvciBJRT44IGhhdmUgdG8gc2V0IHRoZSBkYXRhIGF0dHJpYnV0ZSBBRlRFUiBhZGRpbmcgZWxlbWVudCB0byB0aGUgRE9NXG4gICAgICAgICAgICBlbGVtZW50JGNvbnRleHQkJENPTlRFWFRfVEVNUExBVEUgPSBlbGVtZW50JGNvbnRleHQkJENPTlRFWFRfVEVNUExBVEUucmVwbGFjZShcImRhdGE9YGFib3V0OmJsYW5rYCBcIiwgXCJcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJRTggZmFpbHMgd2l0aCBhYm91dDpibGFuaywgdXNlIGJldHRlci1kb20tbGVnYWN5Lmh0bWwgaW5zdGVhZFxuICAgICAgICAgICAgZWxlbWVudCRjb250ZXh0JCRDT05URVhUX1RFTVBMQVRFID0gZWxlbWVudCRjb250ZXh0JCRDT05URVhUX1RFTVBMQVRFLnJlcGxhY2UoXCJhYm91dDpibGFua1wiLCB1dGlsJGluZGV4JCRkZWZhdWx0LmdldExlZ2FjeUZpbGUoXCJodG1sXCIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENocm9tZS9TYWZhcmkvT3BlcmEgaGF2ZSBzZXJpb3VzIGJ1ZyB3aXRoIHRhYmJpbmcgdG8gdGhlIDxvYmplY3Q+IHRyZWU6XG4gICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1NTE1MFxuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIGNvbnRleHQ6IGZ1bmN0aW9uKG5hbWUpIHt2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMV07aWYoY2FsbGJhY2sgPT09IHZvaWQgMCljYWxsYmFjayA9IGZ1bmN0aW9uKCkgIHt9O1xuICAgICAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5fW1wiY29udGV4dDIwMDEwMDFcIl0sXG4gICAgICAgICAgICAgICAgZGF0YSA9IGNvbnRleHRzW25hbWVdIHx8IFtdO1xuXG4gICAgICAgICAgICBpZiAoZGF0YVswXSkge1xuICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrIGlzIGFsd2F5cyBhc3luY1xuICAgICAgICAgICAgICAgIFdJTkRPVy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgIHsgY2FsbGJhY2soZGF0YVsxXSkgfSwgMSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHVzZSBpbm5lckhUTUwgaW5zdGVhZCBvZiBjcmVhdGluZyBlbGVtZW50IG1hbnVhbGx5IGJlY2F1c2Ugb2YgSUU4XG4gICAgICAgICAgICB2YXIgY3R4ID0gRE9NLmNyZWF0ZShlbGVtZW50JGNvbnRleHQkJENPTlRFWFRfVEVNUExBVEUpO1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IGN0eC5nZXQoXCJmaXJzdENoaWxkXCIpO1xuICAgICAgICAgICAgLy8gc2V0IG9ubG9hZCBoYW5kbGVyIGJlZm9yZSBhZGRpbmcgZWxlbWVudCB0byB0aGUgRE9NXG4gICAgICAgICAgICBvYmplY3Qub25sb2FkID0gZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgICAgIC8vIGFwcGx5IHVzZXItZGVmaW5lZCBzdHlsZXMgZm9yIHRoZSBjb250ZXh0XG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byBhZGQgY2xhc3MgaW4gcmVhZHkgY2FsbGJhY2sgYmVjYXVzZSBvZiBJRThcbiAgICAgICAgICAgICAgICBpZiAoY3R4LmFkZENsYXNzKG5hbWUpLmNzcyhcInBvc2l0aW9uXCIpID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jc3MoXCJwb3NpdGlvblwiLCBcInJlbGF0aXZlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBzdG9yZSBuZXcgY29udGV4dCByb290IGludGVybmFsbHkgYW5kIGludm9rZSBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGFbMV0gPSBuZXcgJERvY3VtZW50KG9iamVjdC5jb250ZW50RG9jdW1lbnQpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuYmVmb3JlKGN0eCk7XG4gICAgICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OKSB7XG4gICAgICAgICAgICAgICAgLy8gSUUgZG9lc24ndCB3b3JrIGlmIHRvIHNldCB0aGUgZGF0YSBhdHRyaWJ1dGUgYmVmb3JlIGFkZGluZ1xuICAgICAgICAgICAgICAgIC8vIHRoZSA8b2JqZWN0PiBlbGVtZW50IHRvIHRoZSBET00uIElFOCB3aWxsIGlnbm9yZSB0aGlzIGNoYW5nZVxuICAgICAgICAgICAgICAgIC8vIGFuZCB3b24ndCBzdGFydCBidWlsaW5nIGEgbmV3IGRvY3VtZW50IGZvciBhYm91dDpibGFua1xuICAgICAgICAgICAgICAgIG9iamVjdC5kYXRhID0gXCJhYm91dDpibGFua1wiO1xuXG4gICAgICAgICAgICAgICAgaWYgKEpTQ1JJUFRfVkVSU0lPTiA8IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSUU4IGRvZXMgbm90IHN1cHBvcnQgb25sb2FkIC0gdXNlIHRpbWVvdXQgaW5zdGVhZFxuICAgICAgICAgICAgICAgICAgICBET00ucmVxdWVzdEZyYW1lKGZ1bmN0aW9uIHJlcGVhdCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2JqZWN0LmNvbnRlbnREb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBET00ucmVxdWVzdEZyYW1lKHJlcGVhdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGV4dHJhIHNpemVzIGFuZCBjdXQgdGhlIGZyYW1lIGJvcmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgY3R4WzBdLmF0dGFjaEV2ZW50KFwib25yZXNpemVcIiwgZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSWQgPSBmcmFtZUlkIHx8IERPTS5yZXF1ZXN0RnJhbWUoZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Qud2lkdGggPSBjdHhbMF0ub2Zmc2V0V2lkdGggKyA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaGVpZ2h0ID0gY3R4WzBdLm9mZnNldEhlaWdodCArIDQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm9ubG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBzdG9yZSBjb250ZXh0IGRhdGEgaW50ZXJuYWxseVxuICAgICAgICAgICAgY29udGV4dHNbbmFtZV0gPSBkYXRhO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0YVswXSA9IGN0eDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSGVscGVyIGZvciBDU1MgcHJvcGVydGllcyBhY2Nlc3NcblxuICAgIHZhciB1dGlsJHN0eWxlaG9va3MkJHJlRGFzaCA9IC9cXC0uL2csXG4gICAgICAgIHV0aWwkc3R5bGVob29rcyQkY3NzUHJlZml4ZXMgPSBbXCJXZWJraXRcIiwgXCJPXCIsIFwiTW96XCIsIFwibXNcIl0sXG4gICAgICAgIHV0aWwkc3R5bGVob29rcyQkaG9va3MgPSB7Z2V0OiB7fSwgc2V0OiB7fSwgZmluZDogZnVuY3Rpb24obmFtZSwgc3R5bGUpIHtcbiAgICAgICAgICAgIHZhciBwcm9wTmFtZSA9IG5hbWUucmVwbGFjZSh1dGlsJHN0eWxlaG9va3MkJHJlRGFzaCwgZnVuY3Rpb24oc3RyKSAge3JldHVybiBzdHJbMV0udG9VcHBlckNhc2UoKX0pO1xuXG4gICAgICAgICAgICBpZiAoIShwcm9wTmFtZSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9wTmFtZSA9IHV0aWwkc3R5bGVob29rcyQkY3NzUHJlZml4ZXNcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihwcmVmaXgpICB7cmV0dXJuIHByZWZpeCArIHByb3BOYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zbGljZSgxKX0pXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24ocHJvcCkgIHtyZXR1cm4gcHJvcCBpbiBzdHlsZX0pWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRbbmFtZV0gPSB0aGlzLnNldFtuYW1lXSA9IHByb3BOYW1lO1xuICAgICAgICB9fSxcbiAgICAgICAgdXRpbCRzdHlsZWhvb2tzJCRkaXJlY3Rpb25zID0gW1wiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCJdLFxuICAgICAgICB1dGlsJHN0eWxlaG9va3MkJHNob3J0Q3V0cyA9IHtcbiAgICAgICAgICAgIGZvbnQ6IFtcImZvbnRTdHlsZVwiLCBcImZvbnRTaXplXCIsIFwiL1wiLCBcImxpbmVIZWlnaHRcIiwgXCJmb250RmFtaWx5XCJdLFxuICAgICAgICAgICAgcGFkZGluZzogdXRpbCRzdHlsZWhvb2tzJCRkaXJlY3Rpb25zLm1hcChmdW5jdGlvbihkaXIpICB7cmV0dXJuIFwicGFkZGluZ1wiICsgZGlyfSksXG4gICAgICAgICAgICBtYXJnaW46IHV0aWwkc3R5bGVob29rcyQkZGlyZWN0aW9ucy5tYXAoZnVuY3Rpb24oZGlyKSAge3JldHVybiBcIm1hcmdpblwiICsgZGlyfSksXG4gICAgICAgICAgICBcImJvcmRlci13aWR0aFwiOiB1dGlsJHN0eWxlaG9va3MkJGRpcmVjdGlvbnMubWFwKGZ1bmN0aW9uKGRpcikgIHtyZXR1cm4gXCJib3JkZXJcIiArIGRpciArIFwiV2lkdGhcIn0pLFxuICAgICAgICAgICAgXCJib3JkZXItc3R5bGVcIjogdXRpbCRzdHlsZWhvb2tzJCRkaXJlY3Rpb25zLm1hcChmdW5jdGlvbihkaXIpICB7cmV0dXJuIFwiYm9yZGVyXCIgKyBkaXIgKyBcIlN0eWxlXCJ9KVxuICAgICAgICB9O1xuXG4gICAgLy8gRXhjbHVkZSB0aGUgZm9sbG93aW5nIGNzcyBwcm9wZXJ0aWVzIGZyb20gYWRkaW5nIHB4XG4gICAgXCIgZmxvYXQgZmlsbC1vcGFjaXR5IGZvbnQtd2VpZ2h0IGxpbmUtaGVpZ2h0IG9wYWNpdHkgb3JwaGFucyB3aWRvd3Mgei1pbmRleCB6b29tIFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3BOYW1lKSAge1xuICAgICAgICB2YXIgc3R5bGVQcm9wTmFtZSA9IHByb3BOYW1lLnJlcGxhY2UodXRpbCRzdHlsZWhvb2tzJCRyZURhc2gsIGZ1bmN0aW9uKHN0cikgIHtyZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCl9KTtcblxuICAgICAgICBpZiAocHJvcE5hbWUgPT09IFwiZmxvYXRcIikge1xuICAgICAgICAgICAgc3R5bGVQcm9wTmFtZSA9IFwiY3NzRmxvYXRcIiBpbiBIVE1MLnN0eWxlID8gXCJjc3NGbG9hdFwiIDogXCJzdHlsZUZsb2F0XCI7XG4gICAgICAgICAgICAvLyBub3JtYWxpemUgZmxvYXQgY3NzIHByb3BlcnR5XG4gICAgICAgICAgICB1dGlsJHN0eWxlaG9va3MkJGhvb2tzLmdldFtwcm9wTmFtZV0gPSB1dGlsJHN0eWxlaG9va3MkJGhvb2tzLnNldFtwcm9wTmFtZV0gPSBzdHlsZVByb3BOYW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXRpbCRzdHlsZWhvb2tzJCRob29rcy5nZXRbcHJvcE5hbWVdID0gc3R5bGVQcm9wTmFtZTtcbiAgICAgICAgICAgIHV0aWwkc3R5bGVob29rcyQkaG9va3Muc2V0W3Byb3BOYW1lXSA9IGZ1bmN0aW9uKHZhbHVlLCBzdHlsZSkgIHtcbiAgICAgICAgICAgICAgICBzdHlsZVtzdHlsZVByb3BOYW1lXSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBub3JtYWxpemUgcHJvcGVydHkgc2hvcnRjdXRzXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5rZXlzKHV0aWwkc3R5bGVob29rcyQkc2hvcnRDdXRzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgIHtcbiAgICAgICAgdmFyIHByb3BzID0gdXRpbCRzdHlsZWhvb2tzJCRzaG9ydEN1dHNba2V5XTtcblxuICAgICAgICB1dGlsJHN0eWxlaG9va3MkJGhvb2tzLmdldFtrZXldID0gZnVuY3Rpb24oc3R5bGUpICB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgICAgICAgaGFzRW1wdHlTdHlsZVZhbHVlID0gZnVuY3Rpb24ocHJvcCwgaW5kZXgpICB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3AgPT09IFwiL1wiID8gcHJvcCA6IHN0eWxlW3Byb3BdKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXJlc3VsdFtpbmRleF07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHByb3BzLnNvbWUoaGFzRW1wdHlTdHlsZVZhbHVlKSA/IFwiXCIgOiByZXN1bHQuam9pbihcIiBcIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdXRpbCRzdHlsZWhvb2tzJCRob29rcy5zZXRba2V5XSA9IGZ1bmN0aW9uKHZhbHVlLCBzdHlsZSkgIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiBcImNzc1RleHRcIiBpbiBzdHlsZSkge1xuICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6ZSBzZXR0aW5nIGNvbXBsZXggcHJvcGVydHkgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgc3R5bGUuY3NzVGV4dCArPSBcIjtcIiArIGtleSArIFwiOlwiICsgdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24obmFtZSkgIHtyZXR1cm4gc3R5bGVbbmFtZV0gPSB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgPyB2YWx1ZSArIFwicHhcIiA6IHZhbHVlLnRvU3RyaW5nKCl9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHZhciB1dGlsJHN0eWxlaG9va3MkJGRlZmF1bHQgPSB1dGlsJHN0eWxlaG9va3MkJGhvb2tzO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIGNzczogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzWzBdLFxuICAgICAgICAgICAgICAgIHN0eWxlID0gbm9kZS5zdHlsZSxcbiAgICAgICAgICAgICAgICBjb21wdXRlZDtcblxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMSAmJiAodHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgfHwgdXRpbCRpbmRleCQkZGVmYXVsdC5pc0FycmF5KG5hbWUpKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdHJhdGVneSA9IGZ1bmN0aW9uKG5hbWUpICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZXR0ZXIgPSB1dGlsJHN0eWxlaG9va3MkJGRlZmF1bHQuZ2V0W25hbWVdIHx8IHV0aWwkc3R5bGVob29rcyQkZGVmYXVsdC5maW5kKG5hbWUsIHN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdHlwZW9mIGdldHRlciA9PT0gXCJmdW5jdGlvblwiID8gZ2V0dGVyKHN0eWxlKSA6IHN0eWxlW2dldHRlcl07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wdXRlZCkgY29tcHV0ZWQgPSB1dGlsJGluZGV4JCRkZWZhdWx0LmNvbXB1dGVTdHlsZShub2RlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0eXBlb2YgZ2V0dGVyID09PSBcImZ1bmN0aW9uXCIgPyBnZXR0ZXIoY29tcHV0ZWQpIDogY29tcHV0ZWRbZ2V0dGVyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJhdGVneShuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZS5tYXAoc3RyYXRlZ3kpLnJlZHVjZShmdW5jdGlvbihtZW1vLCB2YWx1ZSwgaW5kZXgpICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1vW25hbWVbaW5kZXhdXSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgICAgICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMiAmJiB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHZhciBzZXR0ZXIgPSB1dGlsJHN0eWxlaG9va3MkJGRlZmF1bHQuc2V0W25hbWVdIHx8IHV0aWwkc3R5bGVob29rcyQkZGVmYXVsdC5maW5kKG5hbWUsIHN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB2YWx1ZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNldHRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRlcih2YWx1ZSwgc3R5bGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlW3NldHRlcl0gPSB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgPyB2YWx1ZSArIFwicHhcIiA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChsZW4gPT09IDEgJiYgbmFtZSAmJiB0eXBlb2YgbmFtZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQua2V5cyhuYW1lKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgIHsgdGhpcyQwLmNzcyhrZXksIG5hbWVba2V5XSkgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiY3NzXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwgZnVuY3Rpb24oKSAge3JldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHV0aWwkaW5kZXgkJGRlZmF1bHQuaXNBcnJheShuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEgfHwgdHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfX0pO1xuXG4gICAgdmFyIGVsZW1lbnQkZGVmaW5lJCRBVFRSX0NBU0UgPSBKU0NSSVBUX1ZFUlNJT04gPCA5ID8gXCJ0b1VwcGVyQ2FzZVwiIDogXCJ0b0xvd2VyQ2FzZVwiO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIGRlZmluZTogZnVuY3Rpb24obmFtZSwgZ2V0dGVyLCBzZXR0ZXIpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpc1swXTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBnZXR0ZXIgIT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2Ygc2V0dGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzJCRNZXRob2RFcnJvcihcImRlZmluZVwiLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgdHJpY2sgdG8gZml4IGluZmluaXRlIHJlY3Vyc2lvbiBpbiBJRTg6XG4gICAgICAgICAgICAvLyBodHRwOi8vd3d3LnNtYXNoaW5nbWFnYXppbmUuY29tLzIwMTQvMTEvMjgvY29tcGxldGUtcG9seWZpbGwtaHRtbDUtZGV0YWlscy1lbGVtZW50L1xuXG4gICAgICAgICAgICB2YXIgYXR0ck5hbWUgPSBuYW1lW2VsZW1lbnQkZGVmaW5lJCRBVFRSX0NBU0VdKCk7XG4gICAgICAgICAgICB2YXIgX3NldEF0dHJpYnV0ZSA9IG5vZGUuc2V0QXR0cmlidXRlO1xuICAgICAgICAgICAgdmFyIF9yZW1vdmVBdHRyaWJ1dGUgPSBub2RlLnJlbW92ZUF0dHJpYnV0ZTtcbiAgICAgICAgICAgIGlmIChKU0NSSVBUX1ZFUlNJT04gPCA5KSB7XG4gICAgICAgICAgICAgICAgLy8gcmVhZCBhdHRyaWJ1dGUgYmVmb3JlIHRoZSBkZWZpbmVQcm9wZXJ0eSBjYWxsXG4gICAgICAgICAgICAgICAgLy8gdG8gc2V0IHRoZSBjb3JyZWN0IGluaXRpYWwgc3RhdGUgZm9yIElFOFxuICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTtcblxuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZVthdHRyTmFtZV0gPSBpbml0aWFsVmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgbmFtZSwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXR0clZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIDEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBhdHRyIHZhbHVlIC0+IHByb3AgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldHRlci5jYWxsKHRoaXMkMCwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24ocHJvcFZhbHVlKSAge1xuICAgICAgICAgICAgICAgICAgICAvLyBwcm9wIHZhbHVlIC0+IGF0dHIgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJWYWx1ZSA9IHNldHRlci5jYWxsKHRoaXMkMCwgcHJvcFZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0clZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZW1vdmVBdHRyaWJ1dGUuY2FsbChub2RlLCBhdHRyTmFtZSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2V0QXR0cmlidXRlLmNhbGwobm9kZSwgYXR0ck5hbWUsIGF0dHJWYWx1ZSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gb3ZlcnJpZGUgbWV0aG9kcyB0byBjYXRjaCBjaGFuZ2VzIGZyb20gYXR0cmlidXRlcyB0b29cbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGZsYWdzKSAge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gbmFtZVtlbGVtZW50JGRlZmluZSQkQVRUUl9DQVNFXSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVbbmFtZV0gPSBnZXR0ZXIuY2FsbCh0aGlzJDAsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfc2V0QXR0cmlidXRlLmNhbGwobm9kZSwgbmFtZSwgdmFsdWUsIGZsYWdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uKG5hbWUsIGZsYWdzKSAge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gbmFtZVtlbGVtZW50JGRlZmluZSQkQVRUUl9DQVNFXSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVbbmFtZV0gPSBnZXR0ZXIuY2FsbCh0aGlzJDAsIG51bGwpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9yZW1vdmVBdHRyaWJ1dGUuY2FsbChub2RlLCBuYW1lLCBmbGFncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuXG4gICAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldChcIlwiKTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICAvLyBiaWcgcGFydCBvZiBjb2RlIGluc3BpcmVkIGJ5IFNpenpsZTpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9ibG9iL21hc3Rlci9zaXp6bGUuanNcblxuICAgIHZhciBlbGVtZW50JGZpbmQkJHJxdWljayA9IERPQ1VNRU5ULmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPyAvXig/OihcXHcrKXxcXC4oW1xcd1xcLV0rKSkkLyA6IC9eKD86KFxcdyspKSQvLFxuICAgICAgICBlbGVtZW50JGZpbmQkJHJlc2NhcGUgPSAvJ3xcXFxcL2csXG4gICAgICAgIGVsZW1lbnQkZmluZCQkbWFrZU1ldGhvZCA9IGZ1bmN0aW9uKGFsbCkgIHtyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiZmluZFwiICsgYWxsLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNbMF0sXG4gICAgICAgICAgICAgICAgcXVpY2tNYXRjaCA9IGVsZW1lbnQkZmluZCQkcnF1aWNrLmV4ZWMoc2VsZWN0b3IpLFxuICAgICAgICAgICAgICAgIHJlc3VsdCwgb2xkLCBuaWQsIGNvbnRleHQ7XG5cbiAgICAgICAgICAgIGlmIChxdWlja01hdGNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHF1aWNrTWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlZWQtdXA6IFwiVEFHXCJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlZWQtdXA6IFwiLkNMQVNTXCJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gbm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHF1aWNrTWF0Y2hbMl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgIWFsbCkgcmVzdWx0ID0gcmVzdWx0WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvbGQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRleHQgPSBub2RlO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgIT09IG5vZGUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbiB3b3JrIGFyb3VuZCB0aGlzIGJ5IHNwZWNpZnlpbmcgYW4gZXh0cmEgSUQgb24gdGhlIHJvb3RcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHdvcmtpbmcgdXAgZnJvbSB0aGVyZSAoVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoZSB0ZWNobmlxdWUpXG4gICAgICAgICAgICAgICAgICAgIGlmICggKG9sZCA9IG5vZGUuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmlkID0gb2xkLnJlcGxhY2UoZWxlbWVudCRmaW5kJCRyZXNjYXBlLCBcIlxcXFwkJlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5pZCA9IFwiRE9NMjAwMTAwMVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBuaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBuaWQgKyBzZWxlY3Rvci5zcGxpdChcIixcIikuam9pbihcIixcIiArIG5pZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdXRpbCRpbmRleCQkZGVmYXVsdC5zYWZlQ2FsbChjb250ZXh0LCBcInF1ZXJ5U2VsZWN0b3JcIiArIGFsbCwgc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFvbGQpIG5vZGUucmVtb3ZlQXR0cmlidXRlKFwiaWRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhbGwgPyB1dGlsJGluZGV4JCRkZWZhdWx0Lm1hcC5jYWxsKHJlc3VsdCwgJEVsZW1lbnQpIDogJEVsZW1lbnQocmVzdWx0KTtcbiAgICAgICAgfX07XG5cbiAgICB1dGlsJGluZGV4JCRkZWZhdWx0LnJlZ2lzdGVyKHtcbiAgICAgICAgZmluZDogZWxlbWVudCRmaW5kJCRtYWtlTWV0aG9kKFwiXCIpLFxuXG4gICAgICAgIGZpbmRBbGw6IGVsZW1lbnQkZmluZCQkbWFrZU1ldGhvZChcIkFsbFwiKVxuICAgIH0sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpICB7XG4gICAgICAgIHJldHVybiBtZXRob2ROYW1lID09PSBcImZpbmRcIiA/IGZ1bmN0aW9uKCkgIHtyZXR1cm4gbmV3ICROdWxsRWxlbWVudCgpfSA6IGZ1bmN0aW9uKCkgIHtyZXR1cm4gW119O1xuICAgIH0pO1xuXG4gICAgdmFyIHV0aWwkZXZlbnRob29rcyQkaG9va3MgPSB7fTtcbiAgICBpZiAoXCJvbmZvY3VzaW5cIiBpbiBET0NVTUVOVC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgdXRpbCRldmVudGhvb2tzJCRob29rcy5mb2N1cyA9IGZ1bmN0aW9uKGhhbmRsZXIpICB7IGhhbmRsZXIuX3R5cGUgPSBcImZvY3VzaW5cIiB9O1xuICAgICAgICB1dGlsJGV2ZW50aG9va3MkJGhvb2tzLmJsdXIgPSBmdW5jdGlvbihoYW5kbGVyKSAgeyBoYW5kbGVyLl90eXBlID0gXCJmb2N1c291dFwiIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgZm9jdXNpbi9mb2N1c291dCBldmVudHNcbiAgICAgICAgdXRpbCRldmVudGhvb2tzJCRob29rcy5mb2N1cyA9IHV0aWwkZXZlbnRob29rcyQkaG9va3MuYmx1ciA9IGZ1bmN0aW9uKGhhbmRsZXIpICB7IGhhbmRsZXIuY2FwdHVyaW5nID0gdHJ1ZSB9O1xuICAgIH1cbiAgICBpZiAoRE9DVU1FTlQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLnZhbGlkaXR5KSB7XG4gICAgICAgIHV0aWwkZXZlbnRob29rcyQkaG9va3MuaW52YWxpZCA9IGZ1bmN0aW9uKGhhbmRsZXIpICB7IGhhbmRsZXIuY2FwdHVyaW5nID0gdHJ1ZSB9O1xuICAgIH1cbiAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSkge1xuICAgICAgICAvLyBmaXggbm9uLWJ1YmJsaW5nIGZvcm0gZXZlbnRzIGZvciBJRTggdGhlcmVmb3JlXG4gICAgICAgIC8vIHVzZSBjdXN0b20gZXZlbnQgdHlwZSBpbnN0ZWFkIG9mIG9yaWdpbmFsIG9uZVxuICAgICAgICBbXCJzdWJtaXRcIiwgXCJjaGFuZ2VcIiwgXCJyZXNldFwiXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpICB7XG4gICAgICAgICAgICB1dGlsJGV2ZW50aG9va3MkJGhvb2tzW25hbWVdID0gZnVuY3Rpb24oaGFuZGxlcikgIHsgaGFuZGxlci5fdHlwZSA9IFwiX1wiIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciB1dGlsJGV2ZW50aG9va3MkJGRlZmF1bHQgPSB1dGlsJGV2ZW50aG9va3MkJGhvb2tzO1xuXG4gICAgZnVuY3Rpb24gdXRpbCRldmVudGhhbmRsZXIkJGdldEV2ZW50UHJvcGVydHkobmFtZSwgZSwgdHlwZSwgbm9kZSwgdGFyZ2V0LCBjdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBlW1wiX18yMDAxMDAxX19cIl07XG5cbiAgICAgICAgICAgIHJldHVybiBhcmdzID8gYXJnc1tuYW1lXSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSkge1xuICAgICAgICAgICAgdmFyIGRvY0VsID0gbm9kZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwid2hpY2hcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5rZXlDb2RlO1xuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgICAgICAgICAgIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgICAgICAgICAgICAgICAvLyBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICk7XG4gICAgICAgICAgICBjYXNlIFwicGFnZVhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5jbGllbnRYICsgZG9jRWwuc2Nyb2xsTGVmdCAtIGRvY0VsLmNsaWVudExlZnQ7XG4gICAgICAgICAgICBjYXNlIFwicGFnZVlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5jbGllbnRZICsgZG9jRWwuc2Nyb2xsVG9wIC0gZG9jRWwuY2xpZW50VG9wO1xuICAgICAgICAgICAgY2FzZSBcInByZXZlbnREZWZhdWx0XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gZS5yZXR1cm5WYWx1ZSA9IGZhbHNlfTtcbiAgICAgICAgICAgIGNhc2UgXCJzdG9wUHJvcGFnYXRpb25cIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSAge3JldHVybiBlLmNhbmNlbEJ1YmJsZSA9IHRydWV9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgY2FzZSBcImRlZmF1bHRQcmV2ZW50ZWRcIjpcbiAgICAgICAgICAgIC8vIElFOCBhbmQgQW5kcm9pZCAyLjMgdXNlIHJldHVyblZhbHVlIGluc3RlYWQgb2YgZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICAgICAgcmV0dXJuIFwiZGVmYXVsdFByZXZlbnRlZFwiIGluIGUgPyBlLmRlZmF1bHRQcmV2ZW50ZWQgOiBlLnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgICAgICAgY2FzZSBcInRhcmdldFwiOlxuICAgICAgICAgICAgcmV0dXJuICRFbGVtZW50KHRhcmdldCk7XG4gICAgICAgIGNhc2UgXCJjdXJyZW50VGFyZ2V0XCI6XG4gICAgICAgICAgICByZXR1cm4gJEVsZW1lbnQoY3VycmVudFRhcmdldCk7XG4gICAgICAgIGNhc2UgXCJyZWxhdGVkVGFyZ2V0XCI6XG4gICAgICAgICAgICByZXR1cm4gJEVsZW1lbnQoZS5yZWxhdGVkVGFyZ2V0IHx8IGVbKGUudG9FbGVtZW50ID09PSBub2RlID8gXCJmcm9tXCIgOiBcInRvXCIpICsgXCJFbGVtZW50XCJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZSA9IGVbbmFtZV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSAge3JldHVybiB2YWx1ZS5hcHBseShlLCBhcmd1bWVudHMpfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGlsJGV2ZW50aGFuZGxlciQkRXZlbnRIYW5kbGVyKHR5cGUsIHNlbGVjdG9yLCBjYWxsYmFjaywgcHJvcHMsIGVsLCBvbmNlKSB7XG4gICAgICAgIHZhciBub2RlID0gZWxbMF0sXG4gICAgICAgICAgICBob29rID0gdXRpbCRldmVudGhvb2tzJCRkZWZhdWx0W3R5cGVdLFxuICAgICAgICAgICAgbWF0Y2hlciA9IHV0aWwkc2VsZWN0b3JtYXRjaGVyJCRkZWZhdWx0KHNlbGVjdG9yLCBub2RlKSxcbiAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbihlKSAge1xuICAgICAgICAgICAgICAgIGUgPSBlIHx8IFdJTkRPVy5ldmVudDtcbiAgICAgICAgICAgICAgICAvLyBlYXJseSBzdG9wIGluIGNhc2Ugb2YgZGVmYXVsdCBhY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAodXRpbCRldmVudGhhbmRsZXIkJEV2ZW50SGFuZGxlci5za2lwID09PSB0eXBlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIuX3R5cGUgPT09IENVU1RPTV9FVkVOVF9UWVBFICYmIGUuc3JjVXJuICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gaGFuZGxlIGN1c3RvbSBldmVudHMgaW4gbGVnYWN5IElFXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHNyY0VsZW1lbnQgY2FuIGJlIG51bGwgaW4gbGVnYWN5IElFIHdoZW4gdGFyZ2V0IGlzIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCB8fCBub2RlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gbWF0Y2hlciA/IG1hdGNoZXIodGFyZ2V0KSA6IG5vZGUsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBwcm9wcyB8fCBbXTtcblxuICAgICAgICAgICAgICAgIC8vIGVhcmx5IHN0b3AgZm9yIGxhdGUgYmluZGluZyBvciB3aGVuIHRhcmdldCBkb2Vzbid0IG1hdGNoIHNlbGVjdG9yXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50VGFyZ2V0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBvZmYgY2FsbGJhY2sgZXZlbiBpZiBpdCB0aHJvd3MgYW4gZXhjZXB0aW9uIGxhdGVyXG4gICAgICAgICAgICAgICAgaWYgKG9uY2UpIGVsLm9mZih0eXBlLCBjYWxsYmFjayk7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKG5hbWUpICB7cmV0dXJuIHV0aWwkZXZlbnRoYW5kbGVyJCRnZXRFdmVudFByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwgZSwgdHlwZSwgbm9kZSwgdGFyZ2V0LCBjdXJyZW50VGFyZ2V0KX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSB1dGlsJGluZGV4JCRkZWZhdWx0LnNsaWNlLmNhbGwoZVtcIl9fMjAwMTAwMV9fXCJdIHx8IFswXSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCBkZWZhdWx0IGlmIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5hcHBseShlbCwgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChKU0NSSVBUX1ZFUlNJT04gPCA5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGlmIChob29rKSBoYW5kbGVyID0gaG9vayhoYW5kbGVyLCB0eXBlKSB8fCBoYW5kbGVyO1xuICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSAmJiAhKFwib25cIiArIChoYW5kbGVyLl90eXBlIHx8IHR5cGUpIGluIG5vZGUpKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgY3VzdG9tIGV2ZW50cyBmb3IgSUU4XG4gICAgICAgICAgICBoYW5kbGVyLl90eXBlID0gQ1VTVE9NX0VWRU5UX1RZUEU7XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVyLnR5cGUgPSB0eXBlO1xuICAgICAgICBoYW5kbGVyLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIGhhbmRsZXIuc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgICAgICByZXR1cm4gaGFuZGxlcjtcbiAgICB9XG5cbiAgICB2YXIgdXRpbCRldmVudGhhbmRsZXIkJGRlZmF1bHQgPSB1dGlsJGV2ZW50aGFuZGxlciQkRXZlbnRIYW5kbGVyO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIGZpcmU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpc1swXSxcbiAgICAgICAgICAgICAgICBlLCBldmVudFR5cGUsIGNhbkNvbnRpbnVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgaG9vayA9IHV0aWwkZXZlbnRob29rcyQkZGVmYXVsdFt0eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IHt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGhvb2spIGhhbmRsZXIgPSBob29rKGhhbmRsZXIpIHx8IGhhbmRsZXI7XG5cbiAgICAgICAgICAgICAgICBldmVudFR5cGUgPSBoYW5kbGVyLl90eXBlIHx8IHR5cGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiZmlyZVwiLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEpTQ1JJUFRfVkVSU0lPTiA8IDkpIHtcbiAgICAgICAgICAgICAgICBlID0gbm9kZS5vd25lckRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgZVtcIl9fMjAwMTAwMV9fXCJdID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBjdXN0b20gZXZlbnRzIGZvciBsZWdhY3kgSUVcbiAgICAgICAgICAgICAgICBpZiAoIShcIm9uXCIgKyBldmVudFR5cGUgaW4gbm9kZSkpIGV2ZW50VHlwZSA9IENVU1RPTV9FVkVOVF9UWVBFO1xuICAgICAgICAgICAgICAgIC8vIHN0b3JlIG9yaWdpbmFsIGV2ZW50IHR5cGVcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRUeXBlID09PSBDVVNUT01fRVZFTlRfVFlQRSkgZS5zcmNVcm4gPSB0eXBlO1xuXG4gICAgICAgICAgICAgICAgbm9kZS5maXJlRXZlbnQoXCJvblwiICsgZXZlbnRUeXBlLCBlKTtcblxuICAgICAgICAgICAgICAgIGNhbkNvbnRpbnVlID0gZS5yZXR1cm5WYWx1ZSAhPT0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUgPSBub2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpO1xuICAgICAgICAgICAgICAgIGVbXCJfXzIwMDEwMDFfX1wiXSA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICBlLmluaXRFdmVudChldmVudFR5cGUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIGNhbkNvbnRpbnVlID0gbm9kZS5kaXNwYXRjaEV2ZW50KGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjYWxsIG5hdGl2ZSBmdW5jdGlvbiB0byB0cmlnZ2VyIGRlZmF1bHQgYmVoYXZpb3JcbiAgICAgICAgICAgIGlmIChjYW5Db250aW51ZSAmJiBub2RlW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBjdXJyZW50IGV2ZW50XG4gICAgICAgICAgICAgICAgdXRpbCRldmVudGhhbmRsZXIkJGRlZmF1bHQuc2tpcCA9IHR5cGU7XG5cbiAgICAgICAgICAgICAgICB1dGlsJGluZGV4JCRkZWZhdWx0LnNhZmVDYWxsKG5vZGUsIHR5cGUpO1xuXG4gICAgICAgICAgICAgICAgdXRpbCRldmVudGhhbmRsZXIkJGRlZmF1bHQuc2tpcCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYW5Db250aW51ZTtcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gdHJ1ZX07XG4gICAgfSk7XG5cbiAgICB2YXIgdXRpbCRhY2Nlc3Nvcmhvb2tzJCRob29rcyA9IHtnZXQ6IHt9LCBzZXQ6IHt9fTtcblxuICAgIC8vIGZpeCBjYW1lbCBjYXNlZCBhdHRyaWJ1dGVzXG4gICAgXCJ0YWJJbmRleCByZWFkT25seSBtYXhMZW5ndGggY2VsbFNwYWNpbmcgY2VsbFBhZGRpbmcgcm93U3BhbiBjb2xTcGFuIHVzZU1hcCBmcmFtZUJvcmRlciBjb250ZW50RWRpdGFibGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihrZXkpICB7XG4gICAgICAgIHV0aWwkYWNjZXNzb3Job29rcyQkaG9va3MuZ2V0WyBrZXkudG9Mb3dlckNhc2UoKSBdID0gZnVuY3Rpb24obm9kZSkgIHtyZXR1cm4gbm9kZVtrZXldfTtcbiAgICB9KTtcblxuICAgIC8vIHN0eWxlIGhvb2tcbiAgICB1dGlsJGFjY2Vzc29yaG9va3MkJGhvb2tzLmdldC5zdHlsZSA9IGZ1bmN0aW9uKG5vZGUpICB7cmV0dXJuIG5vZGUuc3R5bGUuY3NzVGV4dH07XG4gICAgdXRpbCRhY2Nlc3Nvcmhvb2tzJCRob29rcy5zZXQuc3R5bGUgPSBmdW5jdGlvbihub2RlLCB2YWx1ZSkgIHsgbm9kZS5zdHlsZS5jc3NUZXh0ID0gdmFsdWUgfTtcblxuICAgIC8vIHRpdGxlIGhvb2sgZm9yIERPTVxuICAgIHV0aWwkYWNjZXNzb3Job29rcyQkaG9va3MuZ2V0LnRpdGxlID0gZnVuY3Rpb24obm9kZSkgIHtcbiAgICAgICAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcblxuICAgICAgICByZXR1cm4gbm9kZSA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCA/IGRvYy50aXRsZSA6IG5vZGUudGl0bGU7XG4gICAgfTtcblxuICAgIHV0aWwkYWNjZXNzb3Job29rcyQkaG9va3Muc2V0LnRpdGxlID0gZnVuY3Rpb24obm9kZSwgdmFsdWUpICB7XG4gICAgICAgIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG5cbiAgICAgICAgKG5vZGUgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgPyBkb2MgOiBub2RlKS50aXRsZSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICB1dGlsJGFjY2Vzc29yaG9va3MkJGhvb2tzLmdldC51bmRlZmluZWQgPSBmdW5jdGlvbihub2RlKSAge1xuICAgICAgICB2YXIgbmFtZTtcblxuICAgICAgICBzd2l0Y2ggKG5vZGUudGFnTmFtZSkge1xuICAgICAgICBjYXNlIFwiU0VMRUNUXCI6XG4gICAgICAgICAgICByZXR1cm4gfm5vZGUuc2VsZWN0ZWRJbmRleCA/IG5vZGUub3B0aW9uc1sgbm9kZS5zZWxlY3RlZEluZGV4IF0udmFsdWUgOiBcIlwiO1xuXG4gICAgICAgIGNhc2UgXCJPUFRJT05cIjpcbiAgICAgICAgICAgIG5hbWUgPSBub2RlLmhhc0F0dHJpYnV0ZShcInZhbHVlXCIpID8gXCJ2YWx1ZVwiIDogXCJ0ZXh0XCI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmFtZSA9IG5vZGUudHlwZSAmJiBcInZhbHVlXCIgaW4gbm9kZSA/IFwidmFsdWVcIiA6IFwiaW5uZXJIVE1MXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZVtuYW1lXTtcbiAgICB9O1xuXG4gICAgdXRpbCRhY2Nlc3Nvcmhvb2tzJCRob29rcy5zZXQudmFsdWUgPSBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSBcIlNFTEVDVFwiKSB7XG4gICAgICAgICAgICAvLyBzZWxlY3Rib3ggaGFzIHNwZWNpYWwgY2FzZVxuICAgICAgICAgICAgaWYgKHV0aWwkaW5kZXgkJGRlZmF1bHQuZXZlcnkuY2FsbChub2RlLm9wdGlvbnMsIGZ1bmN0aW9uKG8pICB7cmV0dXJuICEoby5zZWxlY3RlZCA9IG8udmFsdWUgPT09IHZhbHVlKX0pKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmb3IgSUUgdXNlIGlubmVyVGV4dCBmb3IgdGV4dGFyZWFiZWNhdXNlIGl0IGRvZXNuJ3QgdHJpZ2dlciBvbnByb3BlcnR5Y2hhbmdlXG4gICAgICAgICAgICBub2RlW0pTQ1JJUFRfVkVSU0lPTiA8IDkgJiYgbm9kZS50eXBlID09PSBcInRleHRhcmVhXCIgPyBcImlubmVyVGV4dFwiIDogXCJ2YWx1ZVwiXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHNvbWUgYnJvd3NlcnMgZG9uJ3QgcmVjb2duaXplIGlucHV0W3R5cGU9ZW1haWxdIGV0Yy5cbiAgICB1dGlsJGFjY2Vzc29yaG9va3MkJGhvb2tzLmdldC50eXBlID0gZnVuY3Rpb24obm9kZSkgIHtyZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpIHx8IG5vZGUudHlwZX07XG4gICAgaWYgKEpTQ1JJUFRfVkVSU0lPTiA8IDkpIHtcbiAgICAgICAgLy8gSUU4IGhhcyBpbm5lclRleHQgYnV0IG5vdCB0ZXh0Q29udGVudFxuICAgICAgICB1dGlsJGFjY2Vzc29yaG9va3MkJGhvb2tzLmdldC50ZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUpICB7cmV0dXJuIG5vZGUuaW5uZXJUZXh0fTtcbiAgICAgICAgdXRpbCRhY2Nlc3Nvcmhvb2tzJCRob29rcy5zZXQudGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlLCB2YWx1ZSkgIHsgbm9kZS5pbm5lclRleHQgPSB2YWx1ZSB9O1xuXG4gICAgICAgIC8vIElFOCBzb21ldGltZXMgYnJlYWtzIG9uIGlubmVySFRNTFxuICAgICAgICB1dGlsJGFjY2Vzc29yaG9va3MkJGhvb2tzLnNldC5pbm5lckhUTUwgPSBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5pbm5lclRleHQgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgRE9NLmNyZWF0ZUFsbCh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbih4KSAge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB1dGlsJGFjY2Vzc29yaG9va3MkJGRlZmF1bHQgPSB1dGlsJGFjY2Vzc29yaG9va3MkJGhvb2tzO1xuXG4gICAgdmFyIGVsZW1lbnQkZ2V0JCRyZVVwcGVyID0gL1tBLVpdL2csXG4gICAgICAgIGVsZW1lbnQkZ2V0JCRyZWFkUHJpdmF0ZVByb3BlcnR5ID0gZnVuY3Rpb24obm9kZSwga2V5KSAge1xuICAgICAgICAgICAgLy8gY29udmVydCBmcm9tIGNhbWVsIGNhc2UgdG8gZGFzaC1zZXBhcmF0ZWQgdmFsdWVcbiAgICAgICAgICAgIGtleSA9IGtleS5yZXBsYWNlKGVsZW1lbnQkZ2V0JCRyZVVwcGVyLCBmdW5jdGlvbihsKSAge3JldHVybiBcIi1cIiArIGwudG9Mb3dlckNhc2UoKX0pO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtXCIgKyBrZXkpO1xuXG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHRyeSB0byByZWNvZ25pemUgYW5kIHBhcnNlICBvYmplY3Qgbm90YXRpb24gc3ludGF4XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09PSBcIntcIiAmJiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gXCJ9XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCByZXR1cm4gdGhlIHZhbHVlIGl0c2VsZlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICB1dGlsJGluZGV4JCRkZWZhdWx0LnJlZ2lzdGVyKHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNbMF0sXG4gICAgICAgICAgICAgICAgaG9vayA9IHV0aWwkYWNjZXNzb3Job29rcyQkZGVmYXVsdC5nZXRbbmFtZV07XG5cbiAgICAgICAgICAgIGlmIChob29rKSByZXR1cm4gaG9vayhub2RlLCBuYW1lKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgaW4gbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVtuYW1lXTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVbMF0gIT09IFwiX1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gbmFtZS5zbGljZSgxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLl87XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBlbGVtZW50JGdldCQkcmVhZFByaXZhdGVQcm9wZXJ0eShub2RlLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWwkaW5kZXgkJGRlZmF1bHQuaXNBcnJheShuYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lLnJlZHVjZShmdW5jdGlvbihtZW1vLCBrZXkpICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobWVtb1trZXldID0gdGhpcyQwLmdldChrZXkpLCBtZW1vKTtcbiAgICAgICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwiZ2V0XCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBmdW5jdGlvbigpICB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpICB7cmV0dXJuIHZvaWQgMH07XG4gICAgfSk7XG5cbiAgICB2YXIgZWxlbWVudCRtYW5pcHVsYXRpb24kJG1ha2VNZXRob2QgPSBmdW5jdGlvbihtZXRob2ROYW1lLCBmYXN0U3RyYXRlZ3ksIHJlcXVpcmVzUGFyZW50LCBzdHJhdGVneSkgIHtyZXR1cm4gZnVuY3Rpb24oKSB7dmFyIGNvbnRlbnRzID0gU0xJQ0UkMC5jYWxsKGFyZ3VtZW50cywgMCk7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNbMF07XG5cbiAgICAgICAgICAgIGlmIChyZXF1aXJlc1BhcmVudCAmJiAhbm9kZS5wYXJlbnROb2RlKSByZXR1cm4gdGhpcztcblxuICAgICAgICAgICAgLy8gdGhlIGlkZWEgb2YgdGhlIGFsZ29yaXRobSBpcyB0byBjb25zdHJ1Y3QgSFRNTCBzdHJpbmdcbiAgICAgICAgICAgIC8vIHdoZW4gcG9zc2libGUgb3IgdXNlIGRvY3VtZW50IGZyYWdtZW50IGFzIGEgZmFsbGJhY2sgdG9cbiAgICAgICAgICAgIC8vIGludm9rZSBtYW5pcHVsYXRpb24gdXNpbmcgYSBzaW5nbGUgbWV0aG9kIGNhbGxcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGZhc3RTdHJhdGVneSA/IFwiXCIgOiBub2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG4gICAgICAgICAgICBjb250ZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNvbnRlbnQpICB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQodGhpcyQwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmcmFnbWVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgKz0gY29udGVudC50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gRE9NLmNyZWF0ZUFsbChjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29udGVudCBpbnN0YW5jZW9mICRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbIGNvbnRlbnQgXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodXRpbCRpbmRleCQkZGVmYXVsdC5pc0FycmF5KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnJhZ21lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFwcGVuZCBleGlzdGluZyBzdHJpbmcgdG8gZnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBET00uY3JlYXRlQWxsKGZyYWdtZW50KS5jb25jYXQoY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWxsYmFjayB0byBkb2N1bWVudCBmcmFnbWVudCBzdHJhdGVneVxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29udGVudC5mb3JFYWNoKGZ1bmN0aW9uKGVsKSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWxbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmcmFnbWVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIG5vZGUuaW5zZXJ0QWRqYWNlbnRIVE1MKGZhc3RTdHJhdGVneSwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJhdGVneShub2RlLCBmcmFnbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9fTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICBhZnRlcjogZWxlbWVudCRtYW5pcHVsYXRpb24kJG1ha2VNZXRob2QoXCJhZnRlclwiLCBcImFmdGVyZW5kXCIsIHRydWUsIGZ1bmN0aW9uKG5vZGUsIHJlbGF0ZWROb2RlKSAge1xuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyZWxhdGVkTm9kZSwgbm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgIH0pLFxuXG4gICAgICAgIGJlZm9yZTogZWxlbWVudCRtYW5pcHVsYXRpb24kJG1ha2VNZXRob2QoXCJiZWZvcmVcIiwgXCJiZWZvcmViZWdpblwiLCB0cnVlLCBmdW5jdGlvbihub2RlLCByZWxhdGVkTm9kZSkgIHtcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocmVsYXRlZE5vZGUsIG5vZGUpO1xuICAgICAgICB9KSxcblxuICAgICAgICBwcmVwZW5kOiBlbGVtZW50JG1hbmlwdWxhdGlvbiQkbWFrZU1ldGhvZChcInByZXBlbmRcIiwgXCJhZnRlcmJlZ2luXCIsIGZhbHNlLCBmdW5jdGlvbihub2RlLCByZWxhdGVkTm9kZSkgIHtcbiAgICAgICAgICAgIG5vZGUuaW5zZXJ0QmVmb3JlKHJlbGF0ZWROb2RlLCBub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9KSxcblxuICAgICAgICBhcHBlbmQ6IGVsZW1lbnQkbWFuaXB1bGF0aW9uJCRtYWtlTWV0aG9kKFwiYXBwZW5kXCIsIFwiYmVmb3JlZW5kXCIsIGZhbHNlLCBmdW5jdGlvbihub2RlLCByZWxhdGVkTm9kZSkgIHtcbiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocmVsYXRlZE5vZGUpO1xuICAgICAgICB9KSxcblxuICAgICAgICByZXBsYWNlOiBlbGVtZW50JG1hbmlwdWxhdGlvbiQkbWFrZU1ldGhvZChcInJlcGxhY2VcIiwgXCJcIiwgdHJ1ZSwgZnVuY3Rpb24obm9kZSwgcmVsYXRlZE5vZGUpICB7XG4gICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHJlbGF0ZWROb2RlLCBub2RlKTtcbiAgICAgICAgfSksXG5cbiAgICAgICAgcmVtb3ZlOiBlbGVtZW50JG1hbmlwdWxhdGlvbiQkbWFrZU1ldGhvZChcInJlbW92ZVwiLCBcIlwiLCB0cnVlLCBmdW5jdGlvbihub2RlKSAge1xuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9KVxuICAgIH0pO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIG1hcDogZnVuY3Rpb24oZm4sIGNvbnRleHQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwibWFwXCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbIGZuLmNhbGwoY29udGV4dCwgdGhpcykgXTtcbiAgICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gW119O1xuICAgIH0pO1xuXG4gICAgdmFyIHV0aWwkc2VsZWN0b3Job29rcyQkaXNIaWRkZW4gPSBmdW5jdGlvbihub2RlKSAge1xuICAgICAgICB2YXIgY29tcHV0ZWQgPSB1dGlsJGluZGV4JCRkZWZhdWx0LmNvbXB1dGVTdHlsZShub2RlKTtcblxuICAgICAgICByZXR1cm4gY29tcHV0ZWQudmlzaWJpbGl0eSA9PT0gXCJoaWRkZW5cIiB8fCBjb21wdXRlZC5kaXNwbGF5ID09PSBcIm5vbmVcIjtcbiAgICB9O1xuXG4gICAgdmFyIHV0aWwkc2VsZWN0b3Job29rcyQkZGVmYXVsdCA9IHtcbiAgICAgICAgXCI6Zm9jdXNcIjogZnVuY3Rpb24obm9kZSkgIHtyZXR1cm4gbm9kZSA9PT0gbm9kZS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnR9LFxuXG4gICAgICAgIFwiOnZpc2libGVcIjogZnVuY3Rpb24obm9kZSkgIHtyZXR1cm4gIXV0aWwkc2VsZWN0b3Job29rcyQkaXNIaWRkZW4obm9kZSl9LFxuXG4gICAgICAgIFwiOmhpZGRlblwiOiB1dGlsJHNlbGVjdG9yaG9va3MkJGlzSGlkZGVuXG4gICAgfTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICBtYXRjaGVzOiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKCFzZWxlY3RvciB8fCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwibWF0Y2hlc1wiLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tlciA9IHV0aWwkc2VsZWN0b3Job29rcyQkZGVmYXVsdFtzZWxlY3Rvcl0gfHwgdXRpbCRzZWxlY3Rvcm1hdGNoZXIkJGRlZmF1bHQoc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICByZXR1cm4gISFjaGVja2VyKHRoaXNbMF0pO1xuICAgICAgICB9XG4gICAgfSwgZnVuY3Rpb24oKSAge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSAge3JldHVybiBmYWxzZX07XG4gICAgfSk7XG5cbiAgICB1dGlsJGluZGV4JCRkZWZhdWx0LnJlZ2lzdGVyKHtcbiAgICAgICAgb2ZmOiBmdW5jdGlvbih0eXBlLCBzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IGVycm9ycyQkTWV0aG9kRXJyb3IoXCJvZmZcIiwgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gdm9pZCAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXNbMF07XG5cbiAgICAgICAgICAgIHRoaXMuX1tcImhhbmRsZXIyMDAxMDAxXCJdID0gdGhpcy5fW1wiaGFuZGxlcjIwMDEwMDFcIl0uZmlsdGVyKGZ1bmN0aW9uKGhhbmRsZXIpICB7XG4gICAgICAgICAgICAgICAgdmFyIHNraXAgPSB0eXBlICE9PSBoYW5kbGVyLnR5cGU7XG5cbiAgICAgICAgICAgICAgICBza2lwID0gc2tpcCB8fCBzZWxlY3RvciAmJiBzZWxlY3RvciAhPT0gaGFuZGxlci5zZWxlY3RvcjtcbiAgICAgICAgICAgICAgICBza2lwID0gc2tpcCB8fCBjYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gaGFuZGxlci5jYWxsYmFjaztcblxuICAgICAgICAgICAgICAgIGlmIChza2lwKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSBoYW5kbGVyLl90eXBlIHx8IGhhbmRsZXIudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLmRldGFjaEV2ZW50KFwib25cIiArIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCAhIWhhbmRsZXIuY2FwdHVyaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICBvZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzWzBdLFxuICAgICAgICAgICAgICAgIGRvY0VsID0gbm9kZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICAgICAgICBjbGllbnRUb3AgPSBkb2NFbC5jbGllbnRUb3AsXG4gICAgICAgICAgICAgICAgY2xpZW50TGVmdCA9IGRvY0VsLmNsaWVudExlZnQsXG4gICAgICAgICAgICAgICAgc2Nyb2xsVG9wID0gV0lORE9XLnBhZ2VZT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbFRvcCxcbiAgICAgICAgICAgICAgICBzY3JvbGxMZWZ0ID0gV0lORE9XLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgYm91bmRpbmdSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICAgICAgICAgICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdCxcbiAgICAgICAgICAgICAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBib3VuZGluZ1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QubGVmdCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nUmVjdC5ib3R0b20gLSBib3VuZGluZ1JlY3QudG9wXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSwgZnVuY3Rpb24oKSAge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgcmV0dXJuIHsgdG9wIDogMCwgbGVmdCA6IDAsIHJpZ2h0IDogMCwgYm90dG9tIDogMCwgd2lkdGggOiAwLCBoZWlnaHQgOiAwIH07XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICB2YXIgZWxlbWVudCRvbiQkbWFrZU1ldGhvZCA9IGZ1bmN0aW9uKG1ldGhvZCkgIHtyZXR1cm4gZnVuY3Rpb24odHlwZSwgc2VsZWN0b3IsIGFyZ3MsIGNhbGxiYWNrKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3MgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFyZ3M7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBzZWxlY3RvcjtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycyQkTWV0aG9kRXJyb3IobWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpc1swXSxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlciA9IHV0aWwkZXZlbnRoYW5kbGVyJCRkZWZhdWx0KHR5cGUsIHNlbGVjdG9yLCBjYWxsYmFjaywgYXJncywgdGhpcywgbWV0aG9kID09PSBcIm9uY2VcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRhY2hFdmVudChcIm9uXCIgKyAoaGFuZGxlci5fdHlwZSB8fCB0eXBlKSwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoaGFuZGxlci5fdHlwZSB8fCB0eXBlLCBoYW5kbGVyLCAhIWhhbmRsZXIuY2FwdHVyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBzdG9yZSBldmVudCBlbnRyeVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9bXCJoYW5kbGVyMjAwMTAwMVwiXS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodXRpbCRpbmRleCQkZGVmYXVsdC5pc0FycmF5KHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUuZm9yRWFjaChmdW5jdGlvbihuYW1lKSAgeyB0aGlzJDBbbWV0aG9kXShuYW1lLCBzZWxlY3RvciwgYXJncywgY2FsbGJhY2spIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQua2V5cyh0eXBlKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpICB7IHRoaXMkMFttZXRob2RdKG5hbWUsIHR5cGVbbmFtZV0pIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9ycyQkTWV0aG9kRXJyb3IobWV0aG9kLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfX07XG5cbiAgICB1dGlsJGluZGV4JCRkZWZhdWx0LnJlZ2lzdGVyKHtcbiAgICAgICAgb246IGVsZW1lbnQkb24kJG1ha2VNZXRob2QoXCJvblwiKSxcblxuICAgICAgICBvbmNlOiBlbGVtZW50JG9uJCRtYWtlTWV0aG9kKFwib25jZVwiKVxuICAgIH0pO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIHNldDogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpc1swXTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSB2YWx1ZSBzaG9ydGN1dFxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuYW1lID09IG51bGwgPyBcIlwiIDogU3RyaW5nKG5hbWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gbm9kZS50YWdOYW1lO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcgPT09IFwiSU5QVVRcIiB8fCB0YWcgPT09IFwiVEVYVEFSRUFcIiB8fCAgdGFnID09PSBcIlNFTEVDVFwiIHx8IHRhZyA9PT0gXCJPUFRJT05cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IFwidmFsdWVcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBcImlubmVySFRNTFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaG9vayA9IHV0aWwkYWNjZXNzb3Job29rcyQkZGVmYXVsdC5zZXRbbmFtZV0sXG4gICAgICAgICAgICAgICAgd2F0Y2hlcnMgPSB0aGlzLl9bXCJ3YXRjaGVyMjAwMTAwMVwiXVtuYW1lXSxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKHdhdGNoZXJzKSB7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB0aGlzLmdldChuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09IFwiX1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX1tuYW1lLnNsaWNlKDEpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChob29rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob29rKG5vZGUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lIGluIG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoSlNDUklQVF9WRVJTSU9OIDwgOSB8fCBMRUdBQ1lfQU5EUk9JRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWx3YXlzIHRyaWdnZXIgcmVmbG93IG1hbnVhbGx5IGZvciBJRTggYW5kIGxlZ2FjeSBBbmRyb2lkXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IG5vZGUuY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsJGluZGV4JCRkZWZhdWx0LmlzQXJyYXkobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBuYW1lLmZvckVhY2goZnVuY3Rpb24oa2V5KSAgeyB0aGlzJDAuc2V0KGtleSwgdmFsdWUpIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQua2V5cyhuYW1lKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgIHsgdGhpcyQwLnNldChrZXksIG5hbWVba2V5XSkgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKFwic2V0XCIsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh3YXRjaGVycyAmJiBvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB3YXRjaGVycy5mb3JFYWNoKGZ1bmN0aW9uKHcpICB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQuc2FmZUNhbGwodGhpcyQwLCB3LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIGVsZW1lbnQkdHJhdmVyc2luZyQkbWFrZU1ldGhvZCA9IGZ1bmN0aW9uKG1ldGhvZE5hbWUsIHByb3BlcnR5TmFtZSwgYWxsKSAge3JldHVybiBmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IGVycm9ycyQkTWV0aG9kRXJyb3IobWV0aG9kTmFtZSwgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSB1dGlsJHNlbGVjdG9ybWF0Y2hlciQkZGVmYXVsdChzZWxlY3RvciksXG4gICAgICAgICAgICAgICAgbm9kZXMgPSBhbGwgPyBbXSA6IG51bGwsXG4gICAgICAgICAgICAgICAgaXQgPSB0aGlzWzBdO1xuXG4gICAgICAgICAgICAvLyBtZXRob2QgY2xvc2VzdCBzdGFydHMgdHJhdmVyc2luZyBmcm9tIHRoZSBlbGVtZW50IGl0c2VsZlxuICAgICAgICAgICAgLy8gZXhjZXB0IG5vIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQgd2hlcmUgaXQgcmV0dXJucyBwYXJlbnRcbiAgICAgICAgICAgIGlmICghbWF0Y2hlciB8fCBtZXRob2ROYW1lICE9PSBcImNsb3Nlc3RcIikge1xuICAgICAgICAgICAgICAgIGl0ID0gaXRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICg7IGl0OyBpdCA9IGl0W3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgICAgICAgICAgICBpZiAoaXQubm9kZVR5cGUgPT09IDEgJiYgKCFtYXRjaGVyIHx8IG1hdGNoZXIoaXQpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsbCkgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWxsID8gdXRpbCRpbmRleCQkZGVmYXVsdC5tYXAuY2FsbChub2RlcywgJEVsZW1lbnQpIDogJEVsZW1lbnQoaXQpO1xuICAgICAgICB9fTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICBuZXh0OiBlbGVtZW50JHRyYXZlcnNpbmckJG1ha2VNZXRob2QoXCJuZXh0XCIsIFwibmV4dFNpYmxpbmdcIiksXG5cbiAgICAgICAgcHJldjogZWxlbWVudCR0cmF2ZXJzaW5nJCRtYWtlTWV0aG9kKFwicHJldlwiLCBcInByZXZpb3VzU2libGluZ1wiKSxcblxuICAgICAgICBuZXh0QWxsOiBlbGVtZW50JHRyYXZlcnNpbmckJG1ha2VNZXRob2QoXCJuZXh0QWxsXCIsIFwibmV4dFNpYmxpbmdcIiwgdHJ1ZSksXG5cbiAgICAgICAgcHJldkFsbDogZWxlbWVudCR0cmF2ZXJzaW5nJCRtYWtlTWV0aG9kKFwicHJldkFsbFwiLCBcInByZXZpb3VzU2libGluZ1wiLCB0cnVlKSxcblxuICAgICAgICBjbG9zZXN0OiBlbGVtZW50JHRyYXZlcnNpbmckJG1ha2VNZXRob2QoXCJjbG9zZXN0XCIsIFwicGFyZW50Tm9kZVwiKVxuICAgIH0sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpICB7XG4gICAgICAgIGlmIChtZXRob2ROYW1lLnNsaWNlKC0zKSA9PT0gXCJBbGxcIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gW119O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgIHtyZXR1cm4gbmV3ICROdWxsRWxlbWVudCgpfTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQodmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KFwiXCIpLmFwcGVuZCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdXRpbCRhbmltYXRpb25oYW5kbGVyJCRUUkFOU0lUSU9OX1BST1BTID0gW1widGltaW5nLWZ1bmN0aW9uXCIsIFwicHJvcGVydHlcIiwgXCJkdXJhdGlvblwiLCBcImRlbGF5XCJdLm1hcChmdW5jdGlvbihwcm9wKSAge3JldHVybiBcInRyYW5zaXRpb24tXCIgKyBwcm9wfSksXG4gICAgICAgIHV0aWwkYW5pbWF0aW9uaGFuZGxlciQkcGFyc2VUaW1lVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkgIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xuICAgICAgICAgICAgLy8gaWYgZHVyYXRpb24gaXMgaW4gc2Vjb25kcywgdGhlbiBtdWx0aXBsZSByZXN1bHQgdmFsdWUgYnkgMTAwMFxuICAgICAgICAgICAgcmV0dXJuICFyZXN1bHQgfHwgdmFsdWUuc2xpY2UoLTIpID09PSBcIm1zXCIgPyByZXN1bHQgOiByZXN1bHQgKiAxMDAwO1xuICAgICAgICB9LFxuICAgICAgICB1dGlsJGFuaW1hdGlvbmhhbmRsZXIkJGNhbGNUcmFuc2l0aW9uRHVyYXRpb24gPSBmdW5jdGlvbih0cmFuc2l0aW9uVmFsdWVzKSAge1xuICAgICAgICAgICAgdmFyIGRlbGF5cyA9IHRyYW5zaXRpb25WYWx1ZXNbM10sXG4gICAgICAgICAgICAgICAgZHVyYXRpb25zID0gdHJhbnNpdGlvblZhbHVlc1syXTtcblxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24odmFsdWUsIGluZGV4KSAge1xuICAgICAgICAgICAgICAgIHJldHVybiB1dGlsJGFuaW1hdGlvbmhhbmRsZXIkJHBhcnNlVGltZVZhbHVlKHZhbHVlKSArICh1dGlsJGFuaW1hdGlvbmhhbmRsZXIkJHBhcnNlVGltZVZhbHVlKGRlbGF5c1tpbmRleF0pIHx8IDApO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBob29rcyBmb3IgcHJvcGVydGllcyB1c2VkIGJlbG93XG4gICAgdXRpbCRhbmltYXRpb25oYW5kbGVyJCRUUkFOU0lUSU9OX1BST1BTLmNvbmNhdChcImFuaW1hdGlvbi1kdXJhdGlvblwiKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApICB7IHV0aWwkc3R5bGVob29rcyQkZGVmYXVsdC5maW5kKHByb3AsIEhUTUwuc3R5bGUpIH0pO1xuXG4gICAgdmFyIHV0aWwkYW5pbWF0aW9uaGFuZGxlciQkZGVmYXVsdCA9IGZ1bmN0aW9uKG5vZGUsIGNvbXB1dGVkLCBhbmltYXRpb25OYW1lLCBoaWRpbmcsIGRvbmUpICB7XG4gICAgICAgIHZhciBydWxlcywgZHVyYXRpb247XG5cbiAgICAgICAgLy8gTGVnYWN5IEFuZHJvaWQgaXMgdXN1YWxseSBzbG93IGFuZCBoYXMgbG90cyBvZiBidWdzIGluIHRoZVxuICAgICAgICAvLyBDU1MgYW5pbWF0aW9ucyBpbXBsZW1lbnRhdGlvbiwgc28gc2tpcCBhbnkgYW5pbWF0aW9ucyBmb3IgaXRcbiAgICAgICAgaWYgKExFR0FDWV9BTkRST0lEIHx8IEpTQ1JJUFRfVkVSU0lPTiA8IDEwKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBpZiAoYW5pbWF0aW9uTmFtZSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB1dGlsJGFuaW1hdGlvbmhhbmRsZXIkJHBhcnNlVGltZVZhbHVlKGNvbXB1dGVkW3V0aWwkc3R5bGVob29rcyQkZGVmYXVsdC5nZXRbXCJhbmltYXRpb24tZHVyYXRpb25cIl1dKTtcblxuICAgICAgICAgICAgaWYgKCFkdXJhdGlvbikgcmV0dXJuOyAvLyBza2lwIGFuaW1hdGlvbnMgd2l0aCB6ZXJvIGR1cmF0aW9uXG5cbiAgICAgICAgICAgIHJ1bGVzID0gW1xuICAgICAgICAgICAgICAgIFdFQktJVF9QUkVGSVggKyBcImFuaW1hdGlvbi1kaXJlY3Rpb246XCIgKyAoaGlkaW5nID8gXCJub3JtYWxcIiA6IFwicmV2ZXJzZVwiKSxcbiAgICAgICAgICAgICAgICBXRUJLSVRfUFJFRklYICsgXCJhbmltYXRpb24tbmFtZTpcIiArIGFuaW1hdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgLy8gZm9yIENTUzMgYW5pbWF0aW9uIGVsZW1lbnQgc2hvdWxkIGFsd2F5cyBiZSB2aXNpYmxlXG4gICAgICAgICAgICAgICAgXCJ2aXNpYmlsaXR5OmluaGVyaXRcIlxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uVmFsdWVzID0gdXRpbCRhbmltYXRpb25oYW5kbGVyJCRUUkFOU0lUSU9OX1BST1BTLm1hcChmdW5jdGlvbihwcm9wLCBpbmRleCkgIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGF2ZSB0byB1c2UgcmVnZXhwIHRvIHNwbGl0IHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wdXRlZFt1dGlsJHN0eWxlaG9va3MkJGRlZmF1bHQuZ2V0W3Byb3BdXS5zcGxpdChpbmRleCA/IFwiLCBcIiA6IC8sICg/IVxcZCkvKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB1dGlsJGFuaW1hdGlvbmhhbmRsZXIkJGNhbGNUcmFuc2l0aW9uRHVyYXRpb24odHJhbnNpdGlvblZhbHVlcyk7XG5cbiAgICAgICAgICAgIGlmICghZHVyYXRpb24pIHJldHVybjsgLy8gc2tpcCB0cmFuc2l0aW9ucyB3aXRoIHplcm8gZHVyYXRpb25cblxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25WYWx1ZXNbMV0uaW5kZXhPZihcImFsbFwiKSA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyB0cnkgdG8gZmluZCBleGlzdGluZyBvciB1c2UgMHMgbGVuZ3RoIG9yIG1ha2UgYSBuZXcgdmlzaWJpbGl0eSB0cmFuc2l0aW9uXG4gICAgICAgICAgICAgICAgdmFyIHZpc2liaWxpdHlJbmRleCA9IHRyYW5zaXRpb25WYWx1ZXNbMV0uaW5kZXhPZihcInZpc2liaWxpdHlcIik7XG5cbiAgICAgICAgICAgICAgICBpZiAodmlzaWJpbGl0eUluZGV4IDwgMCkgdmlzaWJpbGl0eUluZGV4ID0gdHJhbnNpdGlvblZhbHVlc1syXS5pbmRleE9mKFwiMHNcIik7XG4gICAgICAgICAgICAgICAgaWYgKHZpc2liaWxpdHlJbmRleCA8IDApIHZpc2liaWxpdHlJbmRleCA9IHRyYW5zaXRpb25WYWx1ZXNbMV0ubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvblZhbHVlc1swXVt2aXNpYmlsaXR5SW5kZXhdID0gXCJsaW5lYXJcIjtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVmFsdWVzWzFdW3Zpc2liaWxpdHlJbmRleF0gPSBcInZpc2liaWxpdHlcIjtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVmFsdWVzW2hpZGluZyA/IDIgOiAzXVt2aXNpYmlsaXR5SW5kZXhdID0gXCIwc1wiO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25WYWx1ZXNbaGlkaW5nID8gMyA6IDJdW3Zpc2liaWxpdHlJbmRleF0gPSBkdXJhdGlvbiArIFwibXNcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcnVsZXMgPSB0cmFuc2l0aW9uVmFsdWVzLm1hcChmdW5jdGlvbihwcm9wcywgaW5kZXgpICB7XG4gICAgICAgICAgICAgICAgLy8gZmlsbCBob2xlcyBpbiBhIHRyYXNpdGlvbiBwcm9wZXJ0eSB2YWx1ZVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcHJvcHMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzW2ldID0gcHJvcHNbaV0gfHwgcHJvcHNbaSAtIDFdIHx8IFwiaW5pdGlhbFwiO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBXRUJLSVRfUFJFRklYICsgdXRpbCRhbmltYXRpb25oYW5kbGVyJCRUUkFOU0lUSU9OX1BST1BTW2luZGV4XSArIFwiOlwiICsgcHJvcHMuam9pbihcIiwgXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJ1bGVzLnB1c2goXG4gICAgICAgICAgICAgICAgLy8gYXBwZW5kIHRhcmdldCB2aXNpYmlsaXR5IHZhbHVlIHRvIHRyaWdnZXIgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgIFwidmlzaWJpbGl0eTpcIiArIChoaWRpbmcgPyBcImhpZGRlblwiIDogXCJpbmhlcml0XCIpLFxuICAgICAgICAgICAgICAgIC8vIHVzZSB3aWxsQ2hhbmdlIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UgaW4gbW9kZXJuIGJyb3dzZXJzOlxuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9kZXYub3BlcmEuY29tL2FydGljbGVzL2Nzcy13aWxsLWNoYW5nZS1wcm9wZXJ0eS9cbiAgICAgICAgICAgICAgICBcIndpbGwtY2hhbmdlOlwiICsgdHJhbnNpdGlvblZhbHVlc1sxXS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3NzVGV4dDogcnVsZXMuam9pbihcIjtcIiksXG4gICAgICAgICAgICBpbml0aWFsQ3NzVGV4dDogbm9kZS5zdHlsZS5jc3NUZXh0LFxuICAgICAgICAgICAgLy8gdGhpcyBmdW5jdGlvbiB1c2VkIHRvIHRyaWdnZXIgY2FsbGJhY2tcbiAgICAgICAgICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSAge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuYW5pbWF0aW9uTmFtZSAhPT0gYW5pbWF0aW9uTmFtZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUucHJvcGVydHlOYW1lICE9PSBcInZpc2liaWxpdHlcIikgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsgLy8gdGhpcyBpcyBhbiBpbnRlcm5hbCBldmVudFxuXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBlbGVtZW50JHZpc2liaWxpdHkkJFRSQU5TSVRJT05fRVZFTlRfVFlQRSA9IFdFQktJVF9QUkVGSVggPyBcIndlYmtpdFRyYW5zaXRpb25FbmRcIiA6IFwidHJhbnNpdGlvbmVuZFwiLFxuICAgICAgICBlbGVtZW50JHZpc2liaWxpdHkkJEFOSU1BVElPTl9FVkVOVF9UWVBFID0gV0VCS0lUX1BSRUZJWCA/IFwid2Via2l0QW5pbWF0aW9uRW5kXCIgOiBcImFuaW1hdGlvbmVuZFwiLFxuICAgICAgICBlbGVtZW50JHZpc2liaWxpdHkkJG1ha2VNZXRob2QgPSBmdW5jdGlvbihuYW1lLCBjb25kaXRpb24pICB7cmV0dXJuIGZ1bmN0aW9uKGFuaW1hdGlvbk5hbWUsIGNhbGxiYWNrKSB7dmFyIHRoaXMkMCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFuaW1hdGlvbk5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFuaW1hdGlvbk5hbWU7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uTmFtZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnMkJE1ldGhvZEVycm9yKG5hbWUsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpc1swXSxcbiAgICAgICAgICAgICAgICBzdHlsZSA9IG5vZGUuc3R5bGUsXG4gICAgICAgICAgICAgICAgY29tcHV0ZWQgPSB1dGlsJGluZGV4JCRkZWZhdWx0LmNvbXB1dGVTdHlsZShub2RlKSxcbiAgICAgICAgICAgICAgICBoaWRpbmcgPSBjb25kaXRpb24sXG4gICAgICAgICAgICAgICAgZnJhbWVJZCA9IHRoaXMuX1tcImZyYW1lMjAwMTAwMVwiXSxcbiAgICAgICAgICAgICAgICBkb25lID0gZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgYW5pbWF0aW9uSGFuZGxlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjbGVhciBpbmxpbmUgc3R5bGUgYWRqdXN0bWVudHMgd2VyZSBtYWRlIHByZXZpb3VzbHlcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlLmNzc1RleHQgPSBhbmltYXRpb25IYW5kbGVyLmluaXRpYWxDc3NUZXh0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyQwLnNldChcImFyaWEtaGlkZGVuXCIsIFN0cmluZyhoaWRpbmcpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBhbHdheXMgdXBkYXRlIGVsZW1lbnQgdmlzaWJpbGl0eSBwcm9wZXJ0eTogdXNlIHZhbHVlIFwiaW5oZXJpdFwiXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHJlc3BlY3QgcGFyZW50IGNvbnRhaW5lciB2aXNpYmlsaXR5LiBTaG91bGQgYmUgYSBzZXBhcmF0ZVxuICAgICAgICAgICAgICAgICAgICAvLyBmcm9tIHNldHRpbmcgY3NzVGV4dCBiZWNhdXNlIG9mIE9wZXJhIDEyIHF1aXJrc1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS52aXNpYmlsaXR5ID0gaGlkaW5nID8gXCJoaWRkZW5cIiA6IFwiaW5oZXJpdFwiO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMkMC5fW1wiZnJhbWUyMDAxMDAxXCJdID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKHRoaXMkMCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBoaWRpbmcgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgICAgaGlkaW5nID0gY29tcHV0ZWQudmlzaWJpbGl0eSAhPT0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2FuY2VsIHByZXZpb3VzIGZyYW1lIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgaWYgKGZyYW1lSWQpIERPTS5jYW5jZWxGcmFtZShmcmFtZUlkKTtcblxuICAgICAgICAgICAgaWYgKCFub2RlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gYXBwbHkgYXR0cmlidXRlL3Zpc2liaWxpdHkgc3luY3Jvbm91c2x5IGZvciBkZXRhY2hlZCBET00gZWxlbWVudHNcbiAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIGJyb3dzZXIgcmV0dXJucyB6ZXJvIGFuaW1hdGlvbi90cmFuc2l0aW9uIGR1cmF0aW9uIGZvciB0aGVtXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uSGFuZGxlciA9IHV0aWwkYW5pbWF0aW9uaGFuZGxlciQkZGVmYXVsdChub2RlLCBjb21wdXRlZCwgYW5pbWF0aW9uTmFtZSwgaGlkaW5nLCBkb25lKSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUeXBlID0gYW5pbWF0aW9uTmFtZSA/IGVsZW1lbnQkdmlzaWJpbGl0eSQkQU5JTUFUSU9OX0VWRU5UX1RZUEUgOiBlbGVtZW50JHZpc2liaWxpdHkkJFRSQU5TSVRJT05fRVZFTlRfVFlQRTtcbiAgICAgICAgICAgICAgICAvLyB1c2UgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHRvIGF2b2lkIGFuaW1hdGlvbiBxdWlya3MgZm9yXG4gICAgICAgICAgICAgICAgLy8gbmV3IGVsZW1lbnRzIGluc2VydGVkIGludG8gdGhlIERPTVxuICAgICAgICAgICAgICAgIC8vIGh0dHA6Ly9jaHJpc3RpYW5oZWlsbWFubi5jb20vMjAxMy8wOS8xOS9xdWlja3ktZmFkaW5nLWluLWEtbmV3bHktY3JlYXRlZC1lbGVtZW50LXVzaW5nLWNzcy9cbiAgICAgICAgICAgICAgICB0aGlzLl9bXCJmcmFtZTIwMDEwMDFcIl0gPSBET00ucmVxdWVzdEZyYW1lKCFhbmltYXRpb25IYW5kbGVyID8gZG9uZSA6IGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgYW5pbWF0aW9uSGFuZGxlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBtb2RpZmllZCBzdHlsZSBydWxlc1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5jc3NUZXh0ID0gYW5pbWF0aW9uSGFuZGxlci5pbml0aWFsQ3NzVGV4dCArIGFuaW1hdGlvbkhhbmRsZXIuY3NzVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBDU1MzIHRyYW5zaXRpb24gLyBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdGhpcyQwLnNldChcImFyaWEtaGlkZGVuXCIsIFN0cmluZyhoaWRpbmcpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH19O1xuXG4gICAgdXRpbCRpbmRleCQkZGVmYXVsdC5yZWdpc3Rlcih7XG4gICAgICAgIHNob3c6IGVsZW1lbnQkdmlzaWJpbGl0eSQkbWFrZU1ldGhvZChcInNob3dcIiwgZmFsc2UpLFxuXG4gICAgICAgIGhpZGU6IGVsZW1lbnQkdmlzaWJpbGl0eSQkbWFrZU1ldGhvZChcImhpZGVcIiwgdHJ1ZSksXG5cbiAgICAgICAgdG9nZ2xlOiBlbGVtZW50JHZpc2liaWxpdHkkJG1ha2VNZXRob2QoXCJ0b2dnbGVcIilcbiAgICB9KTtcblxuICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQucmVnaXN0ZXIoe1xuICAgICAgICB3YXRjaDogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciB3YXRjaGVycyA9IHRoaXMuX1tcIndhdGNoZXIyMDAxMDAxXCJdO1xuXG4gICAgICAgICAgICBpZiAoIXdhdGNoZXJzW25hbWVdKSB3YXRjaGVyc1tuYW1lXSA9IFtdO1xuXG4gICAgICAgICAgICB3YXRjaGVyc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW53YXRjaDogZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciB3YXRjaGVycyA9IHRoaXMuX1tcIndhdGNoZXIyMDAxMDAxXCJdO1xuXG4gICAgICAgICAgICBpZiAod2F0Y2hlcnNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICB3YXRjaGVyc1tuYW1lXSA9IHdhdGNoZXJzW25hbWVdLmZpbHRlcihmdW5jdGlvbih3KSAge3JldHVybiB3ICE9PSBjYWxsYmFja30pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHV0aWwkZXh0ZW5zaW9uaGFuZGxlciQkcmVQcml2YXRlRnVuY3Rpb24gPSAvXig/Om9ufGRvKVtBLVpdLztcblxuICAgIHZhciB1dGlsJGV4dGVuc2lvbmhhbmRsZXIkJGRlZmF1bHQgPSBmdW5jdGlvbihzZWxlY3RvciwgY29uZGl0aW9uLCBtaXhpbnMsIGluZGV4KSAge1xuICAgICAgICB2YXIgY3RyID0gbWl4aW5zLmhhc093blByb3BlcnR5KFwiY29uc3RydWN0b3JcIikgJiYgbWl4aW5zLmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgbWF0Y2hlciA9IHV0aWwkc2VsZWN0b3JtYXRjaGVyJCRkZWZhdWx0KHNlbGVjdG9yKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obm9kZSwgbW9jaykgIHtcbiAgICAgICAgICAgIHZhciBlbCA9ICRFbGVtZW50KG5vZGUpO1xuICAgICAgICAgICAgLy8gc2tpcCBwcmV2aW91c2x5IGludm9rZWQgb3IgbWlzbWF0Y2hlZCBlbGVtZW50c1xuICAgICAgICAgICAgaWYgKH5lbC5fW1wiZXh0ZW5zaW9uMjAwMTAwMVwiXS5pbmRleE9mKGluZGV4KSB8fCAhbWF0Y2hlcihub2RlKSkgcmV0dXJuO1xuICAgICAgICAgICAgLy8gbWFyayBleHRlbnNpb24gYXMgaW52b2tlZFxuICAgICAgICAgICAgZWwuX1tcImV4dGVuc2lvbjIwMDEwMDFcIl0ucHVzaChpbmRleCk7XG5cbiAgICAgICAgICAgIGlmIChtb2NrID09PSB0cnVlIHx8IGNvbmRpdGlvbihlbCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gYXBwbHkgYWxsIHByaXZhdGUvcHVibGljIG1lbWJlcnMgdG8gdGhlIGVsZW1lbnQncyBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICB2YXIgcHJpdmF0ZUZ1bmN0aW9ucyA9IE9iamVjdC5rZXlzKG1peGlucykuZmlsdGVyKGZ1bmN0aW9uKHByb3ApICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG1peGluc1twcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcHJpdmF0ZSBmdW5jdGlvbnMgYXJlIGRlcHJlY2F0ZWQsIHJlbW92ZSB0aGlzIGxpbmUgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwkZXh0ZW5zaW9uaGFuZGxlciQkcmVQcml2YXRlRnVuY3Rpb24uZXhlYyhwcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJlc2VydmUgY29udGV4dCBmb3IgcHJpdmF0ZSBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsW3Byb3BdID0gZnVuY3Rpb24oKSAge3JldHVybiB2YWx1ZS5hcHBseShlbCwgYXJndW1lbnRzKX07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhbW9jaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsW3Byb3BdID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhbW9jayAmJiBwcm9wWzBdID09PSBcIl9cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gaW52b2tlIGNvbnN0cnVjdG9yIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgIC8vIG1ha2UgYSBzYWZlIGNhbGwgc28gbGl2ZSBleHRlbnNpb25zIGNhbid0IGJyZWFrIGVhY2ggb3RoZXJcbiAgICAgICAgICAgICAgICBpZiAoY3RyKSB1dGlsJGluZGV4JCRkZWZhdWx0LnNhZmVDYWxsKGVsLCBjdHIpO1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBldmVudCBoYW5kbGVycyBmcm9tIGVsZW1lbnQncyBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICBwcml2YXRlRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24ocHJvcCkgIHsgZGVsZXRlIGVsW3Byb3BdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvLyBJbnNwaXJlZCBieSB0cmljayBkaXNjb3ZlcmVkIGJ5IERhbmllbCBCdWNobmVyOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3V3bGRjYXQvU2VsZWN0b3JMaXN0ZW5lclxuXG4gICAgdmFyIGdsb2JhbCRleHRlbmQkJGV4dGVuc2lvbnMgPSBbXSxcbiAgICAgICAgZ2xvYmFsJGV4dGVuZCQkcmV0dXJuVHJ1ZSA9IGZ1bmN0aW9uKCkgIHtyZXR1cm4gdHJ1ZX0sXG4gICAgICAgIGdsb2JhbCRleHRlbmQkJHJldHVybkZhbHNlID0gZnVuY3Rpb24oKSAge3JldHVybiBmYWxzZX0sXG4gICAgICAgIGdsb2JhbCRleHRlbmQkJGNzc1RleHQ7XG5cbiAgICBET00uZXh0ZW5kID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbmRpdGlvbiwgZGVmaW5pdGlvbikge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgZGVmaW5pdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgICAgICAgIGNvbmRpdGlvbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmRpdGlvbiA9PT0gXCJib29sZWFuXCIpIGNvbmRpdGlvbiA9IGNvbmRpdGlvbiA/IGdsb2JhbCRleHRlbmQkJHJldHVyblRydWUgOiBnbG9iYWwkZXh0ZW5kJCRyZXR1cm5GYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCIpIGRlZmluaXRpb24gPSB7Y29uc3RydWN0b3I6IGRlZmluaXRpb259O1xuXG4gICAgICAgIGlmICghZGVmaW5pdGlvbiB8fCB0eXBlb2YgZGVmaW5pdGlvbiAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY29uZGl0aW9uICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBlcnJvcnMkJFN0YXRpY01ldGhvZEVycm9yKFwiZXh0ZW5kXCIsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yID09PSBcIipcIikge1xuICAgICAgICAgICAgdXRpbCRpbmRleCQkZGVmYXVsdC5rZXlzKGRlZmluaXRpb24pLmZvckVhY2goZnVuY3Rpb24obWV0aG9kTmFtZSkgIHtcbiAgICAgICAgICAgICAgICAkRWxlbWVudC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBkZWZpbml0aW9uW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZXh0ID0gdXRpbCRleHRlbnNpb25oYW5kbGVyJCRkZWZhdWx0KHNlbGVjdG9yLCBjb25kaXRpb24sIGRlZmluaXRpb24sIGdsb2JhbCRleHRlbmQkJGV4dGVuc2lvbnMubGVuZ3RoKTtcblxuICAgICAgICAgICAgZ2xvYmFsJGV4dGVuZCQkZXh0ZW5zaW9ucy5wdXNoKGV4dCk7XG5cbiAgICAgICAgICAgIC8vIGluaXRpYWxpemUgZXh0ZW5zaW9uIG1hbnVhbGx5IHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBlbGVtZW50c1xuICAgICAgICAgICAgLy8gaGF2ZSBhcHByb3ByaWF0ZSBtZXRob2RzIGJlZm9yZSB0aGV5IGFyZSB1c2VkIGluIG90aGVyIERPTS5leHRlbmQuXG4gICAgICAgICAgICAvLyBBbHNvIGZpeGVzIGxlZ2FjeSBJRXMgd2hlbiB0aGUgSFRDIGJlaGF2aW9yIGlzIGFscmVhZHkgYXR0YWNoZWRcbiAgICAgICAgICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQuZWFjaC5jYWxsKERPQ1VNRU5ULnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpLCBleHQpO1xuICAgICAgICAgICAgLy8gTVVTVCBiZSBhZnRlciBxdWVyeVNlbGVjdG9yQWxsIGJlY2F1c2Ugb2YgbGVnYWN5IElFcyBxdWlya3NcbiAgICAgICAgICAgIERPTS5pbXBvcnRTdHlsZXMoc2VsZWN0b3IsIGdsb2JhbCRleHRlbmQkJGNzc1RleHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmIChKU0NSSVBUX1ZFUlNJT04gPCAxMCkge1xuICAgICAgICBnbG9iYWwkZXh0ZW5kJCRjc3NUZXh0ID0gXCItbXMtYmVoYXZpb3I6dXJsKFwiICsgdXRpbCRpbmRleCQkZGVmYXVsdC5nZXRMZWdhY3lGaWxlKFwiaHRjXCIpICsgXCIpICFpbXBvcnRhbnRcIjtcblxuICAgICAgICBET0NVTUVOVC5hdHRhY2hFdmVudChcIm9uXCIgKyBDVVNUT01fRVZFTlRfVFlQRSwgZnVuY3Rpb24oKSAge1xuICAgICAgICAgICAgdmFyIGUgPSBXSU5ET1cuZXZlbnQ7XG5cbiAgICAgICAgICAgIGlmIChlLnNyY1VybiA9PT0gQ1VTVE9NX0VWRU5UX1RZUEUpIHtcbiAgICAgICAgICAgICAgICBnbG9iYWwkZXh0ZW5kJCRleHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oZXh0KSAgeyBleHQoZS5zcmNFbGVtZW50KSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGdsb2JhbCRleHRlbmQkJF9leHRlbmQgPSBET00uZXh0ZW5kO1xuXG4gICAgICAgIGdsb2JhbCRleHRlbmQkJGNzc1RleHQgPSBXRUJLSVRfUFJFRklYICsgXCJhbmltYXRpb24tbmFtZTpET00yMDAxMDAxICFpbXBvcnRhbnQ7XCI7XG4gICAgICAgIGdsb2JhbCRleHRlbmQkJGNzc1RleHQgKz0gV0VCS0lUX1BSRUZJWCArIFwiYW5pbWF0aW9uLWR1cmF0aW9uOjFtcyAhaW1wb3J0YW50XCI7XG5cbiAgICAgICAgRE9NLmV4dGVuZCA9IGZ1bmN0aW9uKCkgIHtcbiAgICAgICAgICAgIC8vIGRlY2xhcmUgdGhlIGZha2UgYW5pbWF0aW9uIG9uIHRoZSBmaXJzdCBET00uZXh0ZW5kIG1ldGhvZCBjYWxsXG4gICAgICAgICAgICBET00uaW1wb3J0U3R5bGVzKFwiQFwiICsgV0VCS0lUX1BSRUZJWCArIFwia2V5ZnJhbWVzIERPTTIwMDEwMDFcIiwgXCJmcm9tIHtvcGFjaXR5Oi45OX0gdG8ge29wYWNpdHk6MX1cIik7XG4gICAgICAgICAgICAvLyByZXN0b3JlIG9yaWdpbmFsIG1ldGhvZCBhbmQgaW52b2tlIGl0XG4gICAgICAgICAgICAoRE9NLmV4dGVuZCA9IGdsb2JhbCRleHRlbmQkJF9leHRlbmQpLmFwcGx5KERPTSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB1c2UgY2FwdHVyaW5nIHRvIHN1cHByZXNzIGludGVybmFsIGFuaW1hdGlvbnN0YXJ0IGV2ZW50c1xuICAgICAgICBET0NVTUVOVC5hZGRFdmVudExpc3RlbmVyKFdFQktJVF9QUkVGSVggPyBcIndlYmtpdEFuaW1hdGlvblN0YXJ0XCIgOiBcImFuaW1hdGlvbnN0YXJ0XCIsIGZ1bmN0aW9uKGUpICB7XG4gICAgICAgICAgICBpZiAoZS5hbmltYXRpb25OYW1lID09PSBcIkRPTTIwMDEwMDFcIikge1xuICAgICAgICAgICAgICAgIGdsb2JhbCRleHRlbmQkJGV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihleHQpICB7IGV4dChlLnRhcmdldCkgfSk7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBhbiBpbnRlcm5hbCBldmVudCAtIHN0b3AgaXQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgZ2xvYmFsJGV4dGVuZCQkZGVmYXVsdCA9IGdsb2JhbCRleHRlbmQkJGV4dGVuc2lvbnM7XG5cbiAgICB2YXIgZ2xvYmFsJGZvcm1hdCQkcmVWYXIgPSAvXFx7KFtcXHdcXC1dKylcXH0vZztcblxuICAgIERPTS5mb3JtYXQgPSBmdW5jdGlvbih0bXBsLCB2YXJNYXApIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0bXBsICE9PSBcInN0cmluZ1wiKSB0bXBsID0gU3RyaW5nKHRtcGwpO1xuXG4gICAgICAgIGlmICghdmFyTWFwIHx8IHR5cGVvZiB2YXJNYXAgIT09IFwib2JqZWN0XCIpIHZhck1hcCA9IHt9O1xuXG4gICAgICAgIHJldHVybiB0bXBsLnJlcGxhY2UoZ2xvYmFsJGZvcm1hdCQkcmVWYXIsIGZ1bmN0aW9uKHgsIG5hbWUsIGluZGV4KSAge1xuICAgICAgICAgICAgaWYgKG5hbWUgaW4gdmFyTWFwKSB7XG4gICAgICAgICAgICAgICAgeCA9IHZhck1hcFtuYW1lXTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiKSB4ID0geChpbmRleCk7XG5cbiAgICAgICAgICAgICAgICB4ID0gU3RyaW5nKHgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBnbG9iYWwkZnJhbWUkJHJhZiA9IFdJTkRPVy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIGdsb2JhbCRmcmFtZSQkY3JhZiA9IFdJTkRPVy5jYW5jZWxBbmltYXRpb25GcmFtZSxcbiAgICAgICAgZ2xvYmFsJGZyYW1lJCRsYXN0VGltZSA9IDA7XG5cbiAgICBpZiAoIShnbG9iYWwkZnJhbWUkJHJhZiAmJiBnbG9iYWwkZnJhbWUkJGNyYWYpKSB7XG4gICAgICAgIFtcIm1zXCIsIFwibW96XCIsIFwid2Via2l0XCIsIFwib1wiXS5mb3JFYWNoKGZ1bmN0aW9uKHByZWZpeCkgIHtcbiAgICAgICAgICAgIGdsb2JhbCRmcmFtZSQkcmFmID0gZ2xvYmFsJGZyYW1lJCRyYWYgfHwgV0lORE9XW3ByZWZpeCArIFwiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgICAgICAgICAgZ2xvYmFsJGZyYW1lJCRjcmFmID0gZ2xvYmFsJGZyYW1lJCRjcmFmIHx8IFdJTkRPV1twcmVmaXggKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBET00ucmVxdWVzdEZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spICB7XG4gICAgICAgIGlmIChnbG9iYWwkZnJhbWUkJHJhZikge1xuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbCRmcmFtZSQkcmFmLmNhbGwoV0lORE9XLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2UgaWRlYSBmcm9tIEVyaWsgTcO2bGxlcidzIHBvbHlmaWxsOlxuICAgICAgICAgICAgLy8gaHR0cDovL3d3dy5wYXVsaXJpc2guY29tLzIwMTEvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1hbmltYXRpbmcvXG4gICAgICAgICAgICB2YXIgY3VyclRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgdmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGdsb2JhbCRmcmFtZSQkbGFzdFRpbWUpKTtcblxuICAgICAgICAgICAgZ2xvYmFsJGZyYW1lJCRsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcblxuICAgICAgICAgICAgcmV0dXJuIFdJTkRPVy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgIHsgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKSB9LCB0aW1lVG9DYWxsKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBET00uY2FuY2VsRnJhbWUgPSBmdW5jdGlvbihmcmFtZUlkKSAge1xuICAgICAgICBpZiAoZ2xvYmFsJGZyYW1lJCRjcmFmKSB7XG4gICAgICAgICAgICBnbG9iYWwkZnJhbWUkJGNyYWYuY2FsbChXSU5ET1csIGZyYW1lSWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgV0lORE9XLmNsZWFyVGltZW91dChmcmFtZUlkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnbG9iYWwkbW9jayQkYXBwbHlFeHRlbnNpb25zKG5vZGUpIHtcbiAgICAgICAgZ2xvYmFsJGV4dGVuZCQkZGVmYXVsdC5mb3JFYWNoKGZ1bmN0aW9uKGV4dCkgIHsgZXh0KG5vZGUsIHRydWUpIH0pO1xuXG4gICAgICAgIHV0aWwkaW5kZXgkJGRlZmF1bHQuZWFjaC5jYWxsKG5vZGUuY2hpbGRyZW4sIGdsb2JhbCRtb2NrJCRhcHBseUV4dGVuc2lvbnMpO1xuICAgIH1cblxuICAgIERPTS5tb2NrID0gZnVuY3Rpb24oY29udGVudCwgdmFyTWFwKSB7XG4gICAgICAgIGlmICghY29udGVudCkgcmV0dXJuIG5ldyAkTnVsbEVsZW1lbnQoKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gRE9NLmNyZWF0ZShjb250ZW50LCB2YXJNYXApO1xuXG4gICAgICAgIGdsb2JhbCRtb2NrJCRhcHBseUV4dGVuc2lvbnMocmVzdWx0WzBdKTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB2YXIgZXhwb3J0cyQkX0RPTSA9IFdJTkRPVy5ET007XG5cbiAgICBET00ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoV0lORE9XLkRPTSA9PT0gRE9NKSB7XG4gICAgICAgICAgICBXSU5ET1cuRE9NID0gZXhwb3J0cyQkX0RPTTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBET007XG4gICAgfTtcblxuICAgIFdJTkRPVy5ET00gPSBET007XG59KSgpO1xuIiwiLyoqXG4gKiBiZXR0ZXItZGV0YWlscy1wb2x5ZmlsbDogPGRldGFpbHM+IHBvbHlmaWxsIGZvciBiZXR0ZXItZG9tXG4gKiBAdmVyc2lvbiAyLjEuMCBUdWUsIDE2IERlYyAyMDE0IDE3OjM3OjIzIEdNVFxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvYmV0dGVyLWRldGFpbHMtcG9seWZpbGxcbiAqIEBjb3B5cmlnaHQgMjAxNCBNYWtzaW0gQ2hlbWVyaXN1a1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cbihmdW5jdGlvbihET00sIFZLX1NQQUNFLCBWS19FTlRFUikge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gYWRkIEFSSUEgYXR0cmlidXRlcyBmb3IgQUxMIGJyb3dzZXJzIGJlY2F1c2UgY3VycmVudFxuICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhaW9ucyBhcmUgd2VhazpcbiAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTMxMTExXG5cbiAgICB2YXIgaGFzTmF0aXZlU3VwcG9ydCA9IHR5cGVvZiBET00uY3JlYXRlKFwiZGV0YWlsc1wiKS5nZXQoXCJvcGVuXCIpID09PSBcImJvb2xlYW5cIjtcbiAgICBpZiAoIGhhc05hdGl2ZVN1cHBvcnQgKSB7IHJldHVybiA7IH1cblxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0LmRldGFpbHNQb2x5ZmlsbGVkID0gdHJ1ZTtcblxuICAgIERPTS5leHRlbmQoXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvaHRtbC93Zy9kcmFmdHMvaHRtbC9tYXN0ZXIvaW50ZXJhY3RpdmUtZWxlbWVudHMuaHRtbCN0aGUtZGV0YWlscy1lbGVtZW50XG4gICAgICAgICAgICB0aGlzLnNldChcInJvbGVcIiwgXCJncm91cFwiKVxuICAgICAgICAgICAgICAgIC5vbihcInRvZ2dsZVwiLCBbXCJzdG9wUHJvcGFnYXRpb25cIl0sIHRoaXMuX2NoYW5nZU9wZW4uYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIHZhciBmaXJzdFN1bW1hcnkgPSB0aGlzLmNoaWxkcmVuKFwic3VtbWFyeVwiKVswXTtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGNoaWxkIHN1bW1hcnkgZWxlbWVudCwgdGhlIHVzZXIgYWdlbnRcbiAgICAgICAgICAgIC8vIHNob3VsZCBwcm92aWRlIGl0cyBvd24gbGVnZW5kIChlLmcuIFwiRGV0YWlsc1wiKVxuICAgICAgICAgICAgaWYgKCFmaXJzdFN1bW1hcnkpIGZpcnN0U3VtbWFyeSA9IERPTS5jcmVhdGUoXCJzdW1tYXJ5PmBEZXRhaWxzYFwiKTtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIGZpcnN0IDxzdW1tYXJ5PiBhbHdheXMgdG8gYmUgdGhlIGZpcnN0IGNoaWxkXG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZCgwKSAhPT0gZmlyc3RTdW1tYXJ5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmVwZW5kKGZpcnN0U3VtbWFyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9pbnRlcmFjdGl2ZS1lbGVtZW50cy5odG1sI3RoZS1zdW1tYXJ5LWVsZW1lbnRcbiAgICAgICAgICAgIGZpcnN0U3VtbWFyeS5zZXQoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAoIWhhc05hdGl2ZVN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmluZShcIm9wZW5cIiwgdGhpcy5fZ2V0T3BlbiwgdGhpcy5fc2V0T3Blbik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0U3VtbWFyeShmaXJzdFN1bW1hcnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VPcGVuKCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9pbml0U3VtbWFyeTogZnVuY3Rpb24oc3VtbWFyeSkge1xuICAgICAgICAgICAgc3VtbWFyeVxuICAgICAgICAgICAgICAgIC5zZXQoXCJ0YWJpbmRleFwiLCAwKVxuICAgICAgICAgICAgICAgIC5vbihcImtleWRvd25cIiwgW1wid2hpY2hcIl0sIHRoaXMuX3RvZ2dsZU9wZW4uYmluZCh0aGlzKSlcbiAgICAgICAgICAgICAgICAub24oXCJjbGlja1wiLCB0aGlzLl90b2dnbGVPcGVuLmJpbmQodGhpcykpO1xuICAgICAgICB9LFxuICAgICAgICBfY2hhbmdlT3BlbjogZnVuY3Rpb24oc3RvcCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoXCJhcmlhLWV4cGFuZGVkXCIsIHRoaXMuZ2V0KFwib3BlblwiKSk7XG5cbiAgICAgICAgICAgIGlmIChzdG9wKSBzdG9wKCk7IC8vIHRvZ2dsZSBldmVudCBzaG91bGQgbm90IGJ1YmJsZVxuICAgICAgICB9LFxuICAgICAgICBfZ2V0T3BlbjogZnVuY3Rpb24oYXR0clZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyVmFsdWUgPSBTdHJpbmcoYXR0clZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gYXR0clZhbHVlID09PSBcIlwiIHx8IGF0dHJWYWx1ZSA9PT0gXCJvcGVuXCI7XG4gICAgICAgIH0sXG4gICAgICAgIF9zZXRPcGVuOiBmdW5jdGlvbihwcm9wVmFsdWUpIHt2YXIgdGhpcyQwID0gdGhpcztcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmdldChcIm9wZW5cIik7XG5cbiAgICAgICAgICAgIHByb3BWYWx1ZSA9ICEhcHJvcFZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlICE9PSBwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBoYXZlIHRvIHVzZSBzZXRUaW1lb3V0IGJlY2F1c2UgdGhlIGV2ZW50IHNob3VsZFxuICAgICAgICAgICAgICAgIC8vIGZpcmUgQUZURVIgdGhlIGF0dHJpYnV0ZSB3YXMgdXBkYXRlZFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSAgeyB0aGlzJDAuZmlyZShcInRvZ2dsZVwiKSB9LCAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHByb3BWYWx1ZSA/IFwiXCIgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBfdG9nZ2xlT3BlbjogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoIWtleSB8fCBrZXkgPT09IFZLX1NQQUNFIHx8IGtleSA9PT0gVktfRU5URVIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcIm9wZW5cIiwgIXRoaXMuZ2V0KFwib3BlblwiKSk7XG4gICAgICAgICAgICAgICAgLy8gbmVlZCB0byBwcmV2ZW50IGRlZmF1bHQsIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgZW50ZXIga2V5IHVzdWFsbHkgc3VibWl0cyBhIGZvcm1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn0od2luZG93LkRPTSwgMzIsIDEzKSk7XG5cbi8vIERPTS5pbXBvcnRTdHlsZXMoXCJAbWVkaWEgYWxsXCIsIFwic3VtbWFyeTpmaXJzdC1jaGlsZH4qe2Rpc3BsYXk6bm9uZX1kZXRhaWxzW29wZW5dPip7ZGlzcGxheTpibG9ja31kZXRhaWxzPnN1bW1hcnk6Zmlyc3QtY2hpbGR7ZGlzcGxheTpibG9ja31kZXRhaWxzOmJlZm9yZXtjb250ZW50OidcXFxcMjVCQSc7Zm9udC1mYW1pbHk6c2VyaWY7Zm9udC1zaXplOi43NWVtO21hcmdpbi10b3A6LjI1ZW07bWFyZ2luLWxlZnQ6LjI1ZW07cG9zaXRpb246YWJzb2x1dGV9ZGV0YWlsc1tvcGVuXTpiZWZvcmV7Y29udGVudDonXFxcXDI1QkMnfXN1bW1hcnk6Zmlyc3QtY2hpbGR7dGV4dC1pbmRlbnQ6MS4yNWVtfWRldGFpbHM6OmJlZm9yZXtjb250ZW50OicnO3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyOnNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0LWNvbG9yOmluaGVyaXQ7Ym9yZGVyLXdpZHRoOi4yNWVtIC41ZW07bWFyZ2luLXRvcDouNzVlbTttYXJnaW4tbGVmdDouNWVtOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKSBzY2FsZSgxLjUpOy1tcy10cmFuc2Zvcm06cm90YXRlKDBkZWcpIHNjYWxlKDEuNSk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKSBzY2FsZSgxLjUpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjoyNSUgNTAlOy1tcy10cmFuc2Zvcm0tb3JpZ2luOjI1JSA1MCU7dHJhbnNmb3JtLW9yaWdpbjoyNSUgNTAlOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMTVzIGVhc2Utb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4xNXMgZWFzZS1vdXR9ZGV0YWlsc1tvcGVuXTo6YmVmb3Jle2NvbnRlbnQ6Jyc7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKSBzY2FsZSgxLjUpOy1tcy10cmFuc2Zvcm06cm90YXRlKDkwZGVnKSBzY2FsZSgxLjUpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpIHNjYWxlKDEuNSl9c3VtbWFyeTo6LXdlYmtpdC1kZXRhaWxzLW1hcmtlcntkaXNwbGF5Om5vbmV9XCIpO1xuLy8gRE9NLmltcG9ydFN0eWxlcyhcIkBtZWRpYSBhbGxcIiwgYGh0bWxbZGF0YS1kZXRhaWxzLXBvbHlmaWxsZWQ9XCJ0cnVlXCJdIHN1bW1hcnk6Zmlyc3QtY2hpbGR+KntkaXNwbGF5Om5vbmV9aHRtbFtkYXRhLWRldGFpbHMtcG9seWZpbGxlZD1cInRydWVcIl0gZGV0YWlsc1tvcGVuXT4qe2Rpc3BsYXk6YmxvY2t9IGh0bWxbZGF0YS1kZXRhaWxzLXBvbHlmaWxsZWQ9XCJ0cnVlXCJdIGRldGFpbHM+c3VtbWFyeTpmaXJzdC1jaGlsZHtkaXNwbGF5OmJsb2NrfWh0bWxbZGF0YS1kZXRhaWxzLXBvbHlmaWxsZWQ9XCJ0cnVlXCJdIGRldGFpbHM6YmVmb3Jle2NvbnRlbnQ6J1xcXFwyNUJBJztmb250LWZhbWlseTpzZXJpZjtmb250LXNpemU6Ljc1ZW07bWFyZ2luLXRvcDouMjVlbTttYXJnaW4tbGVmdDouMjVlbTtwb3NpdGlvbjphYnNvbHV0ZX1odG1sW2RhdGEtZGV0YWlscy1wb2x5ZmlsbGVkPVwidHJ1ZVwiXSBkZXRhaWxzW29wZW5dOmJlZm9yZXtjb250ZW50OidcXFxcMjVCQyd9aHRtbFtkYXRhLWRldGFpbHMtcG9seWZpbGxlZD1cInRydWVcIl0gc3VtbWFyeTpmaXJzdC1jaGlsZHt0ZXh0LWluZGVudDoxLjI1ZW19aHRtbFtkYXRhLWRldGFpbHMtcG9seWZpbGxlZD1cInRydWVcIl0gZGV0YWlsczo6YmVmb3Jle2NvbnRlbnQ6Jyc7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6c29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQtY29sb3I6aW5oZXJpdDtib3JkZXItd2lkdGg6LjI1ZW0gLjVlbTttYXJnaW4tdG9wOi43NWVtO21hcmdpbi1sZWZ0Oi41ZW07LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpIHNjYWxlKDEuNSk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMGRlZykgc2NhbGUoMS41KTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpIHNjYWxlKDEuNSk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjI1JSA1MCU7LW1zLXRyYW5zZm9ybS1vcmlnaW46MjUlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjI1JSA1MCU7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4xNXMgZWFzZS1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjE1cyBlYXNlLW91dH1odG1sW2RhdGEtZGV0YWlscy1wb2x5ZmlsbGVkPVwidHJ1ZVwiXSBkZXRhaWxzW29wZW5dOjpiZWZvcmV7Y29udGVudDonJzstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpIHNjYWxlKDEuNSk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpIHNjYWxlKDEuNSk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZykgc2NhbGUoMS41KX1odG1sW2RhdGEtZGV0YWlscy1wb2x5ZmlsbGVkPVwidHJ1ZVwiXSBzdW1tYXJ5Ojotd2Via2l0LWRldGFpbHMtbWFya2Vye2Rpc3BsYXk6bm9uZX1gKTtcbiIsIihmdW5jdGlvbigkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgY29uc3Qgc2V0SGVpZ2h0ID0gZnVuY3Rpb24oZGV0YWlscywgb3Blbj1mYWxzZSkge1xuICAgIGRldGFpbHMub3BlbiA9IG9wZW47XG4gICAgY29uc3QgcmVjdCA9IGRldGFpbHMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZGV0YWlscy5kYXRhc2V0LndpZHRoID0gcmVjdC53aWR0aDtcbiAgICBpZiAoIG9wZW4gKSB7IGRldGFpbHMuZGF0YXNldC5wYW5lbEhlaWdodCA9IGRldGFpbHMucXVlcnlTZWxlY3RvcignLnBhbmVsJykub2Zmc2V0SGVpZ2h0IDsgfVxuICAgIGRldGFpbHMuc3R5bGUuc2V0UHJvcGVydHkob3BlbiA/IGAtLWV4cGFuZGVkYCA6IGAtLWNvbGxhcHNlZGAsYCR7cmVjdC5oZWlnaHR9cHhgKTsgICBcbiAgfVxuXG4gIGxldCBfX2RldGFpbHMgPSBbXTtcbiAgbGV0IF9fb3BlbkRldGFpbHM7XG4gIGxldCBfX29ic2VydmVyO1xuXG4gIGNvbnN0IEFjY29yZGlvbiA9IGNsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKGVsKSB7XG4gICAgICB0aGlzLmVsID0gZWw7XG4gICAgICB0aGlzLnBhbmVsID0gZWwucXVlcnlTZWxlY3RvcignLnBhbmVsJyk7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgaWYgKCAhIHdpbmRvdy5SZXNpemVPYnNlcnZlciApIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZDsgcHVudFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoICEgX19vYnNlcnZlciApIHtcbiAgICAgICAgX19vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgICByZXR1cm4gZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZW50cnkudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKCBlbC5ub2RlTmFtZSA9PSAnREVUQUlMUycgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VJbnQoZWwuZGF0YXNldC53aWR0aCwgMTApO1xuICAgICAgICAgICAgICB2YXIgb3BlblN0YXRlID0gZWwub3BlbjtcbiAgICAgICAgICAgICAgLy8gaWYgKHdpZHRoICE9PSBlbnRyeS5jb250ZW50UmVjdC53aWR0aCkge1xuICAgICAgICAgICAgICBpZiAoIHdpZHRoICE9PSBlbC5jbGllbnRXaWR0aCApIHtcbiAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgc2V0SGVpZ2h0KGVsKTtcbiAgICAgICAgICAgICAgICBzZXRIZWlnaHQoZWwsIHRydWUpO1xuICAgICAgICAgICAgICAgIGVsLm9wZW4gPSBlbC5kYXRhc2V0LmludGVyYWN0aXZlID09ICdmYWxzZScgPyB0cnVlIDogb3BlblN0YXRlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBlbC5ub2RlTmFtZSA9PSAnRElWJyApIHtcbiAgICAgICAgICAgICAgY29uc3QgZGV0YWlscyA9IGVsLmNsb3Nlc3QoJ2RldGFpbHMnKTtcbiAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeSA9IGRldGFpbHMucXVlcnlTZWxlY3Rvcignc3VtbWFyeScpO1xuICAgICAgICAgICAgICBjb25zdCBwYW5lbEhlaWdodCA9IHBhcnNlSW50KGRldGFpbHMuZGF0YXNldC5wYW5lbEhlaWdodCB8fCAwLCAxMCk7XG4gICAgICAgICAgICAgIGNvbnN0IG9mZnNldEhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGVsLmNsaWVudFdpZHRoOyAvLyBmb3JjZSBhIHJlZmxvd1xuICAgICAgICAgICAgICAgIEhULmxvZyhcIi0tIHBhbmVsIGNoZWNrXCIsIHBhbmVsSGVpZ2h0LCBvZmZzZXRIZWlnaHQsIGVsLm9mZnNldEhlaWdodCA+IDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRfZXhwYW5kZWQgPSBgJHtlbC5vZmZzZXRIZWlnaHQgKyBzdW1tYXJ5Lm9mZnNldEhlaWdodCArIDQ1fXB4YDtcbiAgICAgICAgICAgICAgICBjb25zdCBleHBhbmRlZCA9IGRldGFpbHMuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLS1leHBhbmRlZCcpO1xuICAgICAgICAgICAgICAgIGlmICggdXBkYXRlZF9leHBhbmRlZCAhPSBleHBhbmRlZCApIHtcbiAgICAgICAgICAgICAgICAgIGRldGFpbHMuc3R5bGUuc2V0UHJvcGVydHkoYC0tZXhwYW5kZWRgLCB1cGRhdGVkX2V4cGFuZGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBIVC5sb2coXCItLSBwYW5lbFwiLCBwYW5lbEhlaWdodCwgZWwub2Zmc2V0SGVpZ2h0LCBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgX19vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwpO1xuICAgICAgX19vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnBhbmVsJykpO1xuICAgICAgX19kZXRhaWxzLnB1c2godGhpcy5lbCk7XG5cbiAgICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigndG9nZ2xlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmICggdGhpcy5lbC5vcGVuICYmIHRoaXMuZWwuZGF0YXNldC5pbnRlcmFjdGl2ZSAhPSAnZmFsc2UnICkge1xuICAgICAgICAgIC8vIGNsb3NlIHRoZSBvdGhlciBkZXRhaWxzXG4gICAgICAgICAgaWYgKCBfX29wZW5EZXRhaWxzICYmIF9fb3BlbkRldGFpbHMgIT0gdGhpcy5lbCApIHtcbiAgICAgICAgICAgIF9fb3BlbkRldGFpbHMub3BlbiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfX29wZW5EZXRhaWxzID0gdGhpcy5lbDtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmVsLmRhdGFzZXQuaWdub3JlU2Nyb2xsSW50b1ZpZXcgPT0gJ3RydWUnICkge1xuICAgICAgICAgICAgICB0aGlzLmVsLmRhdGFzZXQuaWdub3JlU2Nyb2xsSW50b1ZpZXcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbC5zY3JvbGxJbnRvVmlldyh0cnVlKTtcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIEFjY29yZGlvbi5jb25maWd1cmUgPSBmdW5jdGlvbihzZWxlY3Rvciwgd3JhcHBlcj1kb2N1bWVudCkge1xuICAgIHdyYXBwZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikuZm9yRWFjaCgoZGV0YWlscykgPT4ge1xuICAgICAgbmV3IEFjY29yZGlvbihkZXRhaWxzKTtcbiAgICB9KVxuICB9XG5cbiAgJC5BY2NvcmRpb24gPSBBY2NvcmRpb247XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoZXZlbnQpID0+IHtcbiAgICBBY2NvcmRpb24uY29uZmlndXJlKCdkZXRhaWxzW2RhdGEtcm9sZT1cImFjY29yZGlvblwiXScpO1xuICB9KVxuXG59KHdpbmRvdywgMzIsIDEzKSk7IiwiaGVhZC5yZWFkeShmdW5jdGlvbigpIHtcblxuICAvLyBpbml0aWFsaXplIHRvb2x0aXBzXG4gIHRpcHB5LmRlbGVnYXRlKCcjcm9vdCcsIHtcbiAgICB0YXJnZXQ6ICdbZGF0YS10aXBweS1yb2xlPVwidG9vbHRpcFwiXScsXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgY29udGVudDogKHJlZmVyZW5jZSkgPT4ge1xuICAgICAgLy8gcmVmZXJlbmNlLmRhdGFzZXQudW50b2dnbGVkTGFiZWwgPSByZWZlcmVuY2UuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJyk7XG4gICAgICAvLyByZXR1cm4gcmVmZXJlbmNlLmRhdGFzZXQudW50b2dnbGVkTGFiZWw7XG4gICAgICBpZiAoIHJlZmVyZW5jZS5kYXRhc2V0LnRvZ2dsZWRMYWJlbCAmJiAhIHJlZmVyZW5jZS5kYXRhc2V0LnVudG9nZ2xlZExhYmVsICkge1xuICAgICAgICByZWZlcmVuY2UuZGF0YXNldC51bnRvZ2dsZWRMYWJlbCA9IHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWZlcmVuY2UuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJyk7XG4gICAgfSxcbiAgICB0aGVtZTogJ2hhdGhpdHJ1c3QnXG4gIH0pO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zaGFyZS10b29sYmFyIGJ1dHRvbicpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmRhdGFzZXQudGlwcHlSb2xlID0gJ3Rvb2x0aXAnO1xuICAgICAgYnV0dG9uLmRhdGFzZXQucm9sZSA9IG51bGw7XG4gICAgfSlcbiAgfSwgMTAwKTtcblxufSk7IiwidmFyIEhUID0gSFQgfHwge307XG5cbkhULmlzTG9nZ2luZyA9IGZhbHNlO1xuSFQubG9nID0gZnVuY3Rpb24oKSB7XG4gIGlmICggSFQuaXNMb2dnaW5nICkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuaGVhZC5yZWFkeShmdW5jdGlvbigpIHtcblxuICBIVC5yZW5ld19hdXRoID0gZnVuY3Rpb24oZW50aXR5SUQsIHNvdXJjZT0naW1hZ2UnKSB7XG4gICAgaWYgKCBIVC5fX3JlbmV3aW5nICkgeyByZXR1cm4gOyB9XG4gICAgSFQuX19yZW5ld2luZyA9IHRydWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB2YXIgcmVhdXRoX3VybCA9IGBodHRwczovLyR7SFQuc2VydmljZV9kb21haW59L1NoaWJib2xldGguc3NvL0xvZ2luP2VudGl0eUlEPSR7ZW50aXR5SUR9JnRhcmdldD0ke2VuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uaHJlZil9YDtcbiAgICAgIHZhciByZXR2YWwgPSB3aW5kb3cuY29uZmlybShgV2UncmUgaGF2aW5nIGEgcHJvYmxlbSB3aXRoIHlvdXIgc2Vzc2lvbjsgc2VsZWN0IE9LIHRvIGxvZyBpbiBhZ2Fpbi5gKTtcbiAgICAgIGlmICggcmV0dmFsICkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlYXV0aF91cmw7XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfVxuXG4gIEhULmFuYWx5dGljcyA9IEhULmFuYWx5dGljcyB8fCB7fTtcbiAgSFQuYW5hbHl0aWNzLmxvZ0FjdGlvbiA9IGZ1bmN0aW9uKGhyZWYsIHRyaWdnZXIpIHtcbiAgICBpZiAoIGhyZWYgPT09IHVuZGVmaW5lZCApIHsgaHJlZiA9IGxvY2F0aW9uLmhyZWYgOyB9XG4gICAgdmFyIGRlbGltID0gaHJlZi5pbmRleE9mKCc7JykgPiAtMSA/ICc7JyA6ICcmJztcbiAgICBpZiAoIHRyaWdnZXIgPT0gbnVsbCApIHsgdHJpZ2dlciA9ICctJzsgfVxuICAgIGhyZWYgKz0gZGVsaW0gKyAnYT0nICsgdHJpZ2dlcjtcbiAgICAkLmFqYXgoaHJlZiwgXG4gICAge1xuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKHhociwgc3RhdHVzKSB7XG4gICAgICAgIHZhciBlbnRpdHlJRCA9IHhoci5nZXRSZXNwb25zZUhlYWRlcigneC1oYXRoaXRydXN0LXJlbmV3Jyk7XG4gICAgICAgIGlmICggZW50aXR5SUQgKSB7XG4gICAgICAgICAgSFQucmVuZXdfYXV0aChlbnRpdHlJRCwgJ2xvZ0FjdGlvbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG5cbiAgJChcImJvZHlcIikub24oJ2NsaWNrJywgJ2FbZGF0YS10cmFja2luZy1jYXRlZ29yeT1cIm91dExpbmtzXCJdJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdHJpZ2dlciA9ICdvdXQnICsgJCh0aGlzKS5hdHRyKCdocmVmJyk7XG4gICAgSFQuYW5hbHl0aWNzLmxvZ0FjdGlvbih1bmRlZmluZWQsIHRyaWdnZXIpO1xuICB9KVxuXG59KSIsImhlYWQucmVhZHkoZnVuY3Rpb24oKSB7XG5cbiAgdmFyIE1PTlRIUyA9IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JyxcbiAgICAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ107XG5cbiAgdmFyICRlbWVyZ2VuY3lfYWNjZXNzID0gJChcIiNhY2Nlc3MtZW1lcmdlbmN5LWFjY2Vzc1wiKTtcblxuICB2YXIgZGVsdGEgPSA1ICogNjAgKiAxMDAwO1xuICB2YXIgbGFzdF9zZWNvbmRzO1xuICB2YXIgdG9nZ2xlX3JlbmV3X2xpbmsgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgaWYgKCBub3cgPj0gZGF0ZS5nZXRUaW1lKCkgKSB7XG4gICAgICB2YXIgJGxpbmsgPSAkZW1lcmdlbmN5X2FjY2Vzcy5maW5kKFwiYVtkaXNhYmxlZF1cIik7XG4gICAgICAkbGluay5hdHRyKFwiZGlzYWJsZWRcIiwgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG9ic2VydmVfZXhwaXJhdGlvbl90aW1lc3RhbXAgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoICEgSFQgfHwgISBIVC5wYXJhbXMgfHwgISBIVC5wYXJhbXMuaWQgKSB7IHJldHVybiA7IH1cbiAgICB2YXIgZGF0YSA9ICQuY29va2llKCdIVGV4cGlyYXRpb24nLCB1bmRlZmluZWQsIHsganNvbjogdHJ1ZSB9KTtcbiAgICBpZiAoICEgZGF0YSApIHsgcmV0dXJuIDsgfVxuICAgIHZhciBzZWNvbmRzID0gZGF0YVtIVC5wYXJhbXMuaWRdO1xuICAgIGlmICggc2Vjb25kcyA9PSAtMSApIHtcbiAgICAgIHZhciAkbGluayA9ICRlbWVyZ2VuY3lfYWNjZXNzLmZpbmQoXCJwIGFcIikuY2xvbmUoKTtcbiAgICAgICRlbWVyZ2VuY3lfYWNjZXNzLmZpbmQoXCJwXCIpLnRleHQoXCJZb3VyIGFjY2VzcyBoYXMgZXhwaXJlZCBhbmQgY2Fubm90IGJlIHJlbmV3ZWQuIFJlbG9hZCB0aGUgcGFnZSBvciB0cnkgYWdhaW4gbGF0ZXIuIEFjY2VzcyBoYXMgYmVlbiBwcm92aWRlZCB0aHJvdWdoIHRoZSBcIik7XG4gICAgICAkZW1lcmdlbmN5X2FjY2Vzcy5maW5kKFwicFwiKS5hcHBlbmQoJGxpbmspO1xuICAgICAgdmFyICRhY3Rpb24gPSAkZW1lcmdlbmN5X2FjY2Vzcy5maW5kKFwiLmFsZXJ0LS1lbWVyZ2VuY3ktYWNjZXNzLS1vcHRpb25zIGFcIik7XG4gICAgICAkYWN0aW9uLmF0dHIoJ2hyZWYnLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAkYWN0aW9uLnRleHQoJ1JlbG9hZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIHNlY29uZHMgPiBsYXN0X3NlY29uZHMgKSB7XG4gICAgICB2YXIgbWVzc2FnZSA9IHRpbWUybWVzc2FnZShzZWNvbmRzKTtcbiAgICAgIGxhc3Rfc2Vjb25kcyA9IHNlY29uZHM7XG4gICAgICAkZW1lcmdlbmN5X2FjY2Vzcy5maW5kKFwiLmV4cGlyZXMtZGlzcGxheVwiKS50ZXh0KG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0aW1lMm1lc3NhZ2UgPSBmdW5jdGlvbihzZWNvbmRzKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzZWNvbmRzICogMTAwMCk7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgIHZhciBhbXBtID0gJ0FNJztcbiAgICBpZiAoIGhvdXJzID4gMTIgKSB7IGhvdXJzIC09IDEyOyBhbXBtID0gJ1BNJzsgfVxuICAgIGlmICggaG91cnMgPT0gMTIgKXsgYW1wbSA9ICdQTSc7IH1cbiAgICB2YXIgbWludXRlcyA9IGRhdGUuZ2V0TWludXRlcygpO1xuICAgIGlmICggbWludXRlcyA8IDEwICkgeyBtaW51dGVzID0gYDAke21pbnV0ZXN9YDsgfVxuICAgIHZhciBtZXNzYWdlID0gYCR7aG91cnN9OiR7bWludXRlc30ke2FtcG19ICR7TU9OVEhTW2RhdGUuZ2V0TW9udGgoKV19ICR7ZGF0ZS5nZXREYXRlKCl9YDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxuXG4gIGlmICggJGVtZXJnZW5jeV9hY2Nlc3MubGVuZ3RoICkge1xuICAgIHZhciBleHBpcmF0aW9uID0gJGVtZXJnZW5jeV9hY2Nlc3MuZGF0YSgnYWNjZXNzRXhwaXJlcycpO1xuICAgIHZhciBzZWNvbmRzID0gcGFyc2VJbnQoJGVtZXJnZW5jeV9hY2Nlc3MuZGF0YSgnYWNjZXNzRXhwaXJlc1NlY29uZHMnKSwgMTApO1xuICAgIHZhciBncmFudGVkID0gJGVtZXJnZW5jeV9hY2Nlc3MuZGF0YSgnYWNjZXNzR3JhbnRlZCcpO1xuXG4gICAgdmFyIG5vdyA9IERhdGUubm93KCkgLyAxMDAwO1xuICAgIHZhciBtZXNzYWdlID0gdGltZTJtZXNzYWdlKHNlY29uZHMpO1xuICAgICRlbWVyZ2VuY3lfYWNjZXNzLmZpbmQoXCIuZXhwaXJlcy1kaXNwbGF5XCIpLnRleHQobWVzc2FnZSk7XG4gICAgJGVtZXJnZW5jeV9hY2Nlc3MuZ2V0KDApLmRhdGFzZXQuaW5pdGlhbGl6ZWQgPSAndHJ1ZSdcblxuICAgIGlmICggZ3JhbnRlZCApIHtcbiAgICAgIC8vIHNldCB1cCBhIHdhdGNoIGZvciB0aGUgZXhwaXJhdGlvbiB0aW1lXG4gICAgICBsYXN0X3NlY29uZHMgPSBzZWNvbmRzO1xuICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHRvZ2dsZV9yZW5ld19saW5rKGRhdGUpO1xuICAgICAgICBvYnNlcnZlX2V4cGlyYXRpb25fdGltZXN0YW1wKCk7XG4gICAgICB9LCA1MDApO1xuICAgIH1cbiAgfVxuXG4gIGlmICgkKCcjYWNjZXNzQmFubmVySUQnKS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgc3VwcHJlc3MgPSAkKCdodG1sJykuaGFzQ2xhc3MoJ3N1cGFjY2JhbicpO1xuICAgICAgaWYgKHN1cHByZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGRlYnVnID0gJCgnaHRtbCcpLmhhc0NsYXNzKCdodGRldicpO1xuICAgICAgdmFyIGlkaGFzaCA9ICQuY29va2llKCdhY2Nlc3MuaGF0aGl0cnVzdC5vcmcnLCB1bmRlZmluZWQsIHtqc29uIDogdHJ1ZX0pO1xuICAgICAgdmFyIHVybCA9ICQudXJsKCk7IC8vIHBhcnNlIHRoZSBjdXJyZW50IHBhZ2UgVVJMXG4gICAgICB2YXIgY3VycmlkID0gdXJsLnBhcmFtKCdpZCcpO1xuICAgICAgaWYgKGlkaGFzaCA9PSBudWxsKSB7XG4gICAgICAgICAgaWRoYXNoID0ge307XG4gICAgICB9XG5cbiAgICAgIHZhciBpZHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGlkIGluIGlkaGFzaCkge1xuICAgICAgICAgIGlmIChpZGhhc2guaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgIGlkcy5wdXNoKGlkKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgoaWRzLmluZGV4T2YoY3VycmlkKSA8IDApIHx8IGRlYnVnKSB7XG4gICAgICAgICAgaWRoYXNoW2N1cnJpZF0gPSAxO1xuICAgICAgICAgIC8vIHNlc3Npb24gY29va2llXG4gICAgICAgICAgJC5jb29raWUoJ2FjY2Vzcy5oYXRoaXRydXN0Lm9yZycsIGlkaGFzaCwgeyBqc29uIDogdHJ1ZSwgcGF0aDogJy8nLCBkb21haW46ICcuaGF0aGl0cnVzdC5vcmcnIH0pO1xuXG4gICAgICAgICAgZnVuY3Rpb24gc2hvd0FsZXJ0KCkge1xuICAgICAgICAgICAgICB2YXIgaHRtbCA9ICQoJyNhY2Nlc3NCYW5uZXJJRCcpLmh0bWwoKTtcbiAgICAgICAgICAgICAgdmFyICRhbGVydCA9IGJvb3Rib3guZGlhbG9nKGh0bWwsIFt7IGxhYmVsOiBcIk9LXCIsIFwiY2xhc3NcIiA6IFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1kaXNtaXNzXCIgfV0sIHsgaGVhZGVyIDogJ1NwZWNpYWwgYWNjZXNzJywgcm9sZTogJ2FsZXJ0ZGlhbG9nJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoc2hvd0FsZXJ0LCAzMDAwLCB0cnVlKTtcbiAgICAgIH1cbiAgfVxuXG4gICQoXCJkZXRhaWxzLmRldGFpbHMtLWFsZXJ0XCIpLm9uKCd0b2dnbGUnLCBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBkZXRhaWwgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIHByZWZzID0gSFQucHJlZnMuZ2V0KCk7XG4gICAgcHJlZnMucHQgPSBwcmVmcy5wdCB8fCB7fTtcbiAgICBwcmVmcy5wdC5hbGVydHMgPSBwcmVmcy5wdC5hbGVydHMgfHwge307XG4gICAgcHJlZnMucHQuYWxlcnRzW2RldGFpbC5nZXRBdHRyaWJ1dGUoJ2lkJyldID0gZGV0YWlsLm9wZW4gPyAnb3BlbicgOiAnY2xvc2VkJztcbiAgICBIVC5wcmVmcy5zZXQocHJlZnMpO1xuICB9KVxuXG59KSIsIi8qXG4gKiBjbGFzc0xpc3QuanM6IENyb3NzLWJyb3dzZXIgZnVsbCBlbGVtZW50LmNsYXNzTGlzdCBpbXBsZW1lbnRhdGlvbi5cbiAqIDEuMi4yMDE3MTIxMFxuICpcbiAqIEJ5IEVsaSBHcmV5LCBodHRwOi8vZWxpZ3JleS5jb21cbiAqIExpY2Vuc2U6IERlZGljYXRlZCB0byB0aGUgcHVibGljIGRvbWFpbi5cbiAqICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGlncmV5L2NsYXNzTGlzdC5qcy9ibG9iL21hc3Rlci9MSUNFTlNFLm1kXG4gKi9cblxuLypnbG9iYWwgc2VsZiwgZG9jdW1lbnQsIERPTUV4Y2VwdGlvbiAqL1xuXG4vKiEgQHNvdXJjZSBodHRwOi8vcHVybC5lbGlncmV5LmNvbS9naXRodWIvY2xhc3NMaXN0LmpzL2Jsb2IvbWFzdGVyL2NsYXNzTGlzdC5qcyAqL1xuXG5pZiAoXCJkb2N1bWVudFwiIGluIHNlbGYpIHtcblxuLy8gRnVsbCBwb2x5ZmlsbCBmb3IgYnJvd3NlcnMgd2l0aCBubyBjbGFzc0xpc3Qgc3VwcG9ydFxuLy8gSW5jbHVkaW5nIElFIDwgRWRnZSBtaXNzaW5nIFNWR0VsZW1lbnQuY2xhc3NMaXN0XG5pZiAoXG5cdCAgICEoXCJjbGFzc0xpc3RcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKSkgXG5cdHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROU1xuXHQmJiAhKFwiY2xhc3NMaXN0XCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcImdcIikpXG4pIHtcblxuKGZ1bmN0aW9uICh2aWV3KSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAoISgnRWxlbWVudCcgaW4gdmlldykpIHJldHVybjtcblxudmFyXG5cdCAgY2xhc3NMaXN0UHJvcCA9IFwiY2xhc3NMaXN0XCJcblx0LCBwcm90b1Byb3AgPSBcInByb3RvdHlwZVwiXG5cdCwgZWxlbUN0clByb3RvID0gdmlldy5FbGVtZW50W3Byb3RvUHJvcF1cblx0LCBvYmpDdHIgPSBPYmplY3Rcblx0LCBzdHJUcmltID0gU3RyaW5nW3Byb3RvUHJvcF0udHJpbSB8fCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgXCJcIik7XG5cdH1cblx0LCBhcnJJbmRleE9mID0gQXJyYXlbcHJvdG9Qcm9wXS5pbmRleE9mIHx8IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0dmFyXG5cdFx0XHQgIGkgPSAwXG5cdFx0XHQsIGxlbiA9IHRoaXMubGVuZ3RoXG5cdFx0O1xuXHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cdC8vIFZlbmRvcnM6IHBsZWFzZSBhbGxvdyBjb250ZW50IGNvZGUgdG8gaW5zdGFudGlhdGUgRE9NRXhjZXB0aW9uc1xuXHQsIERPTUV4ID0gZnVuY3Rpb24gKHR5cGUsIG1lc3NhZ2UpIHtcblx0XHR0aGlzLm5hbWUgPSB0eXBlO1xuXHRcdHRoaXMuY29kZSA9IERPTUV4Y2VwdGlvblt0eXBlXTtcblx0XHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXHR9XG5cdCwgY2hlY2tUb2tlbkFuZEdldEluZGV4ID0gZnVuY3Rpb24gKGNsYXNzTGlzdCwgdG9rZW4pIHtcblx0XHRpZiAodG9rZW4gPT09IFwiXCIpIHtcblx0XHRcdHRocm93IG5ldyBET01FeChcblx0XHRcdFx0ICBcIlNZTlRBWF9FUlJcIlxuXHRcdFx0XHQsIFwiVGhlIHRva2VuIG11c3Qgbm90IGJlIGVtcHR5LlwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRpZiAoL1xccy8udGVzdCh0b2tlbikpIHtcblx0XHRcdHRocm93IG5ldyBET01FeChcblx0XHRcdFx0ICBcIklOVkFMSURfQ0hBUkFDVEVSX0VSUlwiXG5cdFx0XHRcdCwgXCJUaGUgdG9rZW4gbXVzdCBub3QgY29udGFpbiBzcGFjZSBjaGFyYWN0ZXJzLlwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gYXJySW5kZXhPZi5jYWxsKGNsYXNzTGlzdCwgdG9rZW4pO1xuXHR9XG5cdCwgQ2xhc3NMaXN0ID0gZnVuY3Rpb24gKGVsZW0pIHtcblx0XHR2YXJcblx0XHRcdCAgdHJpbW1lZENsYXNzZXMgPSBzdHJUcmltLmNhbGwoZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKVxuXHRcdFx0LCBjbGFzc2VzID0gdHJpbW1lZENsYXNzZXMgPyB0cmltbWVkQ2xhc3Nlcy5zcGxpdCgvXFxzKy8pIDogW11cblx0XHRcdCwgaSA9IDBcblx0XHRcdCwgbGVuID0gY2xhc3Nlcy5sZW5ndGhcblx0XHQ7XG5cdFx0Zm9yICg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dGhpcy5wdXNoKGNsYXNzZXNbaV0pO1xuXHRcdH1cblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMudG9TdHJpbmcoKSk7XG5cdFx0fTtcblx0fVxuXHQsIGNsYXNzTGlzdFByb3RvID0gQ2xhc3NMaXN0W3Byb3RvUHJvcF0gPSBbXVxuXHQsIGNsYXNzTGlzdEdldHRlciA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gbmV3IENsYXNzTGlzdCh0aGlzKTtcblx0fVxuO1xuLy8gTW9zdCBET01FeGNlcHRpb24gaW1wbGVtZW50YXRpb25zIGRvbid0IGFsbG93IGNhbGxpbmcgRE9NRXhjZXB0aW9uJ3MgdG9TdHJpbmcoKVxuLy8gb24gbm9uLURPTUV4Y2VwdGlvbnMuIEVycm9yJ3MgdG9TdHJpbmcoKSBpcyBzdWZmaWNpZW50IGhlcmUuXG5ET01FeFtwcm90b1Byb3BdID0gRXJyb3JbcHJvdG9Qcm9wXTtcbmNsYXNzTGlzdFByb3RvLml0ZW0gPSBmdW5jdGlvbiAoaSkge1xuXHRyZXR1cm4gdGhpc1tpXSB8fCBudWxsO1xufTtcbmNsYXNzTGlzdFByb3RvLmNvbnRhaW5zID0gZnVuY3Rpb24gKHRva2VuKSB7XG5cdHJldHVybiB+Y2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuICsgXCJcIik7XG59O1xuY2xhc3NMaXN0UHJvdG8uYWRkID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdDtcblx0ZG8ge1xuXHRcdHRva2VuID0gdG9rZW5zW2ldICsgXCJcIjtcblx0XHRpZiAoIX5jaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pKSB7XG5cdFx0XHR0aGlzLnB1c2godG9rZW4pO1xuXHRcdFx0dXBkYXRlZCA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHdoaWxlICgrK2kgPCBsKTtcblxuXHRpZiAodXBkYXRlZCkge1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHR2YXJcblx0XHQgIHRva2VucyA9IGFyZ3VtZW50c1xuXHRcdCwgaSA9IDBcblx0XHQsIGwgPSB0b2tlbnMubGVuZ3RoXG5cdFx0LCB0b2tlblxuXHRcdCwgdXBkYXRlZCA9IGZhbHNlXG5cdFx0LCBpbmRleFxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdHdoaWxlICh+aW5kZXgpIHtcblx0XHRcdHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdFx0aW5kZXggPSBjaGVja1Rva2VuQW5kR2V0SW5kZXgodGhpcywgdG9rZW4pO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoKytpIDwgbCk7XG5cblx0aWYgKHVwZGF0ZWQpIHtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uICh0b2tlbiwgZm9yY2UpIHtcblx0dmFyXG5cdFx0ICByZXN1bHQgPSB0aGlzLmNvbnRhaW5zKHRva2VuKVxuXHRcdCwgbWV0aG9kID0gcmVzdWx0ID9cblx0XHRcdGZvcmNlICE9PSB0cnVlICYmIFwicmVtb3ZlXCJcblx0XHQ6XG5cdFx0XHRmb3JjZSAhPT0gZmFsc2UgJiYgXCJhZGRcIlxuXHQ7XG5cblx0aWYgKG1ldGhvZCkge1xuXHRcdHRoaXNbbWV0aG9kXSh0b2tlbik7XG5cdH1cblxuXHRpZiAoZm9yY2UgPT09IHRydWUgfHwgZm9yY2UgPT09IGZhbHNlKSB7XG5cdFx0cmV0dXJuIGZvcmNlO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiAhcmVzdWx0O1xuXHR9XG59O1xuY2xhc3NMaXN0UHJvdG8ucmVwbGFjZSA9IGZ1bmN0aW9uICh0b2tlbiwgcmVwbGFjZW1lbnRfdG9rZW4pIHtcblx0dmFyIGluZGV4ID0gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRva2VuICsgXCJcIik7XG5cdGlmICh+aW5kZXgpIHtcblx0XHR0aGlzLnNwbGljZShpbmRleCwgMSwgcmVwbGFjZW1lbnRfdG9rZW4pO1xuXHRcdHRoaXMuX3VwZGF0ZUNsYXNzTmFtZSgpO1xuXHR9XG59XG5jbGFzc0xpc3RQcm90by50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuam9pbihcIiBcIik7XG59O1xuXG5pZiAob2JqQ3RyLmRlZmluZVByb3BlcnR5KSB7XG5cdHZhciBjbGFzc0xpc3RQcm9wRGVzYyA9IHtcblx0XHQgIGdldDogY2xhc3NMaXN0R2V0dGVyXG5cdFx0LCBlbnVtZXJhYmxlOiB0cnVlXG5cdFx0LCBjb25maWd1cmFibGU6IHRydWVcblx0fTtcblx0dHJ5IHtcblx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdH0gY2F0Y2ggKGV4KSB7IC8vIElFIDggZG9lc24ndCBzdXBwb3J0IGVudW1lcmFibGU6dHJ1ZVxuXHRcdC8vIGFkZGluZyB1bmRlZmluZWQgdG8gZmlnaHQgdGhpcyBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vZWxpZ3JleS9jbGFzc0xpc3QuanMvaXNzdWVzLzM2XG5cdFx0Ly8gbW9kZXJuaWUgSUU4LU1TVzcgbWFjaGluZSBoYXMgSUU4IDguMC42MDAxLjE4NzAyIGFuZCBpcyBhZmZlY3RlZFxuXHRcdGlmIChleC5udW1iZXIgPT09IHVuZGVmaW5lZCB8fCBleC5udW1iZXIgPT09IC0weDdGRjVFQzU0KSB7XG5cdFx0XHRjbGFzc0xpc3RQcm9wRGVzYy5lbnVtZXJhYmxlID0gZmFsc2U7XG5cdFx0XHRvYmpDdHIuZGVmaW5lUHJvcGVydHkoZWxlbUN0clByb3RvLCBjbGFzc0xpc3RQcm9wLCBjbGFzc0xpc3RQcm9wRGVzYyk7XG5cdFx0fVxuXHR9XG59IGVsc2UgaWYgKG9iakN0cltwcm90b1Byb3BdLl9fZGVmaW5lR2V0dGVyX18pIHtcblx0ZWxlbUN0clByb3RvLl9fZGVmaW5lR2V0dGVyX18oY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0R2V0dGVyKTtcbn1cblxufShzZWxmKSk7XG5cbn1cblxuLy8gVGhlcmUgaXMgZnVsbCBvciBwYXJ0aWFsIG5hdGl2ZSBjbGFzc0xpc3Qgc3VwcG9ydCwgc28ganVzdCBjaGVjayBpZiB3ZSBuZWVkXG4vLyB0byBub3JtYWxpemUgdGhlIGFkZC9yZW1vdmUgYW5kIHRvZ2dsZSBBUElzLlxuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHR2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiX1wiKTtcblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYzFcIiwgXCJjMlwiKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAvMTEgYW5kIEZpcmVmb3ggPDI2LCB3aGVyZSBjbGFzc0xpc3QuYWRkIGFuZFxuXHQvLyBjbGFzc0xpc3QucmVtb3ZlIGV4aXN0IGJ1dCBzdXBwb3J0IG9ubHkgb25lIGFyZ3VtZW50IGF0IGEgdGltZS5cblx0aWYgKCF0ZXN0RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJjMlwiKSkge1xuXHRcdHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbihtZXRob2QpIHtcblx0XHRcdHZhciBvcmlnaW5hbCA9IERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXTtcblxuXHRcdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odG9rZW4pIHtcblx0XHRcdFx0dmFyIGksIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0dG9rZW4gPSBhcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0b3JpZ2luYWwuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fTtcblx0XHRjcmVhdGVNZXRob2QoJ2FkZCcpO1xuXHRcdGNyZWF0ZU1ldGhvZCgncmVtb3ZlJyk7XG5cdH1cblxuXHR0ZXN0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKFwiYzNcIiwgZmFsc2UpO1xuXG5cdC8vIFBvbHlmaWxsIGZvciBJRSAxMCBhbmQgRmlyZWZveCA8MjQsIHdoZXJlIGNsYXNzTGlzdC50b2dnbGUgZG9lcyBub3Rcblx0Ly8gc3VwcG9ydCB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuXHRpZiAodGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzNcIikpIHtcblx0XHR2YXIgX3RvZ2dsZSA9IERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlO1xuXG5cdFx0RE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbih0b2tlbiwgZm9yY2UpIHtcblx0XHRcdGlmICgxIGluIGFyZ3VtZW50cyAmJiAhdGhpcy5jb250YWlucyh0b2tlbikgPT09ICFmb3JjZSkge1xuXHRcdFx0XHRyZXR1cm4gZm9yY2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gX3RvZ2dsZS5jYWxsKHRoaXMsIHRva2VuKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdH1cblxuXHQvLyByZXBsYWNlKCkgcG9seWZpbGxcblx0aWYgKCEoXCJyZXBsYWNlXCIgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIikuY2xhc3NMaXN0KSkge1xuXHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uICh0b2tlbiwgcmVwbGFjZW1lbnRfdG9rZW4pIHtcblx0XHRcdHZhclxuXHRcdFx0XHQgIHRva2VucyA9IHRoaXMudG9TdHJpbmcoKS5zcGxpdChcIiBcIilcblx0XHRcdFx0LCBpbmRleCA9IHRva2Vucy5pbmRleE9mKHRva2VuICsgXCJcIilcblx0XHRcdDtcblx0XHRcdGlmICh+aW5kZXgpIHtcblx0XHRcdFx0dG9rZW5zID0gdG9rZW5zLnNsaWNlKGluZGV4KTtcblx0XHRcdFx0dGhpcy5yZW1vdmUuYXBwbHkodGhpcywgdG9rZW5zKTtcblx0XHRcdFx0dGhpcy5hZGQocmVwbGFjZW1lbnRfdG9rZW4pO1xuXHRcdFx0XHR0aGlzLmFkZC5hcHBseSh0aGlzLCB0b2tlbnMuc2xpY2UoMSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRlc3RFbGVtZW50ID0gbnVsbDtcbn0oKSk7XG5cbn0iLCJoZWFkLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIERFRkFVTFRfQ09MTF9NRU5VX09QVElPTiA9IFwiYVwiO1xuICAgIHZhciBORVdfQ09MTF9NRU5VX09QVElPTiA9ICdfX05FV19fJzsgLy8gXCJiXCI7XG5cbiAgICB2YXIgSU5fWU9VUl9DT0xMU19MQUJFTCA9ICdUaGlzIGl0ZW0gaXMgaW4geW91ciBjb2xsZWN0aW9uKHMpOic7XG5cbiAgICB2YXIgJHRvb2xiYXIgPSAkKFwiLmNvbGxlY3Rpb25MaW5rcyAuc2VsZWN0LWNvbGxlY3Rpb25cIik7XG4gICAgdmFyICRlcnJvcm1zZyA9ICQoXCIuZXJyb3Jtc2dcIik7XG4gICAgdmFyICRpbmZvbXNnID0gJChcIi5pbmZvbXNnXCIpO1xuXG4gICAgZnVuY3Rpb24gZGlzcGxheV9lcnJvcihtc2cpIHtcbiAgICAgICAgaWYgKCAhICRlcnJvcm1zZy5sZW5ndGggKSB7XG4gICAgICAgICAgICAkZXJyb3Jtc2cgPSAkKCc8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZXJyb3IgZXJyb3Jtc2dcIiBzdHlsZT1cIm1hcmdpbi10b3A6IDAuNXJlbVwiPjwvZGl2PicpLmluc2VydEFmdGVyKCR0b29sYmFyKTtcbiAgICAgICAgfVxuICAgICAgICAkZXJyb3Jtc2cudGV4dChtc2cpLnNob3coKTtcbiAgICAgICAgSFQudXBkYXRlX3N0YXR1cyhtc2cpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpc3BsYXlfaW5mbyhtc2cpIHtcbiAgICAgICAgaWYgKCAhICRpbmZvbXNnLmxlbmd0aCApIHtcbiAgICAgICAgICAgICRpbmZvbXNnID0gJCgnPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm8gaW5mb21zZ1wiIHN0eWxlPVwibWFyZ2luLXRvcDogMC41cmVtXCI+PC9kaXY+JykuaW5zZXJ0QWZ0ZXIoJHRvb2xiYXIpO1xuICAgICAgICB9XG4gICAgICAgICRpbmZvbXNnLnRleHQobXNnKS5zaG93KCk7XG4gICAgICAgIEhULnVwZGF0ZV9zdGF0dXMobXNnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaWRlX2Vycm9yKCkge1xuICAgICAgICAkZXJyb3Jtc2cuaGlkZSgpLnRleHQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaWRlX2luZm8oKSB7XG4gICAgICAgICRpbmZvbXNnLmhpZGUoKS50ZXh0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0X3VybCgpIHtcbiAgICAgICAgdmFyIHVybCA9IFwiL2NnaS9tYlwiO1xuICAgICAgICBpZiAoIGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCIvc2hjZ2kvXCIpID4gLTEgKSB7XG4gICAgICAgICAgICB1cmwgPSBcIi9zaGNnaS9tYlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VfbGluZShkYXRhKSB7XG4gICAgICAgIHZhciByZXR2YWwgPSB7fTtcbiAgICAgICAgdmFyIHRtcCA9IGRhdGEuc3BsaXQoXCJ8XCIpO1xuICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdG1wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga3YgPSB0bXBbaV0uc3BsaXQoXCI9XCIpO1xuICAgICAgICAgICAgcmV0dmFsW2t2WzBdXSA9IGt2WzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXR2YWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZWRpdF9jb2xsZWN0aW9uX21ldGFkYXRhKGFyZ3MpIHtcblxuICAgICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHsgY3JlYXRpbmcgOiBmYWxzZSwgbGFiZWwgOiBcIlNhdmUgQ2hhbmdlc1wiIH0sIGFyZ3MpO1xuXG4gICAgICAgIHZhciAkYmxvY2sgPSAkKFxuICAgICAgICAgICAgJzxmb3JtIGNsYXNzPVwiZm9ybS1ob3Jpem9udGFsXCIgYWN0aW9uPVwibWJcIj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNvbnRyb2wtZ3JvdXBcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIiBmb3I9XCJlZGl0LWNuXCI+Q29sbGVjdGlvbiBOYW1lPC9sYWJlbD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjb250cm9sc1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiaW5wdXQtbGFyZ2VcIiBtYXhsZW5ndGg9XCIxMDBcIiBuYW1lPVwiY25cIiBpZD1cImVkaXQtY25cIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwiWW91ciBjb2xsZWN0aW9uIG5hbWVcIiByZXF1aXJlZCAvPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwibGFiZWwgY291bnRlclwiIGlkPVwiZWRpdC1jbi1jb3VudFwiPjEwMCA8c3BhbiBjbGFzcz1cIm9mZnNjcmVlblwiPmNoYXJhY3RlcnMgcmVtYWluaW5nPC9zcGFuPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImNvbnRyb2wtZ3JvdXBcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIiBmb3I9XCJlZGl0LWRlc2NcIj5EZXNjcmlwdGlvbjwvbGFiZWw+JyArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8dGV4dGFyZWEgaWQ9XCJlZGl0LWRlc2NcIiBuYW1lPVwiZGVzY1wiIHJvd3M9XCI0XCIgbWF4bGVuZ3RoPVwiMjU1XCIgY2xhc3M9XCJpbnB1dC1sYXJnZVwiIHBsYWNlaG9sZGVyPVwiQWRkIHlvdXIgY29sbGVjdGlvbiBkZXNjcmlwdGlvbi5cIj48L3RleHRhcmVhPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwibGFiZWwgY291bnRlclwiIGlkPVwiZWRpdC1kZXNjLWNvdW50XCI+MjU1IDxzcGFuIGNsYXNzPVwib2Zmc2NyZWVuXCI+Y2hhcmFjdGVycyByZW1haW5pbmc8L3NwYW4+PC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiY29udHJvbC1ncm91cFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwiY29udHJvbC1sYWJlbFwiPklzIHRoaXMgY29sbGVjdGlvbiA8c3Ryb25nPlB1YmxpYzwvc3Ryb25nPiBvciA8c3Ryb25nPlByaXZhdGU8L3N0cm9uZz4/PC9sYWJlbD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjb250cm9sc1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic2hyZFwiIGlkPVwiZWRpdC1zaHJkLTBcIiB2YWx1ZT1cIjBcIiBjaGVja2VkPVwiY2hlY2tlZFwiID4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwicmFkaW8gaW5saW5lXCIgZm9yPVwiZWRpdC1zaHJkLTBcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUHJpdmF0ZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2xhYmVsPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwic2hyZFwiIGlkPVwiZWRpdC1zaHJkLTFcIiB2YWx1ZT1cIjFcIiA+ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz1cInJhZGlvIGlubGluZVwiIGZvcj1cImVkaXQtc2hyZC0xXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1B1YmxpYyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2xhYmVsPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZm9ybT4nXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKCBvcHRpb25zLmNuICkge1xuICAgICAgICAgICAgJGJsb2NrLmZpbmQoXCJpbnB1dFtuYW1lPWNuXVwiKS52YWwob3B0aW9ucy5jbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIG9wdGlvbnMuZGVzYyApIHtcbiAgICAgICAgICAgICRibG9jay5maW5kKFwidGV4dGFyZWFbbmFtZT1kZXNjXVwiKS52YWwob3B0aW9ucy5kZXNjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggb3B0aW9ucy5zaHJkICE9IG51bGwgKSB7XG4gICAgICAgICAgICAkYmxvY2suZmluZChcImlucHV0W25hbWU9c2hyZF1bdmFsdWU9XCIgKyBvcHRpb25zLnNocmQgKyAnXScpLmF0dHIoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcbiAgICAgICAgfSBlbHNlIGlmICggISBIVC5sb2dpbl9zdGF0dXMubG9nZ2VkX2luICkge1xuICAgICAgICAgICAgJGJsb2NrLmZpbmQoXCJpbnB1dFtuYW1lPXNocmRdW3ZhbHVlPTBdXCIpLmF0dHIoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKTtcbiAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+PHN0cm9uZz5UaGlzIGNvbGxlY3Rpb24gd2lsbCBiZSB0ZW1wb3Jhcnk8L3N0cm9uZz4uIExvZyBpbiB0byBjcmVhdGUgcGVybWFuZW50IGFuZCBwdWJsaWMgY29sbGVjdGlvbnMuPC9kaXY+JykuYXBwZW5kVG8oJGJsb2NrKTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgPGxhYmVsPiB0aGF0IHdyYXBzIHRoZSByYWRpbyBidXR0b25cbiAgICAgICAgICAgICRibG9jay5maW5kKFwiaW5wdXRbbmFtZT1zaHJkXVt2YWx1ZT0xXVwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICRibG9jay5maW5kKFwibGFiZWxbZm9yPSdlZGl0LXNocmQtMSddXCIpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBvcHRpb25zLiRoaWRkZW4gKSB7XG4gICAgICAgICAgICBvcHRpb25zLiRoaWRkZW4uY2xvbmUoKS5hcHBlbmRUbygkYmxvY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChcIjxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J2MnIC8+XCIpLmFwcGVuZFRvKCRibG9jaykudmFsKG9wdGlvbnMuYyk7XG4gICAgICAgICAgICAkKFwiPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nYScgLz5cIikuYXBwZW5kVG8oJGJsb2NrKS52YWwob3B0aW9ucy5hKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggb3B0aW9ucy5paWQgKSB7XG4gICAgICAgICAgICAkKFwiPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0naWlkJyAvPlwiKS5hcHBlbmRUbygkYmxvY2spLnZhbChvcHRpb25zLmlpZCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgJGRpYWxvZyA9IGJvb3Rib3guZGlhbG9nKCRibG9jaywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibGFiZWxcIiA6IFwiQ2FuY2VsXCIsXG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiIDogXCJidG4tZGlzbWlzc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibGFiZWxcIiA6IG9wdGlvbnMubGFiZWwsXG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiIDogXCJidG4gYnRuLXByaW1hcnkgYnRuLWRpc21pc3NcIixcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtID0gJGJsb2NrLmdldCgwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGZvcm0uY2hlY2tWYWxpZGl0eSgpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXBvcnRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNuID0gJC50cmltKCRibG9jay5maW5kKFwiaW5wdXRbbmFtZT1jbl1cIikudmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVzYyA9ICQudHJpbSgkYmxvY2suZmluZChcInRleHRhcmVhW25hbWU9ZGVzY11cIikudmFsKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjbiApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICQoJzxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1lcnJvclwiPllvdSBtdXN0IGVudGVyIGEgY29sbGVjdGlvbiBuYW1lLjwvZGl2PicpLmFwcGVuZFRvKCRibG9jayk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5X2luZm8oXCJTdWJtaXR0aW5nOyBwbGVhc2Ugd2FpdC4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0X3Bvc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYSA6ICdhZGRpdHNuYycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbiA6IGNuLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA6IGRlc2MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaHJkIDogJGJsb2NrLmZpbmQoXCJpbnB1dFtuYW1lPXNocmRdOmNoZWNrZWRcIikudmFsKClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0pO1xuXG4gICAgICAgICRkaWFsb2cuZmluZChcImlucHV0W3R5cGU9dGV4dF0sdGV4dGFyZWFcIikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgICB2YXIgJGNvdW50ID0gJChcIiNcIiArICR0aGlzLmF0dHIoJ2lkJykgKyBcIi1jb3VudFwiKTtcbiAgICAgICAgICAgIHZhciBsaW1pdCA9ICR0aGlzLmF0dHIoXCJtYXhsZW5ndGhcIik7XG5cbiAgICAgICAgICAgIHZhciBudW1fcmVtYWluaW5nID0gbGltaXQgLSAkdGhpcy52YWwoKS5sZW5ndGg7XG4gICAgICAgICAgICAkY291bnQuaHRtbChgJHtudW1fcmVtYWluaW5nfSA8c3BhbiBjbGFzcz1cIm9mZnNjcmVlblwiPmNoYXJhY3RlcnMgcmVtYWluaW5nPC9zcGFuPmApO1xuXG4gICAgICAgICAgICAkdGhpcy5iaW5kKCdrZXl1cCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG51bV9yZW1haW5pbmcgPSBsaW1pdCAtICR0aGlzLnZhbCgpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAkY291bnQuaHRtbChgJHtudW1fcmVtYWluaW5nfSA8c3BhbiBjbGFzcz1cIm9mZnNjcmVlblwiPmNoYXJhY3RlcnMgcmVtYWluaW5nPC9zcGFuPmApO1xuICAgICAgICAgICAgICAgIGlmICggbnVtX3JlbWFpbmluZyA8PSAwICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgJGxhYmVsID0gJHRoaXMucGFyZW50cyhcIi5jb250cm9sLWdyb3VwXCIpLmZpbmQoXCJsYWJlbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgSFQudXBkYXRlX3N0YXR1cyhgJHskLnRyaW0oJGxhYmVsLnRleHQoKSl9IGhhcyBhIG1heGltdW0gc2l6ZSBvZiAke2xpbWl0fS5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAkY291bnQudGV4dChsaW1pdCAtICR0aGlzLnZhbCgpLmxlbmd0aCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWJtaXRfcG9zdChwYXJhbXMpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkLmV4dGVuZCh7fSwgeyBwYWdlIDogJ2FqYXgnLCBpZCA6IEhULnBhcmFtcy5pZCB9LCBwYXJhbXMpO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsIDogZ2V0X3VybCgpLFxuICAgICAgICAgICAgZGF0YSA6IGRhdGFcbiAgICAgICAgfSkuZG9uZShmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gcGFyc2VfbGluZShkYXRhKTtcbiAgICAgICAgICAgIGhpZGVfaW5mbygpO1xuICAgICAgICAgICAgaWYgKCBwYXJhbXMucmVzdWx0ID09ICdBRERfSVRFTV9TVUNDRVNTJyApIHtcbiAgICAgICAgICAgICAgICAvLyBkbyBzb21ldGhpbmdcbiAgICAgICAgICAgICAgICBhZGRfaXRlbV90b19jb2xsaXN0KHBhcmFtcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBwYXJhbXMucmVzdWx0ID09ICdBRERfSVRFTV9GQUlMVVJFJyApIHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5X2Vycm9yKFwiSXRlbSBjb3VsZCBub3QgYmUgYWRkZWQgYXQgdGhpcyB0aW1lLlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmZhaWwoZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0U3RhdHVzLCBlcnJvclRocm93bik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZF9pdGVtX3RvX2NvbGxpc3QocGFyYW1zKSB7XG4gICAgICAgIHZhciAkdWwgPSAkKFwiLmNvbGxlY3Rpb24tbWVtYmVyc2hpcFwiKTtcbiAgICAgICAgdmFyIGNvbGxfaHJlZiA9IGdldF91cmwoKSArIFwiP2E9bGlzdGlzO2M9XCIgKyBwYXJhbXMuY29sbF9pZDtcbiAgICAgICAgdmFyICRhID0gJChcIjxhPlwiKS5hdHRyKFwiaHJlZlwiLCBjb2xsX2hyZWYpLnRleHQocGFyYW1zLmNvbGxfbmFtZSk7XG4gICAgICAgICQoXCI8bGk+PC9saT5cIikuYXBwZW5kVG8oJHVsKS5hcHBlbmQoJGEpO1xuICAgICAgICAkdWwucGFyZW50cyhcImRpdlwiKS5yZW1vdmVDbGFzcyhcImhpZGVcIik7XG5cbiAgICAgICAgLy8gJChcIi5jb2xsZWN0aW9uLW1lbWJlcnNoaXAtc3VtbWFyeVwiKS50ZXh0KElOX1lPVVJfQ09MTFNfTEFCRUwpO1xuXG4gICAgICAgIC8vIGFuZCB0aGVuIGZpbHRlciBvdXQgdGhlIGxpc3QgZnJvbSB0aGUgc2VsZWN0XG4gICAgICAgIHZhciAkb3B0aW9uID0gJHRvb2xiYXIuZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyBwYXJhbXMuY29sbF9pZCArIFwiJ11cIik7XG4gICAgICAgICRvcHRpb24ucmVtb3ZlKCk7XG5cbiAgICAgICAgSFQudXBkYXRlX3N0YXR1cyhgQWRkZWQgY29sbGVjdGlvbiAke3BhcmFtcy5jb2xsX25hbWV9IHRvIHlvdXIgbGlzdC5gKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maXJtX2xhcmdlKGNvbGxTaXplLCBhZGROdW1JdGVtcywgY2FsbGJhY2spIHtcblxuICAgICAgICBpZiAoIGNvbGxTaXplIDw9IDEwMDAgJiYgY29sbFNpemUgKyBhZGROdW1JdGVtcyA+IDEwMDAgKSB7XG4gICAgICAgICAgICB2YXIgbnVtU3RyO1xuICAgICAgICAgICAgaWYgKGFkZE51bUl0ZW1zID4gMSkge1xuICAgICAgICAgICAgICAgIG51bVN0ciA9IFwidGhlc2UgXCIgKyBhZGROdW1JdGVtcyArIFwiIGl0ZW1zXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBudW1TdHIgPSBcInRoaXMgaXRlbVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1zZyA9IFwiTm90ZTogWW91ciBjb2xsZWN0aW9uIGNvbnRhaW5zIFwiICsgY29sbFNpemUgKyBcIiBpdGVtcy4gIEFkZGluZyBcIiArIG51bVN0ciArIFwiIHRvIHlvdXIgY29sbGVjdGlvbiB3aWxsIGluY3JlYXNlIGl0cyBzaXplIHRvIG1vcmUgdGhhbiAxMDAwIGl0ZW1zLiAgVGhpcyBtZWFucyB5b3VyIGNvbGxlY3Rpb24gd2lsbCBub3QgYmUgc2VhcmNoYWJsZSB1bnRpbCBpdCBpcyBpbmRleGVkLCB1c3VhbGx5IHdpdGhpbiA0OCBob3Vycy4gIEFmdGVyIHRoYXQsIGp1c3QgbmV3bHkgYWRkZWQgaXRlbXMgd2lsbCBzZWUgdGhpcyBkZWxheSBiZWZvcmUgdGhleSBjYW4gYmUgc2VhcmNoZWQuIFxcblxcbkRvIHlvdSB3YW50IHRvIHByb2NlZWQ/XCJcblxuICAgICAgICAgICAgY29uZmlybShtc2csIGZ1bmN0aW9uKGFuc3dlcikge1xuICAgICAgICAgICAgICAgIGlmICggYW5zd2VyICkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhbGwgb3RoZXIgY2FzZXMgYXJlIG9rYXlcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAkKFwiI1BUYWRkSXRlbUJ0blwiKS5jbGljayhmdW5jdGlvbihlKSB7XG4gICAgJChcImJvZHlcIikub24oJ2NsaWNrJywgJyNQVGFkZEl0ZW1CdG4nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFjdGlvbiA9ICdhZGRJJ1xuXG4gICAgICAgIGhpZGVfZXJyb3IoKTtcblxuICAgICAgICB2YXIgc2VsZWN0ZWRfY29sbGVjdGlvbl9pZCA9ICR0b29sYmFyLmZpbmQoXCJzZWxlY3RcIikudmFsKCk7XG4gICAgICAgIHZhciBzZWxlY3RlZF9jb2xsZWN0aW9uX25hbWUgPSAkdG9vbGJhci5maW5kKFwic2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS50ZXh0KCk7XG5cbiAgICAgICAgaWYgKCAoIHNlbGVjdGVkX2NvbGxlY3Rpb25faWQgPT0gREVGQVVMVF9DT0xMX01FTlVfT1BUSU9OICkgKSB7XG4gICAgICAgICAgICBkaXNwbGF5X2Vycm9yKFwiWW91IG11c3Qgc2VsZWN0IGEgY29sbGVjdGlvbi5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHNlbGVjdGVkX2NvbGxlY3Rpb25faWQgPT0gTkVXX0NPTExfTUVOVV9PUFRJT04gKSB7XG4gICAgICAgICAgICAvLyBkZWFsIHdpdGggbmV3IGNvbGxlY3Rpb25cbiAgICAgICAgICAgIGVkaXRfY29sbGVjdGlvbl9tZXRhZGF0YSh7XG4gICAgICAgICAgICAgICAgY3JlYXRpbmcgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGMgOiBzZWxlY3RlZF9jb2xsZWN0aW9uX2lkLFxuICAgICAgICAgICAgICAgIGlkIDogSFQucGFyYW1zLmlkLFxuICAgICAgICAgICAgICAgIGEgOiBhY3Rpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFyIGFkZF9udW1faXRlbXMgPSAxO1xuICAgICAgICAvLyB2YXIgQ09MTF9TSVpFX0FSUkFZID0gZ2V0Q29sbFNpemVBcnJheSgpO1xuICAgICAgICAvLyB2YXIgY29sbF9zaXplID0gQ09MTF9TSVpFX0FSUkFZW3NlbGVjdGVkX2NvbGxlY3Rpb25faWRdO1xuICAgICAgICAvLyBjb25maXJtX2xhcmdlKGNvbGxfc2l6ZSwgYWRkX251bV9pdGVtcywgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICAkZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgLy8gfSlcblxuICAgICAgICBkaXNwbGF5X2luZm8oXCJBZGRpbmcgaXRlbSB0byB5b3VyIGNvbGxlY3Rpb247IHBsZWFzZSB3YWl0Li4uXCIpO1xuICAgICAgICBzdWJtaXRfcG9zdCh7XG4gICAgICAgICAgICBjMiA6IHNlbGVjdGVkX2NvbGxlY3Rpb25faWQsXG4gICAgICAgICAgICBhICA6ICdhZGRpdHMnXG4gICAgICAgIH0pO1xuXG4gICAgfSlcblxufSk7XG4iLCJoZWFkLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gIGlmICggISAkKFwiaHRtbFwiKS5pcyhcIi5jcm1zXCIpICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlmICggJChcIi5uYXZiYXItc3RhdGljLXRvcFwiKS5kYXRhKCdsb2dnZWRpbicpICE9ICdZRVMnICYmIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PSAnaHR0cHM6JyApIHtcbiAgLy8gICAgIC8vIGhvcnJpYmxlIGhhY2tcbiAgLy8gICAgIHZhciB0YXJnZXQgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKC9cXCQvZywgJyUyNCcpO1xuICAvLyAgICAgdmFyIGhyZWYgPSAnaHR0cHM6Ly8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgJy9TaGliYm9sZXRoLnNzby9Mb2dpbj9lbnRpdHlJRD1odHRwczovL3NoaWJib2xldGgudW1pY2guZWR1L2lkcC9zaGliYm9sZXRoJnRhcmdldD0nICsgdGFyZ2V0O1xuICAvLyAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAvLyAgICAgcmV0dXJuO1xuICAvLyB9XG5cbiAgLy8gZGVmaW5lIENSTVMgc3RhdGVcbiAgSFQuY3Jtc19zdGF0ZSA9ICdDUk1TLVVTJztcblxuICAvLyBmb3JjZSBDUk1TIHVzZXJzIHRvIGEgZml4ZWQgaW1hZ2Ugc2l6ZVxuICBIVC5mb3JjZV9zaXplID0gMjAwO1xuXG4gIHZhciBpID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignc2tpbj1jcm1zd29ybGQnKTtcbiAgaWYgKCBpICsgMSAhPSAwICkge1xuICAgICAgSFQuY3Jtc19zdGF0ZSA9ICdDUk1TLVdvcmxkJztcbiAgfVxuXG4gIC8vIGRpc3BsYXkgYmliIGluZm9ybWF0aW9uXG4gIHZhciAkZGl2ID0gJChcIi5iaWJMaW5rc1wiKTtcbiAgdmFyICRwID0gJGRpdi5maW5kKFwicDpmaXJzdFwiKTtcbiAgJHAuZmluZChcInNwYW46ZW1wdHlcIikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIC8vICQodGhpcykudGV4dCgkKHRoaXMpLmF0dHIoXCJjb250ZW50XCIpKS5hZGRDbGFzcyhcImJsb2NrZWRcIik7XG4gICAgICB2YXIgZnJhZ21lbnQgPSAnPHNwYW4gY2xhc3M9XCJibG9ja2VkXCI+PHN0cm9uZz57bGFiZWx9Ojwvc3Ryb25nPiB7Y29udGVudH08L3NwYW4+JztcbiAgICAgIGZyYWdtZW50ID0gZnJhZ21lbnQucmVwbGFjZSgne2xhYmVsfScsICQodGhpcykuYXR0cigncHJvcGVydHknKS5zdWJzdHIoMykpLnJlcGxhY2UoJ3tjb250ZW50fScsICQodGhpcykuYXR0cihcImNvbnRlbnRcIikpO1xuICAgICAgJHAuYXBwZW5kKGZyYWdtZW50KTtcbiAgfSlcbiAgJHAucmVtb3ZlQ2xhc3MoJ29mZnNjcmVlbicpO1xuXG4gIGxldCBwYW5lbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwYW5lbC1zZWFyY2gnKTtcbiAgaWYgKCBwYW5lbCApIHsgcGFuZWwub3BlbiA9IGZhbHNlOyB9XG4gIHBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhbmVsLXNlY3Rpb25zJyk7XG4gIGlmICggcGFuZWwgKSB7XG4gICAgcGFuZWwuZGF0YXNldC5pZ25vcmVTY3JvbGxJbnRvVmlldyA9IHRydWU7XG4gICAgcGFuZWwub3BlbiA9IHRydWU7XG4gIH1cbn0pXG4iLCIvLyBkb3dubG9hZGVyXG5cbnZhciBIVCA9IEhUIHx8IHt9O1xudmFyIHBob3RvY29waWVyX21lc3NhZ2UgPSAnVGhlIGNvcHlyaWdodCBsYXcgb2YgdGhlIFVuaXRlZCBTdGF0ZXMgKFRpdGxlIDE3LCBVLlMuIENvZGUpIGdvdmVybnMgdGhlIG1ha2luZyBvZiByZXByb2R1Y3Rpb25zIG9mIGNvcHlyaWdodGVkIG1hdGVyaWFsLiBVbmRlciBjZXJ0YWluIGNvbmRpdGlvbnMgc3BlY2lmaWVkIGluIHRoZSBsYXcsIGxpYnJhcmllcyBhbmQgYXJjaGl2ZXMgYXJlIGF1dGhvcml6ZWQgdG8gZnVybmlzaCBhIHJlcHJvZHVjdGlvbi4gT25lIG9mIHRoZXNlIHNwZWNpZmljIGNvbmRpdGlvbnMgaXMgdGhhdCB0aGUgcmVwcm9kdWN0aW9uIGlzIG5vdCB0byBiZSDigJx1c2VkIGZvciBhbnkgcHVycG9zZSBvdGhlciB0aGFuIHByaXZhdGUgc3R1ZHksIHNjaG9sYXJzaGlwLCBvciByZXNlYXJjaC7igJ0gSWYgYSB1c2VyIG1ha2VzIGEgcmVxdWVzdCBmb3IsIG9yIGxhdGVyIHVzZXMsIGEgcmVwcm9kdWN0aW9uIGZvciBwdXJwb3NlcyBpbiBleGNlc3Mgb2Yg4oCcZmFpciB1c2Us4oCdIHRoYXQgdXNlciBtYXkgYmUgbGlhYmxlIGZvciBjb3B5cmlnaHQgaW5mcmluZ2VtZW50Lic7XG5cbkhULkRvd25sb2FkZXIgPSB7XG5cbiAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5vcHRpb25zLnBhcmFtcy5pZDtcbiAgICAgICAgdGhpcy5wZGYgPSB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zLnN1cGVydXNlciA9ICggdGhpcy5vcHRpb25zLnBhcmFtcy5kZWJ1ZyAmJiB0aGlzLm9wdGlvbnMucGFyYW1zLmRlYnVnLmluZGV4T2YoJ3N1cGVyJykgPiAtMSApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgb3B0aW9uczoge1xuXG4gICAgfSxcblxuICAgIHN0YXJ0IDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgfSxcblxuICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgfSxcblxuICAgIGV4cGxhaW5QZGZBY2Nlc3M6IGZ1bmN0aW9uKGxpbmspIHtcbiAgICAgICAgdmFyIGh0bWwgPSAkKFwiI25vRG93bmxvYWRBY2Nlc3NcIikuaHRtbCgpO1xuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCd7RE9XTkxPQURfTElOS30nLCAkKHRoaXMpLmF0dHIoXCJocmVmXCIpKTtcbiAgICAgICAgdGhpcy4kZGlhbG9nID0gYm9vdGJveC5hbGVydChodG1sKTtcbiAgICB9LFxuXG4gICAgZG93bmxvYWRQZGY6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VsZi5zcmMgPSBjb25maWcuc3JjO1xuICAgICAgICBzZWxmLml0ZW1fdGl0bGUgPSBjb25maWcuaXRlbV90aXRsZTtcbiAgICAgICAgc2VsZi4kY29uZmlnID0gY29uZmlnO1xuXG4gICAgICAgIHZhciBodG1sID1cbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiaW5pdGlhbFwiPjxwPlNldHRpbmcgdXAgdGhlIGRvd25sb2FkLi4uPC9kaXY+YCArXG4gICAgICAgICAgICBgPGRpdiBjbGFzcz1cIm9mZnNjcmVlblwiIHJvbGU9XCJzdGF0dXNcIiBhcmlhLWF0b21pYz1cInRydWVcIiBhcmlhLWxpdmU9XCJwb2xpdGVcIj48L2Rpdj5gICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MgcHJvZ3Jlc3Mtc3RyaXBlZCBhY3RpdmUgaGlkZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYmFyXCIgd2lkdGg9XCIwJVwiPjwvZGl2PicgK1xuICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgYDxkaXY+PHA+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmhhdGhpdHJ1c3Qub3JnL2hlbHBfZGlnaXRhbF9saWJyYXJ5I0Rvd25sb2FkVGltZVwiIHRhcmdldD1cIl9ibGFua1wiPldoYXQgYWZmZWN0cyB0aGUgZG93bmxvYWQgc3BlZWQ/PC9hPjwvcD48L2Rpdj5gO1xuXG4gICAgICAgIHZhciBoZWFkZXIgPSAnQnVpbGRpbmcgeW91ciAnICsgc2VsZi5pdGVtX3RpdGxlO1xuICAgICAgICB2YXIgdG90YWwgPSBzZWxmLiRjb25maWcuc2VsZWN0aW9uLnBhZ2VzLmxlbmd0aDtcbiAgICAgICAgaWYgKCB0b3RhbCA+IDAgKSB7XG4gICAgICAgICAgICB2YXIgc3VmZml4ID0gdG90YWwgPT0gMSA/ICdwYWdlJyA6ICdwYWdlcyc7XG4gICAgICAgICAgICBoZWFkZXIgKz0gJyAoJyArIHRvdGFsICsgJyAnICsgc3VmZml4ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi4kZGlhbG9nID0gYm9vdGJveC5kaWFsb2coXG4gICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgOiAnQ2FuY2VsJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA6ICdidG4teC1kaXNtaXNzIGJ0bicsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2VsZi4kZGlhbG9nLmRhdGEoJ2RlYWN0aXZhdGVkJykgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi4kZGlhbG9nLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc2VsZi5zcmMgKyAnO2NhbGxiYWNrPUhULmRvd25sb2FkZXIuY2FuY2VsRG93bmxvYWQ7c3RvcD0xJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ3NjcmlwdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihyZXEsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRE9XTkxPQUQgQ0FOQ0VMTEVEIEVSUk9SXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxmLiRkaWFsb2cuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXEsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZXEuc3RhdHVzID09IDUwMyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheVdhcm5pbmcocmVxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgICAgICAgICAgICBpZDogJ2Rvd25sb2FkJ1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBzZWxmLiRzdGF0dXMgPSBzZWxmLiRkaWFsb2cuZmluZChcImRpdltyb2xlPXN0YXR1c11cIik7XG5cbiAgICAgICAgc2VsZi5yZXF1ZXN0RG93bmxvYWQoKTtcblxuICAgIH0sXG5cbiAgICByZXF1ZXN0RG93bmxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgaWYgKCBzZWxmLiRjb25maWcuc2VsZWN0aW9uLnBhZ2VzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICBkYXRhWydzZXEnXSA9IHNlbGYuJGNvbmZpZy5zZWxlY3Rpb24uc2VxO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChzZWxmLiRjb25maWcuZG93bmxvYWRGb3JtYXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ltYWdlLWpwZWcnOlxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UtdGlmZic6XG4gICAgICAgICAgICAgICAgZGF0YVsnZm9ybWF0J10gPSBzZWxmLiRjb25maWcuZG93bmxvYWRGb3JtYXQgPT0gJ2ltYWdlLXRpZmYnID8gJ2ltYWdlL3RpZmYnIDogJ2ltYWdlL2pwZWcnO1xuICAgICAgICAgICAgICAgIGRhdGFbJ3RhcmdldF9wcGknXSA9IHNlbGYuJGNvbmZpZy5pbWFnZVJlc29sdXRpb247IC8vIDMwMDtcbiAgICAgICAgICAgICAgICBkYXRhWydidW5kbGVfZm9ybWF0J10gPSAnemlwJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BsYWludGV4dC16aXAnOlxuICAgICAgICAgICAgICAgIGRhdGFbJ2J1bmRsZV9mb3JtYXQnXSA9ICd6aXAnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncGxhaW50ZXh0JzpcbiAgICAgICAgICAgICAgICBkYXRhWydidW5kbGVfZm9ybWF0J10gPSAndGV4dCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICggc2VsZi5vcHRpb25zLnN1cGVydXNlciApIHtcbiAgICAgICAgICAgIGRhdGFbJ2RlYnVnJ10gPSAnc3VwZXInO1xuICAgICAgICB9XG5cbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogc2VsZi5zcmMucmVwbGFjZSgvOy9nLCAnJicpICsgJyZjYWxsYmFjaz1IVC5kb3dubG9hZGVyLnN0YXJ0RG93bmxvYWRNb25pdG9yJyxcbiAgICAgICAgICAgIGRhdGFUeXBlOiAnc2NyaXB0JyxcbiAgICAgICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24ocmVxLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRE9XTkxPQUQgU1RBUlRVUCBOT1QgREVURUNURURcIik7XG4gICAgICAgICAgICAgICAgaWYgKCBzZWxmLiRkaWFsb2cgKSB7IHNlbGYuJGRpYWxvZy5jbG9zZU1vZGFsKCk7IH1cbiAgICAgICAgICAgICAgICBpZiAoIHJlcS5zdGF0dXMgPT0gNDI5ICkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc3BsYXlXYXJuaW5nKHJlcSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcmVxLnN0YXR1cyA9PSA0MDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheTQwMyhyZXEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheUVycm9yKHJlcSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgY2FuY2VsRG93bmxvYWQ6IGZ1bmN0aW9uKHByb2dyZXNzX3VybCwgZG93bmxvYWRfdXJsLCB0b3RhbCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYuY2xlYXJUaW1lcigpO1xuICAgICAgICBzZWxmLiRkaWFsb2cuY2xvc2VNb2RhbCgpO1xuICAgIH0sXG5cbiAgICBzdGFydERvd25sb2FkTW9uaXRvcjogZnVuY3Rpb24ocHJvZ3Jlc3NfdXJsLCBkb3dubG9hZF91cmwsIHRvdGFsKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAoIHNlbGYudGltZXIgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFMUkVBRFkgUE9MTElOR1wiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGYucGRmLnByb2dyZXNzX3VybCA9IHByb2dyZXNzX3VybDtcbiAgICAgICAgc2VsZi5wZGYuZG93bmxvYWRfdXJsID0gZG93bmxvYWRfdXJsO1xuICAgICAgICBzZWxmLnBkZi50b3RhbCA9IHRvdGFsO1xuICAgICAgICBcbiAgICAgICAgaWYgKCBzZWxmLm9wdGlvbnMuc3VwZXJ1c2VyICkge1xuICAgICAgICAgICAgc2VsZi5wZGYuZG93bmxvYWRfdXJsICs9ICc7ZGVidWc9c3VwZXInO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi5pc19ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgc2VsZi5udW1fcHJvY2Vzc2VkID0gMDtcbiAgICAgICAgc2VsZi5pID0gMDtcblxuICAgICAgICBzZWxmLnRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7IHNlbGYuY2hlY2tTdGF0dXMoKTsgfSwgMjUwMCk7XG4gICAgICAgIC8vIGRvIGl0IG9uY2UgdGhlIGZpcnN0IHRpbWVcbiAgICAgICAgc2VsZi5jaGVja1N0YXR1cygpO1xuXG4gICAgfSxcblxuICAgIGNoZWNrU3RhdHVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzZWxmLmkgKz0gMTtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybCA6IHNlbGYucGRmLnByb2dyZXNzX3VybCxcbiAgICAgICAgICAgIGRhdGEgOiB7IHRzIDogKG5ldyBEYXRlKS5nZXRUaW1lKCkgfSxcbiAgICAgICAgICAgIGNhY2hlIDogZmFsc2UsXG4gICAgICAgICAgICBkYXRhVHlwZTogJ2pzb24nLFxuICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gc2VsZi51cGRhdGVQcm9ncmVzcyhkYXRhKTtcbiAgICAgICAgICAgICAgICBzZWxmLm51bV9wcm9jZXNzZWQgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAoIHN0YXR1cy5kb25lICkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyVGltZXIoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzdGF0dXMuZXJyb3IgJiYgc3RhdHVzLm51bV9hdHRlbXB0cyA+IDEwMCApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kZGlhbG9nLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaXNwbGF5UHJvY2Vzc0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2xlYXJUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ0Vycm9yKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc3RhdHVzLmVycm9yICkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLiRkaWFsb2cuY2xvc2VNb2RhbCgpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc3BsYXlFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyVGltZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3IgOiBmdW5jdGlvbihyZXEsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGQUlMRUQ6IFwiLCByZXEsIFwiL1wiLCB0ZXh0U3RhdHVzLCBcIi9cIiwgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgICAgIHNlbGYuJGRpYWxvZy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jbGVhclRpbWVyKCk7XG4gICAgICAgICAgICAgICAgaWYgKCByZXEuc3RhdHVzID09IDQwNCAmJiAoc2VsZi5pID4gMjUgfHwgc2VsZi5udW1fcHJvY2Vzc2VkID4gMCkgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGxheUVycm9yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0sXG5cbiAgICB1cGRhdGVQcm9ncmVzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0dXMgPSB7IGRvbmUgOiBmYWxzZSwgZXJyb3IgOiBmYWxzZSB9O1xuICAgICAgICB2YXIgcGVyY2VudDtcblxuICAgICAgICB2YXIgY3VycmVudCA9IGRhdGEuc3RhdHVzO1xuICAgICAgICBpZiAoIGN1cnJlbnQgPT0gJ0VPVCcgfHwgY3VycmVudCA9PSAnRE9ORScgKSB7XG4gICAgICAgICAgICBzdGF0dXMuZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBwZXJjZW50ID0gMTAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudCA9IGRhdGEuY3VycmVudF9wYWdlO1xuICAgICAgICAgICAgcGVyY2VudCA9IDEwMCAqICggY3VycmVudCAvIHNlbGYucGRmLnRvdGFsICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHNlbGYubGFzdF9wZXJjZW50ICE9IHBlcmNlbnQgKSB7XG4gICAgICAgICAgICBzZWxmLmxhc3RfcGVyY2VudCA9IHBlcmNlbnQ7XG4gICAgICAgICAgICBzZWxmLm51bV9hdHRlbXB0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxmLm51bV9hdHRlbXB0cyArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdHJ5IDEwMCB0aW1lcywgd2hpY2ggYW1vdW50cyB0byB+MTAwIHNlY29uZHNcbiAgICAgICAgaWYgKCBzZWxmLm51bV9hdHRlbXB0cyA+IDEwMCApIHtcbiAgICAgICAgICAgIHN0YXR1cy5lcnJvciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHNlbGYuJGRpYWxvZy5maW5kKFwiLmluaXRpYWxcIikuaXMoXCI6dmlzaWJsZVwiKSApIHtcbiAgICAgICAgICAgIHNlbGYuJGRpYWxvZy5maW5kKFwiLmluaXRpYWxcIikuaHRtbChgPHA+UGxlYXNlIHdhaXQgd2hpbGUgd2UgYnVpbGQgeW91ciAke3NlbGYuaXRlbV90aXRsZX0uPC9wPmApO1xuICAgICAgICAgICAgc2VsZi4kZGlhbG9nLmZpbmQoXCIucHJvZ3Jlc3NcIikucmVtb3ZlQ2xhc3MoXCJoaWRlXCIpO1xuICAgICAgICAgICAgc2VsZi51cGRhdGVTdGF0dXNUZXh0KGBQbGVhc2Ugd2FpdCB3aGlsZSB3ZSBidWlsZCB5b3VyICR7c2VsZi5pdGVtX3RpdGxlfS5gKVxuICAgICAgICB9XG5cbiAgICAgICAgc2VsZi4kZGlhbG9nLmZpbmQoXCIuYmFyXCIpLmNzcyh7IHdpZHRoIDogcGVyY2VudCArICclJ30pO1xuXG4gICAgICAgIGlmICggcGVyY2VudCA9PSAxMDAgJiYgc3RhdHVzLmRvbmUgKSB7XG4gICAgICAgICAgICBzZWxmLiRkaWFsb2cuZmluZChcIi5wcm9ncmVzc1wiKS5oaWRlKCk7XG4gICAgICAgICAgICB2YXIgZG93bmxvYWRfa2V5ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNYWMgT1MgWCcpICE9IC0xID8gJ1JFVFVSTicgOiAnRU5URVInO1xuICAgICAgICAgICAgc2VsZi4kZGlhbG9nLmZpbmQoXCIuaW5pdGlhbFwiKS5odG1sKGA8cD5BbGwgZG9uZSEgWW91ciAke3NlbGYuaXRlbV90aXRsZX0gaXMgcmVhZHkgZm9yIGRvd25sb2FkLiA8c3BhbiBjbGFzcz1cIm9mZnNjcmVlblwiPlNlbGVjdCAke2Rvd25sb2FkX2tleX0gdG8gZG93bmxvYWQuPC9zcGFuPjwvcD5gKTtcbiAgICAgICAgICAgIHNlbGYudXBkYXRlU3RhdHVzVGV4dChgQWxsIGRvbmUhIFlvdXIgJHtzZWxmLml0ZW1fdGl0bGV9IGlzIHJlYWR5IGZvciBkb3dubG9hZC4gU2VsZWN0ICR7ZG93bmxvYWRfa2V5fSB0byBkb3dubG9hZC5gKTtcblxuICAgICAgICAgICAgLy8gc2VsZi4kZGlhbG9nLmZpbmQoXCIuZG9uZVwiKS5zaG93KCk7XG4gICAgICAgICAgICB2YXIgJGRvd25sb2FkX2J0biA9IHNlbGYuJGRpYWxvZy5maW5kKCcuZG93bmxvYWQtcGRmJyk7XG4gICAgICAgICAgICBpZiAoICEgJGRvd25sb2FkX2J0bi5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgJGRvd25sb2FkX2J0biA9ICQoJzxhIGNsYXNzPVwiZG93bmxvYWQtcGRmIGJ0biBidG4tcHJpbWFyeVwiIGRvd25sb2FkPVwiZG93bmxvYWRcIj5Eb3dubG9hZCB7SVRFTV9USVRMRX08L2E+Jy5yZXBsYWNlKCd7SVRFTV9USVRMRX0nLCBzZWxmLml0ZW1fdGl0bGUpKS5hdHRyKCdocmVmJywgc2VsZi5wZGYuZG93bmxvYWRfdXJsKTtcbiAgICAgICAgICAgICAgICBpZiAoICRkb3dubG9hZF9idG4uZ2V0KDApLmRvd25sb2FkID09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgICAgICAgICAgJGRvd25sb2FkX2J0bi5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRkb3dubG9hZF9idG4uYXBwZW5kVG8oc2VsZi4kZGlhbG9nLmZpbmQoXCIubW9kYWxfX2Zvb3RlclwiKSkub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWxmLiRsaW5rLnRyaWdnZXIoXCJjbGljay5nb29nbGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuYWx5dGljc0FjdGlvbiA9IGBQVCBEb3dubG9hZCAtICR7c2VsZi4kY29uZmlnLmRvd25sb2FkRm9ybWF0LnRvVXBwZXJDYXNlKCl9IC0gJHtzZWxmLiRjb25maWcudHJhY2tpbmdBY3Rpb259YDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLiRjb25maWcuZG93bmxvYWRGb3JtYXQuaW5kZXhPZignaW1hZ2UtJykgPiAtMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuYWx5dGljc0FjdGlvbiArPSAnIC0gJyArICggc2VsZi4kY29uZmlnLmltYWdlUmVzb2x1dGlvbiA9PSAwID8gJ2Z1bGwnIDogc2VsZi4kY29uZmlnLmltYWdlUmVzb2x1dGlvbiApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEhULmFuYWx5dGljcy50cmFja0V2ZW50KHsgXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA6ICctJywgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeSA6ICdQVCcsIFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uIDogYW5hbHl0aWNzQWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHdpbmRvdy5oaiApIHsgaGooJ3RhZ1JlY29yZGluZycsIFsgYFBUIERvd25sb2FkIC0gJHtzZWxmLiRjb25maWcuZG93bmxvYWRGb3JtYXQudG9VcHBlckNhc2UoKX0gLSAke3NlbGYuJGNvbmZpZy50cmFja2luZ0FjdGlvbn1gIF0pIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJGRpYWxvZy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZG93bmxvYWRfYnRuLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFQucmVhZGVyLmNvbnRyb2xzLnNlbGVjdGluYXRvci5fY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhULnJlYWRlci5lbWl0KCdkb3dubG9hZERvbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCk7XG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAkZG93bmxvYWRfYnRuLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLiRkaWFsb2cuZGF0YSgnZGVhY3RpdmF0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIHNlbGYudXBkYXRlU3RhdHVzVGV4dChgWW91ciAke3NlbGYuaXRlbV90aXRsZX0gaXMgcmVhZHkgZm9yIGRvd25sb2FkLiBQcmVzcyByZXR1cm4gdG8gZG93bmxvYWQuYCk7XG4gICAgICAgICAgICAvLyBzdGlsbCBjb3VsZCBjYW5jZWxcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZGF0YS5tZXNzYWdlID8gZGF0YS5tZXNzYWdlIDogYFBsZWFzZSB3YWl0IHdoaWxlIHdlIGJ1aWxkIHlvdXIgJHtzZWxmLml0ZW1fdGl0bGV9YDtcbiAgICAgICAgICAgIHNlbGYuJGRpYWxvZy5maW5kKFwiLmluaXRpYWxcIikudGV4dChgJHttZXNzYWdlfSAoJHtNYXRoLmNlaWwocGVyY2VudCl9JSBjb21wbGV0ZWQpLmApO1xuICAgICAgICAgICAgc2VsZi51cGRhdGVTdGF0dXNUZXh0KGAke01hdGguY2VpbChwZXJjZW50KX0lIGNvbXBsZXRlZGApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9LFxuXG4gICAgY2xlYXJUaW1lcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgaWYgKCBzZWxmLnRpbWVyICkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChzZWxmLnRpbWVyKTtcbiAgICAgICAgICAgIHNlbGYudGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRpc3BsYXlXYXJuaW5nOiBmdW5jdGlvbihyZXEpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgdGltZW91dCA9IHBhcnNlSW50KHJlcS5nZXRSZXNwb25zZUhlYWRlcignWC1DaG9rZS1VbnRpbEVwb2NoJykpO1xuICAgICAgICB2YXIgcmF0ZSA9IHJlcS5nZXRSZXNwb25zZUhlYWRlcignWC1DaG9rZS1SYXRlJylcblxuICAgICAgICBpZiAoIHRpbWVvdXQgPD0gNSApIHtcbiAgICAgICAgICAgIC8vIGp1c3QgcHVudCBhbmQgd2FpdCBpdCBvdXRcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVxdWVzdERvd25sb2FkKCk7XG4gICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWVvdXQgKj0gMTAwMDtcbiAgICAgICAgdmFyIG5vdyA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgY291bnRkb3duID0gKCBNYXRoLmNlaWwoKHRpbWVvdXQgLSBub3cpIC8gMTAwMCkgKVxuXG4gICAgICAgIHZhciBodG1sID1cbiAgICAgICAgICAoJzxkaXY+JyArXG4gICAgICAgICAgICAnPHA+WW91IGhhdmUgZXhjZWVkZWQgdGhlIGRvd25sb2FkIHJhdGUgb2Yge3JhdGV9LiBZb3UgbWF5IHByb2NlZWQgaW4gPHNwYW4gaWQ9XCJ0aHJvdHRsZS10aW1lb3V0XCI+e2NvdW50ZG93bn08L3NwYW4+IHNlY29uZHMuPC9wPicgK1xuICAgICAgICAgICAgJzxwPkRvd25sb2FkIGxpbWl0cyBwcm90ZWN0IEhhdGhpVHJ1c3QgcmVzb3VyY2VzIGZyb20gYWJ1c2UgYW5kIGhlbHAgZW5zdXJlIGEgY29uc2lzdGVudCBleHBlcmllbmNlIGZvciBldmVyeW9uZS48L3A+JyArXG4gICAgICAgICAgJzwvZGl2PicpLnJlcGxhY2UoJ3tyYXRlfScsIHJhdGUpLnJlcGxhY2UoJ3tjb3VudGRvd259JywgY291bnRkb3duKTtcblxuICAgICAgICBzZWxmLiRkaWFsb2cgPSBib290Ym94LmRpYWxvZyhcbiAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbCA6ICdPSycsXG4gICAgICAgICAgICAgICAgICAgICdjbGFzcycgOiAnYnRuLWRpc21pc3MgYnRuLXByaW1hcnknLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHNlbGYuY291bnRkb3duX3RpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuXG4gICAgICAgIHNlbGYuY291bnRkb3duX3RpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGNvdW50ZG93biAtPSAxO1xuICAgICAgICAgICAgICBzZWxmLiRkaWFsb2cuZmluZChcIiN0aHJvdHRsZS10aW1lb3V0XCIpLnRleHQoY291bnRkb3duKTtcbiAgICAgICAgICAgICAgaWYgKCBjb3VudGRvd24gPT0gMCApIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHNlbGYuY291bnRkb3duX3RpbWVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRJQyBUT0NcIiwgY291bnRkb3duKTtcbiAgICAgICAgfSwgMTAwMCk7XG5cbiAgICB9LFxuXG4gICAgZGlzcGxheVByb2Nlc3NFcnJvcjogZnVuY3Rpb24ocmVxKSB7XG4gICAgICAgIHZhciBodG1sID1cbiAgICAgICAgICAgICc8cD4nICsgXG4gICAgICAgICAgICAgICAgJ1VuZm9ydHVuYXRlbHksIHRoZSBwcm9jZXNzIGZvciBjcmVhdGluZyB5b3VyIFBERiBoYXMgYmVlbiBpbnRlcnJ1cHRlZC4gJyArIFxuICAgICAgICAgICAgICAgICdQbGVhc2UgY2xpY2sgXCJPS1wiIGFuZCB0cnkgYWdhaW4uJyArIFxuICAgICAgICAgICAgJzwvcD4nICtcbiAgICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICAgICAgICAnSWYgdGhpcyBwcm9ibGVtIHBlcnNpc3RzIGFuZCB5b3UgYXJlIHVuYWJsZSB0byBkb3dubG9hZCB0aGlzIFBERiBhZnRlciByZXBlYXRlZCBhdHRlbXB0cywgJyArIFxuICAgICAgICAgICAgICAgICdwbGVhc2Ugbm90aWZ5IHVzIGF0IDxhIGhyZWY9XCIvY2dpL2ZlZWRiYWNrLz9wYWdlPWZvcm1cIiBkYXRhPW09XCJwdFwiIGRhdGEtdG9nZ2xlPVwiZmVlZGJhY2sgdHJhY2tpbmctYWN0aW9uXCIgZGF0YS10cmFja2luZy1hY3Rpb249XCJTaG93IEZlZWRiYWNrXCI+ZmVlZGJhY2tAaXNzdWVzLmhhdGhpdHJ1c3Qub3JnPC9hPiAnICtcbiAgICAgICAgICAgICAgICAnYW5kIGluY2x1ZGUgdGhlIFVSTCBvZiB0aGUgYm9vayB5b3Ugd2VyZSB0cnlpbmcgdG8gYWNjZXNzIHdoZW4gdGhlIHByb2JsZW0gb2NjdXJyZWQuJyArXG4gICAgICAgICAgICAnPC9wPic7XG5cbiAgICAgICAgLy8gYm9vdGJveC5hbGVydChodG1sKTtcbiAgICAgICAgYm9vdGJveC5kaWFsb2coXG4gICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgOiAnT0snLFxuICAgICAgICAgICAgICAgICAgICAnY2xhc3MnIDogJ2J0bi1kaXNtaXNzIGJ0bi1pbnZlcnNlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB7IGNsYXNzZXMgOiAnZXJyb3InIH1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25zb2xlLmxvZyhyZXEpO1xuICAgIH0sXG5cbiAgICBkaXNwbGF5NDAzOiBmdW5jdGlvbihyZXEpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9IHJlcS5yZXNwb25zZVRleHQ7XG4gICAgICAgIHJlc3BvbnNlVGV4dCA9IHJlc3BvbnNlVGV4dC5yZXBsYWNlKCc8aHRtbD48Ym9keT4nLCAnJykucmVwbGFjZSgnPC9ib2R5PjwvaHRtbD4nLCAnJyk7XG4gICAgICAgIHZhciBodG1sID1cbiAgICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICAgICAgICByZXNwb25zZVRleHQgK1xuICAgICAgICAgICAgJzwvcD4nO1xuXG4gICAgICAgIC8vIGJvb3Rib3guYWxlcnQoaHRtbCk7XG4gICAgICAgIGJvb3Rib3guZGlhbG9nKFxuICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsIDogJ09LJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA6ICdidG4tZGlzbWlzcyBidG4taW52ZXJzZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeyBjbGFzc2VzIDogJ2Vycm9yJyB9XG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIGRpc3BsYXlFcnJvcjogZnVuY3Rpb24ocmVxKSB7XG4gICAgICAgIHZhciBodG1sID1cbiAgICAgICAgICAgICc8cD4nICtcbiAgICAgICAgICAgICAgICAnVGhlcmUgd2FzIGEgcHJvYmxlbSBidWlsZGluZyB5b3VyICcgKyB0aGlzLml0ZW1fdGl0bGUgKyAnOyBzdGFmZiBoYXZlIGJlZW4gbm90aWZpZWQuJyArXG4gICAgICAgICAgICAnPC9wPicgK1xuICAgICAgICAgICAgJzxwPicgK1xuICAgICAgICAgICAgICAgICdQbGVhc2UgdHJ5IGFnYWluIGluIDI0IGhvdXJzLicgK1xuICAgICAgICAgICAgJzwvcD4nO1xuXG4gICAgICAgIC8vIGJvb3Rib3guYWxlcnQoaHRtbCk7XG4gICAgICAgIGJvb3Rib3guZGlhbG9nKFxuICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsIDogJ09LJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA6ICdidG4tZGlzbWlzcyBidG4taW52ZXJzZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeyBjbGFzc2VzIDogJ2Vycm9yJyB9XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc29sZS5sb2cocmVxKTtcbiAgICB9LFxuXG4gICAgbG9nRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICQuZ2V0KHNlbGYuc3JjICsgJztudW1fYXR0ZW1wdHM9JyArIHNlbGYubnVtX2F0dGVtcHRzKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlU3RhdHVzVGV4dDogZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICggc2VsZi5fbGFzdE1lc3NhZ2UgIT0gbWVzc2FnZSApIHtcbiAgICAgICAgICBpZiAoIHNlbGYuX2xhc3RUaW1lciApIHsgY2xlYXJUaW1lb3V0KHNlbGYuX2xhc3RUaW1lcik7IHNlbGYuX2xhc3RUaW1lciA9IG51bGw7IH1cblxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgc2VsZi4kc3RhdHVzLnRleHQobWVzc2FnZSk7XG4gICAgICAgICAgICBzZWxmLl9sYXN0TWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tIHN0YXR1czpcIiwgbWVzc2FnZSk7XG4gICAgICAgICAgfSwgNTApO1xuICAgICAgICAgIHNlbGYuX2xhc3RUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgc2VsZi4kc3RhdHVzLmdldCgwKS5pbm5lclRleHQgPSAnJztcbiAgICAgICAgICB9LCA1MDApO1xuXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgRU9UOiB0cnVlXG5cbn1cblxudmFyIGRvd25sb2FkRm9ybTtcbnZhciBkb3dubG9hZEZvcm1hdE9wdGlvbnM7XG52YXIgcmFuZ2VPcHRpb25zO1xudmFyIGRvd25sb2FkSWR4ID0gMDtcblxuaGVhZC5yZWFkeShmdW5jdGlvbigpIHtcblxuICAgIGRvd25sb2FkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtLWRvd25sb2FkLW1vZHVsZScpO1xuICAgIGlmICggISBkb3dubG9hZEZvcm0gKSB7IHJldHVybiA7IH1cblxuXG4gICAgSFQuZG93bmxvYWRlciA9IE9iamVjdC5jcmVhdGUoSFQuRG93bmxvYWRlcikuaW5pdCh7XG4gICAgICAgIHBhcmFtcyA6IEhULnBhcmFtc1xuICAgIH0pXG5cbiAgICBIVC5kb3dubG9hZGVyLnN0YXJ0KCk7XG5cbiAgICAvLyBub24tanF1ZXJ5P1xuICAgIGRvd25sb2FkRm9ybWF0T3B0aW9ucyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvd25sb2FkRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPVwiZG93bmxvYWRfZm9ybWF0XCJdJykpO1xuICAgIHJhbmdlT3B0aW9ucyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvd25sb2FkRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS1jb250cm9sW2RhdGEtZG93bmxvYWQtZm9ybWF0LXRhcmdldF0nKSk7XG5cbiAgICB2YXIgZG93bmxvYWRTdWJtaXQgPSBkb3dubG9hZEZvcm0ucXVlcnlTZWxlY3RvcignW3R5cGU9XCJzdWJtaXRcIl0nKTtcblxuICAgIHZhciBoYXNGdWxsUGRmQWNjZXNzID0gZG93bmxvYWRGb3JtLmRhdGFzZXQuZnVsbFBkZkFjY2VzcyA9PSAnYWxsb3cnO1xuXG4gICAgdmFyIHVwZGF0ZURvd25sb2FkRm9ybWF0UmFuZ2VPcHRpb25zID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cbiAgICAgIHZhciBjdXJyZW50X3ZpZXcgPSAoIEhULnJlYWRlciAmJiBIVC5yZWFkZXIudmlldyApID8gIEhULnJlYWRlci52aWV3Lm5hbWUgOiAnc2VhcmNoJzsgLy8gcGljayBhIGRlZmF1bHRcbiAgICAgIHJhbmdlT3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHJhbmdlT3B0aW9uKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHJhbmdlT3B0aW9uLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgICAgIGlucHV0LmRpc2FibGVkID0gISByYW5nZU9wdGlvbi5tYXRjaGVzKGBbZGF0YS1kb3dubG9hZC1mb3JtYXQtdGFyZ2V0fj1cIiR7b3B0aW9uLnZhbHVlfVwiXVtkYXRhLXZpZXctdGFyZ2V0fj1cIiR7Y3VycmVudF92aWV3fVwiXWApO1xuICAgICAgfSlcblxuICAgICAgaWYgKCBvcHRpb24udmFsdWUgPT0gJ2VwdWInICkge1xuICAgICAgICAgIHJhbmdlT3B0aW9ucy5maW5kKGlucHV0ID0+IGlucHV0LnZhbHVlID09ICd2b2x1bWUnICkuY2hlY2tlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIGlmICggISBoYXNGdWxsUGRmQWNjZXNzICkge1xuICAgICAgLy8gICB2YXIgY2hlY2tlZCA9IGRvd25sb2FkRm9ybS5xdWVyeVNlbGVjdG9yKGBbZGF0YS1kb3dubG9hZC1mb3JtYXQtdGFyZ2V0XVtkYXRhLXZpZXctdGFyZ2V0fj1cIiR7SFQucmVhZGVyLnZpZXcubmFtZX1cIl0gaW5wdXQ6Y2hlY2tlZGApO1xuICAgICAgLy8gICBpZiAoICEgY2hlY2tlZCApIHtcbiAgICAgIC8vICAgICAgIC8vIGNoZWNrIHRoZSBmaXJzdCBvbmVcbiAgICAgIC8vICAgICAgIHZhciBpbnB1dCA9IGRvd25sb2FkRm9ybS5xdWVyeVNlbGVjdG9yKGBbZGF0YS1kb3dubG9hZC1mb3JtYXQtdGFyZ2V0XVtkYXRhLXZpZXctdGFyZ2V0fj1cIiR7SFQucmVhZGVyLnZpZXcubmFtZX1cIl0gaW5wdXRgKTtcbiAgICAgIC8vICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9XG5cbiAgICAgIHZhciBjaGVja2VkID0gZG93bmxvYWRGb3JtLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWRvd25sb2FkLWZvcm1hdC10YXJnZXRdW2RhdGEtdmlldy10YXJnZXR+PVwiJHtjdXJyZW50X3ZpZXd9XCJdIGlucHV0OmNoZWNrZWRgKTtcbiAgICAgIGlmICggISBjaGVja2VkICkge1xuICAgICAgICAgIC8vIGNoZWNrIHRoZSBmaXJzdCBvbmVcbiAgICAgICAgICB2YXIgaW5wdXQgPSBkb3dubG9hZEZvcm0ucXVlcnlTZWxlY3RvcihgW2RhdGEtZG93bmxvYWQtZm9ybWF0LXRhcmdldF1bZGF0YS12aWV3LXRhcmdldH49XCIke2N1cnJlbnRfdmlld31cIl0gaW5wdXRgKTtcbiAgICAgICAgICBpZiAoIGlucHV0ICkgeyBpbnB1dC5jaGVja2VkID0gdHJ1ZTsgfVxuICAgICAgfVxuXG4gICAgfVxuICAgIGRvd25sb2FkRm9ybWF0T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgb3B0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGRvd25sb2FkRm9ybS5kYXRhc2V0LmZvcm1hdCA9IHRoaXMudmFsdWU7XG4gICAgICAgIHVwZGF0ZURvd25sb2FkRm9ybWF0UmFuZ2VPcHRpb25zKHRoaXMpO1xuICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmFuZ2VPcHRpb25zLmZvckVhY2goZnVuY3Rpb24oZGl2KSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGRpdi5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgZG93bmxvYWRGb3JtYXRPcHRpb25zLmZvckVhY2goZnVuY3Rpb24oZm9ybWF0T3B0aW9uKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0T3B0aW9uLmRpc2FibGVkID0gISAoIGRpdi5kYXRhc2V0LmRvd25sb2FkRm9ybWF0VGFyZ2V0LmluZGV4T2YoZm9ybWF0T3B0aW9uLnZhbHVlKSA+IC0xICk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKCB0aGlzLnZhbHVlLmluZGV4T2YoJ2N1cnJlbnQtcGFnZScpID4gLTEgJiYgSFQucmVhZGVyICkge1xuICAgICAgICAgICAgICAgIHZhciBzZXEgPSB0aGlzLmRhdGFzZXQuc2VxO1xuICAgICAgICAgICAgICAgIEhULnJlYWRlci5fdXBkYXRlSW1hZ2VSZXNvbHV0aW9uKHNlcSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIEhULmRvd25sb2FkZXIudXBkYXRlRG93bmxvYWRGb3JtYXRSYW5nZU9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGZvcm1hdE9wdGlvbiA9IGRvd25sb2FkRm9ybWF0T3B0aW9ucy5maW5kKGlucHV0ID0+IGlucHV0LmNoZWNrZWQpO1xuICAgICAgICB1cGRhdGVEb3dubG9hZEZvcm1hdFJhbmdlT3B0aW9ucyhmb3JtYXRPcHRpb24pO1xuICAgIH1cblxuICAgIEhULmRvd25sb2FkZXIuc2VsZWN0UmFuZ2VPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgdmFyIGZvcm1hdE9wdGlvbiA9IGRvd25sb2FkRm9ybWF0T3B0aW9ucy5maW5kKGlucHV0ID0+IGlucHV0LmNoZWNrZWQpO1xuICAgICAgICBpZiAoIGZvcm1hdE9wdGlvbi52YWx1ZSA9PSAnZXB1YicgKSB7IHJldHVybiA7IH1cbiAgICAgICAgdmFyIHJhbmdlT3B0aW9uID0gZG93bmxvYWRGb3JtLnF1ZXJ5U2VsZWN0b3IoYGlucHV0W25hbWU9XCJyYW5nZVwiXVt2YWx1ZT1cIiR7b3B0aW9ufVwiXWApO1xuICAgICAgICByYW5nZU9wdGlvbi5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGRpdiA9IHJhbmdlT3B0aW9uLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIGRvd25sb2FkRm9ybWF0T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGZvcm1hdE9wdGlvbikge1xuICAgICAgICAgICAgZm9ybWF0T3B0aW9uLmRpc2FibGVkID0gISAoIGRpdi5kYXRhc2V0LmRvd25sb2FkRm9ybWF0VGFyZ2V0LmluZGV4T2YoZm9ybWF0T3B0aW9uLnZhbHVlKSA+IC0xICk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCB0byBQREZcbiAgICB2YXIgcGRmRm9ybWF0T3B0aW9uID0gZG93bmxvYWRGb3JtYXRPcHRpb25zLmZpbmQoaW5wdXQgPT4gaW5wdXQudmFsdWUgPT0gJ3BkZicpO1xuICAgIHBkZkZvcm1hdE9wdGlvbi5jaGVja2VkID0gdHJ1ZTtcbiAgICB1cGRhdGVEb3dubG9hZEZvcm1hdFJhbmdlT3B0aW9ucyhwZGZGb3JtYXRPcHRpb24pO1xuXG4gICAgdmFyIHR1bm5lbEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHVubmVsLWRvd25sb2FkLW1vZHVsZScpO1xuICAgIGlmICggSFQucGFyYW1zLmRlYnVnICYmIEhULnBhcmFtcy5kZWJ1Zy5pbmRleE9mKCdzdXBlcicpID4gLTEgKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdoaWRkZW4nKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ2RlYnVnJyk7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCAnc3VwZXInKTtcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdkYXRhLWZpeGVkJywgJ3RydWUnKTtcbiAgICAgICAgdHVubmVsRm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgfVxuXG4gICAgZG93bmxvYWRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBmb3JtYXRPcHRpb24gPSBkb3dubG9hZEZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImRvd25sb2FkX2Zvcm1hdFwiXTpjaGVja2VkJyk7XG4gICAgICAgIHZhciByYW5nZU9wdGlvbiA9IGRvd25sb2FkRm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwicmFuZ2VcIl06Y2hlY2tlZDpub3QoOmRpc2FibGVkKScpO1xuXG4gICAgICAgIHZhciBpbWFnZV9yZXNvbHV0aW9uX29wdGlvbiA9IGRvd25sb2FkRm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwidGFyZ2V0LXBwaVwiXTpjaGVja2VkJyk7XG5cbiAgICAgICAgSFQucHJlZnMuc2V0KHsgcHQ6IHsgZGw6IHsgaW1hZ2VSZXM6IGltYWdlX3Jlc29sdXRpb25fb3B0aW9uLnZhbHVlIH19fSk7XG5cbiAgICAgICAgLy8gbG9nIFxuICAgICAgICBIVC5hbmFseXRpY3MubG9nQWN0aW9uKHVuZGVmaW5lZCwgJ2Rvd25sb2FkJyk7XG5cbiAgICAgICAgdmFyIHByaW50YWJsZTtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICBpZiAoICEgcmFuZ2VPcHRpb24gKSB7XG4gICAgICAgICAgICAvLyBubyB2YWxpZCByYW5nZSBvcHRpb24gd2FzIGNob3NlblxuICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgY2hvb3NlIGEgdmFsaWQgcmFuZ2UgZm9yIHRoaXMgZG93bmxvYWQgZm9ybWF0LlwiKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aW9uID0gdHVubmVsRm9ybS5kYXRhc2V0LmFjdGlvblRlbXBsYXRlICsgKGZvcm1hdE9wdGlvbi52YWx1ZS5zcGxpdCgnLScpKVswXTtcbiAgICAgICAgLy8gdmFyIGFjdGlvbiA9IHR1bm5lbEZvcm0uZGF0YXNldC5hY3Rpb25UZW1wbGF0ZSArICggZm9ybWF0T3B0aW9uLnZhbHVlID09ICdwbGFpbnRleHQtemlwJyA/ICdwbGFpbnRleHQnIDogZm9ybWF0T3B0aW9uLnZhbHVlICk7XG5cbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHsgcGFnZXM6IFtdIH07XG4gICAgICAgIGlmICggcmFuZ2VPcHRpb24udmFsdWUgPT0gJ3NlbGVjdGVkLXBhZ2VzJyApIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5wYWdlcyA9IEhULnJlYWRlci5jb250cm9scy5zZWxlY3RpbmF0b3IuX2dldFBhZ2VTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5pc1NlbGVjdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIHNlbGVjdGlvbi5wYWdlcy5sZW5ndGggPT0gMCApIHtcbiAgICAgICAgICAgICAgICB2YXIgYnV0dG9ucyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1zZyA9IFsgXCI8cD5Zb3UgaGF2ZW4ndCBzZWxlY3RlZCBhbnkgcGFnZXMgdG8gZG93bmxvYWQuPC9wPlwiIF07XG4gICAgICAgICAgICAgICAgbXNnLnB1c2goXCI8cD5UbyBzZWxlY3QgcGFnZXMsIHVzZSB0aGUgcGFnZSBzZWxlY3Rpb24gY2hlY2tib3ggaW4gdGhlIHBhZ2UgdG9vbGJhci5cIik7XG4gICAgICAgICAgICAgICAgbXNnLnB1c2goXCI8cCBjbGFzcz1cXFwiY2VudGVyZWRcXFwiIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXJcXFwiPjxpbWcgYWx0PVxcXCJhbmltYXRpb24gb2YgY2hlY2tpbmcgcGFnZSBzZWxlY3Rpb24gaW4gdGhlIHBhZ2UgdG9vbGJhclxcXCIgc3JjPVxcXCIvcHQvd2ViL2dyYXBoaWNzL3BhZ2Utc2VsZWN0aW9uLmdpZlxcXCIgLz48L3A+XCIpO1xuICAgICAgICAgICAgICAgIG1zZy5wdXNoKFwiPHA+PHR0PnNoaWZ0ICsgY2xpY2s8L3R0PiB0byBkZS9zZWxlY3QgdGhlIHBhZ2VzIGJldHdlZW4gdGhpcyBwYWdlIGFuZCBhIHByZXZpb3VzbHkgc2VsZWN0ZWQgcGFnZS5cIik7XG4gICAgICAgICAgICAgICAgbXNnLnB1c2goXCI8cD5QYWdlcyB5b3Ugc2VsZWN0IHdpbGwgYmUgbGlzdGVkIGluIHRoZSBkb3dubG9hZCBtb2R1bGUuXCIpO1xuXG4gICAgICAgICAgICAgICAgbXNnID0gbXNnLmpvaW4oXCJcXG5cIik7XG5cbiAgICAgICAgICAgICAgICBidXR0b25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJPS1wiLFxuICAgICAgICAgICAgICAgICAgICAnY2xhc3MnIDogJ2J0bi1kaXNtaXNzJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJvb3Rib3guZGlhbG9nKG1zZywgYnV0dG9ucyk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICggcmFuZ2VPcHRpb24udmFsdWUuaW5kZXhPZignY3VycmVudC1wYWdlJykgPiAtMSApIHtcbiAgICAgICAgICAgIHZhciBwYWdlO1xuICAgICAgICAgICAgc3dpdGNoKHJhbmdlT3B0aW9uLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY3VycmVudC1wYWdlJzpcbiAgICAgICAgICAgICAgICAgICAgcGFnZSA9IFsgSFQucmVhZGVyLnZpZXcuY3VycmVudExvY2F0aW9uKCkgXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY3VycmVudC1wYWdlLXZlcnNvJzpcbiAgICAgICAgICAgICAgICAgICAgcGFnZSA9IFsgSFQucmVhZGVyLnZpZXcuY3VycmVudExvY2F0aW9uKCdWRVJTTycpIF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2N1cnJlbnQtcGFnZS1yZWN0byc6XG4gICAgICAgICAgICAgICAgICAgIHBhZ2UgPSBbIEhULnJlYWRlci52aWV3LmN1cnJlbnRMb2NhdGlvbignUkVDVE8nKSBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggISBwYWdlICkge1xuICAgICAgICAgICAgICAgIC8vIHByb2JhYmx5IGltcG9zc2libGU/XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxlY3Rpb24ucGFnZXMgPSBbIHBhZ2UgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc2VsZWN0aW9uLnBhZ2VzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb24uc2VxID0gSFQucmVhZGVyLmNvbnRyb2xzLnNlbGVjdGluYXRvciA/XG4gICAgICAgICAgICAgICAgIEhULnJlYWRlci5jb250cm9scy5zZWxlY3RpbmF0b3IuX2dldEZsYXR0ZW5lZFNlbGVjdGlvbihzZWxlY3Rpb24ucGFnZXMpIDogXG4gICAgICAgICAgICAgICAgIHNlbGVjdGlvbi5wYWdlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGltYWdlLXRpZmYgaXMgc2xvdyBlbm91Z2ggdGhhdCBpdCBzaG91bGQgZmFsbCB0byB0aGUgbW9kYWwgc29vbmVyXG4gICAgICAgIHZhciBwYXJ0aWFsVXBwZXJMbWl0ID0gZm9ybWF0T3B0aW9uLnZhbHVlID09ICdpbWFnZS10aWZmJyA/IDEgOiAxMDtcbiAgICAgICAgaWYgKCByYW5nZU9wdGlvbi5kYXRhc2V0LmlzUGFydGlhbCA9PSAndHJ1ZScgJiYgc2VsZWN0aW9uLnBhZ2VzLmxlbmd0aCA8PSBwYXJ0aWFsVXBwZXJMbWl0ICkge1xuXG4gICAgICAgICAgICAvLyBkZWxldGUgYW55IGV4aXN0aW5nIGlucHV0c1xuICAgICAgICAgICAgdHVubmVsRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dDpub3QoW2RhdGEtZml4ZWRdKScpLmZvckVhY2goZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgICAgICB0dW5uZWxGb3JtLnJlbW92ZUNoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGlmICggZm9ybWF0T3B0aW9uLnZhbHVlID09ICdpbWFnZS10aWZmJyB8fCBmb3JtYXRPcHRpb24udmFsdWUgPT0gJ2ltYWdlLWpwZWcnICkge1xuICAgICAgICAgICAgICAgIHZhciBzaXplX2F0dHIgPSBcInRhcmdldF9wcGlcIjtcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VfZm9ybWF0X2F0dHIgPSAnZm9ybWF0JztcblxuICAgICAgICAgICAgICAgIHZhciBzaXplX3ZhbHVlID0gaW1hZ2VfcmVzb2x1dGlvbl9vcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKCBzZWxlY3Rpb24ucGFnZXMubGVuZ3RoID09IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNsaWdodCBkaWZmZXJlbmNlXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICcvY2dpL2ltZ3Nydi9pbWFnZSc7XG4gICAgICAgICAgICAgICAgICAgIHNpemVfYXR0ciA9IFwic2l6ZVwiO1xuICAgICAgICAgICAgICAgICAgICBzaXplX3ZhbHVlID0gc2l6ZV92YWx1ZSA9PSAnMCcgPyAnZnVsbCcgOiBgcHBpOiR7c2l6ZV92YWx1ZX1gO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImhpZGRlblwiKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIHNpemVfYXR0cik7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgc2l6ZV92YWx1ZSk7XG4gICAgICAgICAgICAgICAgdHVubmVsRm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJoaWRkZW5cIik7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBpbWFnZV9mb3JtYXRfYXR0cik7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgJ2ltYWdlLycgKyAoZm9ybWF0T3B0aW9uLnZhbHVlLnNwbGl0KCctJylbMV0pKTtcbiAgICAgICAgICAgICAgICB0dW5uZWxGb3JtLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIGZvcm1hdE9wdGlvbi52YWx1ZSA9PSAncGxhaW50ZXh0LXppcCcgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgJ2J1bmRsZV9mb3JtYXQnKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcInppcFwiKTtcbiAgICAgICAgICAgICAgICB0dW5uZWxGb3JtLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZWN0aW9uLnNlcS5mb3JFYWNoKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJzZXFcIik7XG4gICAgICAgICAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHR1bm5lbEZvcm0uYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgdHVubmVsRm9ybS5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgICAgICAvLyBIVC5kaXNhYmxlVW5sb2FkVGltZW91dCA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgaWZyYW1lc1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaWZyYW1lLmRvd25sb2FkLW1vZHVsZScpLmZvckVhY2goZnVuY3Rpb24oaWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZG93bmxvYWRJZHggKz0gMTtcbiAgICAgICAgICAgIHZhciB0cmFja2VyID0gYEQke2Rvd25sb2FkSWR4fTpgO1xuICAgICAgICAgICAgdmFyIHRyYWNrZXJfaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgdHJhY2tlcl9pbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnaGlkZGVuJyk7XG4gICAgICAgICAgICB0cmFja2VyX2lucHV0LnNldEF0dHJpYnV0ZSgnbmFtZScsICd0cmFja2VyJyk7XG4gICAgICAgICAgICB0cmFja2VyX2lucHV0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0cmFja2VyKTtcbiAgICAgICAgICAgIHR1bm5lbEZvcm0uYXBwZW5kQ2hpbGQodHJhY2tlcl9pbnB1dCk7XG4gICAgICAgICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCduYW1lJywgYGRvd25sb2FkLW1vZHVsZS0ke2Rvd25sb2FkSWR4fWApO1xuICAgICAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZG93bmxvYWQtbW9kdWxlJyk7XG4gICAgICAgICAgICBpZnJhbWUuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgICB0dW5uZWxGb3JtLnNldEF0dHJpYnV0ZSgndGFyZ2V0JywgaWZyYW1lLmdldEF0dHJpYnV0ZSgnbmFtZScpKTtcblxuICAgICAgICAgICAgZG93bmxvYWRTdWJtaXQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZG93bmxvYWRTdWJtaXQuY2xhc3NMaXN0LmFkZCgnYnRuLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgdmFyIHRyYWNrZXJJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9ICQuY29va2llKCd0cmFja2VyJykgfHwgJyc7XG4gICAgICAgICAgICAgICAgaWYgKCBIVC5pc19kZXYgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0/XCIsIHRyYWNrZXIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCB2YWx1ZS5pbmRleE9mKHRyYWNrZXIpID4gLTEgKSB7XG4gICAgICAgICAgICAgICAgICAgICQucmVtb3ZlQ29va2llKCd0cmFja2VyJywgeyBwYXRoOiAnLyd9KTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0cmFja2VySW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFN1Ym1pdC5jbGFzc0xpc3QucmVtb3ZlKCdidG4tbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFN1Ym1pdC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBIVC5kaXNhYmxlVW5sb2FkVGltZW91dCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDEwMCk7XG5cblxuICAgICAgICAgICAgdmFyIGFuYWx5dGljc0FjdGlvbiA9IGBQVCBEb3dubG9hZCAtICR7Zm9ybWF0T3B0aW9uLnZhbHVlLnRvVXBwZXJDYXNlKCl9IC0gJHtyYW5nZU9wdGlvbi52YWx1ZX1gO1xuICAgICAgICAgICAgaWYgKCBmb3JtYXRPcHRpb24udmFsdWUuaW5kZXhPZignaW1hZ2UtJykgPiAtMSApIHtcbiAgICAgICAgICAgICAgICBhbmFseXRpY3NBY3Rpb24gKz0gJyAtICcgKyAoIGltYWdlX3Jlc29sdXRpb25fb3B0aW9uLnZhbHVlID09ICcwJyA/ICdmdWxsJyA6IGltYWdlX3Jlc29sdXRpb25fb3B0aW9uLnZhbHVlICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBIVC5hbmFseXRpY3MudHJhY2tFdmVudCh7IFxuICAgICAgICAgICAgICAgIGxhYmVsIDogJy0nLCBcbiAgICAgICAgICAgICAgICBjYXRlZ29yeSA6ICdQVCcsIFxuICAgICAgICAgICAgICAgIGFjdGlvbiA6IGFuYWx5dGljc0FjdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoIHdpbmRvdy5oaiApIHsgaGooJ3RhZ1JlY29yZGluZycsIFsgYFBUIERvd25sb2FkIC0gJHtmb3JtYXRPcHRpb24udmFsdWUudG9VcHBlckNhc2UoKX0gLSAke3JhbmdlT3B0aW9uLnZhbHVlfWAgXSkgfTtcblxuICAgICAgICAgICAgdHVubmVsRm9ybS5zdWJtaXQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9mb3JtYXRfdGl0bGVzID0ge307XG4gICAgICAgIF9mb3JtYXRfdGl0bGVzLnBkZiA9ICdQREYnO1xuICAgICAgICBfZm9ybWF0X3RpdGxlcy5lcHViID0gJ0VQVUInO1xuICAgICAgICBfZm9ybWF0X3RpdGxlcy5wbGFpbnRleHQgPSAnVGV4dCAoLnR4dCknO1xuICAgICAgICBfZm9ybWF0X3RpdGxlc1sncGxhaW50ZXh0LXppcCddID0gJ1RleHQgKC56aXApJztcbiAgICAgICAgX2Zvcm1hdF90aXRsZXNbJ2ltYWdlLWpwZWcnXSA9ICdJbWFnZSAoSlBFRyknO1xuICAgICAgICBfZm9ybWF0X3RpdGxlc1snaW1hZ2UtdGlmZiddID0gJ0ltYWdlIChUSUZGKSc7XG4gICAgICAgIC8vIF9mb3JtYXRfdGl0bGVzLmltYWdlID0gYEltYWdlICgke2ltYWdlX2Zvcm1hdF9vcHRpb24udmFsdWUgPT0gJ2ltYWdlL2pwZWcnID8gJ0pQRUcnIDogJ1RJRkYnfSlgO1xuICAgICAgICAvLyBfZm9ybWF0X3RpdGxlcy5pbWFnZSA9ICdJbWFnZSAoSlBFRyknO1xuXG4gICAgICAgIC8vIGludm9rZSB0aGUgZG93bmxvYWRlclxuICAgICAgICBIVC5kb3dubG9hZGVyLmRvd25sb2FkUGRmKHtcbiAgICAgICAgICAgIHNyYzogYWN0aW9uICsgJz9pZD0nICsgSFQucGFyYW1zLmlkLFxuICAgICAgICAgICAgaXRlbV90aXRsZTogX2Zvcm1hdF90aXRsZXNbZm9ybWF0T3B0aW9uLnZhbHVlXSxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogc2VsZWN0aW9uLFxuICAgICAgICAgICAgZG93bmxvYWRGb3JtYXQ6IGZvcm1hdE9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgIHRyYWNraW5nQWN0aW9uOiByYW5nZU9wdGlvbi52YWx1ZSxcbiAgICAgICAgICAgIGltYWdlUmVzb2x1dGlvbjogaW1hZ2VfcmVzb2x1dGlvbl9vcHRpb24udmFsdWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pXG5cbn0pO1xuXG4iLCIvLyBzdXBwbHkgbWV0aG9kIGZvciBjcmVhdGluZyBhbiBlbWJlZGRhYmxlIFVSTFxuaGVhZC5yZWFkeShmdW5jdGlvbigpIHtcblxuICAgIHZhciBzaWRlX3Nob3J0ID0gXCI0NTBcIjtcbiAgICB2YXIgc2lkZV9sb25nICA9IFwiNzAwXCI7XG4gICAgdmFyIGh0SWQgPSBIVC5wYXJhbXMuaWQ7XG4gICAgdmFyIGVtYmVkSGVscExpbmsgPSBcImh0dHBzOi8vd3d3LmhhdGhpdHJ1c3Qub3JnL2VtYmVkXCI7XG5cbiAgICB2YXIgY29kZWJsb2NrX3R4dDtcbiAgICB2YXIgY29kZWJsb2NrX3R4dF9hID0gZnVuY3Rpb24odyxoKSB7cmV0dXJuICc8aWZyYW1lIHdpZHRoPVwiJyArIHcgKyAnXCIgaGVpZ2h0PVwiJyArIGggKyAnXCIgJzt9XG4gICAgdmFyIGNvZGVibG9ja190eHRfYiA9ICdzcmM9XCJodHRwczovL2hkbC5oYW5kbGUubmV0LzIwMjcvJyArIGh0SWQgKyAnP3VybGFwcGVuZD0lM0J1aT1lbWJlZFwiPjwvaWZyYW1lPic7XG5cbiAgICB2YXIgJGJsb2NrID0gJChcbiAgICAnPGRpdiBjbGFzcz1cImVtYmVkVXJsQ29udGFpbmVyXCI+JyArXG4gICAgICAgICc8aDM+RW1iZWQgVGhpcyBCb29rICcgK1xuICAgICAgICAgICAgJzxhIGlkPVwiZW1iZWRIZWxwSWNvblwiIGRlZmF1bHQtZm9ybT1cImRhdGEtZGVmYXVsdC1mb3JtXCIgJyArXG4gICAgICAgICAgICAgICAgJ2hyZWY9XCInICsgZW1iZWRIZWxwTGluayArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImljb21vb24gaWNvbW9vbi1oZWxwXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjxzcGFuIGNsYXNzPVwib2Zmc2NyZWVuXCI+SGVscDogRW1iZWRkaW5nIEhhdGhpVHJ1c3QgQm9va3M8L3NwYW4+PC9hPjwvaDM+JyArXG4gICAgICAgICc8Zm9ybT4nICsgXG4gICAgICAgICcgICAgPHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCI+Q29weSB0aGUgY29kZSBiZWxvdyBhbmQgcGFzdGUgaXQgaW50byB0aGUgSFRNTCBvZiBhbnkgd2Vic2l0ZSBvciBibG9nLjwvc3Bhbj4nICtcbiAgICAgICAgJyAgICA8bGFiZWwgZm9yPVwiY29kZWJsb2NrXCIgY2xhc3M9XCJvZmZzY3JlZW5cIj5Db2RlIEJsb2NrPC9sYWJlbD4nICtcbiAgICAgICAgJyAgICA8dGV4dGFyZWEgY2xhc3M9XCJpbnB1dC14bGFyZ2VcIiBpZD1cImNvZGVibG9ja1wiIG5hbWU9XCJjb2RlYmxvY2tcIiByb3dzPVwiM1wiPicgK1xuICAgICAgICBjb2RlYmxvY2tfdHh0X2Eoc2lkZV9zaG9ydCwgc2lkZV9sb25nKSArIGNvZGVibG9ja190eHRfYiArICc8L3RleHRhcmVhPicgKyBcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJjb250cm9sc1wiPicgKyBcbiAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInZpZXdcIiBpZD1cInZpZXctc2Nyb2xsXCIgdmFsdWU9XCIwXCIgY2hlY2tlZD1cImNoZWNrZWRcIiA+JyArXG4gICAgICAgICAgICAnPGxhYmVsIGNsYXNzPVwicmFkaW8gaW5saW5lXCIgZm9yPVwidmlldy1zY3JvbGxcIj4nICtcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJpY29tb29uIGljb21vb24tc2Nyb2xsXCIvPiBTY3JvbGwgVmlldyAnICtcbiAgICAgICAgICAgICc8L2xhYmVsPicgKyBcbiAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cInZpZXdcIiBpZD1cInZpZXctZmxpcFwiIHZhbHVlPVwiMVwiID4nICtcbiAgICAgICAgICAgICc8bGFiZWwgY2xhc3M9XCJyYWRpbyBpbmxpbmVcIiBmb3I9XCJ2aWV3LWZsaXBcIj4nICtcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJpY29tb29uIGljb21vb24tYm9vay1hbHQyXCIvPiBGbGlwIFZpZXcgJyArXG4gICAgICAgICAgICAnPC9sYWJlbD4nICtcbiAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPC9mb3JtPicgK1xuICAgICc8L2Rpdj4nXG4gICAgKTtcblxuXG4gICAgLy8gJChcIiNlbWJlZEh0bWxcIikuY2xpY2soZnVuY3Rpb24oZSkge1xuICAgICQoXCJib2R5XCIpLm9uKCdjbGljaycsICcjZW1iZWRIdG1sJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGJvb3Rib3guZGlhbG9nKCRibG9jaywgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibGFiZWxcIiA6IFwiQ2FuY2VsXCIsXG4gICAgICAgICAgICAgICAgXCJjbGFzc1wiIDogXCJidG4tZGlzbWlzc1wiXG4gICAgICAgICAgICB9XG4gICAgXSk7XG5cbiAgICAgICAgLy8gQ3VzdG9tIHdpZHRoIGZvciBib3VuZGluZyAnLm1vZGFsJyBcbiAgICAgICAgJGJsb2NrLmNsb3Nlc3QoJy5tb2RhbCcpLmFkZENsYXNzKFwiYm9vdGJveE1lZGl1bVdpZHRoXCIpO1xuXG4gICAgICAgIC8vIFNlbGVjdCBlbnRpcmV0eSBvZiBjb2RlYmxvY2sgZm9yIGVhc3kgY29weWluZ1xuICAgICAgICB2YXIgdGV4dGFyZWEgPSAkYmxvY2suZmluZChcInRleHRhcmVhW25hbWU9Y29kZWJsb2NrXVwiKTtcbiAgICB0ZXh0YXJlYS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCh0aGlzKS5zZWxlY3QoKTtcbiAgICB9KTtcblxuICAgICAgICAvLyBNb2RpZnkgY29kZWJsb2NrIHRvIG9uZSBvZiB0d28gdmlld3MgXG4gICAgICAgICQoJ2lucHV0OnJhZGlvW2lkPVwidmlldy1zY3JvbGxcIl0nKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvZGVibG9ja190eHQgPSBjb2RlYmxvY2tfdHh0X2Eoc2lkZV9zaG9ydCwgc2lkZV9sb25nKSArIGNvZGVibG9ja190eHRfYjsgXG4gICAgICAgICAgICB0ZXh0YXJlYS52YWwoY29kZWJsb2NrX3R4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKCdpbnB1dDpyYWRpb1tpZD1cInZpZXctZmxpcFwiXScpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29kZWJsb2NrX3R4dCA9IGNvZGVibG9ja190eHRfYShzaWRlX2xvbmcsIHNpZGVfc2hvcnQpICsgY29kZWJsb2NrX3R4dF9iOyBcbiAgICAgICAgICAgIHRleHRhcmVhLnZhbChjb2RlYmxvY2tfdHh0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcblxuIiwiLy8gc3VwcGx5IG1ldGhvZCBmb3IgZmVlZGJhY2sgc3lzdGVtXG52YXIgSFQgPSBIVCB8fCB7fTtcbkhULmZlZWRiYWNrID0ge307XG5IVC5mZWVkYmFjay5kaWFsb2cgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHRtbCA9XG4gICAgICAgICc8Zm9ybT4nICtcbiAgICAgICAgJyAgICA8ZmllbGRzZXQ+JyArXG4gICAgICAgICcgICAgICAgIDxsZWdlbmQ+RW1haWwgQWRkcmVzczwvbGVnZW5kPicgK1xuICAgICAgICAnICAgICAgICA8bGFiZWwgZm9yPVwiZW1haWxcIiBjbGFzcz1cIm9mZnNjcmVlblwiPkVNYWlsIEFkZHJlc3M8L2xhYmVsPicgK1xuICAgICAgICAnICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImlucHV0LXhsYXJnZVwiIHBsYWNlaG9sZGVyPVwiW1lvdXIgZW1haWwgYWRkcmVzc11cIiBuYW1lPVwiZW1haWxcIiBpZD1cImVtYWlsXCIgLz4nICtcbiAgICAgICAgJyAgICAgICAgPHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCI+V2Ugd2lsbCBtYWtlIGV2ZXJ5IGVmZm9ydCB0byBhZGRyZXNzIGNvcHlyaWdodCBpc3N1ZXMgYnkgdGhlIG5leHQgYnVzaW5lc3MgZGF5IGFmdGVyIG5vdGlmaWNhdGlvbi48L3NwYW4+JyArXG4gICAgICAgICcgICAgPC9maWVsZHNldD4nICtcbiAgICAgICAgJyAgICA8ZmllbGRzZXQ+JyArXG4gICAgICAgICcgICAgICAgIDxsZWdlbmQ+T3ZlcmFsbCBwYWdlIHJlYWRhYmlsaXR5IGFuZCBxdWFsaXR5PC9sZWdlbmQ+JyArXG4gICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1oZWxwXCI+U2VsZWN0IG9uZSBvcHRpb24gdGhhdCBhcHBsaWVzPC9kaXY+JyArXG4gICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIlF1YWxpdHlcIiBpZD1cInB0LWZlZWRiYWNrLXF1YWxpdHktMVwiIHZhbHVlPVwicmVhZGFibGVcIiAvPicgK1xuICAgICAgICAnICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwicmFkaW9cIiBmb3I9XCJwdC1mZWVkYmFjay1xdWFsaXR5LTFcIiA+JyArXG4gICAgICAgICcgICAgICAgICAgICAgICAgRmV3IHByb2JsZW1zLCBlbnRpcmUgcGFnZSBpcyByZWFkYWJsZScgK1xuICAgICAgICAnICAgICAgICAgICAgPC9sYWJlbD4nICtcbiAgICAgICAgJyAgICAgICAgPC9kaXY+JyArXG4gICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIlF1YWxpdHlcIiBpZD1cInB0LWZlZWRiYWNrLXF1YWxpdHktMlwiIHZhbHVlPVwic29tZXByb2JsZW1zXCIgLz4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvXCIgZm9yPVwicHQtZmVlZGJhY2stcXVhbGl0eS0yXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICAgICAgU29tZSBwcm9ibGVtcywgYnV0IHN0aWxsIHJlYWRhYmxlJyArXG4gICAgICAgICcgICAgICAgICAgICA8L2xhYmVsPicgK1xuICAgICAgICAnICAgICAgICA8L2Rpdj4nICtcbiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiUXVhbGl0eVwiIHZhbHVlPVwiZGlmZmljdWx0XCIgaWQ9XCJwdC1mZWVkYmFjay1xdWFsaXR5LTNcIiAvPicgK1xuICAgICAgICAnICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwicmFkaW9cIiBmb3I9XCJwdC1mZWVkYmFjay1xdWFsaXR5LTNcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgICAgICBTaWduaWZpY2FudCBwcm9ibGVtcywgZGlmZmljdWx0IG9yIGltcG9zc2libGUgdG8gcmVhZCcgK1xuICAgICAgICAnICAgICAgICAgICAgPC9sYWJlbD4nICtcbiAgICAgICAgJyAgICAgICAgPC9kaXY+JyArXG4gICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIlF1YWxpdHlcIiB2YWx1ZT1cIm5vbmVcIiBjaGVja2VkPVwiY2hlY2tlZFwiIGlkPVwicHQtZmVlZGJhY2stcXVhbGl0eS00XCIgLz4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvXCIgZm9yPVwicHQtZmVlZGJhY2stcXVhbGl0eS00XCI+JyArXG4gICAgICAgICcgICAgICAgICAgICAgICAgKE5vIHByb2JsZW1zKScgK1xuICAgICAgICAnICAgICAgICAgICAgPC9sYWJlbD4nICtcbiAgICAgICAgJyAgICAgICAgPC9kaXY+JyArXG4gICAgICAgICcgICAgPC9maWVsZHNldD4nICtcbiAgICAgICAgJyAgICA8ZmllbGRzZXQ+JyArXG4gICAgICAgICcgICAgICAgIDxsZWdlbmQ+U3BlY2lmaWMgcGFnZSBpbWFnZSBwcm9ibGVtcz88L2xlZ2VuZD4nICtcbiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWhlbHBcIj5TZWxlY3QgYW55IHRoYXQgYXBwbHk8L2Rpdj4nICtcbiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiYmx1cnJ5XCIgdmFsdWU9XCIxXCIgaWQ9XCJwdC1mZWVkYmFjay1wcm9ibGVtcy0xXCIgLz4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwdC1mZWVkYmFjay1wcm9ibGVtcy0xXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICAgICAgTWlzc2luZyBwYXJ0cyBvZiB0aGUgcGFnZScgK1xuICAgICAgICAnICAgICAgICAgICAgPC9sYWJlbD4nICtcbiAgICAgICAgJyAgICAgICAgPC9kaXY+JyArXG4gICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImJsdXJyeVwiIHZhbHVlPVwiMVwiIGlkPVwicHQtZmVlZGJhY2stcHJvYmxlbXMtMlwiICAvPicgK1xuICAgICAgICAnICAgICAgICAgICAgPGxhYmVsIGZvcj1cInB0LWZlZWRiYWNrLXByb2JsZW1zLTJcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgICAgICBCbHVycnkgdGV4dCcgK1xuICAgICAgICAnICAgICAgICAgICAgPC9sYWJlbD4nICtcbiAgICAgICAgJyAgICAgICAgPC9kaXY+JyArXG4gICAgICAgICcgICAgICAgIDxkaXYgY2xhc3M9XCJjb250cm9sXCI+JyArXG4gICAgICAgICcgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImN1cnZlZFwiIHZhbHVlPVwiMVwiIGlkPVwicHQtZmVlZGJhY2stcHJvYmxlbXMtM1wiICAvPicgK1xuICAgICAgICAnICAgICAgICAgICAgPGxhYmVsIGZvcj1cInB0LWZlZWRiYWNrLXByb2JsZW1zLTNcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgICAgICBDdXJ2ZWQgb3IgZGlzdG9ydGVkIHRleHQnICtcbiAgICAgICAgJyAgICAgICAgICAgIDwvbGFiZWw+JyArXG4gICAgICAgICcgICAgICAgIDwvZGl2PicgK1xuICAgICAgICAnICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiPicgK1xuICAgICAgICAnICAgICAgICAgICAgPGxhYmVsIGZvcj1cInB0LWZlZWRiYWNrLXByb2JsZW1zLW90aGVyXCI+T3RoZXIgcHJvYmxlbSA8L2xhYmVsPjxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiaW5wdXQtbWVkaXVtXCIgbmFtZT1cIm90aGVyXCIgdmFsdWU9XCJcIiBpZD1cInB0LWZlZWRiYWNrLXByb2JsZW1zLW90aGVyXCIgIC8+JyArXG4gICAgICAgICcgICAgICAgIDwvZGl2PicgK1xuICAgICAgICAnICAgIDwvZmllbGRzZXQ+JyArXG4gICAgICAgICcgICAgPGZpZWxkc2V0PicgK1xuICAgICAgICAnICAgICAgICA8bGVnZW5kPlByb2JsZW1zIHdpdGggYWNjZXNzIHJpZ2h0cz88L2xlZ2VuZD4nICtcbiAgICAgICAgJyAgICAgICAgPHNwYW4gY2xhc3M9XCJoZWxwLWJsb2NrXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAxcmVtO1wiPjxzdHJvbmc+JyArXG4gICAgICAgICcgICAgICAgICAgICAoU2VlIGFsc286IDxhIGhyZWY9XCJodHRwOi8vd3d3LmhhdGhpdHJ1c3Qub3JnL3Rha2VfZG93bl9wb2xpY3lcIiB0YXJnZXQ9XCJfYmxhbmtcIj50YWtlLWRvd24gcG9saWN5PC9hPiknICtcbiAgICAgICAgJyAgICAgICAgPC9zdHJvbmc+PC9zcGFuPicgK1xuICAgICAgICAnICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaGVscFwiPlNlbGVjdCBvbmUgb3B0aW9uIHRoYXQgYXBwbGllczwvZGl2PicgK1xuICAgICAgICAnICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbFwiPicgK1xuICAgICAgICAnICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJSaWdodHNcIiB2YWx1ZT1cIm5vYWNjZXNzXCIgaWQ9XCJwdC1mZWVkYmFjay1hY2Nlc3MtMVwiIC8+JyArXG4gICAgICAgICcgICAgICAgICAgICA8bGFiZWwgZm9yPVwicHQtZmVlZGJhY2stYWNjZXNzLTFcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgICAgICBUaGlzIGl0ZW0gaXMgaW4gdGhlIHB1YmxpYyBkb21haW4sIGJ1dCBJIGRvblxcJ3QgaGF2ZSBhY2Nlc3MgdG8gaXQuJyArXG4gICAgICAgICcgICAgICAgICAgICA8L2xhYmVsPicgK1xuICAgICAgICAnICAgICAgICA8L2Rpdj4nICtcbiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiUmlnaHRzXCIgdmFsdWU9XCJhY2Nlc3NcIiBpZD1cInB0LWZlZWRiYWNrLWFjY2Vzcy0yXCIgLz4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwdC1mZWVkYmFjay1hY2Nlc3MtMlwiPicgK1xuICAgICAgICAnICAgICAgICAgICAgICAgICAgICBJIGhhdmUgYWNjZXNzIHRvIHRoaXMgaXRlbSwgYnV0IHNob3VsZCBub3QuJyArXG4gICAgICAgICcgICAgICAgICAgICA8L2xhYmVsPicgK1xuICAgICAgICAnICAgICAgICA8L2Rpdj4nICtcbiAgICAgICAgJyAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xcIj4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiUmlnaHRzXCIgdmFsdWU9XCJub25lXCIgY2hlY2tlZD1cImNoZWNrZWRcIiBpZD1cInB0LWZlZWRiYWNrLWFjY2Vzcy0zXCIgLz4nICtcbiAgICAgICAgJyAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwdC1mZWVkYmFjay1hY2Nlc3MtM1wiPicgK1xuICAgICAgICAnICAgICAgICAgICAgICAgIChObyBwcm9ibGVtcyknICtcbiAgICAgICAgJyAgICAgICAgICAgIDwvbGFiZWw+JyArXG4gICAgICAgICcgICAgICAgIDwvZGl2PicgK1xuICAgICAgICAnICAgIDwvZmllbGRzZXQ+JyArXG4gICAgICAgICcgICAgPGZpZWxkc2V0PicgKyBcbiAgICAgICAgJyAgICAgICAgPGxlZ2VuZD5PdGhlciBwcm9ibGVtcyBvciBjb21tZW50cz88L2xlZ2VuZD4nICtcbiAgICAgICAgJyAgICAgICAgPHA+JyArXG4gICAgICAgICcgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJvZmZzY3JlZW5cIiBmb3I9XCJjb21tZW50c1wiPk90aGVyIHByb2JsZW1zIG9yIGNvbW1lbnRzPzwvbGFiZWw+JyArXG4gICAgICAgICcgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9XCJjb21tZW50c1wiIG5hbWU9XCJjb21tZW50c1wiIHJvd3M9XCIzXCI+PC90ZXh0YXJlYT4nICtcbiAgICAgICAgJyAgICAgICAgPC9wPicgK1xuICAgICAgICAnICAgIDwvZmllbGRzZXQ+JyArXG4gICAgICAgICc8L2Zvcm0+JztcblxuICAgIHZhciAkZm9ybSA9ICQoaHRtbCk7XG5cbiAgICAvLyBoaWRkZW4gZmllbGRzXG4gICAgJChcIjxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J1N5c0lEJyAvPlwiKS52YWwoSFQucGFyYW1zLmlkKS5hcHBlbmRUbygkZm9ybSk7XG4gICAgJChcIjxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J1JlY29yZFVSTCcgLz5cIikudmFsKEhULnBhcmFtcy5SZWNvcmRVUkwpLmFwcGVuZFRvKCRmb3JtKTtcblxuICAgIGlmICggSFQuY3Jtc19zdGF0ZSApIHtcbiAgICAgICAgJChcIjxpbnB1dCB0eXBlPSdoaWRkZW4nIG5hbWU9J0NSTVMnIC8+XCIpLnZhbChIVC5jcm1zX3N0YXRlKS5hcHBlbmRUbygkZm9ybSk7XG4gICAgICAgIHZhciAkZW1haWwgPSAkZm9ybS5maW5kKFwiI2VtYWlsXCIpO1xuICAgICAgICAkZW1haWwudmFsKEhULmNybXNfc3RhdGUpO1xuICAgICAgICAkZW1haWwuaGlkZSgpO1xuICAgICAgICAkKFwiPHNwYW4+XCIgKyBIVC5jcm1zX3N0YXRlICsgXCI8L3NwYW4+PGJyIC8+XCIpLmluc2VydEFmdGVyKCRlbWFpbCk7XG4gICAgICAgICRmb3JtLmZpbmQoXCIuaGVscC1ibG9ja1wiKS5oaWRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCBIVC5yZWFkZXIgKSB7XG4gICAgICAgICQoXCI8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdTZXFObycgLz5cIikudmFsKEhULnBhcmFtcy5zZXEpLmFwcGVuZFRvKCRmb3JtKTtcbiAgICB9IGVsc2UgaWYgKCBIVC5wYXJhbXMuc2VxICkge1xuICAgICAgICAkKFwiPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nU2VxTm8nIC8+XCIpLnZhbChIVC5wYXJhbXMuc2VxKS5hcHBlbmRUbygkZm9ybSk7XG4gICAgfVxuICAgICQoXCI8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSd2aWV3JyAvPlwiKS52YWwoSFQucGFyYW1zLnZpZXcpLmFwcGVuZFRvKCRmb3JtKTtcblxuICAgIGlmICggSFQucGFyYW1zLnNraW4gKSB7XG4gICAgICAgICQoXCI8aW5wdXQgdHlwZT0naGlkZGVuJyBuYW1lPSdza2luJyAvPlwiKS52YWwoSFQucGFyYW1zLnNraW4pLmFwcGVuZFRvKCRmb3JtKTsgICAgICAgIFxuICAgIH1cblxuICAgIC8vIGlmICggSFQuY3Jtc19zdGF0ZSApIHtcbiAgICAvLyAgICAgJGZvcm0uZmluZChcIiNlbWFpbFwiKS52YWwoSFQuY3Jtc19zdGF0ZSk7XG4gICAgLy8gfVxuXG5cbiAgICByZXR1cm4gJGZvcm07XG59O1xuIiwidmFyIEhUID0gSFQgfHwge307XG5oZWFkLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gIEhULmFuYWx5dGljcy5nZXRDb250ZW50R3JvdXBEYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gY2hlYXRcbiAgICB2YXIgc3VmZml4ID0gJyc7XG4gICAgdmFyIGNvbnRlbnRfZ3JvdXAgPSA0O1xuICAgIGlmICggJChcIiNzZWN0aW9uXCIpLmRhdGEoXCJ2aWV3XCIpID09ICdyZXN0cmljdGVkJyApIHtcbiAgICAgIGNvbnRlbnRfZ3JvdXAgPSAyO1xuICAgICAgc3VmZml4ID0gJyNyZXN0cmljdGVkJztcbiAgICB9IGVsc2UgaWYgKCB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKFwiZGVidWc9c3VwZXJcIikgPiAtMSApIHtcbiAgICAgIGNvbnRlbnRfZ3JvdXAgPSAzO1xuICAgICAgc3VmZml4ID0gJyNzdXBlcic7XG4gICAgfVxuICAgIHJldHVybiB7IGluZGV4IDogY29udGVudF9ncm91cCwgdmFsdWUgOiBIVC5wYXJhbXMuaWQgKyBzdWZmaXggfTtcblxuICB9XG5cbiAgSFQuYW5hbHl0aWNzLl9zaW1wbGlmeVBhZ2VIcmVmID0gZnVuY3Rpb24oaHJlZikge1xuICAgIHZhciB1cmwgPSAkLnVybChocmVmKTtcbiAgICB2YXIgbmV3X2hyZWYgPSB1cmwuc2VnbWVudCgpO1xuICAgIG5ld19ocmVmLnB1c2goJChcImh0bWxcIikuZGF0YSgnY29udGVudC1wcm92aWRlcicpKTtcbiAgICBuZXdfaHJlZi5wdXNoKHVybC5wYXJhbShcImlkXCIpKTtcbiAgICB2YXIgcXMgPSAnP3NraW49MjAyMSc7XG4gICAgaWYgKCBuZXdfaHJlZi5pbmRleE9mKFwic2VhcmNoXCIpID4gLTEgJiYgdXJsLnBhcmFtKCdxMScpICApIHtcbiAgICAgIHFzICs9ICcmcTE9JyArIHVybC5wYXJhbSgncTEnKTtcbiAgICB9XG4gICAgbmV3X2hyZWYgPSBcIi9cIiArIG5ld19ocmVmLmpvaW4oXCIvXCIpICsgcXM7XG4gICAgcmV0dXJuIG5ld19ocmVmO1xuICB9XG5cbiAgSFQuYW5hbHl0aWNzLmdldFBhZ2VIcmVmID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEhULmFuYWx5dGljcy5fc2ltcGxpZnlQYWdlSHJlZigpO1xuICB9XG5cbiAgSFQuYW5hbHl0aWNzLmdldFRpdGxlID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0aXRsZScpO1xuICAgIGlmICggbG9jYXRpb24ucGF0aG5hbWUgPT0gJy9jZ2kvcHQnICYmIHRpdGxlLmRhdGFzZXQudGl0bGUgKSB7XG4gICAgICByZXR1cm4gdGl0bGUuZGF0YXNldC50aXRsZTtcbiAgICB9XG4gICAgcmV0dXJuIGRvY3VtZW50LnRpdGxlO1xuICB9XG5cbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGl0bGUnKS5kYXRhc2V0LnRpdGxlID0gZG9jdW1lbnQudGl0bGU7XG5cbiAgJChcImJvZHlcIikub24oJ2NsaWNrJywgXCIuc2hlcGhlcmQtZm9vdGVyIC5zaGVwaGVyZC1idXR0b25cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBjb25zdCAkYnV0dG9uID0gJCh0aGlzKTtcbiAgICBjb25zdCBhY3Rpb24gPSAkYnV0dG9uLnRleHQoKSA9PSAnRXhpdCcgPyAnZXhpdCcgOiAnbmV4dCc7XG4gICAgY29uc3QgJG1vZGFsID0gJGJ1dHRvbi5wYXJlbnRzKFwiLnNoZXBoZXJkLWVsZW1lbnRcIik7XG4gICAgY29uc3Qgc3RlcElkID0gJG1vZGFsLmF0dHIoJ2RhdGEtc2hlcGhlcmQtc3RlcC1pZCcpO1xuICAgIEhULmFuYWx5dGljcy50cmFja0V2ZW50KHtcbiAgICAgIGNhdGVnb3J5OiAnUFQud2Fsa3Rocm91Z2gnLFxuICAgICAgYWN0aW9uOiBgJHtzdGVwSWR9OiR7YWN0aW9ufWAsXG4gICAgICBsYWJlbDogYCR7c3RlcElkfToke2FjdGlvbn1gXG4gICAgfSlcbiAgfSlcblxufSkiLCJpZiAodHlwZW9mIE9iamVjdC5hc3NpZ24gIT0gJ2Z1bmN0aW9uJykge1xuICAvLyBNdXN0IGJlIHdyaXRhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsIFwiYXNzaWduXCIsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgdmFyQXJncykgeyAvLyAubGVuZ3RoIG9mIGZ1bmN0aW9uIGlzIDJcbiAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgIGlmICh0YXJnZXQgPT0gbnVsbCkgeyAvLyBUeXBlRXJyb3IgaWYgdW5kZWZpbmVkIG9yIG51bGxcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDwgYXJndW1lbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07XG5cbiAgICAgICAgaWYgKG5leHRTb3VyY2UgIT0gbnVsbCkgeyAvLyBTa2lwIG92ZXIgaWYgdW5kZWZpbmVkIG9yIG51bGxcbiAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHRTb3VyY2UpIHtcbiAgICAgICAgICAgIC8vIEF2b2lkIGJ1Z3Mgd2hlbiBoYXNPd25Qcm9wZXJ0eSBpcyBzaGFkb3dlZFxuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXh0U291cmNlLCBuZXh0S2V5KSkge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdG87XG4gICAgfSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8vIC8vIGZyb206IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZpbmRcbi8vIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4vLyBpZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4vLyAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcnJheS5wcm90b3R5cGUsICdmaW5kJywge1xuLy8gICAgIHZhbHVlOiBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbi8vICAgICAgIC8vIDEuIExldCBPIGJlID8gVG9PYmplY3QodGhpcyB2YWx1ZSkuXG4vLyAgICAgICBpZiAodGhpcyA9PSBudWxsKSB7XG4vLyAgICAgICAgIHRocm93IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuLy8gICAgICAgfVxuXG4vLyAgICAgICB2YXIgbyA9IE9iamVjdCh0aGlzKTtcblxuLy8gICAgICAgLy8gMi4gTGV0IGxlbiBiZSA/IFRvTGVuZ3RoKD8gR2V0KE8sIFwibGVuZ3RoXCIpKS5cbi8vICAgICAgIHZhciBsZW4gPSBvLmxlbmd0aCA+Pj4gMDtcblxuLy8gICAgICAgLy8gMy4gSWYgSXNDYWxsYWJsZShwcmVkaWNhdGUpIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4vLyAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuLy8gICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3ByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbi8vICAgICAgIH1cblxuLy8gICAgICAgLy8gNC4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxuLy8gICAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG5cbi8vICAgICAgIC8vIDUuIExldCBrIGJlIDAuXG4vLyAgICAgICB2YXIgayA9IDA7XG5cbi8vICAgICAgIC8vIDYuIFJlcGVhdCwgd2hpbGUgayA8IGxlblxuLy8gICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcbi8vICAgICAgICAgLy8gYS4gTGV0IFBrIGJlICEgVG9TdHJpbmcoaykuXG4vLyAgICAgICAgIC8vIGIuIExldCBrVmFsdWUgYmUgPyBHZXQoTywgUGspLlxuLy8gICAgICAgICAvLyBjLiBMZXQgdGVzdFJlc3VsdCBiZSBUb0Jvb2xlYW4oPyBDYWxsKHByZWRpY2F0ZSwgVCwgwqsga1ZhbHVlLCBrLCBPIMK7KSkuXG4vLyAgICAgICAgIC8vIGQuIElmIHRlc3RSZXN1bHQgaXMgdHJ1ZSwgcmV0dXJuIGtWYWx1ZS5cbi8vICAgICAgICAgdmFyIGtWYWx1ZSA9IG9ba107XG4vLyAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCBrVmFsdWUsIGssIG8pKSB7XG4vLyAgICAgICAgICAgcmV0dXJuIGtWYWx1ZTtcbi8vICAgICAgICAgfVxuLy8gICAgICAgICAvLyBlLiBJbmNyZWFzZSBrIGJ5IDEuXG4vLyAgICAgICAgIGsrKztcbi8vICAgICAgIH1cblxuLy8gICAgICAgLy8gNy4gUmV0dXJuIHVuZGVmaW5lZC5cbi8vICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4vLyAgICAgfSxcbi8vICAgICBjb25maWd1cmFibGU6IHRydWUsXG4vLyAgICAgd3JpdGFibGU6IHRydWVcbi8vICAgfSk7XG4vLyB9XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2Nsb3Nlc3RcbmlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID1cbiAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fFxuICAgIEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuaWYgKCFFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0KSB7XG4gIEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbihzKSB7XG4gICAgdmFyIGVsID0gdGhpcztcblxuICAgIGRvIHtcbiAgICAgIGlmIChFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzLmNhbGwoZWwsIHMpKSByZXR1cm4gZWw7XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZTtcbiAgICB9IHdoaWxlIChlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbi8vIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2Vyei9qc19waWVjZS9ibG9iL21hc3Rlci9ET00vQ2hpbGROb2RlL2FmdGVyKCkvYWZ0ZXIoKS5tZFxuKGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnYWZ0ZXInKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaXRlbSwgJ2FmdGVyJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyKCkge1xuICAgICAgICB2YXIgYXJnQXJyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxcbiAgICAgICAgICBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBcbiAgICAgICAgYXJnQXJyLmZvckVhY2goZnVuY3Rpb24gKGFyZ0l0ZW0pIHtcbiAgICAgICAgICB2YXIgaXNOb2RlID0gYXJnSXRlbSBpbnN0YW5jZW9mIE5vZGU7XG4gICAgICAgICAgZG9jRnJhZy5hcHBlbmRDaGlsZChpc05vZGUgPyBhcmdJdGVtIDogZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGFyZ0l0ZW0pKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkb2NGcmFnLCB0aGlzLm5leHRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KShbRWxlbWVudC5wcm90b3R5cGUsIENoYXJhY3RlckRhdGEucHJvdG90eXBlLCBEb2N1bWVudFR5cGUucHJvdG90eXBlXSk7XG5cbmZ1bmN0aW9uIFJlcGxhY2VXaXRoUG9seWZpbGwoKSB7XG4gICd1c2Utc3RyaWN0JzsgLy8gRm9yIHNhZmFyaSwgYW5kIElFID4gMTBcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZSwgaSA9IGFyZ3VtZW50cy5sZW5ndGgsIGN1cnJlbnROb2RlO1xuICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICBpZiAoIWkpIC8vIGlmIHRoZXJlIGFyZSBubyBhcmd1bWVudHNcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIHdoaWxlIChpLS0pIHsgLy8gaS0tIGRlY3JlbWVudHMgaSBhbmQgcmV0dXJucyB0aGUgdmFsdWUgb2YgaSBiZWZvcmUgdGhlIGRlY3JlbWVudFxuICAgIGN1cnJlbnROb2RlID0gYXJndW1lbnRzW2ldO1xuICAgIGlmICh0eXBlb2YgY3VycmVudE5vZGUgIT09ICdvYmplY3QnKXtcbiAgICAgIGN1cnJlbnROb2RlID0gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGN1cnJlbnROb2RlKTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnROb2RlLnBhcmVudE5vZGUpe1xuICAgICAgY3VycmVudE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50Tm9kZSk7XG4gICAgfVxuICAgIC8vIHRoZSB2YWx1ZSBvZiBcImlcIiBiZWxvdyBpcyBhZnRlciB0aGUgZGVjcmVtZW50XG4gICAgaWYgKCFpKSAvLyBpZiBjdXJyZW50Tm9kZSBpcyB0aGUgZmlyc3QgYXJndW1lbnQgKGN1cnJlbnROb2RlID09PSBhcmd1bWVudHNbMF0pXG4gICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKGN1cnJlbnROb2RlLCB0aGlzKTtcbiAgICBlbHNlIC8vIGlmIGN1cnJlbnROb2RlIGlzbid0IHRoZSBmaXJzdFxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjdXJyZW50Tm9kZSwgdGhpcy5wcmV2aW91c1NpYmxpbmcpO1xuICB9XG59XG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoKVxuICAgIEVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gUmVwbGFjZVdpdGhQb2x5ZmlsbDtcbmlmICghQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUucmVwbGFjZVdpdGgpXG4gICAgQ2hhcmFjdGVyRGF0YS5wcm90b3R5cGUucmVwbGFjZVdpdGggPSBSZXBsYWNlV2l0aFBvbHlmaWxsO1xuaWYgKCFEb2N1bWVudFR5cGUucHJvdG90eXBlLnJlcGxhY2VXaXRoKSBcbiAgICBEb2N1bWVudFR5cGUucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gUmVwbGFjZVdpdGhQb2x5ZmlsbDtcblxuIiwiXG5oZWFkLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gIGlmICggbG9jYXRpb24ucGF0aG5hbWUgIT0gJy9jZ2kvcHQvc2VhcmNoJyApIHsgcmV0dXJuIDsgfVxuXG4gIHZhciAkZm9ybSA9ICQoXCIuZm9ybS1zZWFyY2gtdm9sdW1lXCIpO1xuICB2YXIgJGlucHV0X3ExID0gJGZvcm0uZmluZChcImlucHV0W25hbWU9J3ExJ11cIik7XG4gIHZhciAkaW5wdXRfc29ydCA9ICRmb3JtLmZpbmQoXCJpbnB1dFtuYW1lPSdzb3J0J11cIik7XG4gIHZhciAkaW5wdXRfc3RhcnQgPSAkZm9ybS5maW5kKFwiaW5wdXRbbmFtZT0nc3RhcnQnXVwiKTtcblxuICB2YXIgJGJvZHkgPSAkKFwiYm9keVwiKTtcblxuICB2YXIgc3VibWl0X2Zvcm0gPSBmdW5jdGlvbihldmVudCkge1xuICAgIEhULmJlZm9yZVVubG9hZFRpbWVvdXQgPSAxNTAwMDtcbiAgICB2YXIgJGZvcm1fID0gJGZvcm07XG5cbiAgICB2YXIgJHN1Ym1pdCA9ICRmb3JtXy5maW5kKFwiYnV0dG9uW3R5cGU9c3VibWl0XVwiKTtcbiAgICBpZiAoICRzdWJtaXQuaGFzQ2xhc3MoXCJidG4tbG9hZGluZ1wiKSApIHtcbiAgICAgIGFsZXJ0KFwiWW91ciBzZWFyY2ggcXVlcnkgaGFzIGJlZW4gc3VibWl0dGVkIGFuZCBpcyBjdXJyZW50bHkgYmVpbmcgcHJvY2Vzc2VkLlwiKTtcbiAgICAgIGlmICggZXZlbnQgKSB7IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyICRpbnB1dCA9ICRmb3JtXy5maW5kKFwiaW5wdXRbdHlwZT10ZXh0XVwiKVxuICAgIGlmICggISAkLnRyaW0oJGlucHV0LnZhbCgpKSApIHtcbiAgICAgIGJvb3Rib3guYWxlcnQoXCJQbGVhc2UgZW50ZXIgYSB0ZXJtIGluIHRoZSBzZWFyY2ggYm94LlwiKTtcbiAgICAgIGlmICggZXZlbnQgKSB7IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgJHN1Ym1pdC5hZGRDbGFzcyhcImJ0bi1sb2FkaW5nXCIpLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuXG4gICAgJCh3aW5kb3cpLm9uKCd1bmxvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICQod2luZG93KS50cmlnZ2VyKCd1bmRvLWxvYWRpbmcnKTtcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAkKHdpbmRvdykub24oJ3VuZG8tbG9hZGluZycsIGZ1bmN0aW9uKCkge1xuICAgICQoXCJidXR0b24uYnRuLWxvYWRpbmdcIikucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpLnJlbW92ZUNsYXNzKFwiYnRuLWxvYWRpbmdcIik7XG4gIH0pXG5cbiAgJChcImJvZHlcIikub24oJ3N1Ym1pdCcsICdmb3JtLmZvcm0tc2VhcmNoLXZvbHVtZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHN1Ym1pdF9mb3JtKGV2ZW50KTtcbiAgfSlcblxuICAkKFwiYnV0dG9uW2RhdGEtYWN0aW9uPSdzb3J0J11cIikub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICB2YXIgdmFsdWUgPSB0YXJnZXQuZGF0YXNldC52YWx1ZTtcbiAgICBpZiAoIHZhbHVlICE9ICRpbnB1dF9zb3J0LnZhbCgpICkge1xuICAgICAgJGlucHV0X3NvcnQudmFsKHZhbHVlKTtcbiAgICAgICRmb3JtLnN1Ym1pdCgpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH0pXG5cbiAgJChcImJ1dHRvbltkYXRhLWFjdGlvbj0nY2xlYXItc2VhcmNoJ11cIikub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAkaW5wdXRfcTEudmFsKCcnKTtcbiAgICAkKFwiLnJlc3VsdHMtc2VhcmNoLWZvcm1cIikubmV4dEFsbCgpLnJlbW92ZSgpO1xuICB9KVxuXG4gICQoXCIjYWN0aW9uLXN0YXJ0LWp1bXBcIikub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzeiA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgnc3onKSwgMTApO1xuICAgIHZhciB2YWx1ZSA9IHBhcnNlSW50KCQodGhpcykudmFsKCksIDEwKTtcblxuICAgIGNvbnN0IG1heCA9IHBhcnNlSW50KHRoaXMubWF4KTtcbiAgICBjb25zdCBtaW4gPSBwYXJzZUludCh0aGlzLm1pbik7XG5cbiAgICBpZiAoIGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbiApIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmRhdGFzZXQudmFsdWU7XG4gICAgICAkKFwiI2FjdGlvbi1zdGFydC1qdW1wLWVycm9yXCIpLnNob3coKTtcbiAgICAgIGFsZXJ0KGBQbGVhc2UgZW50ZXIgYSBudW1iZXIgYmV0d2VlbiAke21pbn0gLSAke21heH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQgPSAoIHZhbHVlIC0gMSApICogc3ogKyAxO1xuICAgICRpbnB1dF9zdGFydC52YWwoc3RhcnQpO1xuICAgICRmb3JtLnN1Ym1pdCgpO1xuXG4gICAgLy8gdmFyICRmb3JtXyA9ICQoXCIjZm9ybS1zZWFyY2gtdm9sdW1lXCIpO1xuICAgIC8vICRmb3JtXy5hcHBlbmQoYDxpbnB1dCBuYW1lPSdzdGFydCcgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwiJHtzdGFydH1cIiAvPmApO1xuICAgIC8vICRmb3JtXy5hcHBlbmQoYDxpbnB1dCBuYW1lPSdzeicgdHlwZT1cImhpZGRlblwiIHZhbHVlPVwiJHtzen1cIiAvPmApO1xuICAgIC8vICRmb3JtXy5zdWJtaXQoKTtcbiAgfSlcblxufSk7XG4iLCJoZWFkLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gICAgJChcImJvZHlcIikub24oJ2NsaWNrJywgJyN2ZXJzaW9uSWNvbicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBib290Ym94LmFsZXJ0KFwiPHA+VGhpcyBpcyB0aGUgZGF0ZSB3aGVuIHRoaXMgaXRlbSB3YXMgbGFzdCB1cGRhdGVkLiBWZXJzaW9uIGRhdGVzIGFyZSB1cGRhdGVkIHdoZW4gaW1wcm92ZW1lbnRzIHN1Y2ggYXMgaGlnaGVyIHF1YWxpdHkgc2NhbnMgb3IgbW9yZSBjb21wbGV0ZSBzY2FucyBoYXZlIGJlZW4gbWFkZS4gPGJyIC8+PGJyIC8+PGEgaHJlZj1cXFwiL2NnaS9mZWVkYmFjaz9wYWdlPWZvcm1cXFwiIGRhdGEtZGVmYXVsdC1mb3JtPVxcXCJkYXRhLWRlZmF1bHQtZm9ybVxcXCIgZGF0YS10b2dnbGU9XFxcImZlZWRiYWNrIHRyYWNraW5nLWFjdGlvblxcXCIgZGF0YS1pZD1cXFwiXFxcIiBkYXRhLXRyYWNraW5nLWFjdGlvbj1cXFwiU2hvdyBGZWVkYmFja1xcXCI+Q29udGFjdCB1czwvYT4gZm9yIG1vcmUgaW5mb3JtYXRpb24uPC9wPlwiKVxuICAgIH0pO1xuXG59KTtcbiJdfQ==
