"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * JQuery URL Parser plugin, v2.2.1
 * Developed and maintanined by Mark Perkins, mark@allmarkedup.com
 * Source repository: https://github.com/allmarkedup/jQuery-URL-Parser
 * Licensed under an MIT-style license. See https://github.com/allmarkedup/jQuery-URL-Parser/blob/master/LICENSE for details.
 */
;

(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD available; use anonymous module
    if (typeof jQuery !== 'undefined') {
      define(['jquery'], factory);
    } else {
      define([], factory);
    }
  } else {
    // No AMD available; mutate global vars
    if (typeof jQuery !== 'undefined') {
      factory(jQuery);
    } else {
      factory();
    }
  }
})(function ($, undefined) {
  var tag2attr = {
    a: 'href',
    img: 'src',
    form: 'action',
    base: 'href',
    script: 'src',
    iframe: 'src',
    link: 'href'
  },
      key = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'fragment'],
      // keys available to query
  aliases = {
    'anchor': 'fragment'
  },
      // aliases for backwards compatability
  parser = {
    strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
    //less intuitive, more accurate to the specs
    loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/ // more intuitive, fails on relative paths and deviates from specs

  },
      toString = Object.prototype.toString,
      isint = /^[0-9]+$/;

  function parseUri(url, strictMode) {
    var str = decodeURI(url),
        res = parser[strictMode || false ? 'strict' : 'loose'].exec(str),
        uri = {
      attr: {},
      param: {},
      seg: {}
    },
        i = 14;

    while (i--) {
      uri.attr[key[i]] = res[i] || '';
    } // build query and fragment parameters		


    uri.param['query'] = parseString(uri.attr['query']);
    uri.param['fragment'] = parseString(uri.attr['fragment']); // split path and fragement into segments		

    uri.seg['path'] = uri.attr.path.replace(/^\/+|\/+$/g, '').split('/');
    uri.seg['fragment'] = uri.attr.fragment.replace(/^\/+|\/+$/g, '').split('/'); // compile a 'base' domain attribute        

    uri.attr['base'] = uri.attr.host ? (uri.attr.protocol ? uri.attr.protocol + '://' + uri.attr.host : uri.attr.host) + (uri.attr.port ? ':' + uri.attr.port : '') : '';
    return uri;
  }

  ;

  function getAttrName(elm) {
    var tn = elm.tagName;
    if (typeof tn !== 'undefined') return tag2attr[tn.toLowerCase()];
    return tn;
  }

  function promote(parent, key) {
    if (parent[key].length == 0) return parent[key] = {};
    var t = {};

    for (var i in parent[key]) {
      t[i] = parent[key][i];
    }

    parent[key] = t;
    return t;
  }

  function parse(parts, parent, key, val) {
    var part = parts.shift();

    if (!part) {
      if (isArray(parent[key])) {
        parent[key].push(val);
      } else if ('object' == _typeof(parent[key])) {
        parent[key] = val;
      } else if ('undefined' == typeof parent[key]) {
        parent[key] = val;
      } else {
        parent[key] = [parent[key], val];
      }
    } else {
      var obj = parent[key] = parent[key] || [];

      if (']' == part) {
        if (isArray(obj)) {
          if ('' != val) obj.push(val);
        } else if ('object' == _typeof(obj)) {
          obj[keys(obj).length] = val;
        } else {
          obj = parent[key] = [parent[key], val];
        }
      } else if (~part.indexOf(']')) {
        part = part.substr(0, part.length - 1);
        if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
        parse(parts, obj, part, val); // key
      } else {
        if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
        parse(parts, obj, part, val);
      }
    }
  }

  function merge(parent, key, val) {
    if (~key.indexOf(']')) {
      var parts = key.split('['),
          len = parts.length,
          last = len - 1;
      parse(parts, parent, 'base', val);
    } else {
      if (!isint.test(key) && isArray(parent.base)) {
        var t = {};

        for (var k in parent.base) {
          t[k] = parent.base[k];
        }

        parent.base = t;
      }

      set(parent.base, key, val);
    }

    return parent;
  }

  function parseString(str) {
    return reduce(String(str).split(/&|;/), function (ret, pair) {
      try {
        pair = decodeURIComponent(pair.replace(/\+/g, ' '));
      } catch (e) {// ignore
      }

      var eql = pair.indexOf('='),
          brace = lastBraceInKey(pair),
          key = pair.substr(0, brace || eql),
          val = pair.substr(brace || eql, pair.length),
          val = val.substr(val.indexOf('=') + 1, val.length);
      if ('' == key) key = pair, val = '';
      return merge(ret, key, val);
    }, {
      base: {}
    }).base;
  }

  function set(obj, key, val) {
    var v = obj[key];

    if (undefined === v) {
      obj[key] = val;
    } else if (isArray(v)) {
      v.push(val);
    } else {
      obj[key] = [v, val];
    }
  }

  function lastBraceInKey(str) {
    var len = str.length,
        brace,
        c;

    for (var i = 0; i < len; ++i) {
      c = str[i];
      if (']' == c) brace = false;
      if ('[' == c) brace = true;
      if ('=' == c && !brace) return i;
    }
  }

  function reduce(obj, accumulator) {
    var i = 0,
        l = obj.length >> 0,
        curr = arguments[2];

    while (i < l) {
      if (i in obj) curr = accumulator.call(undefined, curr, obj[i], i, obj);
      ++i;
    }

    return curr;
  }

  function isArray(vArg) {
    return Object.prototype.toString.call(vArg) === "[object Array]";
  }

  function keys(obj) {
    var keys = [];

    for (prop in obj) {
      if (obj.hasOwnProperty(prop)) keys.push(prop);
    }

    return keys;
  }

  function purl(url, strictMode) {
    if (arguments.length === 1 && url === true) {
      strictMode = true;
      url = undefined;
    }

    strictMode = strictMode || false;
    url = url || window.location.toString();
    return {
      data: parseUri(url, strictMode),
      // get various attributes from the URI
      attr: function attr(_attr) {
        _attr = aliases[_attr] || _attr;
        return typeof _attr !== 'undefined' ? this.data.attr[_attr] : this.data.attr;
      },
      // return query string parameters
      param: function param(_param) {
        return typeof _param !== 'undefined' ? this.data.param.query[_param] : this.data.param.query;
      },
      // return fragment parameters
      fparam: function fparam(param) {
        return typeof param !== 'undefined' ? this.data.param.fragment[param] : this.data.param.fragment;
      },
      // return path segments
      segment: function segment(seg) {
        if (typeof seg === 'undefined') {
          return this.data.seg.path;
        } else {
          seg = seg < 0 ? this.data.seg.path.length + seg : seg - 1; // negative segments count from the end

          return this.data.seg.path[seg];
        }
      },
      // return fragment segments
      fsegment: function fsegment(seg) {
        if (typeof seg === 'undefined') {
          return this.data.seg.fragment;
        } else {
          seg = seg < 0 ? this.data.seg.fragment.length + seg : seg - 1; // negative segments count from the end

          return this.data.seg.fragment[seg];
        }
      }
    };
  }

  ;

  if (typeof $ !== 'undefined') {
    $.fn.url = function (strictMode) {
      var url = '';

      if (this.length) {
        url = $(this).attr(getAttrName(this[0])) || '';
      }

      return purl(url, strictMode);
    };

    $.url = purl;
  } else {
    window.purl = purl;
  }
});
/**
 * @popperjs/core v2.6.0 - MIT License
 */
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = e || self).Popper = {});
}(void 0, function (e) {
  function t(e) {
    return {
      width: (e = e.getBoundingClientRect()).width,
      height: e.height,
      top: e.top,
      right: e.right,
      bottom: e.bottom,
      left: e.left,
      x: e.left,
      y: e.top
    };
  }

  function n(e) {
    return "[object Window]" !== e.toString() ? (e = e.ownerDocument) && e.defaultView || window : e;
  }

  function r(e) {
    return {
      scrollLeft: (e = n(e)).pageXOffset,
      scrollTop: e.pageYOffset
    };
  }

  function o(e) {
    return e instanceof n(e).Element || e instanceof Element;
  }

  function i(e) {
    return e instanceof n(e).HTMLElement || e instanceof HTMLElement;
  }

  function a(e) {
    return e ? (e.nodeName || "").toLowerCase() : null;
  }

  function s(e) {
    return ((o(e) ? e.ownerDocument : e.document) || window.document).documentElement;
  }

  function f(e) {
    return t(s(e)).left + r(e).scrollLeft;
  }

  function c(e) {
    return n(e).getComputedStyle(e);
  }

  function p(e) {
    return e = c(e), /auto|scroll|overlay|hidden/.test(e.overflow + e.overflowY + e.overflowX);
  }

  function l(e, o, c) {
    void 0 === c && (c = !1);
    var l = s(o);
    e = t(e);
    var u = i(o),
        d = {
      scrollLeft: 0,
      scrollTop: 0
    },
        m = {
      x: 0,
      y: 0
    };
    return (u || !u && !c) && (("body" !== a(o) || p(l)) && (d = o !== n(o) && i(o) ? {
      scrollLeft: o.scrollLeft,
      scrollTop: o.scrollTop
    } : r(o)), i(o) ? ((m = t(o)).x += o.clientLeft, m.y += o.clientTop) : l && (m.x = f(l))), {
      x: e.left + d.scrollLeft - m.x,
      y: e.top + d.scrollTop - m.y,
      width: e.width,
      height: e.height
    };
  }

  function u(e) {
    return {
      x: e.offsetLeft,
      y: e.offsetTop,
      width: e.offsetWidth,
      height: e.offsetHeight
    };
  }

  function d(e) {
    return "html" === a(e) ? e : e.assignedSlot || e.parentNode || e.host || s(e);
  }

  function m(e, t) {
    void 0 === t && (t = []);

    var r = function e(t) {
      return 0 <= ["html", "body", "#document"].indexOf(a(t)) ? t.ownerDocument.body : i(t) && p(t) ? t : e(d(t));
    }(e);

    e = "body" === a(r);
    var o = n(r);
    return r = e ? [o].concat(o.visualViewport || [], p(r) ? r : []) : r, t = t.concat(r), e ? t : t.concat(m(d(r)));
  }

  function h(e) {
    if (!i(e) || "fixed" === c(e).position) return null;

    if (e = e.offsetParent) {
      var t = s(e);
      if ("body" === a(e) && "static" === c(e).position && "static" !== c(t).position) return t;
    }

    return e;
  }

  function g(e) {
    for (var t = n(e), r = h(e); r && 0 <= ["table", "td", "th"].indexOf(a(r)) && "static" === c(r).position;) {
      r = h(r);
    }

    if (r && "body" === a(r) && "static" === c(r).position) return t;
    if (!r) e: {
      for (e = d(e); i(e) && 0 > ["html", "body"].indexOf(a(e));) {
        if ("none" !== (r = c(e)).transform || "none" !== r.perspective || r.willChange && "auto" !== r.willChange) {
          r = e;
          break e;
        }

        e = e.parentNode;
      }

      r = null;
    }
    return r || t;
  }

  function v(e) {
    var t = new Map(),
        n = new Set(),
        r = [];
    return e.forEach(function (e) {
      t.set(e.name, e);
    }), e.forEach(function (e) {
      n.has(e.name) || function e(o) {
        n.add(o.name), [].concat(o.requires || [], o.requiresIfExists || []).forEach(function (r) {
          n.has(r) || (r = t.get(r)) && e(r);
        }), r.push(o);
      }(e);
    }), r;
  }

  function b(e) {
    var t;
    return function () {
      return t || (t = new Promise(function (n) {
        Promise.resolve().then(function () {
          t = void 0, n(e());
        });
      })), t;
    };
  }

  function y(e) {
    return e.split("-")[0];
  }

  function O(e, t) {
    var r,
        o = t.getRootNode && t.getRootNode();
    if (e.contains(t)) return !0;
    if ((r = o) && (r = o instanceof (r = n(o).ShadowRoot) || o instanceof ShadowRoot), r) do {
      if (t && e.isSameNode(t)) return !0;
      t = t.parentNode || t.host;
    } while (t);
    return !1;
  }

  function w(e) {
    return Object.assign(Object.assign({}, e), {}, {
      left: e.x,
      top: e.y,
      right: e.x + e.width,
      bottom: e.y + e.height
    });
  }

  function x(e, o) {
    if ("viewport" === o) {
      o = n(e);
      var a = s(e);
      o = o.visualViewport;
      var p = a.clientWidth;
      a = a.clientHeight;
      var l = 0,
          u = 0;
      o && (p = o.width, a = o.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (l = o.offsetLeft, u = o.offsetTop)), e = w(e = {
        width: p,
        height: a,
        x: l + f(e),
        y: u
      });
    } else i(o) ? ((e = t(o)).top += o.clientTop, e.left += o.clientLeft, e.bottom = e.top + o.clientHeight, e.right = e.left + o.clientWidth, e.width = o.clientWidth, e.height = o.clientHeight, e.x = e.left, e.y = e.top) : (u = s(e), e = s(u), l = r(u), o = u.ownerDocument.body, p = Math.max(e.scrollWidth, e.clientWidth, o ? o.scrollWidth : 0, o ? o.clientWidth : 0), a = Math.max(e.scrollHeight, e.clientHeight, o ? o.scrollHeight : 0, o ? o.clientHeight : 0), u = -l.scrollLeft + f(u), l = -l.scrollTop, "rtl" === c(o || e).direction && (u += Math.max(e.clientWidth, o ? o.clientWidth : 0) - p), e = w({
      width: p,
      height: a,
      x: u,
      y: l
    }));

    return e;
  }

  function j(e, t, n) {
    return t = "clippingParents" === t ? function (e) {
      var t = m(d(e)),
          n = 0 <= ["absolute", "fixed"].indexOf(c(e).position) && i(e) ? g(e) : e;
      return o(n) ? t.filter(function (e) {
        return o(e) && O(e, n) && "body" !== a(e);
      }) : [];
    }(e) : [].concat(t), (n = (n = [].concat(t, [n])).reduce(function (t, n) {
      return n = x(e, n), t.top = Math.max(n.top, t.top), t.right = Math.min(n.right, t.right), t.bottom = Math.min(n.bottom, t.bottom), t.left = Math.max(n.left, t.left), t;
    }, x(e, n[0]))).width = n.right - n.left, n.height = n.bottom - n.top, n.x = n.left, n.y = n.top, n;
  }

  function M(e) {
    return 0 <= ["top", "bottom"].indexOf(e) ? "x" : "y";
  }

  function E(e) {
    var t = e.reference,
        n = e.element,
        r = (e = e.placement) ? y(e) : null;
    e = e ? e.split("-")[1] : null;
    var o = t.x + t.width / 2 - n.width / 2,
        i = t.y + t.height / 2 - n.height / 2;

    switch (r) {
      case "top":
        o = {
          x: o,
          y: t.y - n.height
        };
        break;

      case "bottom":
        o = {
          x: o,
          y: t.y + t.height
        };
        break;

      case "right":
        o = {
          x: t.x + t.width,
          y: i
        };
        break;

      case "left":
        o = {
          x: t.x - n.width,
          y: i
        };
        break;

      default:
        o = {
          x: t.x,
          y: t.y
        };
    }

    if (null != (r = r ? M(r) : null)) switch (i = "y" === r ? "height" : "width", e) {
      case "start":
        o[r] -= t[i] / 2 - n[i] / 2;
        break;

      case "end":
        o[r] += t[i] / 2 - n[i] / 2;
    }
    return o;
  }

  function D(e) {
    return Object.assign(Object.assign({}, {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }), e);
  }

  function P(e, t) {
    return t.reduce(function (t, n) {
      return t[n] = e, t;
    }, {});
  }

  function L(e, n) {
    void 0 === n && (n = {});
    var r = n;
    n = void 0 === (n = r.placement) ? e.placement : n;
    var i = r.boundary,
        a = void 0 === i ? "clippingParents" : i,
        f = void 0 === (i = r.rootBoundary) ? "viewport" : i;
    i = void 0 === (i = r.elementContext) ? "popper" : i;
    var c = r.altBoundary,
        p = void 0 !== c && c;
    r = D("number" != typeof (r = void 0 === (r = r.padding) ? 0 : r) ? r : P(r, T));
    var l = e.elements.reference;
    c = e.rects.popper, a = j(o(p = e.elements[p ? "popper" === i ? "reference" : "popper" : i]) ? p : p.contextElement || s(e.elements.popper), a, f), p = E({
      reference: f = t(l),
      element: c,
      strategy: "absolute",
      placement: n
    }), c = w(Object.assign(Object.assign({}, c), p)), f = "popper" === i ? c : f;
    var u = {
      top: a.top - f.top + r.top,
      bottom: f.bottom - a.bottom + r.bottom,
      left: a.left - f.left + r.left,
      right: f.right - a.right + r.right
    };

    if (e = e.modifiersData.offset, "popper" === i && e) {
      var d = e[n];
      Object.keys(u).forEach(function (e) {
        var t = 0 <= ["right", "bottom"].indexOf(e) ? 1 : -1,
            n = 0 <= ["top", "bottom"].indexOf(e) ? "y" : "x";
        u[e] += d[n] * t;
      });
    }

    return u;
  }

  function k() {
    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) {
      t[n] = arguments[n];
    }

    return !t.some(function (e) {
      return !(e && "function" == typeof e.getBoundingClientRect);
    });
  }

  function B(e) {
    void 0 === e && (e = {});
    var t = e.defaultModifiers,
        n = void 0 === t ? [] : t,
        r = void 0 === (e = e.defaultOptions) ? V : e;
    return function (e, t, i) {
      function a() {
        f.forEach(function (e) {
          return e();
        }), f = [];
      }

      void 0 === i && (i = r);
      var s = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign(Object.assign({}, V), r),
        modifiersData: {},
        elements: {
          reference: e,
          popper: t
        },
        attributes: {},
        styles: {}
      },
          f = [],
          c = !1,
          p = {
        state: s,
        setOptions: function setOptions(i) {
          return a(), s.options = Object.assign(Object.assign(Object.assign({}, r), s.options), i), s.scrollParents = {
            reference: o(e) ? m(e) : e.contextElement ? m(e.contextElement) : [],
            popper: m(t)
          }, i = function (e) {
            var t = v(e);
            return N.reduce(function (e, n) {
              return e.concat(t.filter(function (e) {
                return e.phase === n;
              }));
            }, []);
          }(function (e) {
            var t = e.reduce(function (e, t) {
              var n = e[t.name];
              return e[t.name] = n ? Object.assign(Object.assign(Object.assign({}, n), t), {}, {
                options: Object.assign(Object.assign({}, n.options), t.options),
                data: Object.assign(Object.assign({}, n.data), t.data)
              }) : t, e;
            }, {});
            return Object.keys(t).map(function (e) {
              return t[e];
            });
          }([].concat(n, s.options.modifiers))), s.orderedModifiers = i.filter(function (e) {
            return e.enabled;
          }), s.orderedModifiers.forEach(function (e) {
            var t = e.name,
                n = e.options;
            n = void 0 === n ? {} : n, "function" == typeof (e = e.effect) && (t = e({
              state: s,
              name: t,
              instance: p,
              options: n
            }), f.push(t || function () {}));
          }), p.update();
        },
        forceUpdate: function forceUpdate() {
          if (!c) {
            var e = s.elements,
                t = e.reference;
            if (k(t, e = e.popper)) for (s.rects = {
              reference: l(t, g(e), "fixed" === s.options.strategy),
              popper: u(e)
            }, s.reset = !1, s.placement = s.options.placement, s.orderedModifiers.forEach(function (e) {
              return s.modifiersData[e.name] = Object.assign({}, e.data);
            }), t = 0; t < s.orderedModifiers.length; t++) {
              if (!0 === s.reset) s.reset = !1, t = -1;else {
                var n = s.orderedModifiers[t];
                e = n.fn;
                var r = n.options;
                r = void 0 === r ? {} : r, n = n.name, "function" == typeof e && (s = e({
                  state: s,
                  options: r,
                  name: n,
                  instance: p
                }) || s);
              }
            }
          }
        },
        update: b(function () {
          return new Promise(function (e) {
            p.forceUpdate(), e(s);
          });
        }),
        destroy: function destroy() {
          a(), c = !0;
        }
      };
      return k(e, t) ? (p.setOptions(i).then(function (e) {
        !c && i.onFirstUpdate && i.onFirstUpdate(e);
      }), p) : p;
    };
  }

  function W(e) {
    var t,
        r = e.popper,
        o = e.popperRect,
        i = e.placement,
        a = e.offsets,
        f = e.position,
        c = e.gpuAcceleration,
        p = e.adaptive;
    e.roundOffsets ? (e = window.devicePixelRatio || 1, e = {
      x: Math.round(a.x * e) / e || 0,
      y: Math.round(a.y * e) / e || 0
    }) : e = a;
    var l = e;
    e = void 0 === (e = l.x) ? 0 : e, l = void 0 === (l = l.y) ? 0 : l;
    var u = a.hasOwnProperty("x");
    a = a.hasOwnProperty("y");
    var d,
        m = "left",
        h = "top",
        v = window;

    if (p) {
      var b = g(r);
      b === n(r) && (b = s(r)), "top" === i && (h = "bottom", l -= b.clientHeight - o.height, l *= c ? 1 : -1), "left" === i && (m = "right", e -= b.clientWidth - o.width, e *= c ? 1 : -1);
    }

    return r = Object.assign({
      position: f
    }, p && z), c ? Object.assign(Object.assign({}, r), {}, ((d = {})[h] = a ? "0" : "", d[m] = u ? "0" : "", d.transform = 2 > (v.devicePixelRatio || 1) ? "translate(" + e + "px, " + l + "px)" : "translate3d(" + e + "px, " + l + "px, 0)", d)) : Object.assign(Object.assign({}, r), {}, ((t = {})[h] = a ? l + "px" : "", t[m] = u ? e + "px" : "", t.transform = "", t));
  }

  function A(e) {
    return e.replace(/left|right|bottom|top/g, function (e) {
      return G[e];
    });
  }

  function H(e) {
    return e.replace(/start|end/g, function (e) {
      return J[e];
    });
  }

  function R(e, t, n) {
    return void 0 === n && (n = {
      x: 0,
      y: 0
    }), {
      top: e.top - t.height - n.y,
      right: e.right - t.width + n.x,
      bottom: e.bottom - t.height + n.y,
      left: e.left - t.width - n.x
    };
  }

  function S(e) {
    return ["top", "right", "bottom", "left"].some(function (t) {
      return 0 <= e[t];
    });
  }

  var T = ["top", "bottom", "right", "left"],
      q = T.reduce(function (e, t) {
    return e.concat([t + "-start", t + "-end"]);
  }, []),
      C = [].concat(T, ["auto"]).reduce(function (e, t) {
    return e.concat([t, t + "-start", t + "-end"]);
  }, []),
      N = "beforeRead read afterRead beforeMain main afterMain beforeWrite write afterWrite".split(" "),
      V = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  },
      I = {
    passive: !0
  },
      _ = {
    name: "eventListeners",
    enabled: !0,
    phase: "write",
    fn: function fn() {},
    effect: function effect(e) {
      var t = e.state,
          r = e.instance,
          o = (e = e.options).scroll,
          i = void 0 === o || o,
          a = void 0 === (e = e.resize) || e,
          s = n(t.elements.popper),
          f = [].concat(t.scrollParents.reference, t.scrollParents.popper);
      return i && f.forEach(function (e) {
        e.addEventListener("scroll", r.update, I);
      }), a && s.addEventListener("resize", r.update, I), function () {
        i && f.forEach(function (e) {
          e.removeEventListener("scroll", r.update, I);
        }), a && s.removeEventListener("resize", r.update, I);
      };
    },
    data: {}
  },
      U = {
    name: "popperOffsets",
    enabled: !0,
    phase: "read",
    fn: function fn(e) {
      var t = e.state;
      t.modifiersData[e.name] = E({
        reference: t.rects.reference,
        element: t.rects.popper,
        strategy: "absolute",
        placement: t.placement
      });
    },
    data: {}
  },
      z = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  },
      F = {
    name: "computeStyles",
    enabled: !0,
    phase: "beforeWrite",
    fn: function fn(e) {
      var t = e.state,
          n = e.options;
      e = void 0 === (e = n.gpuAcceleration) || e;
      var r = n.adaptive;
      r = void 0 === r || r, n = void 0 === (n = n.roundOffsets) || n, e = {
        placement: y(t.placement),
        popper: t.elements.popper,
        popperRect: t.rects.popper,
        gpuAcceleration: e
      }, null != t.modifiersData.popperOffsets && (t.styles.popper = Object.assign(Object.assign({}, t.styles.popper), W(Object.assign(Object.assign({}, e), {}, {
        offsets: t.modifiersData.popperOffsets,
        position: t.options.strategy,
        adaptive: r,
        roundOffsets: n
      })))), null != t.modifiersData.arrow && (t.styles.arrow = Object.assign(Object.assign({}, t.styles.arrow), W(Object.assign(Object.assign({}, e), {}, {
        offsets: t.modifiersData.arrow,
        position: "absolute",
        adaptive: !1,
        roundOffsets: n
      })))), t.attributes.popper = Object.assign(Object.assign({}, t.attributes.popper), {}, {
        "data-popper-placement": t.placement
      });
    },
    data: {}
  },
      X = {
    name: "applyStyles",
    enabled: !0,
    phase: "write",
    fn: function fn(e) {
      var t = e.state;
      Object.keys(t.elements).forEach(function (e) {
        var n = t.styles[e] || {},
            r = t.attributes[e] || {},
            o = t.elements[e];
        i(o) && a(o) && (Object.assign(o.style, n), Object.keys(r).forEach(function (e) {
          var t = r[e];
          !1 === t ? o.removeAttribute(e) : o.setAttribute(e, !0 === t ? "" : t);
        }));
      });
    },
    effect: function effect(e) {
      var t = e.state,
          n = {
        popper: {
          position: t.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      return Object.assign(t.elements.popper.style, n.popper), t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function () {
        Object.keys(t.elements).forEach(function (e) {
          var r = t.elements[e],
              o = t.attributes[e] || {};
          e = Object.keys(t.styles.hasOwnProperty(e) ? t.styles[e] : n[e]).reduce(function (e, t) {
            return e[t] = "", e;
          }, {}), i(r) && a(r) && (Object.assign(r.style, e), Object.keys(o).forEach(function (e) {
            r.removeAttribute(e);
          }));
        });
      };
    },
    requires: ["computeStyles"]
  },
      Y = {
    name: "offset",
    enabled: !0,
    phase: "main",
    requires: ["popperOffsets"],
    fn: function fn(e) {
      var t = e.state,
          n = e.name,
          r = void 0 === (e = e.options.offset) ? [0, 0] : e,
          o = (e = C.reduce(function (e, n) {
        var o = t.rects,
            i = y(n),
            a = 0 <= ["left", "top"].indexOf(i) ? -1 : 1,
            s = "function" == typeof r ? r(Object.assign(Object.assign({}, o), {}, {
          placement: n
        })) : r;
        return o = (o = s[0]) || 0, s = ((s = s[1]) || 0) * a, i = 0 <= ["left", "right"].indexOf(i) ? {
          x: s,
          y: o
        } : {
          x: o,
          y: s
        }, e[n] = i, e;
      }, {}))[t.placement],
          i = o.x;
      o = o.y, null != t.modifiersData.popperOffsets && (t.modifiersData.popperOffsets.x += i, t.modifiersData.popperOffsets.y += o), t.modifiersData[n] = e;
    }
  },
      G = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  },
      J = {
    start: "end",
    end: "start"
  },
      K = {
    name: "flip",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t = e.state,
          n = e.options;

      if (e = e.name, !t.modifiersData[e]._skip) {
        var r = n.mainAxis;
        r = void 0 === r || r;
        var o = n.altAxis;
        o = void 0 === o || o;
        var i = n.fallbackPlacements,
            a = n.padding,
            s = n.boundary,
            f = n.rootBoundary,
            c = n.altBoundary,
            p = n.flipVariations,
            l = void 0 === p || p,
            u = n.allowedAutoPlacements;
        p = y(n = t.options.placement), i = i || (p !== n && l ? function (e) {
          if ("auto" === y(e)) return [];
          var t = A(e);
          return [H(e), t, H(t)];
        }(n) : [A(n)]);
        var d = [n].concat(i).reduce(function (e, n) {
          return e.concat("auto" === y(n) ? function (e, t) {
            void 0 === t && (t = {});
            var n = t.boundary,
                r = t.rootBoundary,
                o = t.padding,
                i = t.flipVariations,
                a = t.allowedAutoPlacements,
                s = void 0 === a ? C : a,
                f = t.placement.split("-")[1];
            0 === (i = (t = f ? i ? q : q.filter(function (e) {
              return e.split("-")[1] === f;
            }) : T).filter(function (e) {
              return 0 <= s.indexOf(e);
            })).length && (i = t);
            var c = i.reduce(function (t, i) {
              return t[i] = L(e, {
                placement: i,
                boundary: n,
                rootBoundary: r,
                padding: o
              })[y(i)], t;
            }, {});
            return Object.keys(c).sort(function (e, t) {
              return c[e] - c[t];
            });
          }(t, {
            placement: n,
            boundary: s,
            rootBoundary: f,
            padding: a,
            flipVariations: l,
            allowedAutoPlacements: u
          }) : n);
        }, []);
        n = t.rects.reference, i = t.rects.popper;
        var m = new Map();
        p = !0;

        for (var h = d[0], g = 0; g < d.length; g++) {
          var v = d[g],
              b = y(v),
              O = "start" === v.split("-")[1],
              w = 0 <= ["top", "bottom"].indexOf(b),
              x = w ? "width" : "height",
              j = L(t, {
            placement: v,
            boundary: s,
            rootBoundary: f,
            altBoundary: c,
            padding: a
          });

          if (O = w ? O ? "right" : "left" : O ? "bottom" : "top", n[x] > i[x] && (O = A(O)), x = A(O), w = [], r && w.push(0 >= j[b]), o && w.push(0 >= j[O], 0 >= j[x]), w.every(function (e) {
            return e;
          })) {
            h = v, p = !1;
            break;
          }

          m.set(v, w);
        }

        if (p) for (r = function r(e) {
          var t = d.find(function (t) {
            if (t = m.get(t)) return t.slice(0, e).every(function (e) {
              return e;
            });
          });
          if (t) return h = t, "break";
        }, o = l ? 3 : 1; 0 < o && "break" !== r(o); o--) {
          ;
        }
        t.placement !== h && (t.modifiersData[e]._skip = !0, t.placement = h, t.reset = !0);
      }
    },
    requiresIfExists: ["offset"],
    data: {
      _skip: !1
    }
  },
      Q = {
    name: "preventOverflow",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t = e.state,
          n = e.options;
      e = e.name;
      var r = n.mainAxis,
          o = void 0 === r || r;
      r = void 0 !== (r = n.altAxis) && r;
      var i = n.tether;
      i = void 0 === i || i;
      var a = n.tetherOffset,
          s = void 0 === a ? 0 : a;
      n = L(t, {
        boundary: n.boundary,
        rootBoundary: n.rootBoundary,
        padding: n.padding,
        altBoundary: n.altBoundary
      }), a = y(t.placement);
      var f = t.placement.split("-")[1],
          c = !f,
          p = M(a);
      a = "x" === p ? "y" : "x";
      var l = t.modifiersData.popperOffsets,
          d = t.rects.reference,
          m = t.rects.popper,
          h = "function" == typeof s ? s(Object.assign(Object.assign({}, t.rects), {}, {
        placement: t.placement
      })) : s;

      if (s = {
        x: 0,
        y: 0
      }, l) {
        if (o) {
          var v = "y" === p ? "top" : "left",
              b = "y" === p ? "bottom" : "right",
              O = "y" === p ? "height" : "width";
          o = l[p];
          var w = l[p] + n[v],
              x = l[p] - n[b],
              j = i ? -m[O] / 2 : 0,
              E = "start" === f ? d[O] : m[O];
          f = "start" === f ? -m[O] : -d[O], m = t.elements.arrow, m = i && m ? u(m) : {
            width: 0,
            height: 0
          };
          var D = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          };
          v = D[v], b = D[b], m = Math.max(0, Math.min(d[O], m[O])), E = c ? d[O] / 2 - j - m - v - h : E - m - v - h, c = c ? -d[O] / 2 + j + m + b + h : f + m + b + h, h = t.elements.arrow && g(t.elements.arrow), d = t.modifiersData.offset ? t.modifiersData.offset[t.placement][p] : 0, h = l[p] + E - d - (h ? "y" === p ? h.clientTop || 0 : h.clientLeft || 0 : 0), c = l[p] + c - d, i = Math.max(i ? Math.min(w, h) : w, Math.min(o, i ? Math.max(x, c) : x)), l[p] = i, s[p] = i - o;
        }

        r && (r = l[a], i = Math.max(r + n["x" === p ? "top" : "left"], Math.min(r, r - n["x" === p ? "bottom" : "right"])), l[a] = i, s[a] = i - r), t.modifiersData[e] = s;
      }
    },
    requiresIfExists: ["offset"]
  },
      Z = {
    name: "arrow",
    enabled: !0,
    phase: "main",
    fn: function fn(e) {
      var t,
          n = e.state;
      e = e.name;
      var r = n.elements.arrow,
          o = n.modifiersData.popperOffsets,
          i = y(n.placement),
          a = M(i);

      if (i = 0 <= ["left", "right"].indexOf(i) ? "height" : "width", r && o) {
        var s = n.modifiersData[e + "#persistent"].padding,
            f = u(r),
            c = "y" === a ? "top" : "left",
            p = "y" === a ? "bottom" : "right",
            l = n.rects.reference[i] + n.rects.reference[a] - o[a] - n.rects.popper[i];
        o = o[a] - n.rects.reference[a], l = (r = (r = g(r)) ? "y" === a ? r.clientHeight || 0 : r.clientWidth || 0 : 0) / 2 - f[i] / 2 + (l / 2 - o / 2), i = Math.max(s[c], Math.min(l, r - f[i] - s[p])), n.modifiersData[e] = ((t = {})[a] = i, t.centerOffset = i - l, t);
      }
    },
    effect: function effect(e) {
      var t = e.state,
          n = e.options;
      e = e.name;
      var r = n.element;

      if (r = void 0 === r ? "[data-popper-arrow]" : r, n = void 0 === (n = n.padding) ? 0 : n, null != r) {
        if ("string" == typeof r && !(r = t.elements.popper.querySelector(r))) return;
        O(t.elements.popper, r) && (t.elements.arrow = r, t.modifiersData[e + "#persistent"] = {
          padding: D("number" != typeof n ? n : P(n, T))
        });
      }
    },
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  },
      $ = {
    name: "hide",
    enabled: !0,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: function fn(e) {
      var t = e.state;
      e = e.name;
      var n = t.rects.reference,
          r = t.rects.popper,
          o = t.modifiersData.preventOverflow,
          i = L(t, {
        elementContext: "reference"
      }),
          a = L(t, {
        altBoundary: !0
      });
      n = R(i, n), r = R(a, r, o), o = S(n), a = S(r), t.modifiersData[e] = {
        referenceClippingOffsets: n,
        popperEscapeOffsets: r,
        isReferenceHidden: o,
        hasPopperEscaped: a
      }, t.attributes.popper = Object.assign(Object.assign({}, t.attributes.popper), {}, {
        "data-popper-reference-hidden": o,
        "data-popper-escaped": a
      });
    }
  },
      ee = B({
    defaultModifiers: [_, U, F, X]
  }),
      te = [_, U, F, X, Y, K, Q, Z, $],
      ne = B({
    defaultModifiers: te
  });
  e.applyStyles = X, e.arrow = Z, e.computeStyles = F, e.createPopper = ne, e.createPopperLite = ee, e.defaultModifiers = te, e.detectOverflow = L, e.eventListeners = _, e.flip = K, e.hide = $, e.offset = Y, e.popperGenerator = B, e.popperOffsets = U, e.preventOverflow = Q, Object.defineProperty(e, "__esModule", {
    value: !0
  });
});
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**!
* tippy.js v6.3.1
* (c) 2017-2021 atomiks
* MIT License
*/
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@popperjs/core')) : typeof define === 'function' && define.amd ? define(['@popperjs/core'], factory) : (global = global || self, global.tippy = factory(global.Popper));
})(void 0, function (core) {
  'use strict';

  var css = ".tippy-box[data-animation=fade][data-state=hidden]{opacity:0}[data-tippy-root]{max-width:calc(100vw - 10px)}.tippy-box{position:relative;background-color:#333;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;outline:0;transition-property:transform,visibility,opacity}.tippy-box[data-placement^=top]>.tippy-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-arrow:before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top}.tippy-box[data-placement^=bottom]>.tippy-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-arrow:before{top:-7px;left:0;border-width:0 8px 8px;border-bottom-color:initial;transform-origin:center bottom}.tippy-box[data-placement^=left]>.tippy-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-arrow:before{border-width:8px 0 8px 8px;border-left-color:initial;right:-7px;transform-origin:center left}.tippy-box[data-placement^=right]>.tippy-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-arrow:before{left:-7px;border-width:8px 8px 8px 0;border-right-color:initial;transform-origin:center right}.tippy-box[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{width:16px;height:16px;color:#333}.tippy-arrow:before{content:\"\";position:absolute;border-color:transparent;border-style:solid}.tippy-content{position:relative;padding:5px 9px;z-index:1}";

  function injectCSS(css) {
    var style = document.createElement('style');
    style.textContent = css;
    style.setAttribute('data-tippy-stylesheet', '');
    var head = document.head;
    var firstStyleOrLinkTag = document.querySelector('head>style,head>link');

    if (firstStyleOrLinkTag) {
      head.insertBefore(style, firstStyleOrLinkTag);
    } else {
      head.appendChild(style);
    }
  }

  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
  var ua = isBrowser ? navigator.userAgent : '';
  var isIE = /MSIE |Trident\//.test(ua);
  var ROUND_ARROW = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };

  function hasOwnProperty(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
  }

  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v = value[index];
      return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }

    return value;
  }

  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
  }

  function invokeWithArgsOrReturn(value, args) {
    return typeof value === 'function' ? value.apply(void 0, args) : value;
  }

  function debounce(fn, ms) {
    // Avoid wrapping in `setTimeout` if ms is 0 anyway
    if (ms === 0) {
      return fn;
    }

    var timeout;
    return function (arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        fn(arg);
      }, ms);
    };
  }

  function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function (key) {
      delete clone[key];
    });
    return clone;
  }

  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }

  function normalizeToArray(value) {
    return [].concat(value);
  }

  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }

  function unique(arr) {
    return arr.filter(function (item, index) {
      return arr.indexOf(item) === index;
    });
  }

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  function arrayFrom(value) {
    return [].slice.call(value);
  }

  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function (acc, key) {
      if (obj[key] !== undefined) {
        acc[key] = obj[key];
      }

      return acc;
    }, {});
  }

  function div() {
    return document.createElement('div');
  }

  function isElement(value) {
    return ['Element', 'Fragment'].some(function (type) {
      return isType(value, type);
    });
  }

  function isNodeList(value) {
    return isType(value, 'NodeList');
  }

  function isMouseEvent(value) {
    return isType(value, 'MouseEvent');
  }

  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }

  function getArrayOfElements(value) {
    if (isElement(value)) {
      return [value];
    }

    if (isNodeList(value)) {
      return arrayFrom(value);
    }

    if (Array.isArray(value)) {
      return value;
    }

    return arrayFrom(document.querySelectorAll(value));
  }

  function setTransitionDuration(els, value) {
    els.forEach(function (el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }

  function setVisibilityState(els, state) {
    els.forEach(function (el) {
      if (el) {
        el.setAttribute('data-state', state);
      }
    });
  }

  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;

    var _normalizeToArray = normalizeToArray(elementOrElements),
        element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


    return (element == null ? void 0 : (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body) ? element.ownerDocument : document;
  }

  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX,
        clientY = event.clientY;
    return popperTreeData.every(function (_ref) {
      var popperRect = _ref.popperRect,
          popperState = _ref.popperState,
          props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement(popperState.placement);
      var offsetData = popperState.modifiersData.offset;

      if (!offsetData) {
        return true;
      }

      var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
      var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }

  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
    // `webkitTransitionEnd`...

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      box[method](event, listener);
    });
  }

  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  /**
   * When a `touchstart` event is fired, it's assumed the user is using touch
   * input. We'll bind a `mousemove` event listener to listen for mouse input in
   * the future. This way, the `isTouch` property is fully dynamic and will handle
   * hybrid devices that use a mix of touch + mouse input.
   */

  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }

    currentInput.isTouch = true;

    if (window.performance) {
      document.addEventListener('mousemove', onDocumentMouseMove);
    }
  }
  /**
   * When two `mousemove` event are fired consecutively within 20ms, it's assumed
   * the user is using mouse input again. `mousemove` can fire on touch devices as
   * well, but very rarely that quickly.
   */


  function onDocumentMouseMove() {
    var now = performance.now();

    if (now - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener('mousemove', onDocumentMouseMove);
    }

    lastMouseMoveTime = now;
  }
  /**
   * When an element is in focus and has a tippy, leaving the tab/window and
   * returning causes it to show again. For mouse users this is unexpected, but
   * for keyboard use it makes sense.
   * TODO: find a better technique to solve this problem
   */


  function onWindowBlur() {
    var activeElement = document.activeElement;

    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;

      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }

  function bindGlobalEventListeners() {
    document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener('blur', onWindowBlur);
  }

  function createMemoryLeakWarning(method) {
    var txt = method === 'destroy' ? 'n already-' : ' ';
    return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
  }

  function clean(value) {
    var spacesAndTabs = /[ \t]{2,}/g;
    var lineStartWithSpaces = /^[ \t]*/gm;
    return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
  }

  function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
  }

  function getFormattedMessage(message) {
    return [getDevMessage(message), // title
    'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
    'line-height: 1.5', // footer
    'color: #a6a095;'];
  } // Assume warnings and errors never have the same message


  var visitedMessages;
  {
    resetVisitedMessages();
  }

  function resetVisitedMessages() {
    visitedMessages = new Set();
  }

  function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console;

      visitedMessages.add(message);

      (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
  }

  function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console2;

      visitedMessages.add(message);

      (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
  }

  function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
    errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
    errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
  }

  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: 'fade',
    arrow: true,
    content: '',
    inertia: false,
    maxWidth: 350,
    role: 'tooltip',
    theme: '',
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: function appendTo() {
      return document.body;
    },
    aria: {
      content: 'auto',
      expanded: 'auto'
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: '',
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {},
    onBeforeUpdate: function onBeforeUpdate() {},
    onCreate: function onCreate() {},
    onDestroy: function onDestroy() {},
    onHidden: function onHidden() {},
    onHide: function onHide() {},
    onMount: function onMount() {},
    onShow: function onShow() {},
    onShown: function onShown() {},
    onTrigger: function onTrigger() {},
    onUntrigger: function onUntrigger() {},
    onClickOutside: function onClickOutside() {},
    placement: 'top',
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: 'mouseenter focus',
    triggerTarget: null
  }, pluginProps, {}, renderProps);
  var defaultKeys = Object.keys(defaultProps);

  var setDefaultProps = function setDefaultProps(partialProps) {
    /* istanbul ignore else */
    {
      validateProps(partialProps, []);
    }
    var keys = Object.keys(partialProps);
    keys.forEach(function (key) {
      defaultProps[key] = partialProps[key];
    });
  };

  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps = plugins.reduce(function (acc, plugin) {
      var name = plugin.name,
          defaultValue = plugin.defaultValue;

      if (name) {
        acc[name] = passedProps[name] !== undefined ? passedProps[name] : defaultValue;
      }

      return acc;
    }, {});
    return Object.assign({}, passedProps, {}, pluginProps);
  }

  function getDataAttributeProps(reference, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins: plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function (acc, key) {
      var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

      if (!valueAsString) {
        return acc;
      }

      if (key === 'content') {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e) {
          acc[key] = valueAsString;
        }
      }

      return acc;
    }, {});
    return props;
  }

  function evaluateProps(reference, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, {}, out.aria);
    out.aria = {
      expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
      content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
    };
    return out;
  }

  function validateProps(partialProps, plugins) {
    if (partialProps === void 0) {
      partialProps = {};
    }

    if (plugins === void 0) {
      plugins = [];
    }

    var keys = Object.keys(partialProps);
    keys.forEach(function (prop) {
      var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
      var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

      if (didPassUnknownProp) {
        didPassUnknownProp = plugins.filter(function (plugin) {
          return plugin.name === prop;
        }).length === 0;
      }

      warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
    });
  }

  var innerHTML = function innerHTML() {
    return 'innerHTML';
  };

  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }

  function createArrowElement(value) {
    var arrow = div();

    if (value === true) {
      arrow.className = ARROW_CLASS;
    } else {
      arrow.className = SVG_ARROW_CLASS;

      if (isElement(value)) {
        arrow.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow, value);
      }
    }

    return arrow;
  }

  function setContent(content, props) {
    if (isElement(props.content)) {
      dangerouslySetInnerHTML(content, '');
      content.appendChild(props.content);
    } else if (typeof props.content !== 'function') {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }

  function getChildren(popper) {
    var box = popper.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box: box,
      content: boxChildren.find(function (node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function (node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function (node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }

  function render(instance) {
    var popper = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute('data-state', 'hidden');
    box.setAttribute('tabindex', '-1');
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute('data-state', 'hidden');
    setContent(content, instance.props);
    popper.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);

    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper),
          box = _getChildren.box,
          content = _getChildren.content,
          arrow = _getChildren.arrow;

      if (nextProps.theme) {
        box.setAttribute('data-theme', nextProps.theme);
      } else {
        box.removeAttribute('data-theme');
      }

      if (typeof nextProps.animation === 'string') {
        box.setAttribute('data-animation', nextProps.animation);
      } else {
        box.removeAttribute('data-animation');
      }

      if (nextProps.inertia) {
        box.setAttribute('data-inertia', '');
      } else {
        box.removeAttribute('data-inertia');
      }

      box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

      if (nextProps.role) {
        box.setAttribute('role', nextProps.role);
      } else {
        box.removeAttribute('role');
      }

      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content, instance.props);
      }

      if (nextProps.arrow) {
        if (!arrow) {
          box.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box.removeChild(arrow);
          box.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow) {
        box.removeChild(arrow);
      }
    }

    return {
      popper: popper,
      onUpdate: onUpdate
    };
  } // Runtime check to identify if the render function is the default one; this
  // way we can apply default CSS transitions logic and it can be tree-shaken away


  render.$$tippy = true;
  var idCounter = 1;
  var mouseMoveListeners = []; // Used by `hideAll()`

  var mountedInstances = [];

  function createTippy(reference, passedProps) {
    var props = evaluateProps(reference, Object.assign({}, defaultProps, {}, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
    // 🔒 Private members
    // ===========================================================================

    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
    var currentTarget; // ===========================================================================
    // 🔑 Public members
    // ===========================================================================

    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      // Is the instance currently enabled?
      isEnabled: true,
      // Is the tippy currently showing and not transitioning out?
      isVisible: false,
      // Has the instance been destroyed?
      isDestroyed: false,
      // Is the tippy currently mounted to the DOM?
      isMounted: false,
      // Has the tippy finished transitioning in?
      isShown: false
    };
    var instance = {
      // properties
      id: id,
      reference: reference,
      popper: div(),
      popperInstance: popperInstance,
      props: props,
      state: state,
      plugins: plugins,
      // methods
      clearDelayTimeouts: clearDelayTimeouts,
      setProps: setProps,
      setContent: setContent,
      show: show,
      hide: hide,
      hideWithInteractivity: hideWithInteractivity,
      enable: enable,
      disable: disable,
      unmount: unmount,
      destroy: destroy
    }; // TODO: Investigate why this early return causes a TDZ error in the tests —
    // it doesn't seem to happen in the browser

    /* istanbul ignore if */

    if (!props.render) {
      {
        errorWhen(true, 'render() function has not been supplied.');
      }
      return instance;
    } // ===========================================================================
    // Initial mutations
    // ===========================================================================


    var _props$render = props.render(instance),
        popper = _props$render.popper,
        onUpdate = _props$render.onUpdate;

    popper.setAttribute('data-tippy-root', '');
    popper.id = "tippy-" + instance.id;
    instance.popper = popper;
    reference._tippy = instance;
    popper._tippy = instance;
    var pluginsHooks = plugins.map(function (plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference.hasAttribute('aria-expanded');
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook('onCreate', [instance]);

    if (props.showOnCreate) {
      scheduleShow();
    } // Prevent a tippy with a delay from hiding if the cursor left then returned
    // before it started hiding


    popper.addEventListener('mouseenter', function () {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper.addEventListener('mouseleave', function (event) {
      if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
        debouncedOnMouseMove(event);
      }
    });
    return instance; // ===========================================================================
    // 🔒 Private methods
    // ===========================================================================

    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }

    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === 'hold';
    }

    function getIsDefaultRenderFn() {
      var _instance$props$rende; // @ts-ignore


      return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
    }

    function getCurrentTarget() {
      return currentTarget || reference;
    }

    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }

    function getDefaultTemplateChildren() {
      return getChildren(popper);
    }

    function getDelay(isShow) {
      // For touch or keyboard input, force `0` delay for UX reasons
      // Also if the instance is mounted but not visible (transitioning out),
      // ignore delay
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
        return 0;
      }

      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }

    function handleStyles() {
      popper.style.pointerEvents = instance.props.interactive && instance.state.isVisible ? '' : 'none';
      popper.style.zIndex = "" + instance.props.zIndex;
    }

    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }

      pluginsHooks.forEach(function (pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(void 0, args);
        }
      });

      if (shouldInvokePropsHook) {
        var _instance$props;

        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }

    function handleAriaContentAttribute() {
      var aria = instance.props.aria;

      if (!aria.content) {
        return;
      }

      var attr = "aria-" + aria.content;
      var id = popper.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        var currentValue = node.getAttribute(attr);

        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
        } else {
          var nextValue = currentValue && currentValue.replace(id, '').trim();

          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }

    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        if (instance.props.interactive) {
          node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
        } else {
          node.removeAttribute('aria-expanded');
        }
      });
    }

    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
        return listener !== debouncedOnMouseMove;
      });
    }

    function onDocumentPress(event) {
      // Moved finger to scroll instead of an intentional tap outside
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === 'mousedown') {
          return;
        }
      } // Clicked on interactive popper


      if (instance.props.interactive && popper.contains(event.target)) {
        return;
      } // Clicked on the event listeners target


      if (getCurrentTarget().contains(event.target)) {
        if (currentInput.isTouch) {
          return;
        }

        if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
          return;
        }
      } else {
        invokeHook('onClickOutside', [instance, event]);
      }

      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
        // currentTarget. This lets a tippy with `focus` trigger know that it
        // should not show

        didHideDueToDocumentMouseDown = true;
        setTimeout(function () {
          didHideDueToDocumentMouseDown = false;
        }); // The listener gets added in `scheduleShow()`, but this may be hiding it
        // before it shows, and hide()'s early bail-out behavior can prevent it
        // from being cleaned up

        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }

    function onTouchMove() {
      didTouchMove = true;
    }

    function onTouchStart() {
      didTouchMove = false;
    }

    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener('mousedown', onDocumentPress, true);
      doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener('mousedown', onDocumentPress, true);
      doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function () {
        if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
          callback();
        }
      });
    }

    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }

    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;

      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, 'remove', listener);
          callback();
        }
      } // Make callback synchronous if duration is 0
      // `transitionend` won't fire otherwise


      if (duration === 0) {
        return callback();
      }

      updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
      updateTransitionEndListener(box, 'add', listener);
      currentTransitionEndListener = listener;
    }

    function on(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node: node,
          eventType: eventType,
          handler: handler,
          options: options
        });
      });
    }

    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on('touchstart', onTrigger, {
          passive: true
        });
        on('touchend', onMouseLeave, {
          passive: true
        });
      }

      splitBySpaces(instance.props.trigger).forEach(function (eventType) {
        if (eventType === 'manual') {
          return;
        }

        on(eventType, onTrigger);

        switch (eventType) {
          case 'mouseenter':
            on('mouseleave', onMouseLeave);
            break;

          case 'focus':
            on(isIE ? 'focusout' : 'blur', onBlurOrFocusOut);
            break;

          case 'focusin':
            on('focusout', onBlurOrFocusOut);
            break;
        }
      });
    }

    function removeListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function onTrigger(event) {
      var _lastTriggerEvent;

      var shouldScheduleClickHide = false;

      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }

      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();

      if (!instance.state.isVisible && isMouseEvent(event)) {
        // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved
        mouseMoveListeners.forEach(function (listener) {
          return listener(event);
        });
      } // Toggle show/hide when clicking click-triggered tooltips


      if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }

      if (event.type === 'click') {
        isVisibleFromClick = !shouldScheduleClickHide;
      }

      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }

    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

      if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
        return;
      }

      var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
        var _instance$popperInsta;

        var instance = popper._tippy;
        var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

        if (state) {
          return {
            popperRect: popper.getBoundingClientRect(),
            popperState: state,
            props: props
          };
        }

        return null;
      }).filter(Boolean);

      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }

    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

      if (shouldBail) {
        return;
      }

      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }

      scheduleHide(event);
    }

    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
        return;
      } // If focus was moved to within the popper


      if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
        return;
      }

      scheduleHide(event);
    }

    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
    }

    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props,
          popperOptions = _instance$props2.popperOptions,
          placement = _instance$props2.placement,
          offset = _instance$props2.offset,
          getReferenceClientRect = _instance$props2.getReferenceClientRect,
          moveTransition = _instance$props2.moveTransition;
      var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference;
      var tippyModifier = {
        name: '$$tippy',
        enabled: true,
        phase: 'beforeWrite',
        requires: ['computeStyles'],
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                box = _getDefaultTemplateCh.box;

            ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
              if (attr === 'placement') {
                box.setAttribute('data-placement', state.placement);
              } else {
                if (state.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, '');
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: 'offset',
        options: {
          offset: offset
        }
      }, {
        name: 'preventOverflow',
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: 'flip',
        options: {
          padding: 5
        }
      }, {
        name: 'computeStyles',
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];

      if (getIsDefaultRenderFn() && arrow) {
        modifiers.push({
          name: 'arrow',
          options: {
            element: arrow,
            padding: 3
          }
        });
      }

      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = core.createPopper(computedReference, popper, Object.assign({}, popperOptions, {
        placement: placement,
        onFirstUpdate: onFirstUpdate,
        modifiers: modifiers
      }));
    }

    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }

    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
      // it's directly after the reference element so the elements inside the
      // tippy can be tabbed to
      // If there are clipping issues, the user can specify a different appendTo
      // and ensure focus management is handled correctly manually

      var node = getCurrentTarget();

      if (instance.props.interactive && appendTo === defaultProps.appendTo || appendTo === 'parent') {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      } // The popper element needs to exist on the DOM before its position can be
      // updated as Popper needs to read its dimensions


      if (!parentNode.contains(popper)) {
        parentNode.appendChild(popper);
      }

      createPopperInstance();
      /* istanbul ignore else */

      {
        // Accessibility check
        warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
      }
    }

    function getNestedPopperTree() {
      return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
    }

    function scheduleShow(event) {
      instance.clearDelayTimeouts();

      if (event) {
        invokeHook('onTrigger', [instance, event]);
      }

      addDocumentPress();
      var delay = getDelay(true);

      var _getNormalizedTouchSe = getNormalizedTouchSettings(),
          touchValue = _getNormalizedTouchSe[0],
          touchDelay = _getNormalizedTouchSe[1];

      if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
        delay = touchDelay;
      }

      if (delay) {
        showTimeout = setTimeout(function () {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }

    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook('onUntrigger', [instance, event]);

      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      } // For interactive tippies, scheduleHide is added to a document.body handler
      // from onMouseLeave so must intercept scheduled hides from mousemove/leave
      // events when trigger contains mouseenter and click, and the tip is
      // currently shown as a result of a click.


      if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }

      var delay = getDelay(false);

      if (delay) {
        hideTimeout = setTimeout(function () {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        // Fixes a `transitionend` problem when it fires 1 frame too
        // late sometimes, we don't want hide() to be called.
        scheduleHideAnimationFrame = requestAnimationFrame(function () {
          instance.hide();
        });
      }
    } // ===========================================================================
    // 🔑 Public methods
    // ===========================================================================


    function enable() {
      instance.state.isEnabled = true;
    }

    function disable() {
      // Disabling the instance should also hide it
      // https://github.com/atomiks/tippy.js-react/issues/106
      instance.hide();
      instance.state.isEnabled = false;
    }

    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }

    function setProps(partialProps) {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
      }

      if (instance.state.isDestroyed) {
        return;
      }

      invokeHook('onBeforeUpdate', [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference, Object.assign({}, instance.props, {}, partialProps, {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();

      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
      } // Ensure stale aria-expanded attributes are removed


      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
          node.removeAttribute('aria-expanded');
        });
      } else if (nextProps.triggerTarget) {
        reference.removeAttribute('aria-expanded');
      }

      handleAriaExpandedAttribute();
      handleStyles();

      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }

      if (instance.popperInstance) {
        createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
        // and the nested ones get re-rendered first.
        // https://github.com/atomiks/tippyjs-react/issues/177
        // TODO: find a cleaner / more efficient solution(!)

        getNestedPopperTree().forEach(function (nestedPopper) {
          // React (and other UI libs likely) requires a rAF wrapper as it flushes
          // its work in one
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }

      invokeHook('onAfterUpdate', [instance, partialProps]);
    }

    function setContent(content) {
      instance.setProps({
        content: content
      });
    }

    function show() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
      } // Early bail-out

      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      } // Normalize `disabled` behavior across browsers.
      // Firefox allows events on disabled elements, but Chrome doesn't.
      // Using a wrapper element (i.e. <span>) is recommended.


      if (getCurrentTarget().hasAttribute('disabled')) {
        return;
      }

      invokeHook('onShow', [instance], false);

      if (instance.props.onShow(instance) === false) {
        return;
      }

      instance.state.isVisible = true;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'visible';
      }

      handleStyles();
      addDocumentPress();

      if (!instance.state.isMounted) {
        popper.style.transition = 'none';
      } // If flipping to the opposite side after hiding at least once, the
      // animation will use the wrong placement without resetting the duration


      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh2.box,
            content = _getDefaultTemplateCh2.content;

        setTransitionDuration([box, content], 0);
      }

      onFirstUpdate = function onFirstUpdate() {
        var _instance$popperInsta2;

        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }

        ignoreOnFirstUpdate = true; // reflow

        void popper.offsetHeight;
        popper.style.transition = instance.props.moveTransition;

        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
              _box = _getDefaultTemplateCh3.box,
              _content = _getDefaultTemplateCh3.content;

          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], 'visible');
        }

        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
        // popper has been positioned for the first time

        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        instance.state.isMounted = true;
        invokeHook('onMount', [instance]);

        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function () {
            instance.state.isShown = true;
            invokeHook('onShown', [instance]);
          });
        }
      };

      mount();
    }

    function hide() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
      } // Early bail-out

      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }

      invokeHook('onHide', [instance], false);

      if (instance.props.onHide(instance) === false) {
        return;
      }

      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'hidden';
      }

      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles();

      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh4.box,
            content = _getDefaultTemplateCh4.content;

        if (instance.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], 'hidden');
        }
      }

      handleAriaContentAttribute();
      handleAriaExpandedAttribute();

      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }

    function hideWithInteractivity(event) {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
      }
      getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }

    function unmount() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
      }

      if (instance.state.isVisible) {
        instance.hide();
      }

      if (!instance.state.isMounted) {
        return;
      }

      destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
      // tree by default. This seems mainly for interactive tippies, but we should
      // find a workaround if possible

      getNestedPopperTree().forEach(function (nestedPopper) {
        nestedPopper._tippy.unmount();
      });

      if (popper.parentNode) {
        popper.parentNode.removeChild(popper);
      }

      mountedInstances = mountedInstances.filter(function (i) {
        return i !== instance;
      });
      instance.state.isMounted = false;
      invokeHook('onHidden', [instance]);
    }

    function destroy() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
      }

      if (instance.state.isDestroyed) {
        return;
      }

      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference._tippy;
      instance.state.isDestroyed = true;
      invokeHook('onDestroy', [instance]);
    }
  }

  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }

    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    /* istanbul ignore else */

    {
      validateTargets(targets);
      validateProps(optionalProps, plugins);
    }
    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins: plugins
    });
    var elements = getArrayOfElements(targets);
    /* istanbul ignore else */

    {
      var isSingleContentElement = isElement(passedProps.content);
      var isMoreThanOneReferenceElement = elements.length > 1;
      warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
    }
    var instances = elements.reduce(function (acc, reference) {
      var instance = reference && createTippy(reference, passedProps);

      if (instance) {
        acc.push(instance);
      }

      return acc;
    }, []);
    return isElement(targets) ? instances[0] : instances;
  }

  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;

  var hideAll = function hideAll(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        excludedReferenceOrInstance = _ref.exclude,
        duration = _ref.duration;

    mountedInstances.forEach(function (instance) {
      var isExcluded = false;

      if (excludedReferenceOrInstance) {
        isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
      }

      if (!isExcluded) {
        var originalDuration = instance.props.duration;
        instance.setProps({
          duration: duration
        });
        instance.hide();

        if (!instance.state.isDestroyed) {
          instance.setProps({
            duration: originalDuration
          });
        }
      }
    });
  }; // every time the popper is destroyed (i.e. a new target), removing the styles
  // and causing transitions to break for singletons when the console is open, but
  // most notably for non-transform styles being used, `gpuAcceleration: false`.


  var applyStylesModifier = Object.assign({}, core.applyStyles, {
    effect: function effect(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      } // intentionally return no cleanup function
      // return () => { ... }

    }
  });

  var createSingleton = function createSingleton(tippyInstances, optionalProps) {
    var _optionalProps$popper;

    if (optionalProps === void 0) {
      optionalProps = {};
    }
    /* istanbul ignore else */


    {
      errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of', 'tippy instances. The passed value was', String(tippyInstances)].join(' '));
    }
    var individualInstances = tippyInstances;
    var references = [];
    var currentTarget;
    var overrides = optionalProps.overrides;
    var interceptSetPropsCleanups = [];
    var shownOnCreate = false;

    function setReferences() {
      references = individualInstances.map(function (instance) {
        return instance.reference;
      });
    }

    function enableInstances(isEnabled) {
      individualInstances.forEach(function (instance) {
        if (isEnabled) {
          instance.enable();
        } else {
          instance.disable();
        }
      });
    }

    function interceptSetProps(singleton) {
      return individualInstances.map(function (instance) {
        var originalSetProps = instance.setProps;

        instance.setProps = function (props) {
          originalSetProps(props);

          if (instance.reference === currentTarget) {
            singleton.setProps(props);
          }
        };

        return function () {
          instance.setProps = originalSetProps;
        };
      });
    } // have to pass singleton, as it maybe undefined on first call


    function prepareInstance(singleton, target) {
      var index = references.indexOf(target); // bail-out

      if (target === currentTarget) {
        return;
      }

      currentTarget = target;
      var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {
        acc[prop] = individualInstances[index].props[prop];
        return acc;
      }, {});
      singleton.setProps(Object.assign({}, overrideProps, {
        getReferenceClientRect: typeof overrideProps.getReferenceClientRect === 'function' ? overrideProps.getReferenceClientRect : function () {
          return target.getBoundingClientRect();
        }
      }));
    }

    enableInstances(false);
    setReferences();
    var plugin = {
      fn: function fn() {
        return {
          onDestroy: function onDestroy() {
            enableInstances(true);
          },
          onHidden: function onHidden() {
            currentTarget = null;
          },
          onClickOutside: function onClickOutside(instance) {
            if (instance.props.showOnCreate && !shownOnCreate) {
              shownOnCreate = true;
              currentTarget = null;
            }
          },
          onShow: function onShow(instance) {
            if (instance.props.showOnCreate && !shownOnCreate) {
              shownOnCreate = true;
              prepareInstance(instance, references[0]);
            }
          },
          onTrigger: function onTrigger(instance, event) {
            prepareInstance(instance, event.currentTarget);
          }
        };
      }
    };
    var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {
      plugins: [plugin].concat(optionalProps.plugins || []),
      triggerTarget: references,
      popperOptions: Object.assign({}, optionalProps.popperOptions, {
        modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [applyStylesModifier])
      })
    }));
    var originalShow = singleton.show;

    singleton.show = function (target) {
      originalShow(); // first time, showOnCreate or programmatic call with no params
      // default to showing first instance

      if (!currentTarget && target == null) {
        return prepareInstance(singleton, references[0]);
      } // triggered from event (do nothing as prepareInstance already called by onTrigger)
      // programmatic call with no params when already visible (do nothing again)


      if (currentTarget && target == null) {
        return;
      } // target is index of instance


      if (typeof target === 'number') {
        return references[target] && prepareInstance(singleton, references[target]);
      } // target is a child tippy instance


      if (individualInstances.includes(target)) {
        var ref = target.reference;
        return prepareInstance(singleton, ref);
      } // target is a ReferenceElement


      if (references.includes(target)) {
        return prepareInstance(singleton, target);
      }
    };

    singleton.showNext = function () {
      var first = references[0];

      if (!currentTarget) {
        return singleton.show(0);
      }

      var index = references.indexOf(currentTarget);
      singleton.show(references[index + 1] || first);
    };

    singleton.showPrevious = function () {
      var last = references[references.length - 1];

      if (!currentTarget) {
        return singleton.show(last);
      }

      var index = references.indexOf(currentTarget);
      var target = references[index - 1] || last;
      singleton.show(target);
    };

    var originalSetProps = singleton.setProps;

    singleton.setProps = function (props) {
      overrides = props.overrides || overrides;
      originalSetProps(props);
    };

    singleton.setInstances = function (nextInstances) {
      enableInstances(true);
      interceptSetPropsCleanups.forEach(function (fn) {
        return fn();
      });
      individualInstances = nextInstances;
      enableInstances(false);
      setReferences();
      interceptSetProps(singleton);
      singleton.setProps({
        triggerTarget: references
      });
    };

    interceptSetPropsCleanups = interceptSetProps(singleton);
    return singleton;
  };

  var BUBBLING_EVENTS_MAP = {
    mouseover: 'mouseenter',
    focusin: 'focus',
    click: 'click'
  };
  /**
   * Creates a delegate instance that controls the creation of tippy instances
   * for child elements (`target` CSS selector).
   */

  function delegate(targets, props) {
    /* istanbul ignore else */
    {
      errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));
    }
    var listeners = [];
    var childTippyInstances = [];
    var disabled = false;
    var target = props.target;
    var nativeProps = removeProperties(props, ['target']);
    var parentProps = Object.assign({}, nativeProps, {
      trigger: 'manual',
      touch: false
    });
    var childProps = Object.assign({}, nativeProps, {
      showOnCreate: true
    });
    var returnValue = tippy(targets, parentProps);
    var normalizedReturnValue = normalizeToArray(returnValue);

    function onTrigger(event) {
      if (!event.target || disabled) {
        return;
      }

      var targetNode = event.target.closest(target);

      if (!targetNode) {
        return;
      } // Get relevant trigger with fallbacks:
      // 1. Check `data-tippy-trigger` attribute on target node
      // 2. Fallback to `trigger` passed to `delegate()`
      // 3. Fallback to `defaultProps.trigger`


      var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore

      if (targetNode._tippy) {
        return;
      }

      if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {
        return;
      }

      if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0) {
        return;
      }

      var instance = tippy(targetNode, childProps);

      if (instance) {
        childTippyInstances = childTippyInstances.concat(instance);
      }
    }

    function on(node, eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      node.addEventListener(eventType, handler, options);
      listeners.push({
        node: node,
        eventType: eventType,
        handler: handler,
        options: options
      });
    }

    function addEventListeners(instance) {
      var reference = instance.reference;
      on(reference, 'touchstart', onTrigger, TOUCH_OPTIONS);
      on(reference, 'mouseover', onTrigger);
      on(reference, 'focusin', onTrigger);
      on(reference, 'click', onTrigger);
    }

    function removeEventListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function applyMutations(instance) {
      var originalDestroy = instance.destroy;
      var originalEnable = instance.enable;
      var originalDisable = instance.disable;

      instance.destroy = function (shouldDestroyChildInstances) {
        if (shouldDestroyChildInstances === void 0) {
          shouldDestroyChildInstances = true;
        }

        if (shouldDestroyChildInstances) {
          childTippyInstances.forEach(function (instance) {
            instance.destroy();
          });
        }

        childTippyInstances = [];
        removeEventListeners();
        originalDestroy();
      };

      instance.enable = function () {
        originalEnable();
        childTippyInstances.forEach(function (instance) {
          return instance.enable();
        });
        disabled = false;
      };

      instance.disable = function () {
        originalDisable();
        childTippyInstances.forEach(function (instance) {
          return instance.disable();
        });
        disabled = true;
      };

      addEventListeners(instance);
    }

    normalizedReturnValue.forEach(applyMutations);
    return returnValue;
  }

  var animateFill = {
    name: 'animateFill',
    defaultValue: false,
    fn: function fn(instance) {
      var _instance$props$rende; // @ts-ignore


      if (!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy)) {
        {
          errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');
        }
        return {};
      }

      var _getChildren = getChildren(instance.popper),
          box = _getChildren.box,
          content = _getChildren.content;

      var backdrop = instance.props.animateFill ? createBackdropElement() : null;
      return {
        onCreate: function onCreate() {
          if (backdrop) {
            box.insertBefore(backdrop, box.firstElementChild);
            box.setAttribute('data-animatefill', '');
            box.style.overflow = 'hidden';
            instance.setProps({
              arrow: false,
              animation: 'shift-away'
            });
          }
        },
        onMount: function onMount() {
          if (backdrop) {
            var transitionDuration = box.style.transitionDuration;
            var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the
            // tooltip element. `clip-path` is the other alternative but is not
            // well-supported and is buggy on some devices.

            content.style.transitionDelay = Math.round(duration / 10) + "ms";
            backdrop.style.transitionDuration = transitionDuration;
            setVisibilityState([backdrop], 'visible');
          }
        },
        onShow: function onShow() {
          if (backdrop) {
            backdrop.style.transitionDuration = '0ms';
          }
        },
        onHide: function onHide() {
          if (backdrop) {
            setVisibilityState([backdrop], 'hidden');
          }
        }
      };
    }
  };

  function createBackdropElement() {
    var backdrop = div();
    backdrop.className = BACKDROP_CLASS;
    setVisibilityState([backdrop], 'hidden');
    return backdrop;
  }

  var mouseCoords = {
    clientX: 0,
    clientY: 0
  };
  var activeInstances = [];

  function storeMouseCoords(_ref) {
    var clientX = _ref.clientX,
        clientY = _ref.clientY;
    mouseCoords = {
      clientX: clientX,
      clientY: clientY
    };
  }

  function addMouseCoordsListener(doc) {
    doc.addEventListener('mousemove', storeMouseCoords);
  }

  function removeMouseCoordsListener(doc) {
    doc.removeEventListener('mousemove', storeMouseCoords);
  }

  var followCursor = {
    name: 'followCursor',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference;
      var doc = getOwnerDocument(instance.props.triggerTarget || reference);
      var isInternalUpdate = false;
      var wasFocusEvent = false;
      var isUnmounted = true;
      var prevProps = instance.props;

      function getIsInitialBehavior() {
        return instance.props.followCursor === 'initial' && instance.state.isVisible;
      }

      function addListener() {
        doc.addEventListener('mousemove', onMouseMove);
      }

      function removeListener() {
        doc.removeEventListener('mousemove', onMouseMove);
      }

      function unsetGetReferenceClientRect() {
        isInternalUpdate = true;
        instance.setProps({
          getReferenceClientRect: null
        });
        isInternalUpdate = false;
      }

      function onMouseMove(event) {
        // If the instance is interactive, avoid updating the position unless it's
        // over the reference element
        var isCursorOverReference = event.target ? reference.contains(event.target) : true;
        var followCursor = instance.props.followCursor;
        var clientX = event.clientX,
            clientY = event.clientY;
        var rect = reference.getBoundingClientRect();
        var relativeX = clientX - rect.left;
        var relativeY = clientY - rect.top;

        if (isCursorOverReference || !instance.props.interactive) {
          instance.setProps({
            getReferenceClientRect: function getReferenceClientRect() {
              var rect = reference.getBoundingClientRect();
              var x = clientX;
              var y = clientY;

              if (followCursor === 'initial') {
                x = rect.left + relativeX;
                y = rect.top + relativeY;
              }

              var top = followCursor === 'horizontal' ? rect.top : y;
              var right = followCursor === 'vertical' ? rect.right : x;
              var bottom = followCursor === 'horizontal' ? rect.bottom : y;
              var left = followCursor === 'vertical' ? rect.left : x;
              return {
                width: right - left,
                height: bottom - top,
                top: top,
                right: right,
                bottom: bottom,
                left: left
              };
            }
          });
        }
      }

      function create() {
        if (instance.props.followCursor) {
          activeInstances.push({
            instance: instance,
            doc: doc
          });
          addMouseCoordsListener(doc);
        }
      }

      function destroy() {
        activeInstances = activeInstances.filter(function (data) {
          return data.instance !== instance;
        });

        if (activeInstances.filter(function (data) {
          return data.doc === doc;
        }).length === 0) {
          removeMouseCoordsListener(doc);
        }
      }

      return {
        onCreate: create,
        onDestroy: destroy,
        onBeforeUpdate: function onBeforeUpdate() {
          prevProps = instance.props;
        },
        onAfterUpdate: function onAfterUpdate(_, _ref2) {
          var followCursor = _ref2.followCursor;

          if (isInternalUpdate) {
            return;
          }

          if (followCursor !== undefined && prevProps.followCursor !== followCursor) {
            destroy();

            if (followCursor) {
              create();

              if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {
                addListener();
              }
            } else {
              removeListener();
              unsetGetReferenceClientRect();
            }
          }
        },
        onMount: function onMount() {
          if (instance.props.followCursor && !wasFocusEvent) {
            if (isUnmounted) {
              onMouseMove(mouseCoords);
              isUnmounted = false;
            }

            if (!getIsInitialBehavior()) {
              addListener();
            }
          }
        },
        onTrigger: function onTrigger(_, event) {
          if (isMouseEvent(event)) {
            mouseCoords = {
              clientX: event.clientX,
              clientY: event.clientY
            };
          }

          wasFocusEvent = event.type === 'focus';
        },
        onHidden: function onHidden() {
          if (instance.props.followCursor) {
            unsetGetReferenceClientRect();
            removeListener();
            isUnmounted = true;
          }
        }
      };
    }
  };

  function getProps(props, modifier) {
    var _props$popperOptions;

    return {
      popperOptions: Object.assign({}, props.popperOptions, {
        modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {
          var name = _ref.name;
          return name !== modifier.name;
        }), [modifier])
      })
    };
  }

  var inlinePositioning = {
    name: 'inlinePositioning',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference;

      function isEnabled() {
        return !!instance.props.inlinePositioning;
      }

      var placement;
      var cursorRectIndex = -1;
      var isInternalUpdate = false;
      var modifier = {
        name: 'tippyInlinePositioning',
        enabled: true,
        phase: 'afterWrite',
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (isEnabled()) {
            if (placement !== state.placement) {
              instance.setProps({
                getReferenceClientRect: function getReferenceClientRect() {
                  return _getReferenceClientRect(state.placement);
                }
              });
            }

            placement = state.placement;
          }
        }
      };

      function _getReferenceClientRect(placement) {
        return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);
      }

      function setInternalProps(partialProps) {
        isInternalUpdate = true;
        instance.setProps(partialProps);
        isInternalUpdate = false;
      }

      function addModifier() {
        if (!isInternalUpdate) {
          setInternalProps(getProps(instance.props, modifier));
        }
      }

      return {
        onCreate: addModifier,
        onAfterUpdate: addModifier,
        onTrigger: function onTrigger(_, event) {
          if (isMouseEvent(event)) {
            var rects = arrayFrom(instance.reference.getClientRects());
            var cursorRect = rects.find(function (rect) {
              return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;
            });
            cursorRectIndex = rects.indexOf(cursorRect);
          }
        },
        onUntrigger: function onUntrigger() {
          cursorRectIndex = -1;
        }
      };
    }
  };

  function getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {
    // Not an inline element, or placement is not yet known
    if (clientRects.length < 2 || currentBasePlacement === null) {
      return boundingRect;
    } // There are two rects and they are disjoined


    if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {
      return clientRects[cursorRectIndex] || boundingRect;
    }

    switch (currentBasePlacement) {
      case 'top':
      case 'bottom':
        {
          var firstRect = clientRects[0];
          var lastRect = clientRects[clientRects.length - 1];
          var isTop = currentBasePlacement === 'top';
          var top = firstRect.top;
          var bottom = lastRect.bottom;
          var left = isTop ? firstRect.left : lastRect.left;
          var right = isTop ? firstRect.right : lastRect.right;
          var width = right - left;
          var height = bottom - top;
          return {
            top: top,
            bottom: bottom,
            left: left,
            right: right,
            width: width,
            height: height
          };
        }

      case 'left':
      case 'right':
        {
          var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {
            return rects.left;
          }));
          var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {
            return rects.right;
          }));
          var measureRects = clientRects.filter(function (rect) {
            return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;
          });
          var _top = measureRects[0].top;
          var _bottom = measureRects[measureRects.length - 1].bottom;
          var _left = minLeft;
          var _right = maxRight;

          var _width = _right - _left;

          var _height = _bottom - _top;

          return {
            top: _top,
            bottom: _bottom,
            left: _left,
            right: _right,
            width: _width,
            height: _height
          };
        }

      default:
        {
          return boundingRect;
        }
    }
  }

  var sticky = {
    name: 'sticky',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference,
          popper = instance.popper;

      function getReference() {
        return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;
      }

      function shouldCheck(value) {
        return instance.props.sticky === true || instance.props.sticky === value;
      }

      var prevRefRect = null;
      var prevPopRect = null;

      function updatePosition() {
        var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
        var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;

        if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
          if (instance.popperInstance) {
            instance.popperInstance.update();
          }
        }

        prevRefRect = currentRefRect;
        prevPopRect = currentPopRect;

        if (instance.state.isMounted) {
          requestAnimationFrame(updatePosition);
        }
      }

      return {
        onMount: function onMount() {
          if (instance.props.sticky) {
            updatePosition();
          }
        }
      };
    }
  };

  function areRectsDifferent(rectA, rectB) {
    if (rectA && rectB) {
      return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
    }

    return true;
  }

  if (isBrowser) {
    injectCSS(css);
  }

  tippy.setDefaultProps({
    plugins: [animateFill, followCursor, inlinePositioning, sticky],
    render: render
  });
  tippy.createSingleton = createSingleton;
  tippy.delegate = delegate;
  tippy.hideAll = hideAll;
  tippy.roundArrow = ROUND_ARROW;
  return tippy;
});
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @overview better-dom: Live extension playground
 * @version 2.1.1 Tue, 16 Dec 2014 14:27:26 GMT
 * @copyright 2013-2014 Maksim Chemerisuk
 * @license MIT
 * @see https://github.com/chemerisuk/better-dom
 */
(function () {
  "use strict";

  var SLICE$0 = Array.prototype.slice;
  var WINDOW = window;
  var DOCUMENT = document;
  var HTML = DOCUMENT.documentElement;
  var userAgent = WINDOW.navigator.userAgent;
  var jscriptVersion = WINDOW.ScriptEngineMajorVersion;
  var JSCRIPT_VERSION = jscriptVersion && jscriptVersion();
  var LEGACY_ANDROID = ~userAgent.indexOf("Android") && userAgent.indexOf("Chrome") < 0;
  var WEBKIT_PREFIX = WINDOW.WebKitAnimationEvent ? "-webkit-" : "";
  var CUSTOM_EVENT_TYPE = "dataavailable";

  function $NullElement() {}

  function $Element(node) {
    if (this instanceof $Element) {
      if (node) {
        // use a generated property to store a reference
        // to the wrapper for circular object binding
        node["__2001001__"] = this;
        this[0] = node;
        this._ = {
          "handler2001001": [],
          "watcher2001001": {},
          "extension2001001": [],
          "context2001001": {}
        };
      }
    } else if (node) {
      var cached = node["__2001001__"]; // create a wrapper only once for each native element

      return cached ? cached : new $Element(node);
    } else {
      return new $NullElement();
    }
  }

  $Element.prototype = {
    constructor: function constructor(node) {
      // filter non elements like text nodes, comments etc.
      return $Element(node && node.nodeType === 1 ? node : null);
    },
    toString: function toString() {
      var node = this[0];
      return node ? "<" + node.tagName.toLowerCase() + ">" : "";
    },
    version: "2.1.1"
  };
  $NullElement.prototype = new $Element();

  function $Document(node) {
    if (node && node.nodeType === 9) {
      node = node.documentElement;
    }

    $Element.call(this, node);
  }

  $Document.prototype = new $Element();
  var DOM = new $Document(DOCUMENT);
  var util$index$$arrayProto = Array.prototype;
  var util$index$$default = {
    computeStyle: function computeStyle(node) {
      if (JSCRIPT_VERSION < 9) {
        return node.currentStyle;
      } else {
        return node.ownerDocument.defaultView.getComputedStyle(node);
      }
    },
    injectElement: function injectElement(node) {
      if (node && node.nodeType === 1) {
        return node.ownerDocument.getElementsByTagName("head")[0].appendChild(node);
      }
    },
    // utilites
    every: util$index$$arrayProto.every,
    each: util$index$$arrayProto.forEach,
    filter: util$index$$arrayProto.filter,
    map: util$index$$arrayProto.map,
    slice: util$index$$arrayProto.slice,
    isArray: Array.isArray,
    keys: Object.keys,
    safeCall: function safeCall(context, fn, arg1, arg2) {
      if (typeof fn === "string") fn = context[fn];

      try {
        return fn.call(context, arg1, arg2);
      } catch (err) {
        WINDOW.setTimeout(function () {
          throw err;
        }, 1);
        return false;
      }
    },
    register: function register(mixins, defaultBehavior) {
      defaultBehavior = defaultBehavior || function () {};

      Object.keys(mixins).forEach(function (key) {
        var defaults = defaultBehavior(key) || function () {
          return this;
        };

        $Element.prototype[key] = mixins[key];
        $NullElement.prototype[key] = defaults;
      });
    },
    getLegacyFile: function getLegacyFile(type) {
      if (JSCRIPT_VERSION < 10) {
        var legacyScripts = util$index$$arrayProto.filter.call(DOCUMENT.scripts, function (el) {
          return el.src.indexOf("better-dom-legacy.js") >= 0;
        });

        if (legacyScripts.length < 1) {
          throw new Error("In order to use live extensions in IE < 10 you have to include extra files. See https://github.com/chemerisuk/better-dom#notes-about-old-ies for details.");
        }

        return legacyScripts[0].src.replace(".js", "." + type);
      }
    }
  }; // customized errors

  function errors$$MethodError(methodName, args) {
    var type = arguments[2];
    if (type === void 0) type = "$Element";
    var url = "http://chemerisuk.github.io/better-dom/" + type + ".html#" + methodName,
        line = "invalid call `" + type + (type === "DOM" ? "." : "#") + methodName + "(";
    line += util$index$$default.map.call(args, function (arg) {
      return String(arg);
    }).join(", ") + ")`;";
    this.message = line + " check " + url + " to verify the function arguments";
  }

  errors$$MethodError.prototype = new TypeError();

  function errors$$StaticMethodError(methodName, args) {
    errors$$MethodError.call(this, methodName, args, "DOM");
  }

  errors$$StaticMethodError.prototype = new TypeError();

  var // operator type / priority object
  global$emmet$$operators = {
    "(": 1,
    ")": 2,
    "^": 3,
    ">": 4,
    "+": 5,
    "*": 6,
    "`": 7,
    "[": 8,
    ".": 8,
    "#": 8
  },
      global$emmet$$reParse = /`[^`]*`|\[[^\]]*\]|\.[^()>^+*`[#]+|[^()>^+*`[#.]+|\^+|./g,
      global$emmet$$reAttr = /\s*([\w\-]+)(?:=((?:`([^`]*)`)|[^\s]*))?/g,
      global$emmet$$reIndex = /(\$+)(?:@(-)?(\d+)?)?/g,
      global$emmet$$reDot = /\./g,
      global$emmet$$reDollar = /\$/g,
      global$emmet$$tagCache = {
    "": ""
  },
      global$emmet$$normalizeAttrs = function global$emmet$$normalizeAttrs(_, name, value, rawValue) {
    // try to detemnie which kind of quotes to use
    var quote = value && value.indexOf("\"") >= 0 ? "'" : "\"";

    if (typeof rawValue === "string") {
      // grab unquoted value for smart quotes
      value = rawValue;
    } else if (typeof value !== "string") {
      // handle boolean attributes by using name as value
      value = name;
    } // always wrap attribute values with quotes even they don't exist


    return " " + name + "=" + quote + value + quote;
  },
      global$emmet$$injectTerm = function global$emmet$$injectTerm(term, end) {
    return function (html) {
      // find index of where to inject the term
      var index = end ? html.lastIndexOf("<") : html.indexOf(">"); // inject the term into the HTML string

      return html.slice(0, index) + term + html.slice(index);
    };
  },
      global$emmet$$makeTerm = function global$emmet$$makeTerm(tag) {
    return global$emmet$$tagCache[tag] || (global$emmet$$tagCache[tag] = "<" + tag + "></" + tag + ">");
  },
      global$emmet$$makeIndexedTerm = function global$emmet$$makeIndexedTerm(n, term) {
    var result = Array(n),
        i;

    for (i = 0; i < n; ++i) {
      result[i] = term.replace(global$emmet$$reIndex, function (expr, fmt, sign, base) {
        var index = (sign ? n - i - 1 : i) + (base ? +base : 1); // handle zero-padded index values, like $$$ etc.

        return (fmt + index).slice(-fmt.length).replace(global$emmet$$reDollar, "0");
      });
    }

    return result;
  },
      global$emmet$$reUnsafe = /[&<>"']/g,
      // http://stackoverflow.com/questions/6234773/can-i-escape-html-special-chars-in-javascript
  global$emmet$$safeSymbol = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    "\"": "&quot;",
    "'": "&#039;"
  }; // populate empty tag names with result


  "area base br col hr img input link meta param command keygen source".split(" ").forEach(function (tag) {
    global$emmet$$tagCache[tag] = "<" + tag + ">";
  });

  DOM.emmet = function (template, varMap) {
    var $D$0;
    var $D$1;
    var $D$2;
    if (typeof template !== "string") throw new errors$$StaticMethodError("emmet", arguments);
    if (varMap) template = DOM.format(template, varMap);

    if (template in global$emmet$$tagCache) {
      return global$emmet$$tagCache[template];
    } // transform template string into RPN


    var stack = [],
        output = [];
    $D$2 = template.match(global$emmet$$reParse);
    $D$0 = 0;
    $D$1 = $D$2.length;

    for (var str; $D$0 < $D$1;) {
      str = $D$2[$D$0++];
      var op = str[0];
      var priority = global$emmet$$operators[op];

      if (priority) {
        if (str !== "(") {
          // for ^ operator need to skip > str.length times
          for (var i = 0, n = op === "^" ? str.length : 1; i < n; ++i) {
            while (stack[0] !== op && global$emmet$$operators[stack[0]] >= priority) {
              var head = stack.shift();
              output.push(head); // for ^ operator stop shifting when the first > is found

              if (op === "^" && head === ">") break;
            }
          }
        }

        if (str === ")") {
          stack.shift(); // remove "(" symbol from stack
        } else {
          // handle values inside of `...` and [...] sections
          if (op === "[" || op === "`") {
            output.push(str.slice(1, -1));
          } // handle multiple classes, e.g. a.one.two


          if (op === ".") {
            output.push(str.slice(1).replace(global$emmet$$reDot, " "));
          }

          stack.unshift(op);
        }
      } else {
        output.push(str);
      }
    }

    ;
    $D$0 = $D$1 = $D$2 = void 0;
    output = output.concat(stack); // transform RPN into html nodes

    stack = [];
    $D$0 = 0;
    $D$1 = output.length;

    for (var str$0; $D$0 < $D$1;) {
      str$0 = output[$D$0++];

      if (str$0 in global$emmet$$operators) {
        var value = stack.shift();
        var node = stack.shift();

        if (typeof node === "string") {
          node = [global$emmet$$makeTerm(node)];
        }

        switch (str$0) {
          case ".":
            value = global$emmet$$injectTerm(" class=\"" + value + "\"");
            break;

          case "#":
            value = global$emmet$$injectTerm(" id=\"" + value + "\"");
            break;

          case "[":
            value = global$emmet$$injectTerm(value.replace(global$emmet$$reAttr, global$emmet$$normalizeAttrs));
            break;

          case "*":
            node = global$emmet$$makeIndexedTerm(+value, node.join(""));
            break;

          case "`":
            stack.unshift(node); // escape unsafe HTML symbols

            node = [value.replace(global$emmet$$reUnsafe, function (ch) {
              return global$emmet$$safeSymbol[ch];
            })];
            break;

          default:
            value = typeof value === "string" ? global$emmet$$makeTerm(value) : value.join("");

            if (str$0 === ">") {
              value = global$emmet$$injectTerm(value, true);
            } else {
              node.push(value);
            }

        }

        str$0 = typeof value === "function" ? node.map(value) : node;
      }

      stack.unshift(str$0);
    }

    ;
    $D$0 = $D$1 = void 0;

    if (output.length === 1) {
      // handle single tag case
      output = global$emmet$$makeTerm(stack[0]);
    } else {
      output = stack[0].join("");
    }

    return output;
  };

  var global$emmet$$default = global$emmet$$tagCache;

  var document$create$$makeMethod = function document$create$$makeMethod(all) {
    return function (value, varMap) {
      var doc = this[0].ownerDocument,
          sandbox = this._["sandbox2001001"];

      if (!sandbox) {
        sandbox = doc.createElement("div");
        this._["sandbox2001001"] = sandbox;
      }

      var nodes, el;

      if (value && value in global$emmet$$default) {
        nodes = doc.createElement(value);
        if (all) nodes = [new $Element(nodes)];
      } else {
        value = value.trim();

        if (value[0] === "<" && value[value.length - 1] === ">") {
          value = varMap ? DOM.format(value, varMap) : value;
        } else {
          value = DOM.emmet(value, varMap);
        }

        sandbox.innerHTML = value; // parse input HTML string

        for (nodes = all ? [] : null; el = sandbox.firstChild;) {
          sandbox.removeChild(el); // detach element from the sandbox

          if (el.nodeType === 1) {
            if (all) {
              nodes.push(new $Element(el));
            } else {
              nodes = el;
              break; // stop early, because need only the first element
            }
          }
        }
      }

      return all ? nodes : $Element(nodes);
    };
  };

  $Document.prototype.create = document$create$$makeMethod("");
  $Document.prototype.createAll = document$create$$makeMethod("All");

  $Document.prototype.importScripts = function () {
    var urls = SLICE$0.call(arguments, 0);
    var doc = this[0].ownerDocument;

    var callback = function callback() {
      var arg = urls.shift(),
          argType = _typeof(arg),
          script;

      if (argType === "string") {
        script = doc.createElement("script");
        script.src = arg;
        script.onload = callback;
        script.async = true;
        util$index$$default.injectElement(script);
      } else if (argType === "function") {
        arg();
      } else if (arg) {
        throw new errors$$StaticMethodError("importScripts", arguments);
      }
    };

    callback();
  };

  $Document.prototype.importStyles = function (selector, cssText) {
    var styleSheet = this._["styles2001001"];

    if (!styleSheet) {
      var doc = this[0].ownerDocument,
          styleNode = util$index$$default.injectElement(doc.createElement("style"));
      styleSheet = styleNode.sheet || styleNode.styleSheet; // store object internally

      this._["styles2001001"] = styleSheet;
    }

    if (typeof selector !== "string" || typeof cssText !== "string") {
      throw new errors$$StaticMethodError("importStyles", arguments);
    } // insert rules one by one because of several reasons:
    // 1. IE8 does not support comma in a selector string
    // 2. if one selector fails it doesn't break others


    selector.split(",").forEach(function (selector) {
      try {
        if (styleSheet.cssRules) {
          styleSheet.insertRule(selector + "{" + cssText + "}", styleSheet.cssRules.length);
        } else if (selector[0] !== "@") {
          styleSheet.addRule(selector, cssText);
        } else {
          // addRule doesn't support at-rules, use cssText instead
          styleSheet.cssText += selector + "{" + cssText + "}";
        }
      } catch (err) {// silently ignore invalid rules
      }
    });
  }; // Helper for css selectors


  var util$selectormatcher$$rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\[([\w\-\=]+)\])?(?:\.([\w\-]+))?$/,
      util$selectormatcher$$propName = "m oM msM mozM webkitM".split(" ").reduce(function (result, prefix) {
    var propertyName = prefix + "atchesSelector";
    return result || HTML[propertyName] && propertyName;
  }, null);

  var util$selectormatcher$$default = function util$selectormatcher$$default(selector, context) {
    if (typeof selector !== "string") return null;
    var quick = util$selectormatcher$$rquickIs.exec(selector);

    if (quick) {
      // Quick matching is inspired by jQuery:
      //   0  1    2   3          4
      // [ _, tag, id, attribute, class ]
      if (quick[1]) quick[1] = quick[1].toLowerCase();
      if (quick[3]) quick[3] = quick[3].split("=");
      if (quick[4]) quick[4] = " " + quick[4] + " ";
    }

    return function (node) {
      var $D$3;
      var $D$4;
      var result, found;

      if (!quick && !util$selectormatcher$$propName) {
        found = (context || node.ownerDocument).querySelectorAll(selector);
      }

      for (; node && node.nodeType === 1; node = node.parentNode) {
        if (quick) {
          result = (!quick[1] || node.nodeName.toLowerCase() === quick[1]) && (!quick[2] || node.id === quick[2]) && (!quick[3] || (quick[3][1] ? node.getAttribute(quick[3][0]) === quick[3][1] : node.hasAttribute(quick[3][0]))) && (!quick[4] || (" " + node.className + " ").indexOf(quick[4]) >= 0);
        } else {
          if (util$selectormatcher$$propName) {
            result = node[util$selectormatcher$$propName](selector);
          } else {
            $D$3 = 0;
            $D$4 = found.length;

            for (var n; $D$3 < $D$4;) {
              n = found[$D$3++];
              if (n === node) return n;
            }

            ;
            $D$3 = $D$4 = void 0;
          }
        }

        if (result || !context || node === context) break;
      }

      return result && node;
    };
  };

  var element$children$$makeMethod = function element$children$$makeMethod(all) {
    return function (selector) {
      if (all) {
        if (selector && typeof selector !== "string") throw new errors$$MethodError("children", arguments);
      } else {
        if (selector && typeof selector !== "number") throw new errors$$MethodError("child", arguments);
      }

      var node = this[0],
          matcher = util$selectormatcher$$default(selector),
          children = node.children;

      if (JSCRIPT_VERSION < 9) {
        // fix IE8 bug with children collection
        children = util$index$$default.filter.call(children, function (node) {
          return node.nodeType === 1;
        });
      }

      if (all) {
        if (matcher) children = util$index$$default.filter.call(children, matcher);
        return util$index$$default.map.call(children, $Element);
      } else {
        if (selector < 0) selector = children.length + selector;
        return $Element(children[selector]);
      }
    };
  };

  util$index$$default.register({
    child: element$children$$makeMethod(false),
    children: element$children$$makeMethod(true)
  }, function (methodName) {
    return methodName === "child" ? function () {
      return new $NullElement();
    } : function () {
      return [];
    };
  });

  var element$classes$$reSpace = /[\n\t\r]/g,
      element$classes$$makeMethod = function element$classes$$makeMethod(nativeMethodName, strategy) {
    var methodName = nativeMethodName === "contains" ? "hasClass" : nativeMethodName + "Class";

    if (HTML.classList) {
      // use native classList property if possible
      strategy = function strategy(el, token) {
        return el[0].classList[nativeMethodName](token);
      };
    }

    if (methodName === "hasClass" || methodName === "toggleClass") {
      return function (token, force) {
        if (typeof force === "boolean" && methodName === "toggleClass") {
          this[force ? "addClass" : "removeClass"](token);
          return force;
        }

        if (typeof token !== "string") throw new errors$$MethodError(methodName, arguments);
        return strategy(this, token);
      };
    } else {
      return function () {
        var $D$5;
        var $D$6;
        var tokens = arguments;
        $D$5 = 0;
        $D$6 = tokens.length;

        for (var token; $D$5 < $D$6;) {
          token = tokens[$D$5++];
          if (typeof token !== "string") throw new errors$$MethodError(methodName, arguments);
          strategy(this, token);
        }

        ;
        $D$5 = $D$6 = void 0;
        return this;
      };
    }
  };

  util$index$$default.register({
    hasClass: element$classes$$makeMethod("contains", function (el, token) {
      return (" " + el[0].className + " ").replace(element$classes$$reSpace, " ").indexOf(" " + token + " ") >= 0;
    }),
    addClass: element$classes$$makeMethod("add", function (el, token) {
      if (!el.hasClass(token)) el[0].className += " " + token;
    }),
    removeClass: element$classes$$makeMethod("remove", function (el, token) {
      el[0].className = (" " + el[0].className + " ").replace(element$classes$$reSpace, " ").replace(" " + token + " ", " ").trim();
    }),
    toggleClass: element$classes$$makeMethod("toggle", function (el, token) {
      var hasClass = el.hasClass(token);

      if (hasClass) {
        el.removeClass(token);
      } else {
        el[0].className += " " + token;
      }

      return !hasClass;
    })
  }, function (methodName) {
    if (methodName === "hasClass" || methodName === "toggleClass") {
      return function () {
        return false;
      };
    }
  });
  util$index$$default.register({
    clone: function clone(deep) {
      if (typeof deep !== "boolean") throw new errors$$MethodError("clone", arguments);
      var node = this[0],
          result;

      if (JSCRIPT_VERSION < 9) {
        result = DOM.create(node.outerHTML);
        if (!deep) result.set("");
      } else {
        result = new $Element(node.cloneNode(deep));
      }

      return result;
    }
  }, function () {
    return function () {
      return new $NullElement();
    };
  });
  util$index$$default.register({
    contains: function contains(element) {
      var node = this[0];

      if (element instanceof $Element) {
        var otherNode = element[0];
        if (otherNode === node) return true;

        if (node.contains) {
          return node.contains(otherNode);
        } else {
          return node.compareDocumentPosition(otherNode) & 16;
        }
      }

      throw new errors$$MethodError("contains", arguments);
    }
  }, function () {
    return function () {
      return false;
    };
  }); // Inspired by the article written by Daniel Buchner:
  // http://www.backalleycoder.com/2014/04/18/element-queries-from-the-feet-up/

  var element$context$$CONTEXT_TEMPLATE = "div[style=overflow:hidden]>object[data=`about:blank` type=text/html style=`position:absolute` width=100% height=100%]";

  if (JSCRIPT_VERSION) {
    // use calc to cut ugly frame border in IE>8
    element$context$$CONTEXT_TEMPLATE = element$context$$CONTEXT_TEMPLATE.replace("position:absolute", "width:calc(100% + 4px);height:calc(100% + 4px);left:-2px;top:-2px;position:absolute");

    if (JSCRIPT_VERSION > 8) {
      // for IE>8 have to set the data attribute AFTER adding element to the DOM
      element$context$$CONTEXT_TEMPLATE = element$context$$CONTEXT_TEMPLATE.replace("data=`about:blank` ", "");
    } else {
      // IE8 fails with about:blank, use better-dom-legacy.html instead
      element$context$$CONTEXT_TEMPLATE = element$context$$CONTEXT_TEMPLATE.replace("about:blank", util$index$$default.getLegacyFile("html"));
    }
  } // Chrome/Safari/Opera have serious bug with tabbing to the <object> tree:
  // https://code.google.com/p/chromium/issues/detail?id=255150


  util$index$$default.register({
    context: function context(name) {
      var callback = arguments[1];
      if (callback === void 0) callback = function callback() {};
      var contexts = this._["context2001001"],
          data = contexts[name] || [];

      if (data[0]) {
        // callback is always async
        WINDOW.setTimeout(function () {
          callback(data[1]);
        }, 1);
        return data[0];
      } // use innerHTML instead of creating element manually because of IE8


      var ctx = DOM.create(element$context$$CONTEXT_TEMPLATE);
      var object = ctx.get("firstChild"); // set onload handler before adding element to the DOM

      object.onload = function () {
        // apply user-defined styles for the context
        // need to add class in ready callback because of IE8
        if (ctx.addClass(name).css("position") === "static") {
          ctx.css("position", "relative");
        } // store new context root internally and invoke callback


        callback(data[1] = new $Document(object.contentDocument));
      };

      this.before(ctx);

      if (JSCRIPT_VERSION) {
        // IE doesn't work if to set the data attribute before adding
        // the <object> element to the DOM. IE8 will ignore this change
        // and won't start builing a new document for about:blank
        object.data = "about:blank";

        if (JSCRIPT_VERSION < 9) {
          // IE8 does not support onload - use timeout instead
          DOM.requestFrame(function repeat() {
            if (!object.contentDocument) {
              return DOM.requestFrame(repeat);
            }

            var frameId; // add extra sizes and cut the frame border

            ctx[0].attachEvent("onresize", function () {
              frameId = frameId || DOM.requestFrame(function () {
                object.width = ctx[0].offsetWidth + 4;
                object.height = ctx[0].offsetHeight + 4;
                frameId = null;
              });
            });
            object.onload();
          });
        }
      } // store context data internally


      contexts[name] = data;
      return data[0] = ctx;
    }
  }); // Helper for CSS properties access

  var util$stylehooks$$reDash = /\-./g,
      util$stylehooks$$cssPrefixes = ["Webkit", "O", "Moz", "ms"],
      util$stylehooks$$hooks = {
    get: {},
    set: {},
    find: function find(name, style) {
      var propName = name.replace(util$stylehooks$$reDash, function (str) {
        return str[1].toUpperCase();
      });

      if (!(propName in style)) {
        propName = util$stylehooks$$cssPrefixes.map(function (prefix) {
          return prefix + propName[0].toUpperCase() + propName.slice(1);
        }).filter(function (prop) {
          return prop in style;
        })[0];
      }

      return this.get[name] = this.set[name] = propName;
    }
  },
      util$stylehooks$$directions = ["Top", "Right", "Bottom", "Left"],
      util$stylehooks$$shortCuts = {
    font: ["fontStyle", "fontSize", "/", "lineHeight", "fontFamily"],
    padding: util$stylehooks$$directions.map(function (dir) {
      return "padding" + dir;
    }),
    margin: util$stylehooks$$directions.map(function (dir) {
      return "margin" + dir;
    }),
    "border-width": util$stylehooks$$directions.map(function (dir) {
      return "border" + dir + "Width";
    }),
    "border-style": util$stylehooks$$directions.map(function (dir) {
      return "border" + dir + "Style";
    })
  }; // Exclude the following css properties from adding px

  " float fill-opacity font-weight line-height opacity orphans widows z-index zoom ".split(" ").forEach(function (propName) {
    var stylePropName = propName.replace(util$stylehooks$$reDash, function (str) {
      return str[1].toUpperCase();
    });

    if (propName === "float") {
      stylePropName = "cssFloat" in HTML.style ? "cssFloat" : "styleFloat"; // normalize float css property

      util$stylehooks$$hooks.get[propName] = util$stylehooks$$hooks.set[propName] = stylePropName;
    } else {
      util$stylehooks$$hooks.get[propName] = stylePropName;

      util$stylehooks$$hooks.set[propName] = function (value, style) {
        style[stylePropName] = value.toString();
      };
    }
  }); // normalize property shortcuts

  util$index$$default.keys(util$stylehooks$$shortCuts).forEach(function (key) {
    var props = util$stylehooks$$shortCuts[key];

    util$stylehooks$$hooks.get[key] = function (style) {
      var result = [],
          hasEmptyStyleValue = function hasEmptyStyleValue(prop, index) {
        result.push(prop === "/" ? prop : style[prop]);
        return !result[index];
      };

      return props.some(hasEmptyStyleValue) ? "" : result.join(" ");
    };

    util$stylehooks$$hooks.set[key] = function (value, style) {
      if (value && "cssText" in style) {
        // normalize setting complex property across browsers
        style.cssText += ";" + key + ":" + value;
      } else {
        props.forEach(function (name) {
          return style[name] = typeof value === "number" ? value + "px" : value.toString();
        });
      }
    };
  });
  var util$stylehooks$$default = util$stylehooks$$hooks;
  util$index$$default.register({
    css: function css(name, value) {
      var this$0 = this;
      var len = arguments.length,
          node = this[0],
          style = node.style,
          computed;

      if (len === 1 && (typeof name === "string" || util$index$$default.isArray(name))) {
        var strategy = function strategy(name) {
          var getter = util$stylehooks$$default.get[name] || util$stylehooks$$default.find(name, style),
              value = typeof getter === "function" ? getter(style) : style[getter];

          if (!value) {
            if (!computed) computed = util$index$$default.computeStyle(node);
            value = typeof getter === "function" ? getter(computed) : computed[getter];
          }

          return value;
        };

        if (typeof name === "string") {
          return strategy(name);
        } else {
          return name.map(strategy).reduce(function (memo, value, index) {
            memo[name[index]] = value;
            return memo;
          }, {});
        }
      }

      if (len === 2 && typeof name === "string") {
        var setter = util$stylehooks$$default.set[name] || util$stylehooks$$default.find(name, style);

        if (typeof value === "function") {
          value = value(this);
        }

        if (value == null) value = "";

        if (typeof setter === "function") {
          setter(value, style);
        } else {
          style[setter] = typeof value === "number" ? value + "px" : value.toString();
        }
      } else if (len === 1 && name && _typeof(name) === "object") {
        util$index$$default.keys(name).forEach(function (key) {
          this$0.css(key, name[key]);
        });
      } else {
        throw new errors$$MethodError("css", arguments);
      }

      return this;
    }
  }, function () {
    return function (name) {
      if (arguments.length === 1 && util$index$$default.isArray(name)) {
        return {};
      }

      if (arguments.length !== 1 || typeof name !== "string") {
        return this;
      }
    };
  });
  var element$define$$ATTR_CASE = JSCRIPT_VERSION < 9 ? "toUpperCase" : "toLowerCase";
  util$index$$default.register({
    define: function define(name, getter, setter) {
      var this$0 = this;
      var node = this[0];

      if (typeof name !== "string" || typeof getter !== "function" || typeof setter !== "function") {
        throw new errors$$MethodError("define", arguments);
      } // Use trick to fix infinite recursion in IE8:
      // http://www.smashingmagazine.com/2014/11/28/complete-polyfill-html5-details-element/


      var attrName = name[element$define$$ATTR_CASE]();
      var _setAttribute = node.setAttribute;
      var _removeAttribute = node.removeAttribute;

      if (JSCRIPT_VERSION < 9) {
        // read attribute before the defineProperty call
        // to set the correct initial state for IE8
        var initialValue = node.getAttribute(name);

        if (initialValue !== null) {
          node[attrName] = initialValue;
        }
      }

      Object.defineProperty(node, name, {
        get: function get() {
          var attrValue = node.getAttribute(attrName, 1); // attr value -> prop value

          return getter.call(this$0, attrValue);
        },
        set: function set(propValue) {
          // prop value -> attr value
          var attrValue = setter.call(this$0, propValue);

          if (attrValue == null) {
            _removeAttribute.call(node, attrName, 1);
          } else {
            _setAttribute.call(node, attrName, attrValue, 1);
          }
        }
      }); // override methods to catch changes from attributes too

      node.setAttribute = function (name, value, flags) {
        if (attrName === name[element$define$$ATTR_CASE]()) {
          node[name] = getter.call(this$0, value);
        } else {
          _setAttribute.call(node, name, value, flags);
        }
      };

      node.removeAttribute = function (name, flags) {
        if (attrName === name[element$define$$ATTR_CASE]()) {
          node[name] = getter.call(this$0, null);
        } else {
          _removeAttribute.call(node, name, flags);
        }
      };

      return this;
    }
  });
  util$index$$default.register({
    empty: function empty() {
      return this.set("");
    }
  }); // big part of code inspired by Sizzle:
  // https://github.com/jquery/sizzle/blob/master/sizzle.js

  var element$find$$rquick = DOCUMENT.getElementsByClassName ? /^(?:(\w+)|\.([\w\-]+))$/ : /^(?:(\w+))$/,
      element$find$$rescape = /'|\\/g,
      element$find$$makeMethod = function element$find$$makeMethod(all) {
    return function (selector) {
      if (typeof selector !== "string") throw new errors$$MethodError("find" + all, arguments);
      var node = this[0],
          quickMatch = element$find$$rquick.exec(selector),
          result,
          old,
          nid,
          context;

      if (quickMatch) {
        if (quickMatch[1]) {
          // speed-up: "TAG"
          result = node.getElementsByTagName(selector);
        } else {
          // speed-up: ".CLASS"
          result = node.getElementsByClassName(quickMatch[2]);
        }

        if (result && !all) result = result[0];
      } else {
        old = true;
        context = node;

        if (node !== node.ownerDocument.documentElement) {
          // qSA works strangely on Element-rooted queries
          // We can work around this by specifying an extra ID on the root
          // and working up from there (Thanks to Andrew Dupont for the technique)
          if (old = node.getAttribute("id")) {
            nid = old.replace(element$find$$rescape, "\\$&");
          } else {
            nid = "DOM2001001";
            node.setAttribute("id", nid);
          }

          nid = "[id='" + nid + "'] ";
          selector = nid + selector.split(",").join("," + nid);
        }

        result = util$index$$default.safeCall(context, "querySelector" + all, selector);
        if (!old) node.removeAttribute("id");
      }

      return all ? util$index$$default.map.call(result, $Element) : $Element(result);
    };
  };

  util$index$$default.register({
    find: element$find$$makeMethod(""),
    findAll: element$find$$makeMethod("All")
  }, function (methodName) {
    return methodName === "find" ? function () {
      return new $NullElement();
    } : function () {
      return [];
    };
  });
  var util$eventhooks$$hooks = {};

  if ("onfocusin" in DOCUMENT.documentElement) {
    util$eventhooks$$hooks.focus = function (handler) {
      handler._type = "focusin";
    };

    util$eventhooks$$hooks.blur = function (handler) {
      handler._type = "focusout";
    };
  } else {
    // firefox doesn't support focusin/focusout events
    util$eventhooks$$hooks.focus = util$eventhooks$$hooks.blur = function (handler) {
      handler.capturing = true;
    };
  }

  if (DOCUMENT.createElement("input").validity) {
    util$eventhooks$$hooks.invalid = function (handler) {
      handler.capturing = true;
    };
  }

  if (JSCRIPT_VERSION < 9) {
    // fix non-bubbling form events for IE8 therefore
    // use custom event type instead of original one
    ["submit", "change", "reset"].forEach(function (name) {
      util$eventhooks$$hooks[name] = function (handler) {
        handler._type = "_";
      };
    });
  }

  var util$eventhooks$$default = util$eventhooks$$hooks;

  function util$eventhandler$$getEventProperty(name, e, type, node, target, currentTarget) {
    if (typeof name === "number") {
      var args = e["__2001001__"];
      return args ? args[name] : void 0;
    }

    if (JSCRIPT_VERSION < 9) {
      var docEl = node.ownerDocument.documentElement;

      switch (name) {
        case "which":
          return e.keyCode;

        case "button":
          var button = e.button; // click: 1 === left; 2 === middle; 3 === right

          return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;

        case "pageX":
          return e.clientX + docEl.scrollLeft - docEl.clientLeft;

        case "pageY":
          return e.clientY + docEl.scrollTop - docEl.clientTop;

        case "preventDefault":
          return function () {
            return e.returnValue = false;
          };

        case "stopPropagation":
          return function () {
            return e.cancelBubble = true;
          };
      }
    }

    switch (name) {
      case "type":
        return type;

      case "defaultPrevented":
        // IE8 and Android 2.3 use returnValue instead of defaultPrevented
        return "defaultPrevented" in e ? e.defaultPrevented : e.returnValue === false;

      case "target":
        return $Element(target);

      case "currentTarget":
        return $Element(currentTarget);

      case "relatedTarget":
        return $Element(e.relatedTarget || e[(e.toElement === node ? "from" : "to") + "Element"]);
    }

    var value = e[name];

    if (typeof value === "function") {
      return function () {
        return value.apply(e, arguments);
      };
    }

    return value;
  }

  function util$eventhandler$$EventHandler(type, selector, callback, props, el, once) {
    var node = el[0],
        hook = util$eventhooks$$default[type],
        matcher = util$selectormatcher$$default(selector, node),
        _handler = function handler(e) {
      e = e || WINDOW.event; // early stop in case of default action

      if (util$eventhandler$$EventHandler.skip === type) return;

      if (_handler._type === CUSTOM_EVENT_TYPE && e.srcUrn !== type) {
        return; // handle custom events in legacy IE
      } // srcElement can be null in legacy IE when target is document


      var target = e.target || e.srcElement || node.ownerDocument.documentElement,
          currentTarget = matcher ? matcher(target) : node,
          args = props || []; // early stop for late binding or when target doesn't match selector

      if (!currentTarget) return; // off callback even if it throws an exception later

      if (once) el.off(type, callback);

      if (props) {
        args = args.map(function (name) {
          return util$eventhandler$$getEventProperty(name, e, type, node, target, currentTarget);
        });
      } else {
        args = util$index$$default.slice.call(e["__2001001__"] || [0], 1);
      } // prevent default if handler returns false


      if (callback.apply(el, args) === false) {
        if (JSCRIPT_VERSION < 9) {
          e.returnValue = false;
        } else {
          e.preventDefault();
        }
      }
    };

    if (hook) _handler = hook(_handler, type) || _handler;

    if (JSCRIPT_VERSION < 9 && !("on" + (_handler._type || type) in node)) {
      // handle custom events for IE8
      _handler._type = CUSTOM_EVENT_TYPE;
    }

    _handler.type = type;
    _handler.callback = callback;
    _handler.selector = selector;
    return _handler;
  }

  var util$eventhandler$$default = util$eventhandler$$EventHandler;
  util$index$$default.register({
    fire: function fire(type) {
      var node = this[0],
          e,
          eventType,
          canContinue;

      if (typeof type === "string") {
        var hook = util$eventhooks$$default[type],
            handler = {};
        if (hook) handler = hook(handler) || handler;
        eventType = handler._type || type;
      } else {
        throw new errors$$MethodError("fire", arguments);
      }

      if (JSCRIPT_VERSION < 9) {
        e = node.ownerDocument.createEventObject();
        e["__2001001__"] = arguments; // handle custom events for legacy IE

        if (!("on" + eventType in node)) eventType = CUSTOM_EVENT_TYPE; // store original event type

        if (eventType === CUSTOM_EVENT_TYPE) e.srcUrn = type;
        node.fireEvent("on" + eventType, e);
        canContinue = e.returnValue !== false;
      } else {
        e = node.ownerDocument.createEvent("HTMLEvents");
        e["__2001001__"] = arguments;
        e.initEvent(eventType, true, true);
        canContinue = node.dispatchEvent(e);
      } // call native function to trigger default behavior


      if (canContinue && node[type]) {
        // prevent re-triggering of the current event
        util$eventhandler$$default.skip = type;
        util$index$$default.safeCall(node, type);
        util$eventhandler$$default.skip = null;
      }

      return canContinue;
    }
  }, function () {
    return function () {
      return true;
    };
  });
  var util$accessorhooks$$hooks = {
    get: {},
    set: {}
  }; // fix camel cased attributes

  "tabIndex readOnly maxLength cellSpacing cellPadding rowSpan colSpan useMap frameBorder contentEditable".split(" ").forEach(function (key) {
    util$accessorhooks$$hooks.get[key.toLowerCase()] = function (node) {
      return node[key];
    };
  }); // style hook

  util$accessorhooks$$hooks.get.style = function (node) {
    return node.style.cssText;
  };

  util$accessorhooks$$hooks.set.style = function (node, value) {
    node.style.cssText = value;
  }; // title hook for DOM


  util$accessorhooks$$hooks.get.title = function (node) {
    var doc = node.ownerDocument;
    return node === doc.documentElement ? doc.title : node.title;
  };

  util$accessorhooks$$hooks.set.title = function (node, value) {
    var doc = node.ownerDocument;
    (node === doc.documentElement ? doc : node).title = value;
  };

  util$accessorhooks$$hooks.get.undefined = function (node) {
    var name;

    switch (node.tagName) {
      case "SELECT":
        return ~node.selectedIndex ? node.options[node.selectedIndex].value : "";

      case "OPTION":
        name = node.hasAttribute("value") ? "value" : "text";
        break;

      default:
        name = node.type && "value" in node ? "value" : "innerHTML";
    }

    return node[name];
  };

  util$accessorhooks$$hooks.set.value = function (node, value) {
    if (node.tagName === "SELECT") {
      // selectbox has special case
      if (util$index$$default.every.call(node.options, function (o) {
        return !(o.selected = o.value === value);
      })) {
        node.selectedIndex = -1;
      }
    } else {
      // for IE use innerText for textareabecause it doesn't trigger onpropertychange
      node[JSCRIPT_VERSION < 9 && node.type === "textarea" ? "innerText" : "value"] = value;
    }
  }; // some browsers don't recognize input[type=email] etc.


  util$accessorhooks$$hooks.get.type = function (node) {
    return node.getAttribute("type") || node.type;
  };

  if (JSCRIPT_VERSION < 9) {
    // IE8 has innerText but not textContent
    util$accessorhooks$$hooks.get.textContent = function (node) {
      return node.innerText;
    };

    util$accessorhooks$$hooks.set.textContent = function (node, value) {
      node.innerText = value;
    }; // IE8 sometimes breaks on innerHTML


    util$accessorhooks$$hooks.set.innerHTML = function (node, value) {
      try {
        node.innerHTML = value;
      } catch (err) {
        node.innerText = "";
        DOM.createAll(value).forEach(function (x) {
          node.appendChild(x);
        });
      }
    };
  }

  var util$accessorhooks$$default = util$accessorhooks$$hooks;

  var element$get$$reUpper = /[A-Z]/g,
      element$get$$readPrivateProperty = function element$get$$readPrivateProperty(node, key) {
    // convert from camel case to dash-separated value
    key = key.replace(element$get$$reUpper, function (l) {
      return "-" + l.toLowerCase();
    });
    var value = node.getAttribute("data-" + key);

    if (value != null) {
      // try to recognize and parse  object notation syntax
      if (value[0] === "{" && value[value.length - 1] === "}") {
        try {
          value = JSON.parse(value);
        } catch (err) {// just return the value itself
        }
      }
    }

    return value;
  };

  util$index$$default.register({
    get: function get(name) {
      var this$0 = this;
      var node = this[0],
          hook = util$accessorhooks$$default.get[name];
      if (hook) return hook(node, name);

      if (typeof name === "string") {
        if (name in node) {
          return node[name];
        } else if (name[0] !== "_") {
          return node.getAttribute(name);
        } else {
          var key = name.slice(1),
              data = this._;

          if (!(key in data)) {
            data[key] = element$get$$readPrivateProperty(node, key);
          }

          return data[key];
        }
      } else if (util$index$$default.isArray(name)) {
        return name.reduce(function (memo, key) {
          return memo[key] = this$0.get(key), memo;
        }, {});
      } else {
        throw new errors$$MethodError("get", arguments);
      }
    }
  }, function () {
    return function () {
      return void 0;
    };
  });

  var element$manipulation$$makeMethod = function element$manipulation$$makeMethod(methodName, fastStrategy, requiresParent, strategy) {
    return function () {
      var contents = SLICE$0.call(arguments, 0);
      var this$0 = this;
      var node = this[0];
      if (requiresParent && !node.parentNode) return this; // the idea of the algorithm is to construct HTML string
      // when possible or use document fragment as a fallback to
      // invoke manipulation using a single method call

      var fragment = fastStrategy ? "" : node.ownerDocument.createDocumentFragment();
      contents.forEach(function (content) {
        if (typeof content === "function") {
          content = content(this$0);
        }

        if (typeof content === "string") {
          if (typeof fragment === "string") {
            fragment += content.trim();
          } else {
            content = DOM.createAll(content);
          }
        } else if (content instanceof $Element) {
          content = [content];
        }

        if (util$index$$default.isArray(content)) {
          if (typeof fragment === "string") {
            // append existing string to fragment
            content = DOM.createAll(fragment).concat(content); // fallback to document fragment strategy

            fragment = node.ownerDocument.createDocumentFragment();
          }

          content.forEach(function (el) {
            fragment.appendChild(el[0]);
          });
        }
      });

      if (typeof fragment === "string") {
        node.insertAdjacentHTML(fastStrategy, fragment);
      } else {
        strategy(node, fragment);
      }

      return this;
    };
  };

  util$index$$default.register({
    after: element$manipulation$$makeMethod("after", "afterend", true, function (node, relatedNode) {
      node.parentNode.insertBefore(relatedNode, node.nextSibling);
    }),
    before: element$manipulation$$makeMethod("before", "beforebegin", true, function (node, relatedNode) {
      node.parentNode.insertBefore(relatedNode, node);
    }),
    prepend: element$manipulation$$makeMethod("prepend", "afterbegin", false, function (node, relatedNode) {
      node.insertBefore(relatedNode, node.firstChild);
    }),
    append: element$manipulation$$makeMethod("append", "beforeend", false, function (node, relatedNode) {
      node.appendChild(relatedNode);
    }),
    replace: element$manipulation$$makeMethod("replace", "", true, function (node, relatedNode) {
      node.parentNode.replaceChild(relatedNode, node);
    }),
    remove: element$manipulation$$makeMethod("remove", "", true, function (node) {
      node.parentNode.removeChild(node);
    })
  });
  util$index$$default.register({
    map: function map(fn, context) {
      if (typeof fn !== "function") {
        throw new errors$$MethodError("map", arguments);
      }

      return [fn.call(context, this)];
    }
  }, function () {
    return function () {
      return [];
    };
  });

  var util$selectorhooks$$isHidden = function util$selectorhooks$$isHidden(node) {
    var computed = util$index$$default.computeStyle(node);
    return computed.visibility === "hidden" || computed.display === "none";
  };

  var util$selectorhooks$$default = {
    ":focus": function focus(node) {
      return node === node.ownerDocument.activeElement;
    },
    ":visible": function visible(node) {
      return !util$selectorhooks$$isHidden(node);
    },
    ":hidden": util$selectorhooks$$isHidden
  };
  util$index$$default.register({
    matches: function matches(selector) {
      if (!selector || typeof selector !== "string") throw new errors$$MethodError("matches", arguments);
      var checker = util$selectorhooks$$default[selector] || util$selectormatcher$$default(selector);
      return !!checker(this[0]);
    }
  }, function () {
    return function () {
      return false;
    };
  });
  util$index$$default.register({
    off: function off(type, selector, callback) {
      if (typeof type !== "string") throw new errors$$MethodError("off", arguments);

      if (callback === void 0) {
        callback = selector;
        selector = void 0;
      }

      var node = this[0];
      this._["handler2001001"] = this._["handler2001001"].filter(function (handler) {
        var skip = type !== handler.type;
        skip = skip || selector && selector !== handler.selector;
        skip = skip || callback && callback !== handler.callback;
        if (skip) return true;
        type = handler._type || handler.type;

        if (JSCRIPT_VERSION < 9) {
          node.detachEvent("on" + type, handler);
        } else {
          node.removeEventListener(type, handler, !!handler.capturing);
        }
      });
      return this;
    }
  });
  util$index$$default.register({
    offset: function offset() {
      var node = this[0],
          docEl = node.ownerDocument.documentElement,
          clientTop = docEl.clientTop,
          clientLeft = docEl.clientLeft,
          scrollTop = WINDOW.pageYOffset || docEl.scrollTop,
          scrollLeft = WINDOW.pageXOffset || docEl.scrollLeft,
          boundingRect = node.getBoundingClientRect();
      return {
        top: boundingRect.top + scrollTop - clientTop,
        left: boundingRect.left + scrollLeft - clientLeft,
        right: boundingRect.right + scrollLeft - clientLeft,
        bottom: boundingRect.bottom + scrollTop - clientTop,
        width: boundingRect.right - boundingRect.left,
        height: boundingRect.bottom - boundingRect.top
      };
    }
  }, function () {
    return function () {
      return {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        width: 0,
        height: 0
      };
    };
  });

  var element$on$$makeMethod = function element$on$$makeMethod(method) {
    return function (type, selector, args, callback) {
      var this$0 = this;

      if (typeof type === "string") {
        if (typeof args === "function") {
          callback = args;

          if (typeof selector === "string") {
            args = null;
          } else {
            args = selector;
            selector = null;
          }
        }

        if (typeof selector === "function") {
          callback = selector;
          selector = null;
          args = null;
        }

        if (typeof callback !== "function") {
          throw new errors$$MethodError(method, arguments);
        }

        var node = this[0],
            handler = util$eventhandler$$default(type, selector, callback, args, this, method === "once");

        if (handler) {
          if (JSCRIPT_VERSION < 9) {
            node.attachEvent("on" + (handler._type || type), handler);
          } else {
            node.addEventListener(handler._type || type, handler, !!handler.capturing);
          } // store event entry


          this._["handler2001001"].push(handler);
        }
      } else if (_typeof(type) === "object") {
        if (util$index$$default.isArray(type)) {
          type.forEach(function (name) {
            this$0[method](name, selector, args, callback);
          });
        } else {
          util$index$$default.keys(type).forEach(function (name) {
            this$0[method](name, type[name]);
          });
        }
      } else {
        throw new errors$$MethodError(method, arguments);
      }

      return this;
    };
  };

  util$index$$default.register({
    on: element$on$$makeMethod("on"),
    once: element$on$$makeMethod("once")
  });
  util$index$$default.register({
    set: function set(name, value) {
      var this$0 = this;
      var node = this[0]; // handle the value shortcut

      if (arguments.length === 1) {
        if (typeof name === "function") {
          value = name;
        } else {
          value = name == null ? "" : String(name);
        }

        if (value !== "[object Object]") {
          var tag = node.tagName;

          if (tag === "INPUT" || tag === "TEXTAREA" || tag === "SELECT" || tag === "OPTION") {
            name = "value";
          } else {
            name = "innerHTML";
          }
        }
      }

      var hook = util$accessorhooks$$default.set[name],
          watchers = this._["watcher2001001"][name],
          oldValue;

      if (watchers) {
        oldValue = this.get(name);
      }

      if (typeof name === "string") {
        if (name[0] === "_") {
          this._[name.slice(1)] = value;
        } else {
          if (typeof value === "function") {
            value = value(this);
          }

          if (hook) {
            hook(node, value);
          } else if (value == null) {
            node.removeAttribute(name);
          } else if (name in node) {
            node[name] = value;
          } else {
            node.setAttribute(name, value);
          }

          if (JSCRIPT_VERSION < 9 || LEGACY_ANDROID) {
            // always trigger reflow manually for IE8 and legacy Android
            node.className = node.className;
          }
        }
      } else if (util$index$$default.isArray(name)) {
        name.forEach(function (key) {
          this$0.set(key, value);
        });
      } else if (_typeof(name) === "object") {
        util$index$$default.keys(name).forEach(function (key) {
          this$0.set(key, name[key]);
        });
      } else {
        throw new errors$$MethodError("set", arguments);
      }

      if (watchers && oldValue !== value) {
        watchers.forEach(function (w) {
          util$index$$default.safeCall(this$0, w, value, oldValue);
        });
      }

      return this;
    }
  });

  var element$traversing$$makeMethod = function element$traversing$$makeMethod(methodName, propertyName, all) {
    return function (selector) {
      if (selector && typeof selector !== "string") throw new errors$$MethodError(methodName, arguments);
      var matcher = util$selectormatcher$$default(selector),
          nodes = all ? [] : null,
          it = this[0]; // method closest starts traversing from the element itself
      // except no selector was specified where it returns parent

      if (!matcher || methodName !== "closest") {
        it = it[propertyName];
      }

      for (; it; it = it[propertyName]) {
        if (it.nodeType === 1 && (!matcher || matcher(it))) {
          if (!all) break;
          nodes.push(it);
        }
      }

      return all ? util$index$$default.map.call(nodes, $Element) : $Element(it);
    };
  };

  util$index$$default.register({
    next: element$traversing$$makeMethod("next", "nextSibling"),
    prev: element$traversing$$makeMethod("prev", "previousSibling"),
    nextAll: element$traversing$$makeMethod("nextAll", "nextSibling", true),
    prevAll: element$traversing$$makeMethod("prevAll", "previousSibling", true),
    closest: element$traversing$$makeMethod("closest", "parentNode")
  }, function (methodName) {
    if (methodName.slice(-3) === "All") {
      return function () {
        return [];
      };
    } else {
      return function () {
        return new $NullElement();
      };
    }
  });
  util$index$$default.register({
    value: function value(val) {
      if (arguments.length === 0) {
        return this.get();
      } else if (typeof val === "string") {
        return this.set(val);
      } else {
        return this.set("").append(val);
      }
    }
  });

  var util$animationhandler$$TRANSITION_PROPS = ["timing-function", "property", "duration", "delay"].map(function (prop) {
    return "transition-" + prop;
  }),
      util$animationhandler$$parseTimeValue = function util$animationhandler$$parseTimeValue(value) {
    var result = parseFloat(value) || 0; // if duration is in seconds, then multiple result value by 1000

    return !result || value.slice(-2) === "ms" ? result : result * 1000;
  },
      util$animationhandler$$calcTransitionDuration = function util$animationhandler$$calcTransitionDuration(transitionValues) {
    var delays = transitionValues[3],
        durations = transitionValues[2];
    return Math.max.apply(Math, durations.map(function (value, index) {
      return util$animationhandler$$parseTimeValue(value) + (util$animationhandler$$parseTimeValue(delays[index]) || 0);
    }));
  }; // initialize hooks for properties used below


  util$animationhandler$$TRANSITION_PROPS.concat("animation-duration").forEach(function (prop) {
    util$stylehooks$$default.find(prop, HTML.style);
  });

  var util$animationhandler$$default = function util$animationhandler$$default(node, computed, animationName, hiding, done) {
    var rules, duration; // Legacy Android is usually slow and has lots of bugs in the
    // CSS animations implementation, so skip any animations for it

    if (LEGACY_ANDROID || JSCRIPT_VERSION < 10) return null;

    if (animationName) {
      duration = util$animationhandler$$parseTimeValue(computed[util$stylehooks$$default.get["animation-duration"]]);
      if (!duration) return; // skip animations with zero duration

      rules = [WEBKIT_PREFIX + "animation-direction:" + (hiding ? "normal" : "reverse"), WEBKIT_PREFIX + "animation-name:" + animationName, // for CSS3 animation element should always be visible
      "visibility:inherit"];
    } else {
      var transitionValues = util$animationhandler$$TRANSITION_PROPS.map(function (prop, index) {
        // have to use regexp to split transition-timing-function value
        return computed[util$stylehooks$$default.get[prop]].split(index ? ", " : /, (?!\d)/);
      });
      duration = util$animationhandler$$calcTransitionDuration(transitionValues);
      if (!duration) return; // skip transitions with zero duration

      if (transitionValues[1].indexOf("all") < 0) {
        // try to find existing or use 0s length or make a new visibility transition
        var visibilityIndex = transitionValues[1].indexOf("visibility");
        if (visibilityIndex < 0) visibilityIndex = transitionValues[2].indexOf("0s");
        if (visibilityIndex < 0) visibilityIndex = transitionValues[1].length;
        transitionValues[0][visibilityIndex] = "linear";
        transitionValues[1][visibilityIndex] = "visibility";
        transitionValues[hiding ? 2 : 3][visibilityIndex] = "0s";
        transitionValues[hiding ? 3 : 2][visibilityIndex] = duration + "ms";
      }

      rules = transitionValues.map(function (props, index) {
        // fill holes in a trasition property value
        for (var i = 0, n = props.length; i < n; ++i) {
          props[i] = props[i] || props[i - 1] || "initial";
        }

        return WEBKIT_PREFIX + util$animationhandler$$TRANSITION_PROPS[index] + ":" + props.join(", ");
      });
      rules.push( // append target visibility value to trigger transition
      "visibility:" + (hiding ? "hidden" : "inherit"), // use willChange to improve performance in modern browsers:
      // http://dev.opera.com/articles/css-will-change-property/
      "will-change:" + transitionValues[1].join(", "));
    }

    return {
      cssText: rules.join(";"),
      initialCssText: node.style.cssText,
      // this function used to trigger callback
      handleEvent: function handleEvent(e) {
        if (e.target === node) {
          if (animationName) {
            if (e.animationName !== animationName) return;
          } else {
            if (e.propertyName !== "visibility") return;
          }

          e.stopPropagation(); // this is an internal event

          done();
        }
      }
    };
  };

  var element$visibility$$TRANSITION_EVENT_TYPE = WEBKIT_PREFIX ? "webkitTransitionEnd" : "transitionend",
      element$visibility$$ANIMATION_EVENT_TYPE = WEBKIT_PREFIX ? "webkitAnimationEnd" : "animationend",
      element$visibility$$makeMethod = function element$visibility$$makeMethod(name, condition) {
    return function (animationName, callback) {
      var this$0 = this;

      if (typeof animationName !== "string") {
        callback = animationName;
        animationName = null;
      }

      if (callback && typeof callback !== "function") {
        throw new errors$$MethodError(name, arguments);
      }

      var node = this[0],
          style = node.style,
          computed = util$index$$default.computeStyle(node),
          hiding = condition,
          frameId = this._["frame2001001"],
          done = function done() {
        if (animationHandler) {
          node.removeEventListener(eventType, animationHandler, true); // clear inline style adjustments were made previously

          style.cssText = animationHandler.initialCssText;
        } else {
          this$0.set("aria-hidden", String(hiding));
        } // always update element visibility property: use value "inherit"
        // to respect parent container visibility. Should be a separate
        // from setting cssText because of Opera 12 quirks


        style.visibility = hiding ? "hidden" : "inherit";
        this$0._["frame2001001"] = null;
        if (callback) callback(this$0);
      };

      if (typeof hiding !== "boolean") {
        hiding = computed.visibility !== "hidden";
      } // cancel previous frame if it exists


      if (frameId) DOM.cancelFrame(frameId);

      if (!node.ownerDocument.documentElement.contains(node)) {
        // apply attribute/visibility syncronously for detached DOM elements
        // because browser returns zero animation/transition duration for them
        done();
      } else {
        var animationHandler = util$animationhandler$$default(node, computed, animationName, hiding, done),
            eventType = animationName ? element$visibility$$ANIMATION_EVENT_TYPE : element$visibility$$TRANSITION_EVENT_TYPE; // use requestAnimationFrame to avoid animation quirks for
        // new elements inserted into the DOM
        // http://christianheilmann.com/2013/09/19/quicky-fading-in-a-newly-created-element-using-css/

        this._["frame2001001"] = DOM.requestFrame(!animationHandler ? done : function () {
          node.addEventListener(eventType, animationHandler, true); // update modified style rules

          style.cssText = animationHandler.initialCssText + animationHandler.cssText; // trigger CSS3 transition / animation

          this$0.set("aria-hidden", String(hiding));
        });
      }

      return this;
    };
  };

  util$index$$default.register({
    show: element$visibility$$makeMethod("show", false),
    hide: element$visibility$$makeMethod("hide", true),
    toggle: element$visibility$$makeMethod("toggle")
  });
  util$index$$default.register({
    watch: function watch(name, callback) {
      var watchers = this._["watcher2001001"];
      if (!watchers[name]) watchers[name] = [];
      watchers[name].push(callback);
      return this;
    },
    unwatch: function unwatch(name, callback) {
      var watchers = this._["watcher2001001"];

      if (watchers[name]) {
        watchers[name] = watchers[name].filter(function (w) {
          return w !== callback;
        });
      }

      return this;
    }
  });
  var util$extensionhandler$$rePrivateFunction = /^(?:on|do)[A-Z]/;

  var util$extensionhandler$$default = function util$extensionhandler$$default(selector, condition, mixins, index) {
    var ctr = mixins.hasOwnProperty("constructor") && mixins.constructor,
        matcher = util$selectormatcher$$default(selector);
    return function (node, mock) {
      var el = $Element(node); // skip previously invoked or mismatched elements

      if (~el._["extension2001001"].indexOf(index) || !matcher(node)) return; // mark extension as invoked

      el._["extension2001001"].push(index);

      if (mock === true || condition(el) !== false) {
        // apply all private/public members to the element's interface
        var privateFunctions = Object.keys(mixins).filter(function (prop) {
          var value = mixins[prop]; // TODO: private functions are deprecated, remove this line later

          if (util$extensionhandler$$rePrivateFunction.exec(prop)) {
            // preserve context for private functions
            el[prop] = function () {
              return value.apply(el, arguments);
            };

            return !mock;
          }

          if (prop !== "constructor") {
            el[prop] = value;
            return !mock && prop[0] === "_";
          }
        }); // invoke constructor if it exists
        // make a safe call so live extensions can't break each other

        if (ctr) util$index$$default.safeCall(el, ctr); // remove event handlers from element's interface

        privateFunctions.forEach(function (prop) {
          delete el[prop];
        });
      }
    };
  }; // Inspired by trick discovered by Daniel Buchner:
  // https://github.com/csuwldcat/SelectorListener


  var global$extend$$extensions = [],
      global$extend$$returnTrue = function global$extend$$returnTrue() {
    return true;
  },
      global$extend$$returnFalse = function global$extend$$returnFalse() {
    return false;
  },
      global$extend$$cssText;

  DOM.extend = function (selector, condition, definition) {
    if (arguments.length === 2) {
      definition = condition;
      condition = true;
    }

    if (typeof condition === "boolean") condition = condition ? global$extend$$returnTrue : global$extend$$returnFalse;
    if (typeof definition === "function") definition = {
      constructor: definition
    };
    if (!definition || _typeof(definition) !== "object" || typeof condition !== "function") throw new errors$$StaticMethodError("extend", arguments);

    if (selector === "*") {
      util$index$$default.keys(definition).forEach(function (methodName) {
        $Element.prototype[methodName] = definition[methodName];
      });
    } else {
      var ext = util$extensionhandler$$default(selector, condition, definition, global$extend$$extensions.length);
      global$extend$$extensions.push(ext); // initialize extension manually to make sure that all elements
      // have appropriate methods before they are used in other DOM.extend.
      // Also fixes legacy IEs when the HTC behavior is already attached

      util$index$$default.each.call(DOCUMENT.querySelectorAll(selector), ext); // MUST be after querySelectorAll because of legacy IEs quirks

      DOM.importStyles(selector, global$extend$$cssText);
    }
  };

  if (JSCRIPT_VERSION < 10) {
    global$extend$$cssText = "-ms-behavior:url(" + util$index$$default.getLegacyFile("htc") + ") !important";
    DOCUMENT.attachEvent("on" + CUSTOM_EVENT_TYPE, function () {
      var e = WINDOW.event;

      if (e.srcUrn === CUSTOM_EVENT_TYPE) {
        global$extend$$extensions.forEach(function (ext) {
          ext(e.srcElement);
        });
      }
    });
  } else {
    var global$extend$$_extend = DOM.extend;
    global$extend$$cssText = WEBKIT_PREFIX + "animation-name:DOM2001001 !important;";
    global$extend$$cssText += WEBKIT_PREFIX + "animation-duration:1ms !important";

    DOM.extend = function () {
      // declare the fake animation on the first DOM.extend method call
      DOM.importStyles("@" + WEBKIT_PREFIX + "keyframes DOM2001001", "from {opacity:.99} to {opacity:1}"); // restore original method and invoke it

      (DOM.extend = global$extend$$_extend).apply(DOM, arguments);
    }; // use capturing to suppress internal animationstart events


    DOCUMENT.addEventListener(WEBKIT_PREFIX ? "webkitAnimationStart" : "animationstart", function (e) {
      if (e.animationName === "DOM2001001") {
        global$extend$$extensions.forEach(function (ext) {
          ext(e.target);
        }); // this is an internal event - stop it immediately

        e.stopImmediatePropagation();
      }
    }, true);
  }

  var global$extend$$default = global$extend$$extensions;
  var global$format$$reVar = /\{([\w\-]+)\}/g;

  DOM.format = function (tmpl, varMap) {
    if (typeof tmpl !== "string") tmpl = String(tmpl);
    if (!varMap || _typeof(varMap) !== "object") varMap = {};
    return tmpl.replace(global$format$$reVar, function (x, name, index) {
      if (name in varMap) {
        x = varMap[name];
        if (typeof x === "function") x = x(index);
        x = String(x);
      }

      return x;
    });
  };

  var global$frame$$raf = WINDOW.requestAnimationFrame,
      global$frame$$craf = WINDOW.cancelAnimationFrame,
      global$frame$$lastTime = 0;

  if (!(global$frame$$raf && global$frame$$craf)) {
    ["ms", "moz", "webkit", "o"].forEach(function (prefix) {
      global$frame$$raf = global$frame$$raf || WINDOW[prefix + "RequestAnimationFrame"];
      global$frame$$craf = global$frame$$craf || WINDOW[prefix + "CancelAnimationFrame"];
    });
  }

  DOM.requestFrame = function (callback) {
    if (global$frame$$raf) {
      return global$frame$$raf.call(WINDOW, callback);
    } else {
      // use idea from Erik Möller's polyfill:
      // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
      var currTime = Date.now();
      var timeToCall = Math.max(0, 16 - (currTime - global$frame$$lastTime));
      global$frame$$lastTime = currTime + timeToCall;
      return WINDOW.setTimeout(function () {
        callback(currTime + timeToCall);
      }, timeToCall);
    }
  };

  DOM.cancelFrame = function (frameId) {
    if (global$frame$$craf) {
      global$frame$$craf.call(WINDOW, frameId);
    } else {
      WINDOW.clearTimeout(frameId);
    }
  };

  function global$mock$$applyExtensions(node) {
    global$extend$$default.forEach(function (ext) {
      ext(node, true);
    });
    util$index$$default.each.call(node.children, global$mock$$applyExtensions);
  }

  DOM.mock = function (content, varMap) {
    if (!content) return new $NullElement();
    var result = DOM.create(content, varMap);
    global$mock$$applyExtensions(result[0]);
    return result;
  };

  var exports$$_DOM = WINDOW.DOM;

  DOM.noConflict = function () {
    if (WINDOW.DOM === DOM) {
      WINDOW.DOM = exports$$_DOM;
    }

    return DOM;
  };

  WINDOW.DOM = DOM;
})();
"use strict";

/**
 * better-details-polyfill: <details> polyfill for better-dom
 * @version 2.1.0 Tue, 16 Dec 2014 17:37:23 GMT
 * @link https://github.com/chemerisuk/better-details-polyfill
 * @copyright 2014 Maksim Chemerisuk
 * @license MIT
 */
(function (DOM, VK_SPACE, VK_ENTER) {
  "use strict"; // add ARIA attributes for ALL browsers because current
  // native implementaions are weak:
  // https://bugs.webkit.org/show_bug.cgi?id=131111

  var hasNativeSupport = typeof DOM.create("details").get("open") === "boolean";

  if (hasNativeSupport) {
    return;
  }

  document.documentElement.dataset.detailsPolyfilled = true;
  DOM.extend("details", {
    constructor: function constructor() {
      // http://www.w3.org/html/wg/drafts/html/master/interactive-elements.html#the-details-element
      this.set("role", "group").on("toggle", ["stopPropagation"], this._changeOpen.bind(this));
      var firstSummary = this.children("summary")[0]; // If there is no child summary element, the user agent
      // should provide its own legend (e.g. "Details")

      if (!firstSummary) firstSummary = DOM.create("summary>`Details`"); // make the first <summary> always to be the first child

      if (this.child(0) !== firstSummary) {
        this.prepend(firstSummary);
      } // http://www.w3.org/html/wg/drafts/html/master/interactive-elements.html#the-summary-element


      firstSummary.set("role", "button");
      /* istanbul ignore if */

      if (!hasNativeSupport) {
        this.define("open", this._getOpen, this._setOpen);

        this._initSummary(firstSummary);
      }

      this._changeOpen();
    },
    _initSummary: function _initSummary(summary) {
      summary.set("tabindex", 0).on("keydown", ["which"], this._toggleOpen.bind(this)).on("click", this._toggleOpen.bind(this));
    },
    _changeOpen: function _changeOpen(stop) {
      this.set("aria-expanded", this.get("open"));
      if (stop) stop(); // toggle event should not bubble
    },
    _getOpen: function _getOpen(attrValue) {
      attrValue = String(attrValue).toLowerCase();
      return attrValue === "" || attrValue === "open";
    },
    _setOpen: function _setOpen(propValue) {
      var this$0 = this;
      var currentValue = this.get("open");
      propValue = !!propValue;

      if (currentValue !== propValue) {
        // have to use setTimeout because the event should
        // fire AFTER the attribute was updated
        setTimeout(function () {
          this$0.fire("toggle");
        }, 0);
      }

      return propValue ? "" : null;
    },
    _toggleOpen: function _toggleOpen(key) {
      if (!key || key === VK_SPACE || key === VK_ENTER) {
        this.set("open", !this.get("open")); // need to prevent default, because
        // the enter key usually submits a form

        return false;
      }
    }
  });
})(window.DOM, 32, 13); // DOM.importStyles("@media all", "summary:first-child~*{display:none}details[open]>*{display:block}details>summary:first-child{display:block}details:before{content:'\\25BA';font-family:serif;font-size:.75em;margin-top:.25em;margin-left:.25em;position:absolute}details[open]:before{content:'\\25BC'}summary:first-child{text-indent:1.25em}details::before{content:'';width:0;height:0;border:solid transparent;border-left-color:inherit;border-width:.25em .5em;margin-top:.75em;margin-left:.5em;-webkit-transform:rotate(0deg) scale(1.5);-ms-transform:rotate(0deg) scale(1.5);transform:rotate(0deg) scale(1.5);-webkit-transform-origin:25% 50%;-ms-transform-origin:25% 50%;transform-origin:25% 50%;-webkit-transition:-webkit-transform .15s ease-out;transition:transform .15s ease-out}details[open]::before{content:'';-webkit-transform:rotate(90deg) scale(1.5);-ms-transform:rotate(90deg) scale(1.5);transform:rotate(90deg) scale(1.5)}summary::-webkit-details-marker{display:none}");
// DOM.importStyles("@media all", `html[data-details-polyfilled="true"] summary:first-child~*{display:none}html[data-details-polyfilled="true"] details[open]>*{display:block} html[data-details-polyfilled="true"] details>summary:first-child{display:block}html[data-details-polyfilled="true"] details:before{content:'\\25BA';font-family:serif;font-size:.75em;margin-top:.25em;margin-left:.25em;position:absolute}html[data-details-polyfilled="true"] details[open]:before{content:'\\25BC'}html[data-details-polyfilled="true"] summary:first-child{text-indent:1.25em}html[data-details-polyfilled="true"] details::before{content:'';width:0;height:0;border:solid transparent;border-left-color:inherit;border-width:.25em .5em;margin-top:.75em;margin-left:.5em;-webkit-transform:rotate(0deg) scale(1.5);-ms-transform:rotate(0deg) scale(1.5);transform:rotate(0deg) scale(1.5);-webkit-transform-origin:25% 50%;-ms-transform-origin:25% 50%;transform-origin:25% 50%;-webkit-transition:-webkit-transform .15s ease-out;transition:transform .15s ease-out}html[data-details-polyfilled="true"] details[open]::before{content:'';-webkit-transform:rotate(90deg) scale(1.5);-ms-transform:rotate(90deg) scale(1.5);transform:rotate(90deg) scale(1.5)}html[data-details-polyfilled="true"] summary::-webkit-details-marker{display:none}`);
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

(function ($) {
  "use strict";

  var setHeight = function setHeight(details) {
    var open = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    details.open = open;
    var rect = details.getBoundingClientRect();
    details.dataset.width = rect.width;

    if (open) {
      details.dataset.panelHeight = details.querySelector('.panel').offsetHeight;
    }

    details.style.setProperty(open ? "--expanded" : "--collapsed", "".concat(rect.height, "px"));
  };

  var __details = [];

  var __openDetails;

  var __observer;

  var Accordion = /*#__PURE__*/function () {
    function Accordion(el) {
      _classCallCheck(this, Accordion);

      this.el = el;
      this.panel = el.querySelector('.panel');
      this.initialize();
    }

    _createClass(Accordion, [{
      key: "initialize",
      value: function initialize() {
        var _this = this;

        if (!window.ResizeObserver) {
          // not supported; punt
          return;
        }

        if (!__observer) {
          __observer = new ResizeObserver(function (entries) {
            return entries.forEach(function (entry) {
              var el = entry.target;

              if (el.nodeName == 'DETAILS') {
                var width = parseInt(el.dataset.width, 10);
                var openState = el.open; // if (width !== entry.contentRect.width) {

                if (width !== el.clientWidth) {
                  el.removeAttribute('style');
                  setHeight(el);
                  setHeight(el, true);
                  el.open = el.dataset.interactive == 'false' ? true : openState;
                }
              } else if (el.nodeName == 'DIV') {
                var details = el.closest('details');
                var summary = details.querySelector('summary');
                var panelHeight = parseInt(details.dataset.panelHeight || 0, 10);
                var offsetHeight = el.offsetHeight;
                requestAnimationFrame(function () {
                  el.clientWidth; // force a reflow

                  HT.log("-- panel check", panelHeight, offsetHeight, el.offsetHeight > 0);
                  var updated_expanded = "".concat(el.offsetHeight + summary.offsetHeight + 45, "px");
                  var expanded = details.style.getPropertyValue('--expanded');

                  if (updated_expanded != expanded) {
                    details.style.setProperty("--expanded", updated_expanded);
                  }
                });
                HT.log("-- panel", panelHeight, el.offsetHeight, entry.contentRect.height);
              }
            });
          });
        }

        __observer.observe(this.el);

        __observer.observe(this.el.querySelector('.panel'));

        __details.push(this.el);

        this.el.addEventListener('toggle', function (event) {
          if (_this.el.open && _this.el.dataset.interactive != 'false') {
            // close the other details
            if (__openDetails && __openDetails != _this.el) {
              __openDetails.open = false;
            }

            __openDetails = _this.el;
            requestAnimationFrame(function () {
              if (_this.el.dataset.ignoreScrollIntoView == 'true') {
                _this.el.dataset.ignoreScrollIntoView = false;
                return;
              }

              _this.el.scrollIntoView(true);
            });
          }
        });
      }
    }]);

    return Accordion;
  }();

  Accordion.configure = function (selector) {
    var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    wrapper.querySelectorAll(selector).forEach(function (details) {
      new Accordion(details);
    });
  };

  $.Accordion = Accordion;
  window.addEventListener('load', function (event) {
    Accordion.configure('details[data-role="accordion"]');
  });
})(window, 32, 13);
"use strict";

head.ready(function () {
  // initialize tooltips
  tippy.delegate('#root', {
    target: '[data-tippy-role="tooltip"]',
    content: function content(reference) {
      // reference.dataset.untoggledLabel = reference.getAttribute('aria-label');
      // return reference.dataset.untoggledLabel;
      if (reference.dataset.toggledLabel && !reference.dataset.untoggledLabel) {
        reference.dataset.untoggledLabel = reference.getAttribute('aria-label');
      }

      return reference.getAttribute('aria-label');
    },
    theme: 'hathitrust'
  });
  setTimeout(function () {
    document.querySelectorAll('.share-toolbar button').forEach(function (button) {
      button.dataset.tippyRole = 'tooltip';
      button.dataset.role = null;
    });
  }, 100);
});
"use strict";

var HT = HT || {};
HT.isLogging = false;

HT.log = function () {
  if (HT.isLogging) {
    console.log.apply(console, arguments);
  }
};

head.ready(function () {
  HT.renew_auth = function (entityID) {
    var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image';

    if (HT.__renewing) {
      return;
    }

    HT.__renewing = true;
    setTimeout(function () {
      var reauth_url = "https://".concat(HT.service_domain, "/Shibboleth.sso/Login?entityID=").concat(entityID, "&target=").concat(encodeURIComponent(window.location.href));
      var retval = window.confirm("We're having a problem with your session; select OK to log in again.");

      if (retval) {
        window.location.href = reauth_url;
      }
    }, 100);
  };

  HT.analytics = HT.analytics || {};

  HT.analytics.logAction = function (href, trigger) {
    if (href === undefined) {
      href = location.href;
    }

    var delim = href.indexOf(';') > -1 ? ';' : '&';

    if (trigger == null) {
      trigger = '-';
    }

    href += delim + 'a=' + trigger;
    $.ajax(href, {
      complete: function complete(xhr, status) {
        var entityID = xhr.getResponseHeader('x-hathitrust-renew');

        if (entityID) {
          HT.renew_auth(entityID, 'logAction');
        }
      }
    });
  };

  $("body").on('click', 'a[data-tracking-category="outLinks"]', function (event) {
    var trigger = 'out' + $(this).attr('href');
    HT.analytics.logAction(undefined, trigger);
  });
});
"use strict";

head.ready(function () {
  var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var $emergency_access = $("#access-emergency-access");
  var delta = 5 * 60 * 1000;
  var last_seconds;

  var toggle_renew_link = function toggle_renew_link(date) {
    var now = Date.now();

    if (now >= date.getTime()) {
      var $link = $emergency_access.find("a[disabled]");
      $link.attr("disabled", null);
    }
  };

  var observe_expiration_timestamp = function observe_expiration_timestamp() {
    if (!HT || !HT.params || !HT.params.id) {
      return;
    }

    var data = $.cookie('HTexpiration', undefined, {
      json: true
    });

    if (!data) {
      return;
    }

    var seconds = data[HT.params.id];

    if (seconds == -1) {
      var $link = $emergency_access.find("p a").clone();
      $emergency_access.find("p").text("Your access has expired and cannot be renewed. Reload the page or try again later. Access has been provided through the ");
      $emergency_access.find("p").append($link);
      var $action = $emergency_access.find(".alert--emergency-access--options a");
      $action.attr('href', window.location.href);
      $action.text('Reload');
      return;
    }

    if (seconds > last_seconds) {
      var message = time2message(seconds);
      last_seconds = seconds;
      $emergency_access.find(".expires-display").text(message);
    }
  };

  var time2message = function time2message(seconds) {
    var date = new Date(seconds * 1000);
    var hours = date.getHours();
    var ampm = 'AM';

    if (hours > 12) {
      hours -= 12;
      ampm = 'PM';
    }

    if (hours == 12) {
      ampm = 'PM';
    }

    var minutes = date.getMinutes();

    if (minutes < 10) {
      minutes = "0".concat(minutes);
    }

    var message = "".concat(hours, ":").concat(minutes).concat(ampm, " ").concat(MONTHS[date.getMonth()], " ").concat(date.getDate());
    return message;
  };

  if ($emergency_access.length) {
    var expiration = $emergency_access.data('accessExpires');
    var seconds = parseInt($emergency_access.data('accessExpiresSeconds'), 10);
    var granted = $emergency_access.data('accessGranted');
    var now = Date.now() / 1000;
    var message = time2message(seconds);
    $emergency_access.find(".expires-display").text(message);
    $emergency_access.get(0).dataset.initialized = 'true';

    if (granted) {
      // set up a watch for the expiration time
      last_seconds = seconds;
      setInterval(function () {
        // toggle_renew_link(date);
        observe_expiration_timestamp();
      }, 500);
    }
  }

  if ($('#accessBannerID').length > 0) {
    var suppress = $('html').hasClass('supaccban');

    if (suppress) {
      return;
    }

    var debug = $('html').hasClass('htdev');
    var idhash = $.cookie('access.hathitrust.org', undefined, {
      json: true
    });
    var url = $.url(); // parse the current page URL

    var currid = url.param('id');

    if (idhash == null) {
      idhash = {};
    }

    var ids = [];

    for (var id in idhash) {
      if (idhash.hasOwnProperty(id)) {
        ids.push(id);
      }
    }

    if (ids.indexOf(currid) < 0 || debug) {
      var showAlert = function showAlert() {
        var html = $('#accessBannerID').html();
        var $alert = bootbox.dialog(html, [{
          label: "OK",
          "class": "btn btn-primary btn-dismiss"
        }], {
          header: 'Special access',
          role: 'alertdialog'
        });
      };

      idhash[currid] = 1; // session cookie

      $.cookie('access.hathitrust.org', idhash, {
        json: true,
        path: '/',
        domain: '.hathitrust.org'
      });
      window.setTimeout(showAlert, 3000, true);
    }
  }

  $("details.details--alert").on('toggle', function (event) {
    var detail = event.target;
    var prefs = HT.prefs.get();
    prefs.pt = prefs.pt || {};
    prefs.pt.alerts = prefs.pt.alerts || {};
    prefs.pt.alerts[detail.getAttribute('id')] = detail.open ? 'open' : 'closed';
    HT.prefs.set(prefs);
  });
});
"use strict";

/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.2.20171210
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */
if ("document" in self) {
  // Full polyfill for browsers with no classList support
  // Including IE < Edge missing SVGElement.classList
  if (!("classList" in document.createElement("_")) || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) {
    (function (view) {
      "use strict";

      if (!('Element' in view)) return;

      var classListProp = "classList",
          protoProp = "prototype",
          elemCtrProto = view.Element[protoProp],
          objCtr = Object,
          strTrim = String[protoProp].trim || function () {
        return this.replace(/^\s+|\s+$/g, "");
      },
          arrIndexOf = Array[protoProp].indexOf || function (item) {
        var i = 0,
            len = this.length;

        for (; i < len; i++) {
          if (i in this && this[i] === item) {
            return i;
          }
        }

        return -1;
      } // Vendors: please allow content code to instantiate DOMExceptions
      ,
          DOMEx = function DOMEx(type, message) {
        this.name = type;
        this.code = DOMException[type];
        this.message = message;
      },
          checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {
        if (token === "") {
          throw new DOMEx("SYNTAX_ERR", "The token must not be empty.");
        }

        if (/\s/.test(token)) {
          throw new DOMEx("INVALID_CHARACTER_ERR", "The token must not contain space characters.");
        }

        return arrIndexOf.call(classList, token);
      },
          ClassList = function ClassList(elem) {
        var trimmedClasses = strTrim.call(elem.getAttribute("class") || ""),
            classes = trimmedClasses ? trimmedClasses.split(/\s+/) : [],
            i = 0,
            len = classes.length;

        for (; i < len; i++) {
          this.push(classes[i]);
        }

        this._updateClassName = function () {
          elem.setAttribute("class", this.toString());
        };
      },
          classListProto = ClassList[protoProp] = [],
          classListGetter = function classListGetter() {
        return new ClassList(this);
      }; // Most DOMException implementations don't allow calling DOMException's toString()
      // on non-DOMExceptions. Error's toString() is sufficient here.


      DOMEx[protoProp] = Error[protoProp];

      classListProto.item = function (i) {
        return this[i] || null;
      };

      classListProto.contains = function (token) {
        return ~checkTokenAndGetIndex(this, token + "");
      };

      classListProto.add = function () {
        var tokens = arguments,
            i = 0,
            l = tokens.length,
            token,
            updated = false;

        do {
          token = tokens[i] + "";

          if (!~checkTokenAndGetIndex(this, token)) {
            this.push(token);
            updated = true;
          }
        } while (++i < l);

        if (updated) {
          this._updateClassName();
        }
      };

      classListProto.remove = function () {
        var tokens = arguments,
            i = 0,
            l = tokens.length,
            token,
            updated = false,
            index;

        do {
          token = tokens[i] + "";
          index = checkTokenAndGetIndex(this, token);

          while (~index) {
            this.splice(index, 1);
            updated = true;
            index = checkTokenAndGetIndex(this, token);
          }
        } while (++i < l);

        if (updated) {
          this._updateClassName();
        }
      };

      classListProto.toggle = function (token, force) {
        var result = this.contains(token),
            method = result ? force !== true && "remove" : force !== false && "add";

        if (method) {
          this[method](token);
        }

        if (force === true || force === false) {
          return force;
        } else {
          return !result;
        }
      };

      classListProto.replace = function (token, replacement_token) {
        var index = checkTokenAndGetIndex(token + "");

        if (~index) {
          this.splice(index, 1, replacement_token);

          this._updateClassName();
        }
      };

      classListProto.toString = function () {
        return this.join(" ");
      };

      if (objCtr.defineProperty) {
        var classListPropDesc = {
          get: classListGetter,
          enumerable: true,
          configurable: true
        };

        try {
          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
        } catch (ex) {
          // IE 8 doesn't support enumerable:true
          // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
          // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
          if (ex.number === undefined || ex.number === -0x7FF5EC54) {
            classListPropDesc.enumerable = false;
            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
          }
        }
      } else if (objCtr[protoProp].__defineGetter__) {
        elemCtrProto.__defineGetter__(classListProp, classListGetter);
      }
    })(self);
  } // There is full or partial native classList support, so just check if we need
  // to normalize the add/remove and toggle APIs.


  (function () {
    "use strict";

    var testElement = document.createElement("_");
    testElement.classList.add("c1", "c2"); // Polyfill for IE 10/11 and Firefox <26, where classList.add and
    // classList.remove exist but support only one argument at a time.

    if (!testElement.classList.contains("c2")) {
      var createMethod = function createMethod(method) {
        var original = DOMTokenList.prototype[method];

        DOMTokenList.prototype[method] = function (token) {
          var i,
              len = arguments.length;

          for (i = 0; i < len; i++) {
            token = arguments[i];
            original.call(this, token);
          }
        };
      };

      createMethod('add');
      createMethod('remove');
    }

    testElement.classList.toggle("c3", false); // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
    // support the second argument.

    if (testElement.classList.contains("c3")) {
      var _toggle = DOMTokenList.prototype.toggle;

      DOMTokenList.prototype.toggle = function (token, force) {
        if (1 in arguments && !this.contains(token) === !force) {
          return force;
        } else {
          return _toggle.call(this, token);
        }
      };
    } // replace() polyfill


    if (!("replace" in document.createElement("_").classList)) {
      DOMTokenList.prototype.replace = function (token, replacement_token) {
        var tokens = this.toString().split(" "),
            index = tokens.indexOf(token + "");

        if (~index) {
          tokens = tokens.slice(index);
          this.remove.apply(this, tokens);
          this.add(replacement_token);
          this.add.apply(this, tokens.slice(1));
        }
      };
    }

    testElement = null;
  })();
}
"use strict";

head.ready(function () {
  var DEFAULT_COLL_MENU_OPTION = "a";
  var NEW_COLL_MENU_OPTION = '__NEW__'; // "b";

  var IN_YOUR_COLLS_LABEL = 'This item is in your collection(s):';
  var $toolbar = $(".collectionLinks .select-collection");
  var $errormsg = $(".errormsg");
  var $infomsg = $(".infomsg");

  function display_error(msg) {
    if (!$errormsg.length) {
      $errormsg = $('<div class="alert alert-error errormsg" style="margin-top: 0.5rem"></div>').insertAfter($toolbar);
    }

    $errormsg.text(msg).show();
    HT.update_status(msg);
  }

  function display_info(msg) {
    if (!$infomsg.length) {
      $infomsg = $('<div class="alert alert-info infomsg" style="margin-top: 0.5rem"></div>').insertAfter($toolbar);
    }

    $infomsg.text(msg).show();
    HT.update_status(msg);
  }

  function hide_error() {
    $errormsg.hide().text();
  }

  function hide_info() {
    $infomsg.hide().text();
  }

  function get_url() {
    var url = "/cgi/mb";

    if (location.pathname.indexOf("/shcgi/") > -1) {
      url = "/shcgi/mb";
    }

    return url;
  }

  function parse_line(data) {
    var retval = {};
    var tmp = data.split("|");

    for (var i = 0; i < tmp.length; i++) {
      var kv = tmp[i].split("=");
      retval[kv[0]] = kv[1];
    }

    return retval;
  }

  function edit_collection_metadata(args) {
    var options = $.extend({
      creating: false,
      label: "Save Changes"
    }, args);
    var $block = $('<form class="form-horizontal" action="mb">' + '<div class="control-group">' + '<label class="control-label" for="edit-cn">Collection Name</label>' + '<div class="controls">' + '<input type="text" class="input-large" maxlength="100" name="cn" id="edit-cn" value="" placeholder="Your collection name" required />' + '<span class="label counter" id="edit-cn-count">100</span>' + '</div>' + '</div>' + '<div class="control-group">' + '<label class="control-label" for="edit-desc">Description</label>' + '<div class="controls">' + '<textarea id="edit-desc" name="desc" rows="4" maxlength="255" class="input-large" placeholder="Add your collection description."></textarea>' + '<span class="label counter" id="edit-desc-count">255</span>' + '</div>' + '</div>' + '<div class="control-group">' + '<label class="control-label">Is this collection <strong>Public</strong> or <strong>Private</strong>?</label>' + '<div class="controls">' + '<input type="radio" name="shrd" id="edit-shrd-0" value="0" checked="checked" > ' + '<label class="radio inline" for="edit-shrd-0">' + 'Private ' + '</label>' + '<input type="radio" name="shrd" id="edit-shrd-1" value="1" > ' + '<label class="radio inline" for="edit-shrd-1">' + 'Public ' + '</label>' + '</div>' + '</div>' + '</form>');

    if (options.cn) {
      $block.find("input[name=cn]").val(options.cn);
    }

    if (options.desc) {
      $block.find("textarea[name=desc]").val(options.desc);
    }

    if (options.shrd != null) {
      $block.find("input[name=shrd][value=" + options.shrd + ']').attr("checked", "checked");
    } else if (!HT.login_status.logged_in) {
      $block.find("input[name=shrd][value=0]").attr("checked", "checked");
      $('<div class="alert alert-info"><strong>This collection will be temporary</strong>. Log in to create permanent and public collections.</div>').appendTo($block); // remove the <label> that wraps the radio button

      $block.find("input[name=shrd][value=1]").remove();
      $block.find("label[for='edit-shrd-1']").remove();
    }

    if (options.$hidden) {
      options.$hidden.clone().appendTo($block);
    } else {
      $("<input type='hidden' name='c' />").appendTo($block).val(options.c);
      $("<input type='hidden' name='a' />").appendTo($block).val(options.a);
    }

    if (options.iid) {
      $("<input type='hidden' name='iid' />").appendTo($block).val(options.iid);
    }

    var $dialog = bootbox.dialog($block, [{
      "label": "Cancel",
      "class": "btn-dismiss"
    }, {
      "label": options.label,
      "class": "btn btn-primary btn-dismiss",
      callback: function callback() {
        var form = $block.get(0);

        if (!form.checkValidity()) {
          form.reportValidity();
          return false;
        }

        var cn = $.trim($block.find("input[name=cn]").val());
        var desc = $.trim($block.find("textarea[name=desc]").val());

        if (!cn) {
          // $('<div class="alert alert-error">You must enter a collection name.</div>').appendTo($block);
          return false;
        }

        display_info("Submitting; please wait...");
        submit_post({
          a: 'additsnc',
          cn: cn,
          desc: desc,
          shrd: $block.find("input[name=shrd]:checked").val()
        });
      }
    }]);
    $dialog.find("input[type=text],textarea").each(function () {
      var $this = $(this);
      var $count = $("#" + $this.attr('id') + "-count");
      var limit = $this.attr("maxlength");
      $count.text(limit - $this.val().length);
      $this.bind('keyup', function () {
        $count.text(limit - $this.val().length);
      });
    });
  }

  function submit_post(params) {
    var data = $.extend({}, {
      page: 'ajax',
      id: HT.params.id
    }, params);
    $.ajax({
      url: get_url(),
      data: data
    }).done(function (data) {
      var params = parse_line(data);
      hide_info();

      if (params.result == 'ADD_ITEM_SUCCESS') {
        // do something
        add_item_to_collist(params);
      } else if (params.result == 'ADD_ITEM_FAILURE') {
        display_error("Item could not be added at this time.");
      } else {
        console.log(data);
      }
    }).fail(function (jqXHR, textStatus, errorThrown) {
      console.log(textStatus, errorThrown);
    });
  }

  function add_item_to_collist(params) {
    var $ul = $(".collection-membership");
    var coll_href = get_url() + "?a=listis;c=" + params.coll_id;
    var $a = $("<a>").attr("href", coll_href).text(params.coll_name);
    $("<li></li>").appendTo($ul).append($a);
    $ul.parents("div").removeClass("hide"); // $(".collection-membership-summary").text(IN_YOUR_COLLS_LABEL);
    // and then filter out the list from the select

    var $option = $toolbar.find("option[value='" + params.coll_id + "']");
    $option.remove();
    HT.update_status("Added collection ".concat(params.coll_name, " to your list."));
  }

  function confirm_large(collSize, addNumItems, callback) {
    if (collSize <= 1000 && collSize + addNumItems > 1000) {
      var numStr;

      if (addNumItems > 1) {
        numStr = "these " + addNumItems + " items";
      } else {
        numStr = "this item";
      }

      var msg = "Note: Your collection contains " + collSize + " items.  Adding " + numStr + " to your collection will increase its size to more than 1000 items.  This means your collection will not be searchable until it is indexed, usually within 48 hours.  After that, just newly added items will see this delay before they can be searched. \n\nDo you want to proceed?";
      confirm(msg, function (answer) {
        if (answer) {
          callback();
        }
      });
    } else {
      // all other cases are okay
      callback();
    }
  } // $("#PTaddItemBtn").click(function(e) {


  $("body").on('click', '#PTaddItemBtn', function (e) {
    e.preventDefault();
    var action = 'addI';
    hide_error();
    var selected_collection_id = $toolbar.find("select").val();
    var selected_collection_name = $toolbar.find("select option:selected").text();

    if (selected_collection_id == DEFAULT_COLL_MENU_OPTION) {
      display_error("You must select a collection.");
      return;
    }

    if (selected_collection_id == NEW_COLL_MENU_OPTION) {
      // deal with new collection
      edit_collection_metadata({
        creating: true,
        c: selected_collection_id,
        id: HT.params.id,
        a: action
      });
      return;
    } // var add_num_items = 1;
    // var COLL_SIZE_ARRAY = getCollSizeArray();
    // var coll_size = COLL_SIZE_ARRAY[selected_collection_id];
    // confirm_large(coll_size, add_num_items, function() {
    //     $form.submit();
    // })


    display_info("Adding item to your collection; please wait...");
    submit_post({
      c2: selected_collection_id,
      a: 'addits'
    });
  });
});
"use strict";

head.ready(function () {
  if (!$("html").is(".crms")) {
    return;
  } // if ( $(".navbar-static-top").data('loggedin') != 'YES' && window.location.protocol == 'https:' ) {
  //     // horrible hack
  //     var target = window.location.href.replace(/\$/g, '%24');
  //     var href = 'https://' + window.location.hostname + '/Shibboleth.sso/Login?entityID=https://shibboleth.umich.edu/idp/shibboleth&target=' + target;
  //     window.location.href = href;
  //     return;
  // }
  // define CRMS state


  HT.crms_state = 'CRMS-US'; // force CRMS users to a fixed image size

  HT.force_size = 200;
  var i = window.location.href.indexOf('skin=crmsworld');

  if (i + 1 != 0) {
    HT.crms_state = 'CRMS-World';
  } // display bib information


  var $div = $(".bibLinks");
  var $p = $div.find("p:first");
  $p.find("span:empty").each(function () {
    // $(this).text($(this).attr("content")).addClass("blocked");
    var fragment = '<span class="blocked"><strong>{label}:</strong> {content}</span>';
    fragment = fragment.replace('{label}', $(this).attr('property').substr(3)).replace('{content}', $(this).attr("content"));
    $p.append(fragment);
  });
  $p.removeClass('offscreen');
  var panel = document.querySelector('#panel-search');

  if (panel) {
    panel.open = false;
  }

  panel = document.querySelector('#panel-sections');

  if (panel) {
    panel.dataset.ignoreScrollIntoView = true;
    panel.open = true;
  }
});
"use strict";

// downloader
var HT = HT || {};
var photocopier_message = 'The copyright law of the United States (Title 17, U.S. Code) governs the making of reproductions of copyrighted material. Under certain conditions specified in the law, libraries and archives are authorized to furnish a reproduction. One of these specific conditions is that the reproduction is not to be “used for any purpose other than private study, scholarship, or research.” If a user makes a request for, or later uses, a reproduction for purposes in excess of “fair use,” that user may be liable for copyright infringement.';
HT.Downloader = {
  init: function init(options) {
    this.options = $.extend({}, this.options, options);
    this.id = this.options.params.id;
    this.pdf = {};
    return this;
  },
  options: {},
  start: function start() {
    var self = this;
    this.bindEvents();
  },
  bindEvents: function bindEvents() {
    var self = this;
  },
  explainPdfAccess: function explainPdfAccess(link) {
    var html = $("#noDownloadAccess").html();
    html = html.replace('{DOWNLOAD_LINK}', $(this).attr("href"));
    this.$dialog = bootbox.alert(html);
  },
  downloadPdf: function downloadPdf(config) {
    var self = this;
    self.src = config.src;
    self.item_title = config.item_title;
    self.$config = config;
    var html = "<div class=\"initial\"><p>Setting up the download...</div>" + "<div class=\"offscreen\" role=\"status\" aria-atomic=\"true\" aria-live=\"polite\"></div>" + '<div class="progress progress-striped active hide" aria-hidden="true">' + '<div class="bar" width="0%"></div>' + '</div>' + "<div><p><a href=\"https://www.hathitrust.org/help_digital_library#DownloadTime\" target=\"_blank\">What affects the download speed?</a></p></div>";
    var header = 'Building your ' + self.item_title;
    var total = self.$config.selection.pages.length;

    if (total > 0) {
      var suffix = total == 1 ? 'page' : 'pages';
      header += ' (' + total + ' ' + suffix + ')';
    }

    self.$dialog = bootbox.dialog(html, [{
      label: 'Cancel',
      'class': 'btn-x-dismiss btn',
      callback: function callback() {
        if (self.$dialog.data('deactivated')) {
          self.$dialog.closeModal();
          return;
        }

        $.ajax({
          url: self.src + ';callback=HT.downloader.cancelDownload;stop=1',
          dataType: 'script',
          cache: false,
          error: function error(req, textStatus, errorThrown) {
            console.log("DOWNLOAD CANCELLED ERROR"); // self.$dialog.closeModal();

            console.log(req, textStatus, errorThrown);

            if (req.status == 503) {
              self.displayWarning(req);
            } else {
              self.displayError();
            }
          }
        });
      }
    }], {
      header: header,
      id: 'download'
    });
    self.$status = self.$dialog.find("div[role=status]");
    self.requestDownload();
  },
  requestDownload: function requestDownload() {
    var self = this;
    var data = {};

    if (self.$config.selection.pages.length > 0) {
      data['seq'] = self.$config.selection.seq;
    }

    switch (self.$config.downloadFormat) {
      case 'image':
        data['format'] = 'image/jpeg';
        data['target_ppi'] = 300;
        data['bundle_format'] = 'zip';
        break;

      case 'plaintext-zip':
        data['bundle_format'] = 'zip';
        break;

      case 'plaintext':
        data['bundle_format'] = 'text';
        break;
    }

    $.ajax({
      url: self.src.replace(/;/g, '&') + '&callback=HT.downloader.startDownloadMonitor',
      dataType: 'script',
      cache: false,
      data: data,
      error: function error(req, textStatus, errorThrown) {
        console.log("DOWNLOAD STARTUP NOT DETECTED");

        if (self.$dialog) {
          self.$dialog.closeModal();
        }

        if (req.status == 429) {
          self.displayWarning(req);
        } else {
          self.displayError(req);
        }
      }
    });
  },
  cancelDownload: function cancelDownload(progress_url, download_url, total) {
    var self = this;
    self.clearTimer();
    self.$dialog.closeModal();
  },
  startDownloadMonitor: function startDownloadMonitor(progress_url, download_url, total) {
    var self = this;

    if (self.timer) {
      console.log("ALREADY POLLING");
      return;
    }

    self.pdf.progress_url = progress_url;
    self.pdf.download_url = download_url;
    self.pdf.total = total;
    self.is_running = true;
    self.num_processed = 0;
    self.i = 0;
    self.timer = setInterval(function () {
      self.checkStatus();
    }, 2500); // do it once the first time

    self.checkStatus();
  },
  checkStatus: function checkStatus() {
    var self = this;
    self.i += 1;
    $.ajax({
      url: self.pdf.progress_url,
      data: {
        ts: new Date().getTime()
      },
      cache: false,
      dataType: 'json',
      success: function success(data) {
        var status = self.updateProgress(data);
        self.num_processed += 1;

        if (status.done) {
          self.clearTimer();
        } else if (status.error && status.num_attempts > 100) {
          self.$dialog.closeModal();
          self.displayProcessError();
          self.clearTimer();
          self.logError();
        } else if (status.error) {
          self.$dialog.closeModal();
          self.displayError();
          self.clearTimer();
        }
      },
      error: function error(req, textStatus, errorThrown) {
        console.log("FAILED: ", req, "/", textStatus, "/", errorThrown);
        self.$dialog.closeModal();
        self.clearTimer();

        if (req.status == 404 && (self.i > 25 || self.num_processed > 0)) {
          self.displayError();
        }
      }
    });
  },
  updateProgress: function updateProgress(data) {
    var self = this;
    var status = {
      done: false,
      error: false
    };
    var percent;
    var current = data.status;

    if (current == 'EOT' || current == 'DONE') {
      status.done = true;
      percent = 100;
    } else {
      current = data.current_page;
      percent = 100 * (current / self.pdf.total);
    }

    if (self.last_percent != percent) {
      self.last_percent = percent;
      self.num_attempts = 0;
    } else {
      self.num_attempts += 1;
    } // try 100 times, which amounts to ~100 seconds


    if (self.num_attempts > 100) {
      status.error = true;
    }

    if (self.$dialog.find(".initial").is(":visible")) {
      self.$dialog.find(".initial").html("<p>Please wait while we build your ".concat(self.item_title, ".</p>"));
      self.$dialog.find(".progress").removeClass("hide");
      self.updateStatusText("Please wait while we build your ".concat(self.item_title, "."));
    }

    self.$dialog.find(".bar").css({
      width: percent + '%'
    });

    if (percent == 100) {
      self.$dialog.find(".progress").hide();
      var download_key = navigator.userAgent.indexOf('Mac OS X') != -1 ? 'RETURN' : 'ENTER';
      self.$dialog.find(".initial").html("<p>All done! Your ".concat(self.item_title, " is ready for download. <span class=\"offscreen\">Select ").concat(download_key, " to download.</span></p>"));
      self.updateStatusText("All done! Your ".concat(self.item_title, " is ready for download. Select ").concat(download_key, " to download.")); // self.$dialog.find(".done").show();

      var $download_btn = self.$dialog.find('.download-pdf');

      if (!$download_btn.length) {
        $download_btn = $('<a class="download-pdf btn btn-primary" download="download">Download {ITEM_TITLE}</a>'.replace('{ITEM_TITLE}', self.item_title)).attr('href', self.pdf.download_url);

        if ($download_btn.get(0).download == undefined) {
          $download_btn.attr('target', '_blank');
        }

        $download_btn.appendTo(self.$dialog.find(".modal__footer")).on('click', function (e) {
          // self.$link.trigger("click.google");
          HT.analytics.trackEvent({
            label: '-',
            category: 'PT',
            action: "PT Download - ".concat(self.$config.downloadFormat.toUpperCase(), " - ").concat(self.$config.trackingAction)
          });

          if (window.hj) {
            hj('tagRecording', ["PT Download - ".concat(self.$config.downloadFormat.toUpperCase(), " - ").concat(self.$config.trackingAction)]);
          }

          ;
          setTimeout(function () {
            self.$dialog.closeModal();
            $download_btn.remove(); // HT.reader.controls.selectinator._clearSelection();
            // HT.reader.emit('downloadDone');
          }, 1500);
          e.stopPropagation();
        });
        $download_btn.focus();
      }

      self.$dialog.data('deactivated', true); // self.updateStatusText(`Your ${self.item_title} is ready for download. Press return to download.`);
      // still could cancel
    } else {
      self.$dialog.find(".initial").text("Please wait while we build your ".concat(self.item_title, " (").concat(Math.ceil(percent), "% completed)."));
      self.updateStatusText("".concat(Math.ceil(percent), "% completed"));
    }

    return status;
  },
  clearTimer: function clearTimer() {
    var self = this;

    if (self.timer) {
      clearInterval(self.timer);
      self.timer = null;
    }
  },
  displayWarning: function displayWarning(req) {
    var self = this;
    var timeout = parseInt(req.getResponseHeader('X-Choke-UntilEpoch'));
    var rate = req.getResponseHeader('X-Choke-Rate');

    if (timeout <= 5) {
      // just punt and wait it out
      setTimeout(function () {
        self.requestDownload();
      }, 5000);
      return;
    }

    timeout *= 1000;
    var now = new Date().getTime();
    var countdown = Math.ceil((timeout - now) / 1000);
    var html = ('<div>' + '<p>You have exceeded the download rate of {rate}. You may proceed in <span id="throttle-timeout">{countdown}</span> seconds.</p>' + '<p>Download limits protect HathiTrust resources from abuse and help ensure a consistent experience for everyone.</p>' + '</div>').replace('{rate}', rate).replace('{countdown}', countdown);
    self.$dialog = bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-primary',
      callback: function callback() {
        clearInterval(self.countdown_timer);
        return true;
      }
    }]);
    self.countdown_timer = setInterval(function () {
      countdown -= 1;
      self.$dialog.find("#throttle-timeout").text(countdown);

      if (countdown == 0) {
        clearInterval(self.countdown_timer);
      }

      console.log("TIC TOC", countdown);
    }, 1000);
  },
  displayProcessError: function displayProcessError(req) {
    var html = '<p>' + 'Unfortunately, the process for creating your PDF has been interrupted. ' + 'Please click "OK" and try again.' + '</p>' + '<p>' + 'If this problem persists and you are unable to download this PDF after repeated attempts, ' + 'please notify us at <a href="/cgi/feedback/?page=form" data=m="pt" data-toggle="feedback tracking-action" data-tracking-action="Show Feedback">feedback@issues.hathitrust.org</a> ' + 'and include the URL of the book you were trying to access when the problem occurred.' + '</p>'; // bootbox.alert(html);

    bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-inverse'
    }], {
      classes: 'error'
    });
    console.log(req);
  },
  displayError: function displayError(req) {
    var html = '<p>' + 'There was a problem building your ' + this.item_title + '; staff have been notified.' + '</p>' + '<p>' + 'Please try again in 24 hours.' + '</p>'; // bootbox.alert(html);

    bootbox.dialog(html, [{
      label: 'OK',
      'class': 'btn-dismiss btn-inverse'
    }], {
      classes: 'error'
    });
    console.log(req);
  },
  logError: function logError() {
    var self = this;
    $.get(self.src + ';num_attempts=' + self.num_attempts);
  },
  updateStatusText: function updateStatusText(message) {
    var self = this;

    if (self._lastMessage != message) {
      if (self._lastTimer) {
        clearTimeout(self._lastTimer);
        self._lastTimer = null;
      }

      setTimeout(function () {
        self.$status.text(message);
        self._lastMessage = message;
        console.log("-- status:", message);
      }, 50);
      self._lastTimer = setTimeout(function () {
        self.$status.get(0).innerText = '';
      }, 500);
    }
  },
  EOT: true
};
var downloadForm;
var downloadFormatOptions;
var rangeOptions;
var downloadIdx = 0;
head.ready(function () {
  downloadForm = document.querySelector('#form-download-module');

  if (!downloadForm) {
    return;
  }

  HT.downloader = Object.create(HT.Downloader).init({
    params: HT.params
  });
  HT.downloader.start(); // non-jquery?

  downloadFormatOptions = Array.prototype.slice.call(downloadForm.querySelectorAll('input[name="download_format"]'));
  rangeOptions = Array.prototype.slice.call(downloadForm.querySelectorAll('[data-download-format-target]'));
  var downloadSubmit = downloadForm.querySelector('[type="submit"]');
  var hasFullPdfAccess = downloadForm.dataset.fullPdfAccess == 'allow';

  var updateDownloadFormatRangeOptions = function updateDownloadFormatRangeOptions(option) {
    rangeOptions.forEach(function (rangeOption) {
      var input = rangeOption.querySelector('input');
      input.disabled = !rangeOption.matches("[data-download-format-target~=\"".concat(option.value, "\"]"));
    }); // if ( ! hasFullPdfAccess ) {
    //   var checked = downloadForm.querySelector(`[data-download-format-target][data-view-target~="${HT.reader.view.name}"] input:checked`);
    //   if ( ! checked ) {
    //       // check the first one
    //       var input = downloadForm.querySelector(`[data-download-format-target][data-view-target~="${HT.reader.view.name}"] input`);
    //       input.checked = true;
    //   }
    // }

    var current_view = HT.reader && HT.reader.view ? HT.reader.view.name : 'search'; // pick a default

    var checked = downloadForm.querySelector("[data-download-format-target][data-view-target~=\"".concat(current_view, "\"] input:checked"));

    if (!checked) {
      // check the first one
      var input = downloadForm.querySelector("[data-download-format-target][data-view-target~=\"".concat(current_view, "\"] input"));

      if (input) {
        input.checked = true;
      }
    }
  };

  downloadFormatOptions.forEach(function (option) {
    option.addEventListener('change', function (event) {
      downloadForm.dataset.format = this.value;
      updateDownloadFormatRangeOptions(this);
    });
  });
  rangeOptions.forEach(function (div) {
    var input = div.querySelector('input');
    input.addEventListener('change', function (event) {
      downloadFormatOptions.forEach(function (formatOption) {
        formatOption.disabled = !(div.dataset.downloadFormatTarget.indexOf(formatOption.value) > -1);
      });
    });
  });

  HT.downloader.updateDownloadFormatRangeOptions = function () {
    var formatOption = downloadFormatOptions.find(function (input) {
      return input.checked;
    });
    updateDownloadFormatRangeOptions(formatOption);
  };

  HT.downloader.selectRangeOption = function (option) {
    var rangeOption = downloadForm.querySelector("input[name=\"range\"][value=\"".concat(option, "\"]"));
    rangeOption.checked = true;
  }; // default to PDF


  var pdfFormatOption = downloadFormatOptions.find(function (input) {
    return input.value == 'pdf';
  });
  pdfFormatOption.checked = true;
  updateDownloadFormatRangeOptions(pdfFormatOption);
  var tunnelForm = document.querySelector('#tunnel-download-module');
  downloadForm.addEventListener('submit', function (event) {
    var formatOption = downloadForm.querySelector('input[name="download_format"]:checked');
    var rangeOption = downloadForm.querySelector('input[name="range"]:checked:not(:disabled)');
    var printable;
    event.preventDefault();
    event.stopPropagation();

    if (!rangeOption) {
      // no valid range option was chosen
      alert("Please choose a valid range for this download format.");
      event.preventDefault();
      return false;
    }

    var action = tunnelForm.dataset.actionTemplate + (formatOption.value == 'plaintext-zip' ? 'plaintext' : formatOption.value);
    var selection = {
      pages: []
    };

    if (rangeOption.value == 'selected-pages') {
      selection.pages = HT.reader.controls.selectinator._getPageSelection();
      selection.isSelection = true;

      if (selection.pages.length == 0) {
        var buttons = [];
        var msg = ["<p>You haven't selected any pages to download.</p>"];
        msg.push("<p>To select pages, use the page selection checkbox in the page toolbar.");
        msg.push("<p class=\"centered\" style=\"text-align: center\"><img alt=\"animation of checking page selection in the page toolbar\" src=\"/pt/web/graphics/page-selection.gif\" /></p>");
        msg.push("<p><tt>shift + click</tt> to de/select the pages between this page and a previously selected page.");
        msg.push("<p>Pages you select will be listed in the download module.");
        msg = msg.join("\n");
        buttons.push({
          label: "OK",
          'class': 'btn-dismiss'
        });
        bootbox.dialog(msg, buttons);
        event.preventDefault();
        return false;
      }
    } else if (rangeOption.value.indexOf('current-page') > -1) {
      var page;

      switch (rangeOption.value) {
        case 'current-page':
          page = [HT.reader.view.currentLocation()];
          break;

        case 'current-page-verso':
          page = [HT.reader.view.currentLocation('VERSO')];
          break;

        case 'current-page-recto':
          page = [HT.reader.view.currentLocation('RECTO')];
          break;
      }

      if (!page) {// probably impossible?
      }

      selection.pages = [page];
    }

    if (selection.pages.length > 0) {
      selection.seq = HT.reader.controls.selectinator ? HT.reader.controls.selectinator._getFlattenedSelection(selection.pages) : selection.pages;
    }

    if (rangeOption.dataset.isPartial == 'true' && selection.pages.length <= 10) {
      // delete any existing inputs
      tunnelForm.querySelectorAll('input:not([data-fixed])').forEach(function (input) {
        tunnelForm.removeChild(input);
      });

      if (formatOption.value == 'image') {
        var size_attr = "target_ppi";
        var image_format_attr = 'format';
        var size_value = "300";

        if (selection.pages.length == 1) {
          // slight difference
          action = '/cgi/imgsrv/image';
          size_attr = "size";
          size_value = "ppi:300";
        }

        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", size_attr);
        input.setAttribute("value", size_value);
        tunnelForm.appendChild(input);
        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", image_format_attr);
        input.setAttribute("value", 'image/jpeg');
        tunnelForm.appendChild(input);
      } else if (formatOption.value == 'plaintext-zip') {
        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", 'bundle_format');
        input.setAttribute("value", "zip");
        tunnelForm.appendChild(input);
      }

      selection.seq.forEach(function (range) {
        var input = document.createElement('input');
        input.setAttribute("type", "hidden");
        input.setAttribute("name", "seq");
        input.setAttribute("value", range);
        tunnelForm.appendChild(input);
      });
      tunnelForm.action = action; // HT.disableUnloadTimeout = true;
      // remove old iframes

      document.querySelectorAll('iframe.download-module').forEach(function (iframe) {
        document.body.removeChild(iframe);
      });
      downloadIdx += 1;
      var tracker = "D".concat(downloadIdx, ":");
      var tracker_input = document.createElement('input');
      tracker_input.setAttribute('type', 'hidden');
      tracker_input.setAttribute('name', 'tracker');
      tracker_input.setAttribute('value', tracker);
      tunnelForm.appendChild(tracker_input);
      var iframe = document.createElement('iframe');
      iframe.setAttribute('name', "download-module-".concat(downloadIdx));
      iframe.setAttribute('aria-hidden', 'true');
      iframe.setAttribute('class', 'download-module');
      iframe.style.opacity = 0;
      document.body.appendChild(iframe);
      tunnelForm.setAttribute('target', iframe.getAttribute('name'));
      downloadSubmit.disabled = true;
      downloadSubmit.classList.add('btn-loading');
      var trackerInterval = setInterval(function () {
        var value = $.cookie('tracker') || '';

        if (HT.is_dev) {
          console.log("--?", tracker, value);
        }

        if (value.indexOf(tracker) > -1) {
          $.removeCookie('tracker', {
            path: '/'
          });
          clearInterval(trackerInterval);
          downloadSubmit.classList.remove('btn-loading');
          downloadSubmit.disabled = false;
          HT.disableUnloadTimeout = false;
        }
      }, 100);
      HT.analytics.trackEvent({
        label: '-',
        category: 'PT',
        action: "PT Download - ".concat(formatOption.value.toUpperCase(), " - ").concat(rangeOption.value)
      });

      if (window.hj) {
        hj('tagRecording', ["PT Download - ".concat(formatOption.value.toUpperCase(), " - ").concat(rangeOption.value)]);
      }

      ;
      tunnelForm.submit();
      return false;
    }

    var _format_titles = {};
    _format_titles.pdf = 'PDF';
    _format_titles.epub = 'EPUB';
    _format_titles.plaintext = 'Text (.txt)';
    _format_titles['plaintext-zip'] = 'Text (.zip)';
    _format_titles.image = 'Image (JPEG)'; // invoke the downloader

    HT.downloader.downloadPdf({
      src: action + '?id=' + HT.params.id,
      item_title: _format_titles[formatOption.value],
      selection: selection,
      downloadFormat: formatOption.value,
      trackingAction: rangeOption.value
    });
    return false;
  });
});
"use strict";

// supply method for creating an embeddable URL
head.ready(function () {
  var side_short = "450";
  var side_long = "700";
  var htId = HT.params.id;
  var embedHelpLink = "https://www.hathitrust.org/embed";
  var codeblock_txt;

  var codeblock_txt_a = function codeblock_txt_a(w, h) {
    return '<iframe width="' + w + '" height="' + h + '" ';
  };

  var codeblock_txt_b = 'src="https://hdl.handle.net/2027/' + htId + '?urlappend=%3Bui=embed"></iframe>';
  var $block = $('<div class="embedUrlContainer">' + '<h3>Embed This Book ' + '<a id="embedHelpIcon" default-form="data-default-form" ' + 'href="' + embedHelpLink + '" target="_blank"><i class="icomoon icomoon-help" aria-hidden="true"></i><span class="offscreen">Help: Embedding HathiTrust Books</span></a></h3>' + '<form>' + '    <span class="help-block">Copy the code below and paste it into the HTML of any website or blog.</span>' + '    <label for="codeblock" class="offscreen">Code Block</label>' + '    <textarea class="input-xlarge" id="codeblock" name="codeblock" rows="3">' + codeblock_txt_a(side_short, side_long) + codeblock_txt_b + '</textarea>' + '<div class="controls">' + '<input type="radio" name="view" id="view-scroll" value="0" checked="checked" >' + '<label class="radio inline" for="view-scroll">' + '<span class="icomoon icomoon-scroll"/> Scroll View ' + '</label>' + '<input type="radio" name="view" id="view-flip" value="1" >' + '<label class="radio inline" for="view-flip">' + '<span class="icomoon icomoon-book-alt2"/> Flip View ' + '</label>' + '</div>' + '</form>' + '</div>'); // $("#embedHtml").click(function(e) {

  $("body").on('click', '#embedHtml', function (e) {
    e.preventDefault();
    bootbox.dialog($block, [{
      "label": "Cancel",
      "class": "btn-dismiss"
    }]); // Custom width for bounding '.modal' 

    $block.closest('.modal').addClass("bootboxMediumWidth"); // Select entirety of codeblock for easy copying

    var textarea = $block.find("textarea[name=codeblock]");
    textarea.on("click", function () {
      $(this).select();
    }); // Modify codeblock to one of two views 

    $('input:radio[id="view-scroll"]').click(function () {
      codeblock_txt = codeblock_txt_a(side_short, side_long) + codeblock_txt_b;
      textarea.val(codeblock_txt);
    });
    $('input:radio[id="view-flip"]').click(function () {
      codeblock_txt = codeblock_txt_a(side_long, side_short) + codeblock_txt_b;
      textarea.val(codeblock_txt);
    });
  });
});
"use strict";

// supply method for feedback system
var HT = HT || {};
HT.feedback = {};

HT.feedback.dialog = function () {
  var html = '<form>' + '    <fieldset>' + '        <legend>Email Address</legend>' + '        <label for="email" class="offscreen">EMail Address</label>' + '        <input type="text" class="input-xlarge" placeholder="[Your email address]" name="email" id="email" />' + '        <span class="help-block">We will make every effort to address copyright issues by the next business day after notification.</span>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Overall page readability and quality</legend>' + '        <div class="alert alert-help">Select one option that applies</div>' + '        <div class="control">' + '            <input type="radio" name="Quality" id="pt-feedback-quality-1" value="readable" />' + '            <label class="radio" for="pt-feedback-quality-1" >' + '                Few problems, entire page is readable' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Quality" id="pt-feedback-quality-2" value="someproblems" />' + '            <label class="radio" for="pt-feedback-quality-2">' + '                Some problems, but still readable' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Quality" value="difficult" id="pt-feedback-quality-3" />' + '            <label class="radio" for="pt-feedback-quality-3">' + '                Significant problems, difficult or impossible to read' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Quality" value="none" checked="checked" id="pt-feedback-quality-4" />' + '            <label class="radio" for="pt-feedback-quality-4">' + '                (No problems)' + '            </label>' + '        </div>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Specific page image problems?</legend>' + '        <div class="alert alert-help">Select any that apply</div>' + '        <div class="control">' + '            <input type="checkbox" name="blurry" value="1" id="pt-feedback-problems-1" />' + '            <label for="pt-feedback-problems-1">' + '                Missing parts of the page' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="checkbox" name="blurry" value="1" id="pt-feedback-problems-2"  />' + '            <label for="pt-feedback-problems-2">' + '                Blurry text' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="checkbox" name="curved" value="1" id="pt-feedback-problems-3"  />' + '            <label for="pt-feedback-problems-3">' + '                Curved or distorted text' + '            </label>' + '        </div>' + '        <div class="control">' + '            <label for="pt-feedback-problems-other">Other problem </label><input type="text" class="input-medium" name="other" value="" id="pt-feedback-problems-other"  />' + '        </div>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Problems with access rights?</legend>' + '        <span class="help-block" style="margin-bottom: 1rem;"><strong>' + '            (See also: <a href="http://www.hathitrust.org/take_down_policy" target="_blank">take-down policy</a>)' + '        </strong></span>' + '        <div class="alert alert-help">Select one option that applies</div>' + '        <div class="control">' + '            <input type="radio" name="Rights" value="noaccess" id="pt-feedback-access-1" />' + '            <label for="pt-feedback-access-1">' + '                This item is in the public domain, but I don\'t have access to it.' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Rights" value="access" id="pt-feedback-access-2" />' + '            <label for="pt-feedback-access-2">' + '                    I have access to this item, but should not.' + '            </label>' + '        </div>' + '        <div class="control">' + '            <input type="radio" name="Rights" value="none" checked="checked" id="pt-feedback-access-3" />' + '            <label for="pt-feedback-access-3">' + '                (No problems)' + '            </label>' + '        </div>' + '    </fieldset>' + '    <fieldset>' + '        <legend>Other problems or comments?</legend>' + '        <p>' + '            <label class="offscreen" for="comments">Other problems or comments?</label>' + '            <textarea id="comments" name="comments" rows="3"></textarea>' + '        </p>' + '    </fieldset>' + '</form>';
  var $form = $(html); // hidden fields

  $("<input type='hidden' name='SysID' />").val(HT.params.id).appendTo($form);
  $("<input type='hidden' name='RecordURL' />").val(HT.params.RecordURL).appendTo($form);

  if (HT.crms_state) {
    $("<input type='hidden' name='CRMS' />").val(HT.crms_state).appendTo($form);
    var $email = $form.find("#email");
    $email.val(HT.crms_state);
    $email.hide();
    $("<span>" + HT.crms_state + "</span><br />").insertAfter($email);
    $form.find(".help-block").hide();
  }

  if (HT.reader) {
    $("<input type='hidden' name='SeqNo' />").val(HT.params.seq).appendTo($form);
  } else if (HT.params.seq) {
    $("<input type='hidden' name='SeqNo' />").val(HT.params.seq).appendTo($form);
  }

  $("<input type='hidden' name='view' />").val(HT.params.view).appendTo($form);

  if (HT.params.skin) {
    $("<input type='hidden' name='skin' />").val(HT.params.skin).appendTo($form);
  } // if ( HT.crms_state ) {
  //     $form.find("#email").val(HT.crms_state);
  // }


  return $form;
};
"use strict";

var HT = HT || {};
head.ready(function () {
  HT.analytics.getContentGroupData = function () {
    // cheat
    var suffix = '';
    var content_group = 4;

    if ($("#section").data("view") == 'restricted') {
      content_group = 2;
      suffix = '#restricted';
    } else if (window.location.href.indexOf("debug=super") > -1) {
      content_group = 3;
      suffix = '#super';
    }

    return {
      index: content_group,
      value: HT.params.id + suffix
    };
  };

  HT.analytics._simplifyPageHref = function (href) {
    var url = $.url(href);
    var new_href = url.segment();
    new_href.push($("html").data('content-provider'));
    new_href.push(url.param("id"));
    var qs = '?skin=2021';

    if (new_href.indexOf("search") > -1 && url.param('q1')) {
      qs += '&q1=' + url.param('q1');
    }

    new_href = "/" + new_href.join("/") + qs;
    return new_href;
  };

  HT.analytics.getPageHref = function () {
    return HT.analytics._simplifyPageHref();
  };

  HT.analytics.getTitle = function () {
    var title = document.querySelector('title');

    if (location.pathname == '/cgi/pt' && title.dataset.title) {
      return title.dataset.title;
    }

    return document.title;
  };

  document.querySelector('title').dataset.title = document.title;
  $("body").on('click', ".shepherd-footer .shepherd-button", function (event) {
    var $button = $(this);
    var action = $button.text() == 'Exit' ? 'exit' : 'next';
    var $modal = $button.parents(".shepherd-element");
    var stepId = $modal.attr('data-shepherd-step-id');
    HT.analytics.trackEvent({
      category: 'PT.walkthrough',
      action: "".concat(stepId, ":").concat(action),
      label: "".concat(stepId, ":").concat(action)
    });
  });
});
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (typeof Object.assign != 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target, varArgs) {
      // .length of function is 2
      'use strict';

      if (target == null) {
        // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) {
          // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }

      return to;
    },
    writable: true,
    configurable: true
  });
} // // from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
// // https://tc39.github.io/ecma262/#sec-array.prototype.find
// if (!Array.prototype.find) {
//   Object.defineProperty(Array.prototype, 'find', {
//     value: function(predicate) {
//       // 1. Let O be ? ToObject(this value).
//       if (this == null) {
//         throw TypeError('"this" is null or not defined');
//       }
//       var o = Object(this);
//       // 2. Let len be ? ToLength(? Get(O, "length")).
//       var len = o.length >>> 0;
//       // 3. If IsCallable(predicate) is false, throw a TypeError exception.
//       if (typeof predicate !== 'function') {
//         throw TypeError('predicate must be a function');
//       }
//       // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
//       var thisArg = arguments[1];
//       // 5. Let k be 0.
//       var k = 0;
//       // 6. Repeat, while k < len
//       while (k < len) {
//         // a. Let Pk be ! ToString(k).
//         // b. Let kValue be ? Get(O, Pk).
//         // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
//         // d. If testResult is true, return kValue.
//         var kValue = o[k];
//         if (predicate.call(thisArg, kValue, k, o)) {
//           return kValue;
//         }
//         // e. Increase k by 1.
//         k++;
//       }
//       // 7. Return undefined.
//       return undefined;
//     },
//     configurable: true,
//     writable: true
//   });
// }
// https://developer.mozilla.org/en-US/docs/Web/API/Element/closest


if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}

if (!Element.prototype.closest) {
  Element.prototype.closest = function (s) {
    var el = this;

    do {
      if (Element.prototype.matches.call(el, s)) return el;
      el = el.parentElement || el.parentNode;
    } while (el !== null && el.nodeType === 1);

    return null;
  };
} // from: https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/after()/after().md


(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('after')) {
      return;
    }

    Object.defineProperty(item, 'after', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function after() {
        var argArr = Array.prototype.slice.call(arguments),
            docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.parentNode.insertBefore(docFrag, this.nextSibling);
      }
    });
  });
})([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

function ReplaceWithPolyfill() {
  'use-strict'; // For safari, and IE > 10

  var parent = this.parentNode,
      i = arguments.length,
      currentNode;
  if (!parent) return;
  if (!i) // if there are no arguments
    parent.removeChild(this);

  while (i--) {
    // i-- decrements i and returns the value of i before the decrement
    currentNode = arguments[i];

    if (_typeof(currentNode) !== 'object') {
      currentNode = this.ownerDocument.createTextNode(currentNode);
    } else if (currentNode.parentNode) {
      currentNode.parentNode.removeChild(currentNode);
    } // the value of "i" below is after the decrement


    if (!i) // if currentNode is the first argument (currentNode === arguments[0])
      parent.replaceChild(currentNode, this);else // if currentNode isn't the first
      parent.insertBefore(currentNode, this.previousSibling);
  }
}

if (!Element.prototype.replaceWith) Element.prototype.replaceWith = ReplaceWithPolyfill;
if (!CharacterData.prototype.replaceWith) CharacterData.prototype.replaceWith = ReplaceWithPolyfill;
if (!DocumentType.prototype.replaceWith) DocumentType.prototype.replaceWith = ReplaceWithPolyfill;
"use strict";

head.ready(function () {
  if (location.pathname != '/cgi/pt/search') {
    return;
  }

  var $form = $(".form-search-volume");
  var $input_q1 = $form.find("input[name='q1']");
  var $input_sort = $form.find("input[name='sort']");
  var $input_start = $form.find("input[name='start']");
  var $body = $("body");

  var submit_form = function submit_form(event) {
    HT.beforeUnloadTimeout = 15000;
    var $form_ = $form;
    var $submit = $form_.find("button[type=submit]");

    if ($submit.hasClass("btn-loading")) {
      alert("Your search query has been submitted and is currently being processed.");

      if (event) {
        event.preventDefault();
      }

      return false;
    }

    var $input = $form_.find("input[type=text]");

    if (!$.trim($input.val())) {
      bootbox.alert("Please enter a term in the search box.");

      if (event) {
        event.preventDefault();
      }

      return false;
    }

    $submit.addClass("btn-loading").attr("disabled", "disabled");
    $(window).on('unload', function () {
      $(window).trigger('undo-loading');
    });
    return true;
  };

  $(window).on('undo-loading', function () {
    $("button.btn-loading").removeAttr("disabled").removeClass("btn-loading");
  });
  $("body").on('submit', 'form.form-search-volume', function (event) {
    return submit_form(event);
  });
  $("button[data-action='sort']").on('click', function (event) {
    var target = this;
    var value = target.dataset.value;

    if (value != $input_sort.val()) {
      $input_sort.val(value);
      $form.submit();
    }

    return;
  });
  $("button[data-action='clear-search']").on('click', function (event) {
    event.stopPropagation();
    $input_q1.val('');
    $(".results-search-form").nextAll().remove();
  });
  $("#action-start-jump").on('change', function () {
    var sz = parseInt($(this).data('sz'), 10);
    var value = parseInt($(this).val(), 10);
    var start = (value - 1) * sz + 1;
    $input_start.val(start);
    $form.submit(); // var $form_ = $("#form-search-volume");
    // $form_.append(`<input name='start' type="hidden" value="${start}" />`);
    // $form_.append(`<input name='sz' type="hidden" value="${sz}" />`);
    // $form_.submit();
  });
});
"use strict";

head.ready(function () {
  $("body").on('click', '#versionIcon', function (e) {
    e.preventDefault();
    bootbox.alert("<p>This is the date when this item was last updated. Version dates are updated when improvements such as higher quality scans or more complete scans have been made. <br /><br /><a href=\"/cgi/feedback?page=form\" data-default-form=\"data-default-form\" data-toggle=\"feedback tracking-action\" data-id=\"\" data-tracking-action=\"Show Feedback\">Contact us</a> for more information.</p>");
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
