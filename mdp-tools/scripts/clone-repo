#!/l/local/bin/perl

use strict;
use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use ToolLib;

sub clone_app_usage {
    my $s = qq{Usage: clone-repo [options] <app.git>
           where <app.git> is the application central repository. Clone central repo, init and update its submodules.
                 -s clone under staging area: test, beta-1, beta-2, beta-3 (e.g. /htapps/test.babel)
                    instead of /htapps/user.babel
                 -f force remove existing clone, then clone
                 -v verbose
                 -h print help\n};
    return $s;
}

our ($opt_h, $opt_v, $opt_s, $opt_f);
my $ops = getopts('hvs:f');

my $app_repo = shift;
my $help = $opt_h;
$ToolLib::VERBOSE = $opt_v;
my $STAGE = $opt_s;
my $FORCE = $opt_f;

if ($help) {
    print clone_app_usage();
    exit 0;
}

if (! $app_repo) {
    print clone_app_usage();
    exit 1;
}

my ($repo_root, $app_root) = get_HTDE_roots($STAGE);
my ($app) = ($app_repo =~ m,^(.*?)\.git$,);
my $app_dir = "$app_root/$app";    

print qq{Clone ($app_repo)  under $app_dir and update submodules.} . ($FORCE ? " FORCE removal" : "") . qq{\n};

if (! __validate_clone_app($repo_root, $app_root, $app_repo, $app_dir)) {
    exit 1;
}

if (! G_clone($app_root, $repo_root, $app_repo, $app_dir)) {
    exit 1;
}

if (! G_init_submodules($app_dir)) {
    exit 1;
}
if (! G_update_submodules($app_dir)) {
    exit 1;
}
on(1);print qq{Clone succeeds\n};off();

exit 0;

# ---------------------------------------------------------------------

=item __validate_clone_app

Make some reasonable checks to derermine the validity of cloning an app.

=cut

# ---------------------------------------------------------------------
sub __validate_clone_app {
    my ($repo_root, $app_root, $app_repo, $app_dir) = @_;

    print qq{Validating application ($app) ... };

    if (! -e "$repo_root/$app_repo") {
        on();print qq{ERROR: no central repo: $repo_root/$app_repo does not exist\n};off();
        return 0;
    }
    if (-e "$app_dir") {
        if ($FORCE) {
            if (! query_yn("\nWARN: This will force removal of existing clone. \n\tContinue?", 'y')) {
                return 0;
            }
            else {
                print "Removing $app_dir ... ";
                `rm -rf $app_dir`;
                print "Done\n";
            }
        }
        else {
            on();print qq{ERROR: application appears to exist already under $app_dir\n};off();
            return 0;
        }
    }

    on(1);print qq{OK\n};off();
    return 1;
}




__END__

=head1 NAME

clone-repo - Clonf an application repository, init and update it's submodules, if any.

=head1 SYNOPSIS

clone-repo [options] app.git

=head1 OPTIONS

=over 8

=item B<-h>

Print a brief help message and exit.

=item B<-v>

Verbose status

=item B<-t>

Clone under test.babel

=item B<-f>

Clone even if clone exists.  I.e., remove clone and re-clone.


=back

=head1 DESCRIPTION

B<clone-repo> will attempt clone central repository "app.git" at /htapps/whoami.babel/app  including initializing and updating all submodules.

=cut
