#!/l/local/bin/perl

use strict;
use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use ToolLib;

our ($opt_A, $opt_h);
my $ops = getopts('Ah');
my $app = shift;

sub Usage {
    return "git-super-status [<app> | -A] ] | -h
  Fetches origin and lists uncommitted changes on master and commits to master\n  that have not been pushed to origin/master for /htapps/develop.babel/<app>
    OPTIONS
      -A lists all apps
      -h help\n";
}

if ($opt_h) {
    print Usage();
    exit 0;
}

if (! $app && ! $opt_A) {
    print STDERR "supply -A or <app>\n";
    print Usage();
    exit 1;
}

my ($repo_root, $app_root) = get_HTDE_roots();

my @app_dirs = ();
if ($opt_A) {
    @app_dirs = get_app_dir_list($app_root);
}

else {
    @app_dirs = ("$app_root/$app");
}

foreach my $app_dir (@app_dirs) {
    next if (! -e "$app_dir/.git");

    if (! chdir_to_app_dir($app_dir)) {
        exit 1;
    }
    print "\n-----------------------------------------------------------\n";
    PrintY("Checking $app_dir with FETCH\n");

    my $branch = qx(git branch);
    if ($branch !~ m,\* master,s) {
        PrintN("\tMASTER BRANCH NOT CHECKED OUT in $app_dir ... skipping\n");
        next;
    }
    else {
        my @output;

        print "FETCH ...";
        if (! G_fetch_origin($app_dir)) {
            next;
        }

        @output = qx(git status);
        my $clean = (grep(/working directory clean/, @output));
        map { $_ =~ s/^#/\t/ } @output;
        
        $clean ? print "STATUS:\n" : PrintN("STATUS:\n");
        print join('', @output);

        print "PUSH-PULL:\n";
        @output = qx(git log --oneline origin/master..HEAD);
        if (scalar @output) {
            PrintN("\tUNPUSHED:\n");
            print map { "\t\t$_" } @output;
        }
        else {
            print "\tAll pushed: "; PrintY("OK\n");
        }

        @output = qx(git log --oneline HEAD..origin/master);
        if (scalar @output) {
            PrintN("\tUNPULLED:\n");
            print map { "\t\t$_" } @output;
        }
        else {
            print "\tAll pulled: ";  PrintY("OK\n");
        }

    }


}

exit 0;



