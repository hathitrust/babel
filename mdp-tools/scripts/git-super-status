#!/l/local/bin/perl

use strict;
use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use ToolLib;

our ($opt_A, $opt_h);
my $ops = getopts('Ah');

sub Usage {
    return "git-super-status [<app> [<app>]+ | -A] ] | -h
  Fetches origin and lists uncommitted changes on master and commits to master\n  that have not been pushed to origin/master for /htapps/develop.babel/<app>
    OPTIONS
      -A lists all apps
      -h help\n";
}

if ($opt_h) {
    print Usage();
    exit 0;
}

my ($repo_root, $app_root) = get_HTDE_roots();
my @apps;

if ($opt_A) {
    @apps = ToolLib::get_app_list($app_root);
}
else {
    @apps = @ARGV;
}

if (! scalar(@apps)) {
    print Usage();
    exit 0;
}

foreach my $app (@apps) {
    my $app_dir = "$app_root/$app";

    if (! chdir_to_app_dir($app_dir)) {
        exit 1;
    }
    print "\n-----------------------------------------------------------\n";
    PrintY("Checking $app_dir with FETCH\n");

    my $branch = qx(git branch);
    $branch =~ s,\* (\S+),  $1(current),;
    
    print("Branches:\n$branch\n");
    if ($branch !~ m,master\(current\),s) {
        PrintN("\tMASTER BRANCH NOT CHECKED OUT in $app_dir ... skipping\n");
        next;
    }
    else {
        my @output;

        print "FETCH ...";
        if (! G_fetch_origin($app_dir)) {
            next;
        }

        @output = qx(git status);
        my $clean = (grep(/working directory clean/, @output));
        map { $_ =~ s/^#/\t/ } @output;
        
        $clean ? print "PROJECT STATUS:\n" : PrintN("PROJECT STATUS:\n");
        print join('', @output);

        @output = qx(git log --oneline origin/master..HEAD);
        if (scalar @output) {
            PrintN("\tUNPUSHED:\n");
            print map { "\t\t$_" } @output;
        }
        else {
            print "\tAll pushed: "; PrintY("OK\n");
        }

        @output = qx(git log --oneline HEAD..origin/master);
        if (scalar @output) {
            PrintN("\tUNPULLED:\n");
            print map { "\t\t$_" } @output;
        }
        else {
            print "\tAll pulled: ";  PrintY("OK\n");
        }

        print "\nLAST DEPLOYMENT:\n";
        chdir_to_app_dir($app_dir);
        my $last = `git for-each-ref --count=1 --sort='-taggerdate' --format='%(refname) %(taggerdate)'`;
        $last =~ s,refs/tags/,,g;
        my ($tag, $date) = ($last =~ m,^(.*?)\s+(.*),);
        printf("\tTag: %-20s  Date: %s\n", $tag, $date);

        print "\nSUB-PROJECT STATUS (submodules):\n";
        my @submodules = `git submodule status`;
        if (! scalar(@submodules)) {
            print "No submodules\n";
            next;
        }
        
        PrintY("\t\t\tINDEX\tREMOTE\tINITIALIZED\n");

        foreach my $submodule (@submodules) {
            my ($char, $sha, $path) = ($submodule =~ m,^\s*(\+|\-)?([0-9a-f]+)\s+(.*?)\s+.*$,);
            chdir_to_app_dir("$app_dir/$path");
            my $remote_sha = `git ls-remote --heads origin master`;
            ($remote_sha) = ($remote_sha =~ m,([0-9a-f]+),);

            printf("%22s", $path);
            ($char eq "+") 
              ? PrintN("\tNO") : PrintY("\tyes") ;
            ($sha ne $remote_sha)
              ? PrintN("\tNO") : PrintY("\tyes") ;
            ($char eq "-") 
              ? PrintN("\tNO") : PrintY("\tyes") ;
            print("\n");
        }
    }


}

exit 0;



