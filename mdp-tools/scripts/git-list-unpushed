#!/l/local/bin/perl

use strict;
use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use MdpGitTools;

our ($opt_a, $opt_A, $opt_h, $opt_t );
my $ops = getopts('a:Aht');

sub Usage {
    print "git-unpushed [-a app | -A] [-t] | [-h]
  lists commits to master that have not been pushed to origin/master for /htapps/[developer|test].babel
    OPTIONS
      -a app lists just 'app'
      -A lists all apps

      -t lists test.babel instead of developer.babel
      -h help\n";
}

if ($opt_h) {
    print Usage();
    exit 0;
}

if (! $opt_a && ! $opt_A) {
    print STDERR "supply -A or -a argument\n";
    print Usage();
    exit 1;
}

my $SDRROOT;
my $me = `whoami`;
chomp($me);
if ($opt_t) {
    $SDRROOT = "/htapps/test.babel";
}
else {
    $SDRROOT = "/htapps/$me.babel";
}

my @app_dirs = ();
if ($opt_A) {
    @app_dirs = MdpGitTools::get_app_dir_list($SDRROOT);
}

else {
    @app_dirs = ("$SDRROOT/$opt_a");
}

foreach my $app_dir (@app_dirs) {
    next if (! -e "$app_dir/.git");

    if (! chdir($app_dir)) {
        print STDERR "could not cd to $app_dir\n";
        exit 1;
    }

    my $branch = `git branch`;
    if ($branch !~ m,\* master,s) {
        print "\n\nMASTER BRANCH NOT CHECKED OUT on $app_dir ... skipping\n";
        next;
    }
    else {
        my $git_log = `git log --oneline origin/master..HEAD`;
        if ($git_log) {
            print "\n\n--- UNPUSHED on $app_dir ---\n";
            print $git_log;
        }
    }


}

exit 0;



