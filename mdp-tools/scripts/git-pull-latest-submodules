#!/l/local/bin/perl

use strict;
use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use ToolLib;

our ($opt_A, $opt_h, $opt_v );
my $ops = getopts('Ahv');

sub Usage {
    print "git-pull-latest-submodules [options] <app> [<app>]+ | -A
  pulls latest version of submodules for one or more or all apps under /htapps/[developer|test].babel
      -A pulls submodules in all apps that contain a .gitmodules file
    OPTIONS
      -v verbose
      -h help\n";
}

if ($opt_h) {
    print Usage();
    exit 0;
}

$ToolLib::VERBOSE = $opt_v;

my ($repo_root, $app_root) = get_HTDE_roots();
my @apps;

if ($opt_A) {
    @apps = ToolLib::get_app_list($app_root);
}
else {
    @apps = @ARGV;
}

if (! scalar(@apps)) {
    print Usage();
    exit 0;
}

foreach my $app (@apps) {
    my $app_dir = "$app_root/$app";
    
    next if (! -e "$app_dir/.gitmodules");

    if (! chdir_to_app_dir($app_dir)) {
        exit 1;
    }

    my $branch = `git branch`;
    if ($branch !~ m,\* master,s) {
        PrintN("\nMASTER BRANCH NOT CHECKED OUT in $app_dir ... skipping\n");
        next;
    }

    PrintY("\n--- updating current submodules from origin into $app_dir ---\n");
    execute_command("git submodule update --init");
    print "\tPull ...\n";
    execute_command("git submodule foreach git pull origin master -v");
    execute_command("git submodule status");
}

exit 0;



