#!/l/local/bin/perl

=head1 NAME

stage-app - Stage a HT application on test.babel in preparation for testing.

=head1 SYNOPSIS

stage-app [options] [<app>]

=head1 OPTIONS

=over 8

=item B<-h>

Print a brief help message and exit.

=item B<-v>

Verbose status

=back

=head1 DESCRIPTION

B<stage-app> will attempt synchronize the local master branch of
test.babel (or as overridden by HTDE_APPROOT) for an existing
application <app> with origin/master after a fetch from origin at the
central repositoy including updating all submodules in preparation for
testing before deployment.

Note: B<stage-app> MUST be the only script that fetches origin for
/htapps/test.babel apps.

=cut

use strict;
use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;
use File::Basename;
my $LOCATION = dirname(__FILE__);

use ToolLib;

sub stage_app_usage {
    my $s = qq{Usage: stage-app [options] [<app> [<app>]+]
           where <app> is the application. Bring app to most current version for testing under test.babel (default)
                 -s staging areas: test (default), beta-1, beta-2, beta-3
                 -A all apps
                 -v verbose
                 -h print help\n};
    return $s;
}

our ($opt_h, $opt_v, $opt_s, $opt_A);
my $ops = getopts('hvs:A');

my $help = $opt_h;
$ToolLib::VERBOSE = $opt_v;

if ($help) {
    print stage_app_usage();
    exit 0;
}

my $ALL = $opt_A;
my @apps;
if ($ALL) {
    @apps = `cat $LOCATION/../app-list.txt`;
    chomp(@apps);
}
else {
    @apps = @ARGV;
    if (! scalar(@apps)) {
        print stage_app_usage();
        exit 1;
    }
}

my $STAGE = $opt_s || 'test';

my ($repo_root, $app_root) = get_HTDE_roots($STAGE);
my $rc = 0;
foreach my $app (@apps) {
    my $fail_msg = qq{Failed to stage application ($app)\n};
    my $app_dir = "$app_root/$app";
    
    PrintY(qq{\nStaging application ($app) at $app_dir\n});
    
    if (! validate_existing_app($repo_root, $app_root, $app)) {
        PrintN($fail_msg);
        $rc |= 1;
        next;
    }
    
    if (-e "$app_dir/.gitmodules") {
        my @submodules = `cat "$app_dir/.gitmodules"`;
        @submodules = grep(/submodule/, @submodules);
        PrintM("Dependencies: \n\t");
        PrintM(join("\t", @submodules));
    }
    else {
        PrintY("No Dependencies\n");
    }
    
    if (! (
           G_fetch_origin($app_dir)
           &&
           G_sync_local_master($app_dir)
           &&
           G_sync_local_deployment($app_dir)
           &&
           G_checkout_deployment($app_dir)
           &&
           G_merge_master_branch($app_dir)
           &&
           G_update_submodules($app_dir)
          )
       ) {
        PrintN($fail_msg);
        $rc |= 1;
        next;
    }
    
    print `$LOCATION/sanity-app -s$STAGE $app`;
    $rc |= $?;
    
    PrintY(qq{Staging succeeds\n}) unless ($rc);
}

exit $rc;


__END__;
