#!/l/local/bin/perl

=head1 NAME

stage-app - Stage a HT application on test.babel in preparation for testing.

=head1 SYNOPSIS

stage-app [options] [<app>]

=head1 OPTIONS

=over 8

=item B<-h>

Print a brief help message and exit.

=item B<-v>

Verbose status

=back

=head1 DESCRIPTION

B<stage-app> will attempt synchronize the local master branch of
test.babel (or as overridden by HTDE_APPROOT) for an existing
application <app> with origin/master after a fetch from origin at the
central repositoy including updating all submodules in preparation for
testing before deployment.

Note: B<stage-app> MUST be the only script that fetches origin for
/htapps/test.babel apps.

B<stage-app> -b<branch> will attempt merge the local branch=<branch>
of the given developer's local repo,
i.e. /htapps/whoami.babel/<app> with master at beta-1,2,3.babel for
an existing application <app>. This allows staging of topic branches
without the need to push to the central repo before pulling into a
beta repo.

=cut

use strict;
use Getopt::Std;

use lib "/htapps/test.babel/mdp-lib/Utils";
use Vendors;
use File::Basename;
my $LOCATION = dirname(__FILE__);

use ToolLib;

sub stage_app_usage {
    my $s = qq{Usage: stage-app [options] [<app> [<app>]+]
           Bring master branch of <app> up-to-date for testing under test.babel (default) or beta-{1,2,3}
                 -s <staging area>: test (default), beta-{1,2,3}
                 -b <branch> at /htapps/whoami.babel/<app> where <staging area> must be one of beta-{1,2,3}
                 -A all apps
                 -v verbose
                 -h print help \n};
    return $s;
}

our ($opt_h, $opt_v, $opt_s, $opt_A, $opt_b);
my $ops = getopts('hvs:Ab:');

my @valid_beta_stages = qw(beta-1 beta-2 beta-3);
my @all_valid_stages = (@valid_beta_stages, 'test');

my @valid_dev_repos = map { "/htapps/$_.babel" } qw(aelkiss besmit bkammin ezbrooks jgmorse jjyork moseshll pfarber pulintz roger rrotter scollett sethajoh skorner sooty stampy tburtonw );

my $help = $opt_h;
$ToolLib::VERBOSE = $opt_v;

if ($help) {
    print stage_app_usage();
    exit 0;
}

my $BRANCH = $opt_b;
my $ALL = $opt_A;

my @all_apps = `cat $LOCATION/../lib/Config/app-list.txt`;
chomp(@all_apps);

my @apps;
if (defined($BRANCH)) {
    @apps = shift;
}
else {
    if ($ALL) {
        @apps = @all_apps;
    }
    else {
        @apps = @ARGV;
    }
}

foreach my $a (@apps) {
    if (! grep(/^$a$/, @all_apps)) {
        PrintN("$a is not a valid app\n");
        my $apps = join(', ', @all_apps);
        print "Valid apps are: $apps\n";
        print stage_app_usage();
        exit 1;
    }
}

if (! scalar(@apps)) {
    print stage_app_usage();
    exit 1;
}

my $STAGE = $opt_s;
if ($BRANCH) {
    if (! grep(/^$STAGE$/, @valid_beta_stages)) {
        PrintN("$STAGE is not a valid beta staging area\n");
        print stage_app_usage();
        exit 1;
    }
    my ($repo_root, $app_root) = get_HTDE_roots();
    if (! grep(/^$app_root$/, @valid_dev_repos)) {
        PrintN("$app_root is not a valid developer repo\n");
        print stage_app_usage();
        exit 1;
    }
}
else {
    $STAGE = $opt_s || 'test';
    if (! grep(/^$STAGE$/, @all_valid_stages)) {
        PrintN("$STAGE is not a valid staging area\n");
        print stage_app_usage();
        exit 1;
    }
}

my $rc;

if ($BRANCH) {
    $rc = stage_topic_branch($apps[0], $BRANCH);
}
else {
    $rc = stage_origin_master_branch(@apps);
}

exit $rc;

# ---------------------------------------------------------------------

=item list_submodule_dependencies

Description

=cut

# ---------------------------------------------------------------------
sub list_submodule_dependencies {
    my $app_dir = shift;

    if (-e "$app_dir/.gitmodules") {
        my @submodules = `cat "$app_dir/.gitmodules"`;
        @submodules = grep(/submodule/, @submodules);
        PrintM("Dependencies: \n\t");
        PrintM(join("\t", @submodules));
    }
    else {
        PrintY("No Dependencies\n");
    }
}

# ---------------------------------------------------------------------

=item stage_origin_master_branch

Description

=cut

# ---------------------------------------------------------------------
sub stage_origin_master_branch {
    my @apps = @_;

    my ($repo_root, $app_root) = get_HTDE_roots($STAGE);
    my $rc = 0;
    foreach my $app (@apps) {
        my $fail_msg = qq{Failed to stage application ($app)\n};
        my $app_dir = "$app_root/$app";

        if (! validate_existing_app($repo_root, $app_root, $app)) {
            PrintN($fail_msg);
            $rc |= 1;
            next;
        }

        PrintY(qq{\nStaging application ($app) at $app_dir\n});

        if (! (
               G_fetch_origin($app_dir)
               &&
               G_sync_local_master($app_dir)
               &&
               G_sync_local_deployment($app_dir)
               &&
               G_checkout_branch($app_dir, 'deployment')
               &&
               G_merge_master_branch($app_dir)
               &&
               G_update_submodules($app_dir)
              )
           ) {
            PrintN($fail_msg);
            $rc |= 1;
            next;
        }

        list_submodule_dependencies($app_dir);

        PrintY("Begin sanity checks ...\n");
        print `$LOCATION/sanity-app -s$STAGE $app`;
        $rc |= $?;

        PrintY(qq{Staging succeeds\n}) unless ($rc);
    }

    return $rc;
}

# ---------------------------------------------------------------------

=item stage_topic_branch

Description

=cut

# ---------------------------------------------------------------------
sub stage_topic_branch {
    my $app = shift;
    my $branch = shift;

    my ($src_repo_root, $src_app_root) = get_HTDE_roots();

    my $fail_msg = qq{Failed to stage application=$app from $src_app_root branch=$branch at $STAGE\n};
    my $src_app_dir = "$src_app_root/$app";

    if (! validate_existing_app($src_repo_root, $src_app_root, $app)) {
        PrintN($fail_msg);
        return 1;
    }

    my ($dest_repo_root, $dest_app_root) = get_HTDE_roots($STAGE);
    my $dest_app_dir = "$dest_app_root/$app";
    PrintY(qq{\nStaging application=$app branch=$branch from $src_app_dir at $dest_app_root\n});

    if (! (
           G_checkout_branch($dest_app_dir, 'master')
           &&
           execute_command("git pull $src_app_dir $branch -v")
           &&
           G_update_submodules($dest_app_dir)
          )
       ) {
        PrintN($fail_msg);
        return 1;
    }

    PrintY("Begin sanity checks ...\n");
    print `$LOCATION/sanity-app -s$STAGE $app`;
    my $rc = $?;

    PrintY(qq{Staging succeeds\n}) unless ($rc);

    return $rc;
}

__END__;
