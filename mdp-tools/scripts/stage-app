#!/l/local/bin/perl

=head1 NAME

stage-app - Stage a HT application on test.babel in preparation for testing.

=head1 SYNOPSIS

stage-app [options] [<app>]

=head1 OPTIONS

=over 8

=item B<-h>

Print a brief help message and exit.

=item B<-v>

Verbose status

=back

=head1 DESCRIPTION

B<stage-app> will attempt synchronize the local master branch of
test.babel (or as overridden by HTDE_APPROOT) for an existing
application <app> with origin/master after a fetch from origin at the
central repositoy including updating all submodules in preparation for
testing before deployment.

Note: B<stage-app> MUST be the only script that fetches origin for
/htapps/test.babel apps.

B<stage-app> -b<branch> will attempt merge the local branch=<branch>
of the given developer's local repo,
i.e. /htapps/whoami.babel/<app> with master at beta-1,2,3,4.babel for
an existing application <app>. This allows staging of topic branches
without the need to push to the central repo before pulling into a
beta repo.

=cut

use strict;
use Getopt::Std;

use lib "/htapps/test.babel/mdp-lib/Utils";
use Vendors;
use File::Basename;
my $LOCATION = dirname(__FILE__);

use ToolLib;

sub stage_app_usage {
    my $s = qq{Usage: stage-app [options] [<app> [<app>]+]
      For <app>:
        bring master branch up-to-date for testing under test.babel (default) or beta-{1,2,3,4}
        bring local topic branch up-to-date for testing under beta-{1,2,3,4} only

         When staging a single app at test.babel, prompts to display diff between
         staged commit and last deployed commit. Invokes \$EDITOR to display diff

         Options:
            -s <staging area>: test (default), beta-{1,2,3,4}, e.g. 'beta-2'
            -b <branch> at /htapps/whoami.babel/<app>. Note: <staging area> must be one of beta-{1,2,3,4}
            -A all apps. If -b <branch>, skip apps without a <branch> 
            -d prompt to show diffs when staging multiple apps
                 (always prompts when staging a single app)
            -v verbose
            -h print help \n};
    return $s;
}

our ($opt_h, $opt_v, $opt_s, $opt_A, $opt_b, $opt_d);
my $ops = getopts('hvs:Ab:d');

my @valid_beta_stages = qw(beta-1 beta-2 beta-3 beta-4);
my @all_valid_stages = (@valid_beta_stages, 'test');

my @valid_dev_repos = map { "/htapps/$_.babel" } qw(aelkiss besmit bkammin ezbrooks jgmorse jjyork moseshll pfarber pulintz roger rrotter scollett sethajoh skorner sooty stampy tburtonw );

my $help = $opt_h;
$ToolLib::VERBOSE = $opt_v;

if ($help) {
    print stage_app_usage();
    exit 0;
}

my $FORCE_DIFF = defined($opt_d);
my $BRANCH = $opt_b;
my $all = $opt_A;

my @APPS = __handle_APPS($all);

my $STAGE = $opt_s;
if ($BRANCH) {
    if (! grep(/^$STAGE$/, @valid_beta_stages)) {
        PrintN("$STAGE is not a valid beta staging area\n");
        print stage_app_usage();
        exit 1;
    }
    my ($repo_root, $app_root) = get_HTDE_roots();
    if (! grep(/^$app_root$/, @valid_dev_repos)) {
        PrintN("$app_root is not a valid developer repo\n");
        print stage_app_usage();
        exit 1;
    }
}
else {
    $STAGE = $opt_s || 'test';
    if (! grep(/^$STAGE$/, @all_valid_stages)) {
        PrintN("$STAGE is not a valid staging area\n");
        print stage_app_usage();
        exit 1;
    }
}

my $rc = 0;

if ($BRANCH) {
    foreach my $a (@APPS) {
        $rc |= stage_topic_branch($a, $BRANCH);
    }
}
else {
    $rc = stage_origin_master_branch(@APPS);
}

exit $rc;

#
# ------- Subroutines ------
#

# ---------------------------------------------------------------------

=item __handle_APPS

Description

=cut

# ---------------------------------------------------------------------
sub __handle_APPS {
    my $all = shift;

    my @all_apps = `cat $LOCATION/../lib/Config/app-list.txt`;
    chomp(@all_apps);

    my @apps;
    if ($all) {
        @apps = @all_apps;
    }
    else {
        @apps = @ARGV;
    }

    foreach my $a (@apps) {
        if (! grep(/^$a$/, @all_apps)) {
            PrintN("$a is not a valid app\n");
            my $apps = join(', ', @all_apps);
            print "Valid apps are: $apps\n";
            print stage_app_usage();
            exit 1;
        }
    }

    if (! scalar(@apps)) {
        PrintN("Missing <app> argument\n");
        print stage_app_usage();
        exit 1;
    }

    return @apps;
}

# ---------------------------------------------------------------------

=item list_submodule_dependencies

Description

=cut

# ---------------------------------------------------------------------
sub list_submodule_dependencies {
    my $app_dir = shift;

    if (-e "$app_dir/.gitmodules") {
        my @submodules = `cat "$app_dir/.gitmodules"`;
        @submodules = grep(/submodule/, @submodules);
        PrintM("Dependencies: \n\t");
        PrintM(join("\t", @submodules));
    }
    else {
        PrintY("No Dependencies\n");
    }
}

# ---------------------------------------------------------------------

=item write_data

Description

=cut

# ---------------------------------------------------------------------
sub write_data {
    my ($data_ref, $filename) = @_;

    open(OUTFILE, ">:utf8", $filename) || die qq{Cannot open $filename for writing};
    print OUTFILE $$data_ref;
    close( OUTFILE );
}

# ---------------------------------------------------------------------

=item __handle_diff

Description

=cut

# ---------------------------------------------------------------------
sub __handle_diff {
    my ($app, $app_dir) = @_;

    return 0
      if (! chdir_to_app_dir($app_dir));

    my $last_tag = G_last_tag();
    my $diff_file = "/tmp/git-$last_tag-$$.diff";
    PrintY("Begin diff generation: diff between HEAD and tag ($last_tag), diff file: $diff_file ... ");

    my $diff;
    return 0
      if (! execute_command_w_output(qq{git diff --ignore-all-space --submodule=log $last_tag}, \$diff));

    # Clean up submodule log entries. we only want the SHA1s
    my @submodule_lines = ($diff =~ m,^(Submodule.*?:),gm);
    $diff =~ s,^Submodule.*,,gms;
    foreach my $sml (@submodule_lines) {
        next
          if ($sml =~ m,yui2-lib,);

        my ($path_arg, $sha1_arg) = ($sml =~ m,Submodule (.*?) ([0-9a-f]+\.\.[0-9-a-f]+),);
        # print "$path_arg $sha1_arg\n";

        return 0
          if (! chdir_to_app_dir("$app_dir/$path_arg"));

        my $sub_diff;
        return 0
          if (! execute_command_w_output(qq{git diff --ignore-all-space $sha1_arg}, \$sub_diff));

        $diff .= "\n#\n# ***** SUBMODULE $path_arg DIFF *****\n#\n\n" . $sub_diff;
    }

    if (! $diff) {
        $diff = "No difference between tag=$last_tag and app=$app staged at $app_dir";
    }
    
    write_data(\$diff, $diff_file);
    
    system( "$ENV{EDITOR}", $diff_file );
    # system( "more", $diff_file );

    PrintY("OK\n");

    return 1;
}


# ---------------------------------------------------------------------

=item stage_origin_master_branch

Description

=cut

# ---------------------------------------------------------------------
sub stage_origin_master_branch {
    my @apps = @_;

    my $rc = 0;
    my ($repo_root, $app_root) = get_HTDE_roots($STAGE);

    my $num_apps = scalar @apps;
    my $prompt_for_diff = $FORCE_DIFF || ($num_apps == 1);

    foreach my $app (@apps) {
        my $fail_msg = qq{Failed to stage application ($app)\n};
        my $app_dir = "$app_root/$app";

        if (! validate_existing_app($repo_root, $app_root, $app)) {
            PrintN($fail_msg);
            $rc |= 1;
            next;
        }

        PrintY(qq{\nStaging application ($app) at $app_dir\n});

        if (! (
               G_fetch_origin($app_dir)
               &&
               G_sync_local_master($app_dir)
               &&
               G_sync_local_deployment($app_dir)
               &&
               G_checkout_branch($app_dir, 'deployment')
               &&
               G_merge_master_branch($app_dir)
               &&
               G_update_submodules($app_dir)
              )
           ) {
            PrintN($fail_msg);
            $rc |= 1;
            next;
        }

        list_submodule_dependencies($app_dir);

        PrintY("Begin sanity checks ...\n");
        print `$LOCATION/sanity-app -s$STAGE $app`;
        $rc |= $?;

        PrintY(qq{Staging succeeds\n}) unless ($rc);

        if ($STAGE eq 'test') {
            if ($prompt_for_diff) {
                if (query_yn("\nSee diff of staged commit vs. last deployment?", 'n')) {
                    if (! __handle_diff($app, $app_dir)) {
                        PrintN(qq{Could not generate diff for application=$app at $app_dir\n});
                    }
                }
                else {
                    PrintY("OK\n");
                }
            }
        }
    }

    return $rc;
}

# ---------------------------------------------------------------------

=item stage_topic_branch

Description

=cut

# ---------------------------------------------------------------------
sub stage_topic_branch {
    my $app = shift;
    my $branch = shift;

    my ($src_repo_root, $src_app_root) = get_HTDE_roots();

    my $fail_msg = qq{Failed to stage application=$app from $src_app_root branch=$branch at $STAGE\n};
    my $src_app_dir = "$src_app_root/$app";

    if (! validate_existing_app($src_repo_root, $src_app_root, $app)) {
        PrintN($fail_msg);
        return 1;
    }

    my ($dest_repo_root, $dest_app_root) = get_HTDE_roots($STAGE);
    my $dest_app_dir = "$dest_app_root/$app";
    PrintY(qq{\nStaging application=$app branch=$branch from $src_app_dir at $dest_app_root\n});

    if (! G_checkout_branch($dest_app_dir, 'master')){
        PrintN($fail_msg);
        return 1;
    }

    if (! execute_command("git pull $src_app_dir $branch")) {
        PrintM(qq{Could not pull $branch at $src_app_dir ... skipping\n});
        return 0;
    }

    if (! G_update_submodules($dest_app_dir)) {
        PrintN($fail_msg);
        return 1;
    }

    PrintY("Begin sanity checks ...\n");
    print `$LOCATION/sanity-app -s$STAGE $app`;
    my $rc = $?;

    PrintY(qq{Staging succeeds\n}) unless ($rc);

    return $rc;
}

__END__;
