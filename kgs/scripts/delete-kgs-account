#!/usr/bin/env perl

=head1 NAME

delete-kgs-account

=head1 DESCRIPTION

Manage htd_* tables

=head1 SYNOPSIS

Coding example

=head1 METHODS

=over 8

=cut

use warnings;
use strict;

BEGIN {
    ## $ENV{DEBUG_LOCAL} = 1;
}

use Getopt::Std;

use lib "$ENV{SDRROOT}/mdp-lib/Utils";
use Vendors;

use CGI;

use Context;
use Database;
use Utils;
use DbUtils;
use MdpConfig;
use Password;

use KGS_Log;
# make sure cache files/dirs are group writable
umask 0002;

my $INTERACTIVE = $ENV{TERM};

# MDP stuff
my $C = new Context;

# configuration
my $config = new MdpConfig(
                           Utils::get_uber_config_path('kgs'),
                           $ENV{SDRROOT} . "/kgs/lib/Config/global.conf",
                           $ENV{SDRROOT} . "/kgs/lib/Config/local.conf"
                          );
$C->set_object('MdpConfig', $config);

our $DBH;

if ($INTERACTIVE) {
    exit handle_interactive_delete();
}
else {
    eval {
        handle_cron_delete();
    };
    if ($@) {
        print STDERR "delete-kgs-account failed: $@";
        exit 1;
    }
    exit 0;
}


# ---------------------------------------------------------------------

=item __process_tables

Description

=cut

# ---------------------------------------------------------------------
sub __process_tables {
    my $access_key = shift;

    my $authentication_ct = __authentication_count_by_access_key($access_key);
    my $authorization_ct = __authorization_count_by_access_key($access_key);
    my $statistics_accesses_ct = __statistics_accesses_by_access_key($access_key);

    my $s;
    $s .= __delete_authentication_by_access_key($access_key) if ($authentication_ct);
    $s .= __delete_authorization_by_access_key($access_key) if ($authorization_ct);
    $s .= __delete_statistics_by_access_key($access_key) if ($statistics_accesses_ct);

    if ($s) {
        LOG($C, $s);
        print($s) if ($INTERACTIVE);
    }
    return $s;
}

# ---------------------------------------------------------------------

=item handle_interactive_delete

Delete by access key and interactive database password.

=cut

# ---------------------------------------------------------------------
sub handle_interactive_delete {
    our ($opt_a, $opt_u, $opt_n, $opt_s);
    my $ops = getopts('a:u:n:s:');

    my ($access_key, $db_user,  $db_name, $db_server) = ($opt_a, $opt_u, $opt_n, $opt_s);

    if (! ($access_key && $db_user && $db_name && $db_server)) {
        print "ERROR: Missing args.\n" . __get_usage();
        return 1;
    }

    __confirmation("OK to process $access_key? [N] ");

    use Term::ReadKey;
    print "Enter passwd: ";

    my $db_passwd = Password::get_password();
    print "\n";

    # Database connection
    $DBH = new Database($db_user, $db_passwd,  $db_name, $db_server)->get_DBH;

    unless (__process_tables($access_key)) {
        print qq{access_key=$access_key not found\n};
    }

    return 0;
}


# ---------------------------------------------------------------------

=item handle_cron_delete

Delete accounts that are not activated after X hours. Mainly from spam.

=cut

# ---------------------------------------------------------------------
sub handle_cron_delete {

    # Database connection
    $DBH = new Database('ht_maintenance')->get_DBH;

    my $access_key_arr_ref = __select_unactivated_access_keys();
    foreach my $access_key (@$access_key_arr_ref) {
        __process_tables($access_key);
    }

    return 0;
}


sub __confirmation {
    my $s = shift;
    return 0 unless($INTERACTIVE);

    print "$s";
    my $pass_1 = <STDIN>;
    exit 0 if ($pass_1 !~ m,y,i);
    return 1;
}

# ---------------------------------------------------------------------
sub __get_usage {
    my $s = qq{Usage: delete-kgs-account -a access_key -u db_user -n db_name -s db_server\n\tprompts for passwd\n};
    return $s;
}



# ---------------------------------------------------------------------
sub __select_unactivated_access_keys {

    my $statement = qq{SELECT access_key FROM htd_authentication WHERE activated=0 AND created < (NOW() - INTERVAL 1 DAY)};
    my $sth = DbUtils::prep_n_execute($DBH, $statement);
    my $ref_to_arr_of_arr_ref = $sth->fetchall_arrayref([0]);

    my $access_key_arr_ref = [];
    if (scalar(@$ref_to_arr_of_arr_ref)) {
        $access_key_arr_ref = [ map {$_->[0]} @$ref_to_arr_of_arr_ref ];
    }

    return $access_key_arr_ref;
}


# ---------------------------------------------------------------------
sub __delete_authentication_by_access_key {
    my $access_key = shift;

    my $statement = qq{DELETE FROM htd_authentication WHERE access_key=?};
    my $sth = DbUtils::prep_n_execute($DBH, $statement, $access_key);

    my $s = "Clean htd_authentication access_key=$access_key\n";
    return $s;
}

# ---------------------------------------------------------------------
sub __delete_authorization_by_access_key {
    my $access_key = shift;

    my $statement = qq{DELETE FROM htd_authorization WHERE access_key=?};
    my $sth = DbUtils::prep_n_execute($DBH, $statement, $access_key);

    my $s = "Clean htd_authorization access_key=$access_key\n";
    return $s;
}

# ---------------------------------------------------------------------
sub __delete_statistics_by_access_key {
    my $access_key = shift;

    my $statement = qq{DELETE FROM htd_statistics WHERE access_key=?};
    my $sth = DbUtils::prep_n_execute($DBH, $statement, $access_key);

    my $s = "Clean htd_statistics access_key=$access_key\n";
    return $s;
}

# ---------------------------------------------------------------------
sub __authentication_count_by_access_key {
    my $access_key = shift;

    my $statement = qq{SELECT count(*) FROM htd_authentication WHERE access_key=?};
    my $sth = DbUtils::prep_n_execute($DBH, $statement, $access_key);
    my $ct = $sth->fetchrow_array() || 0;

    return $ct;
}

# ---------------------------------------------------------------------
sub __authorization_count_by_access_key {
    my $access_key = shift;

    my $statement = qq{SELECT count(*) FROM htd_authorization WHERE access_key=?};
    my $sth = DbUtils::prep_n_execute($DBH, $statement, $access_key);
    my $ct = $sth->fetchrow_array() || 0;

    return $ct;
}

# ---------------------------------------------------------------------
sub __statistics_accesses_by_access_key {
    my $access_key = shift;

    my $statement = qq{SELECT accesses FROM htd_statistics WHERE access_key=?};
    my $sth = DbUtils::prep_n_execute($DBH, $statement, $access_key);
    my $ct = $sth->fetchrow_array() || 0;

    return $ct;
}

=back

=head1 AUTHOR

Phillip Farber, University of Michigan, pfarber@umich.edu

=head1 COPYRIGHT

Copyright 2013-14 Â©, The Regents of The University of Michigan, All Rights Reserved

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject
to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut











